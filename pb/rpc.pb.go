// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		rpc.proto

	It has these top-level messages:
		Msg
		Batch
		Request
		Response
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgType int32

const (
	MsgType_req MsgType = 0
	MsgType_res MsgType = 1
	MsgType_hea MsgType = 2
)

var MsgType_name = map[int32]string{
	0: "req",
	1: "res",
	2: "hea",
}
var MsgType_value = map[string]int32{
	"req": 0,
	"res": 1,
	"hea": 2,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

type CodecType int32

const (
	CodecType_invalid  CodecType = 0
	CodecType_json     CodecType = 1
	CodecType_protobuf CodecType = 2
	CodecType_xml      CodecType = 3
	CodecType_gob      CodecType = 4
	CodecType_bytes    CodecType = 5
)

var CodecType_name = map[int32]string{
	0: "invalid",
	1: "json",
	2: "protobuf",
	3: "xml",
	4: "gob",
	5: "bytes",
}
var CodecType_value = map[string]int32{
	"invalid":  0,
	"json":     1,
	"protobuf": 2,
	"xml":      3,
	"gob":      4,
	"bytes":    5,
}

func (x CodecType) String() string {
	return proto.EnumName(CodecType_name, int32(x))
}
func (CodecType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

type CompressType int32

const (
	CompressType_nocom CompressType = 0
	CompressType_flate CompressType = 1
	CompressType_zlib  CompressType = 2
	CompressType_gzip  CompressType = 3
)

var CompressType_name = map[int32]string{
	0: "nocom",
	1: "flate",
	2: "zlib",
	3: "gzip",
}
var CompressType_value = map[string]int32{
	"nocom": 0,
	"flate": 1,
	"zlib":  2,
	"gzip":  3,
}

func (x CompressType) String() string {
	return proto.EnumName(CompressType_name, int32(x))
}
func (CompressType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

type CompressLevel int32

const (
	CompressLevel_noCompression      CompressLevel = 0
	CompressLevel_bestSpeed          CompressLevel = 1
	CompressLevel_bestCompression    CompressLevel = 2
	CompressLevel_defaultCompression CompressLevel = 3
)

var CompressLevel_name = map[int32]string{
	0: "noCompression",
	1: "bestSpeed",
	2: "bestCompression",
	3: "defaultCompression",
}
var CompressLevel_value = map[string]int32{
	"noCompression":      0,
	"bestSpeed":          1,
	"bestCompression":    2,
	"defaultCompression": 3,
}

func (x CompressLevel) String() string {
	return proto.EnumName(CompressLevel_name, int32(x))
}
func (CompressLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

type Msg struct {
	Version       float32       `protobuf:"fixed32,1,opt,name=version,proto3" json:"version,omitempty"`
	Id            int64         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	MsgType       MsgType       `protobuf:"varint,3,opt,name=msgType,proto3,enum=pb.MsgType" json:"msgType,omitempty"`
	Batch         bool          `protobuf:"varint,4,opt,name=batch,proto3" json:"batch,omitempty"`
	CodecType     CodecType     `protobuf:"varint,5,opt,name=codecType,proto3,enum=pb.CodecType" json:"codecType,omitempty"`
	CompressType  CompressType  `protobuf:"varint,6,opt,name=compressType,proto3,enum=pb.CompressType" json:"compressType,omitempty"`
	CompressLevel CompressLevel `protobuf:"varint,7,opt,name=compressLevel,proto3,enum=pb.CompressLevel" json:"compressLevel,omitempty"`
	Data          []byte        `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *Msg) GetVersion() float32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Msg) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Msg) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgType_req
}

func (m *Msg) GetBatch() bool {
	if m != nil {
		return m.Batch
	}
	return false
}

func (m *Msg) GetCodecType() CodecType {
	if m != nil {
		return m.CodecType
	}
	return CodecType_invalid
}

func (m *Msg) GetCompressType() CompressType {
	if m != nil {
		return m.CompressType
	}
	return CompressType_nocom
}

func (m *Msg) GetCompressLevel() CompressLevel {
	if m != nil {
		return m.CompressLevel
	}
	return CompressLevel_noCompression
}

func (m *Msg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Batch struct {
	Async bool     `protobuf:"varint,1,opt,name=async,proto3" json:"async,omitempty"`
	Data  [][]byte `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *Batch) Reset()                    { *m = Batch{} }
func (m *Batch) String() string            { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()               {}
func (*Batch) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *Batch) GetAsync() bool {
	if m != nil {
		return m.Async
	}
	return false
}

func (m *Batch) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Request struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Method     string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	NoRequest  bool   `protobuf:"varint,3,opt,name=noRequest,proto3" json:"noRequest,omitempty"`
	NoResponse bool   `protobuf:"varint,4,opt,name=noResponse,proto3" json:"noResponse,omitempty"`
	Data       []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *Request) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Request) GetNoRequest() bool {
	if m != nil {
		return m.NoRequest
	}
	return false
}

func (m *Request) GetNoResponse() bool {
	if m != nil {
		return m.NoResponse
	}
	return false
}

func (m *Request) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Response struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ErrMsg string `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *Response) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Response) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*Msg)(nil), "pb.Msg")
	proto.RegisterType((*Batch)(nil), "pb.Batch")
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*Response)(nil), "pb.Response")
	proto.RegisterEnum("pb.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("pb.CodecType", CodecType_name, CodecType_value)
	proto.RegisterEnum("pb.CompressType", CompressType_name, CompressType_value)
	proto.RegisterEnum("pb.CompressLevel", CompressLevel_name, CompressLevel_value)
}
func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Version))))
		i += 4
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Id))
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.MsgType))
	}
	if m.Batch {
		dAtA[i] = 0x20
		i++
		if m.Batch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CodecType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.CodecType))
	}
	if m.CompressType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.CompressType))
	}
	if m.CompressLevel != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.CompressLevel))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Batch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Async {
		dAtA[i] = 0x8
		i++
		if m.Async {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Id))
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if m.NoRequest {
		dAtA[i] = 0x18
		i++
		if m.NoRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NoResponse {
		dAtA[i] = 0x20
		i++
		if m.NoResponse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Id))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	return i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Msg) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 5
	}
	if m.Id != 0 {
		n += 1 + sovRpc(uint64(m.Id))
	}
	if m.MsgType != 0 {
		n += 1 + sovRpc(uint64(m.MsgType))
	}
	if m.Batch {
		n += 2
	}
	if m.CodecType != 0 {
		n += 1 + sovRpc(uint64(m.CodecType))
	}
	if m.CompressType != 0 {
		n += 1 + sovRpc(uint64(m.CompressType))
	}
	if m.CompressLevel != 0 {
		n += 1 + sovRpc(uint64(m.CompressLevel))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *Batch) Size() (n int) {
	var l int
	_ = l
	if m.Async {
		n += 2
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRpc(uint64(m.Id))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.NoRequest {
		n += 2
	}
	if m.NoResponse {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRpc(uint64(m.Id))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func sovRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Version = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (MsgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Batch = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodecType", wireType)
			}
			m.CodecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodecType |= (CodecType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressType", wireType)
			}
			m.CompressType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressType |= (CompressType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressLevel", wireType)
			}
			m.CompressLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressLevel |= (CompressLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Async", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Async = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoRequest = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoResponse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoResponse = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xcb, 0x8e, 0xd3, 0x40,
	0x10, 0xcc, 0x8c, 0xe3, 0xd8, 0xee, 0x4d, 0x96, 0xd9, 0x66, 0xb5, 0xf2, 0x01, 0x45, 0xd6, 0x0a,
	0xa4, 0x28, 0x48, 0x91, 0x78, 0x48, 0x70, 0x5e, 0x24, 0x4e, 0xe4, 0x32, 0x70, 0x46, 0xf2, 0x63,
	0x92, 0x18, 0x39, 0x1e, 0xaf, 0xc7, 0x89, 0xc8, 0x5e, 0xf9, 0x09, 0x0e, 0x7c, 0x10, 0x47, 0x3e,
	0x01, 0x85, 0x1f, 0x41, 0x33, 0x7e, 0xc4, 0xd9, 0x5b, 0x57, 0x75, 0x95, 0x5d, 0xae, 0x36, 0x78,
	0x65, 0x11, 0x2f, 0x8a, 0x52, 0x56, 0x12, 0x69, 0x11, 0xdd, 0xfe, 0xa2, 0x60, 0x2d, 0xd5, 0x1a,
	0x7d, 0x70, 0xf6, 0xa2, 0x54, 0xa9, 0xcc, 0x7d, 0x12, 0x90, 0x19, 0xe5, 0x2d, 0xc4, 0x4b, 0xa0,
	0x69, 0xe2, 0xd3, 0x80, 0xcc, 0x2c, 0x4e, 0xd3, 0x04, 0x5f, 0x80, 0xb3, 0x55, 0xeb, 0x2f, 0x87,
	0x42, 0xf8, 0x56, 0x40, 0x66, 0x97, 0xaf, 0x2f, 0x16, 0x45, 0xb4, 0x58, 0xd6, 0x14, 0x6f, 0x77,
	0x78, 0x0d, 0x76, 0x14, 0x56, 0xf1, 0xc6, 0x1f, 0x06, 0x64, 0xe6, 0xf2, 0x1a, 0xe0, 0x4b, 0xf0,
	0x62, 0x99, 0x88, 0xd8, 0xd8, 0x6d, 0x63, 0x9f, 0x68, 0xfb, 0x87, 0x96, 0xe4, 0xa7, 0x3d, 0xbe,
	0x85, 0x71, 0x2c, 0xb7, 0x45, 0x29, 0x94, 0x32, 0xfa, 0x91, 0xd1, 0xb3, 0x5a, 0x7f, 0xe2, 0xf9,
	0x99, 0x0a, 0xdf, 0xc1, 0xa4, 0xc5, 0x9f, 0xc4, 0x5e, 0x64, 0xbe, 0x63, 0x6c, 0x57, 0x7d, 0x9b,
	0x59, 0xf0, 0x73, 0x1d, 0x22, 0x0c, 0x93, 0xb0, 0x0a, 0x7d, 0x37, 0x20, 0xb3, 0x31, 0x37, 0xf3,
	0xed, 0x2b, 0xb0, 0xef, 0x4c, 0xf0, 0x6b, 0xb0, 0x43, 0x75, 0xc8, 0x63, 0xd3, 0x8e, 0xcb, 0x6b,
	0xd0, 0x59, 0x68, 0x60, 0x75, 0x96, 0x1f, 0x04, 0x1c, 0x2e, 0xee, 0x77, 0x42, 0x55, 0x4d, 0x77,
	0xda, 0x32, 0x34, 0xdd, 0xdd, 0xc0, 0x68, 0x2b, 0xaa, 0x8d, 0xac, 0xfb, 0xf4, 0x78, 0x83, 0xf0,
	0x19, 0x78, 0xb9, 0x6c, 0x4c, 0xa6, 0x55, 0x97, 0x9f, 0x08, 0x9c, 0x02, 0x68, 0xa0, 0x0a, 0x99,
	0x2b, 0xd1, 0xf4, 0xd9, 0x63, 0xba, 0x14, 0x76, 0x2f, 0xf8, 0x47, 0x70, 0xbb, 0xfd, 0xe3, 0x14,
	0xa7, 0xd4, 0x9d, 0x5e, 0x27, 0x13, 0x65, 0xb9, 0x54, 0x6b, 0xf3, 0x7a, 0x8f, 0x37, 0x68, 0xfe,
	0x1c, 0x9c, 0xe6, 0xb4, 0xe8, 0x80, 0x55, 0x8a, 0x7b, 0x36, 0xa8, 0x07, 0xc5, 0x88, 0x1e, 0x36,
	0x22, 0x64, 0x74, 0xbe, 0x04, 0xaf, 0xbb, 0x20, 0x5e, 0x80, 0x93, 0xe6, 0xfb, 0x30, 0x4b, 0x13,
	0x36, 0x40, 0x17, 0x86, 0xdf, 0x94, 0xcc, 0x19, 0xc1, 0x31, 0xb8, 0xe6, 0xb7, 0x8b, 0x76, 0x2b,
	0x46, 0xb5, 0xf5, 0xfb, 0x36, 0x63, 0x96, 0x1e, 0xd6, 0x32, 0x62, 0x43, 0xf4, 0xc0, 0x8e, 0x0e,
	0x95, 0x50, 0xcc, 0x9e, 0xbf, 0x87, 0x71, 0xff, 0xc0, 0x7a, 0x95, 0xcb, 0x58, 0x6e, 0xd9, 0x40,
	0x8f, 0xab, 0x2c, 0xac, 0x04, 0x23, 0xfa, 0xd1, 0x0f, 0x59, 0x1a, 0x31, 0xaa, 0xa7, 0xf5, 0x43,
	0x5a, 0x30, 0x6b, 0xfe, 0x15, 0x26, 0x67, 0x37, 0xc6, 0x2b, 0x98, 0xe4, 0xb2, 0xa5, 0x52, 0x99,
	0xb3, 0x01, 0x4e, 0xc0, 0x8b, 0x84, 0xaa, 0x3e, 0x17, 0x42, 0x24, 0x8c, 0xe0, 0x53, 0x78, 0xa2,
	0x61, 0x5f, 0x43, 0xf1, 0x06, 0x30, 0x11, 0xab, 0x70, 0x97, 0x9d, 0xf1, 0xd6, 0x1d, 0xfb, 0x7d,
	0x9c, 0x92, 0x3f, 0xc7, 0x29, 0xf9, 0x7b, 0x9c, 0x92, 0x9f, 0xff, 0xa6, 0x83, 0x68, 0x64, 0x3e,
	0xea, 0xcd, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x26, 0x4c, 0x5a, 0x58, 0x03, 0x00, 0x00,
}
