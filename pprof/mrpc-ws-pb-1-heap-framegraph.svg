<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>runtime.kevent (201 samples, 7.83%)</title><rect x="291.4" y="325" width="92.5" height="15.0" fill="rgb(210,175,11)" rx="2" ry="2" />
<text  x="294.43" y="335.5" >runtime.kev..</text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (2 samples, 0.08%)</title><rect x="153.9" y="165" width="1.0" height="15.0" fill="rgb(211,162,18)" rx="2" ry="2" />
<text  x="156.94" y="175.5" ></text>
</g>
<g >
<title>reflect.packEface (1 samples, 0.04%)</title><rect x="161.8" y="197" width="0.4" height="15.0" fill="rgb(237,206,42)" rx="2" ry="2" />
<text  x="164.75" y="207.5" ></text>
</g>
<g >
<title>runtime.semacreate (1 samples, 0.04%)</title><rect x="855.7" y="341" width="0.4" height="15.0" fill="rgb(254,155,37)" rx="2" ry="2" />
<text  x="858.68" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (1 samples, 0.04%)</title><rect x="161.3" y="53" width="0.5" height="15.0" fill="rgb(249,77,19)" rx="2" ry="2" />
<text  x="164.29" y="63.5" ></text>
</g>
<g >
<title>runtime.startm (370 samples, 14.42%)</title><rect x="1019.4" y="325" width="170.1" height="15.0" fill="rgb(248,218,21)" rx="2" ry="2" />
<text  x="1022.39" y="335.5" >runtime.startm</text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.04%)</title><rect x="76.7" y="181" width="0.4" height="15.0" fill="rgb(205,7,2)" rx="2" ry="2" />
<text  x="79.68" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (366 samples, 14.26%)</title><rect x="1019.4" y="277" width="168.3" height="15.0" fill="rgb(231,92,0)" rx="2" ry="2" />
<text  x="1022.39" y="287.5" >runtime.pthread_cond_..</text>
</g>
<g >
<title>runtime.exitsyscall (47 samples, 1.83%)</title><rect x="133.2" y="229" width="21.7" height="15.0" fill="rgb(245,68,17)" rx="2" ry="2" />
<text  x="136.24" y="239.5" >r..</text>
</g>
<g >
<title>runtime.goschedImpl (2 samples, 0.08%)</title><rect x="198.5" y="373" width="1.0" height="15.0" fill="rgb(243,189,50)" rx="2" ry="2" />
<text  x="201.54" y="383.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (1 samples, 0.04%)</title><rect x="158.1" y="245" width="0.4" height="15.0" fill="rgb(244,180,17)" rx="2" ry="2" />
<text  x="161.07" y="255.5" ></text>
</g>
<g >
<title>net/http.serverHandler.ServeHTTP (67 samples, 2.61%)</title><rect x="155.3" y="389" width="30.8" height="15.0" fill="rgb(225,36,43)" rx="2" ry="2" />
<text  x="158.32" y="399.5" >ne..</text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (103 samples, 4.01%)</title><rect x="808.3" y="309" width="47.4" height="15.0" fill="rgb(219,100,48)" rx="2" ry="2" />
<text  x="811.32" y="319.5" >runt..</text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.04%)</title><rect x="163.6" y="181" width="0.5" height="15.0" fill="rgb(240,37,48)" rx="2" ry="2" />
<text  x="166.59" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (2 samples, 0.08%)</title><rect x="156.7" y="293" width="0.9" height="15.0" fill="rgb(248,64,43)" rx="2" ry="2" />
<text  x="159.70" y="303.5" ></text>
</g>
<g >
<title>runtime.runqgrab (1 samples, 0.04%)</title><rect x="198.5" y="309" width="0.5" height="15.0" fill="rgb(210,71,18)" rx="2" ry="2" />
<text  x="201.54" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (124 samples, 4.83%)</title><rect x="905.8" y="293" width="57.0" height="15.0" fill="rgb(254,103,49)" rx="2" ry="2" />
<text  x="908.81" y="303.5" >runtim..</text>
</g>
<g >
<title>runtime.(*gcWork).balance (3 samples, 0.12%)</title><rect x="192.1" y="341" width="1.4" height="15.0" fill="rgb(230,167,20)" rx="2" ry="2" />
<text  x="195.10" y="351.5" ></text>
</g>
<g >
<title>runtime.ready (370 samples, 14.42%)</title><rect x="1019.4" y="357" width="170.1" height="15.0" fill="rgb(232,95,1)" rx="2" ry="2" />
<text  x="1022.39" y="367.5" >runtime.ready</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.04%)</title><rect x="158.5" y="197" width="0.5" height="15.0" fill="rgb(219,118,12)" rx="2" ry="2" />
<text  x="161.53" y="207.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (1 samples, 0.04%)</title><rect x="79.9" y="261" width="0.5" height="15.0" fill="rgb(208,229,41)" rx="2" ry="2" />
<text  x="82.90" y="271.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (163 samples, 6.35%)</title><rect x="79.9" y="293" width="75.0" height="15.0" fill="rgb(208,209,35)" rx="2" ry="2" />
<text  x="82.90" y="303.5" >internal..</text>
</g>
<g >
<title>runtime.startm (129 samples, 5.03%)</title><rect x="905.8" y="341" width="59.3" height="15.0" fill="rgb(221,143,5)" rx="2" ry="2" />
<text  x="908.81" y="351.5" >runtim..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="65.2" y="165" width="0.4" height="15.0" fill="rgb(225,108,48)" rx="2" ry="2" />
<text  x="68.18" y="175.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (1 samples, 0.04%)</title><rect x="77.1" y="293" width="0.5" height="15.0" fill="rgb(226,134,40)" rx="2" ry="2" />
<text  x="80.14" y="303.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (370 samples, 14.42%)</title><rect x="1019.4" y="373" width="170.1" height="15.0" fill="rgb(240,206,45)" rx="2" ry="2" />
<text  x="1022.39" y="383.5" >runtime.goready.func1</text>
</g>
<g >
<title>runtime.nanotime (74 samples, 2.88%)</title><rect x="207.3" y="341" width="34.0" height="15.0" fill="rgb(219,95,41)" rx="2" ry="2" />
<text  x="210.28" y="351.5" >ru..</text>
</g>
<g >
<title>runtime.systemstack (15 samples, 0.58%)</title><rect x="191.6" y="389" width="6.9" height="15.0" fill="rgb(212,165,44)" rx="2" ry="2" />
<text  x="194.64" y="399.5" ></text>
</g>
<g >
<title>runtime.osyield (9 samples, 0.35%)</title><rect x="201.8" y="325" width="4.1" height="15.0" fill="rgb(237,58,47)" rx="2" ry="2" />
<text  x="204.76" y="335.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.04%)</title><rect x="154.9" y="325" width="0.4" height="15.0" fill="rgb(224,94,10)" rx="2" ry="2" />
<text  x="157.86" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.04%)</title><rect x="199.0" y="277" width="0.5" height="15.0" fill="rgb(217,149,48)" rx="2" ry="2" />
<text  x="202.00" y="287.5" ></text>
</g>
<g >
<title>reflect.New (1 samples, 0.04%)</title><rect x="161.3" y="229" width="0.5" height="15.0" fill="rgb(228,188,36)" rx="2" ry="2" />
<text  x="164.29" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="157.2" y="261" width="0.4" height="15.0" fill="rgb(225,97,37)" rx="2" ry="2" />
<text  x="160.16" y="271.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).grow (3 samples, 0.12%)</title><rect x="75.8" y="309" width="1.3" height="15.0" fill="rgb(234,44,43)" rx="2" ry="2" />
<text  x="78.76" y="319.5" ></text>
</g>
<g >
<title>all (2,566 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(207,18,4)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>runtime.memmove (3 samples, 0.12%)</title><rect x="192.1" y="309" width="1.4" height="15.0" fill="rgb(208,140,32)" rx="2" ry="2" />
<text  x="195.10" y="319.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (133 samples, 5.18%)</title><rect x="10.9" y="261" width="61.2" height="15.0" fill="rgb(244,228,3)" rx="2" ry="2" />
<text  x="13.92" y="271.5" >net.(*..</text>
</g>
<g >
<title>runtime.semawakeup (129 samples, 5.03%)</title><rect x="905.8" y="309" width="59.3" height="15.0" fill="rgb(224,160,10)" rx="2" ry="2" />
<text  x="908.81" y="319.5" >runtim..</text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.04%)</title><rect x="159.9" y="197" width="0.5" height="15.0" fill="rgb(216,218,7)" rx="2" ry="2" />
<text  x="162.91" y="207.5" ></text>
</g>
<g >
<title>runtime.handoffp (129 samples, 5.03%)</title><rect x="905.8" y="357" width="59.3" height="15.0" fill="rgb(250,45,13)" rx="2" ry="2" />
<text  x="908.81" y="367.5" >runtim..</text>
</g>
<g >
<title>runtime.bgsweep (2 samples, 0.08%)</title><rect x="189.8" y="405" width="0.9" height="15.0" fill="rgb(243,152,28)" rx="2" ry="2" />
<text  x="192.81" y="415.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="164.1" y="229" width="0.4" height="15.0" fill="rgb(245,63,44)" rx="2" ry="2" />
<text  x="167.05" y="239.5" ></text>
</g>
<g >
<title>runtime.mstart1 (405 samples, 15.78%)</title><rect x="719.6" y="389" width="186.2" height="15.0" fill="rgb(205,125,18)" rx="2" ry="2" />
<text  x="722.56" y="399.5" >runtime.mstart1</text>
</g>
<g >
<title>runtime.scanstack (3 samples, 0.12%)</title><rect x="193.5" y="293" width="1.4" height="15.0" fill="rgb(214,8,34)" rx="2" ry="2" />
<text  x="196.48" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (4 samples, 0.16%)</title><rect x="1016.2" y="309" width="1.8" height="15.0" fill="rgb(222,63,27)" rx="2" ry="2" />
<text  x="1019.17" y="319.5" ></text>
</g>
<g >
<title>runtime.sysmon (405 samples, 15.78%)</title><rect x="719.6" y="373" width="186.2" height="15.0" fill="rgb(216,161,22)" rx="2" ry="2" />
<text  x="722.56" y="383.5" >runtime.sysmon</text>
</g>
<g >
<title>runtime.pthread_cond_wait (636 samples, 24.79%)</title><rect x="395.8" y="293" width="292.5" height="15.0" fill="rgb(253,85,16)" rx="2" ry="2" />
<text  x="398.82" y="303.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (17 samples, 0.66%)</title><rect x="156.7" y="309" width="7.8" height="15.0" fill="rgb(248,184,34)" rx="2" ry="2" />
<text  x="159.70" y="319.5" ></text>
</g>
<g >
<title>runtime.goready (1 samples, 0.04%)</title><rect x="164.5" y="261" width="0.5" height="15.0" fill="rgb(222,64,3)" rx="2" ry="2" />
<text  x="167.51" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (2 samples, 0.08%)</title><rect x="161.3" y="245" width="0.9" height="15.0" fill="rgb(217,126,11)" rx="2" ry="2" />
<text  x="164.29" y="255.5" ></text>
</g>
<g >
<title>runtime.convTstring (1 samples, 0.04%)</title><rect x="164.1" y="261" width="0.4" height="15.0" fill="rgb(235,158,5)" rx="2" ry="2" />
<text  x="167.05" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="158.1" y="149" width="0.4" height="15.0" fill="rgb(206,8,54)" rx="2" ry="2" />
<text  x="161.07" y="159.5" ></text>
</g>
<g >
<title>net.(*conn).SetWriteDeadline (1 samples, 0.04%)</title><rect x="79.4" y="325" width="0.5" height="15.0" fill="rgb(235,98,26)" rx="2" ry="2" />
<text  x="82.44" y="335.5" ></text>
</g>
<g >
<title>runtime.markroot (5 samples, 0.19%)</title><rect x="193.5" y="341" width="2.3" height="15.0" fill="rgb(229,198,2)" rx="2" ry="2" />
<text  x="196.48" y="351.5" ></text>
</g>
<g >
<title>syscall.syscall (159 samples, 6.20%)</title><rect x="81.7" y="245" width="73.2" height="15.0" fill="rgb(209,222,44)" rx="2" ry="2" />
<text  x="84.74" y="255.5" >syscall...</text>
</g>
<g >
<title>runtime.notewakeup (115 samples, 4.48%)</title><rect x="965.1" y="341" width="52.9" height="15.0" fill="rgb(236,106,39)" rx="2" ry="2" />
<text  x="968.13" y="351.5" >runti..</text>
</g>
<g >
<title>bytes.(*Buffer).grow (3 samples, 0.12%)</title><rect x="74.4" y="309" width="1.4" height="15.0" fill="rgb(243,45,35)" rx="2" ry="2" />
<text  x="77.38" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.04%)</title><rect x="161.3" y="181" width="0.5" height="15.0" fill="rgb(211,75,48)" rx="2" ry="2" />
<text  x="164.29" y="191.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareWrite (1 samples, 0.04%)</title><rect x="79.9" y="277" width="0.5" height="15.0" fill="rgb(207,225,39)" rx="2" ry="2" />
<text  x="82.90" y="287.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (14 samples, 0.55%)</title><rect x="65.6" y="181" width="6.5" height="15.0" fill="rgb(246,128,7)" rx="2" ry="2" />
<text  x="68.64" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (5 samples, 0.19%)</title><rect x="717.3" y="277" width="2.3" height="15.0" fill="rgb(246,215,50)" rx="2" ry="2" />
<text  x="720.26" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (1 samples, 0.04%)</title><rect x="158.1" y="229" width="0.4" height="15.0" fill="rgb(241,226,43)" rx="2" ry="2" />
<text  x="161.07" y="239.5" ></text>
</g>
<g >
<title>runtime.semawakeup (115 samples, 4.48%)</title><rect x="965.1" y="325" width="52.9" height="15.0" fill="rgb(220,50,36)" rx="2" ry="2" />
<text  x="968.13" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.runqsteal (1 samples, 0.04%)</title><rect x="198.5" y="325" width="0.5" height="15.0" fill="rgb(216,183,26)" rx="2" ry="2" />
<text  x="201.54" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (2 samples, 0.08%)</title><rect x="163.1" y="245" width="1.0" height="15.0" fill="rgb(240,143,48)" rx="2" ry="2" />
<text  x="166.13" y="255.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (106 samples, 4.13%)</title><rect x="806.9" y="341" width="48.8" height="15.0" fill="rgb(252,33,26)" rx="2" ry="2" />
<text  x="809.94" y="351.5" >runt..</text>
</g>
<g >
<title>runtime.nanotime_trampoline (1 samples, 0.04%)</title><rect x="188.9" y="389" width="0.4" height="15.0" fill="rgb(215,218,34)" rx="2" ry="2" />
<text  x="191.89" y="399.5" ></text>
</g>
<g >
<title>runtime.scang (3 samples, 0.12%)</title><rect x="193.5" y="309" width="1.4" height="15.0" fill="rgb(234,87,53)" rx="2" ry="2" />
<text  x="196.48" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (2 samples, 0.08%)</title><rect x="163.1" y="229" width="1.0" height="15.0" fill="rgb(232,223,0)" rx="2" ry="2" />
<text  x="166.13" y="239.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="383.4" y="309" width="0.5" height="15.0" fill="rgb(253,159,46)" rx="2" ry="2" />
<text  x="386.41" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (1 samples, 0.04%)</title><rect x="156.7" y="261" width="0.5" height="15.0" fill="rgb(228,65,10)" rx="2" ry="2" />
<text  x="159.70" y="271.5" ></text>
</g>
<g >
<title>runtime.aeshashstr (1 samples, 0.04%)</title><rect x="160.8" y="181" width="0.5" height="15.0" fill="rgb(219,168,17)" rx="2" ry="2" />
<text  x="163.83" y="191.5" ></text>
</g>
<g >
<title>runtime.chansend1 (1 samples, 0.04%)</title><rect x="164.5" y="309" width="0.5" height="15.0" fill="rgb(211,155,20)" rx="2" ry="2" />
<text  x="167.51" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (108 samples, 4.21%)</title><rect x="856.1" y="357" width="49.7" height="15.0" fill="rgb(237,138,47)" rx="2" ry="2" />
<text  x="859.14" y="367.5" >runti..</text>
</g>
<g >
<title>runtime.runqgrab (20 samples, 0.78%)</title><rect x="383.9" y="325" width="9.2" height="15.0" fill="rgb(217,167,33)" rx="2" ry="2" />
<text  x="386.87" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (2 samples, 0.08%)</title><rect x="393.1" y="309" width="0.9" height="15.0" fill="rgb(250,192,23)" rx="2" ry="2" />
<text  x="396.06" y="319.5" ></text>
</g>
<g >
<title>runtime.getStackMap (2 samples, 0.08%)</title><rect x="193.9" y="229" width="1.0" height="15.0" fill="rgb(244,130,21)" rx="2" ry="2" />
<text  x="196.94" y="239.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (1 samples, 0.04%)</title><rect x="164.5" y="229" width="0.5" height="15.0" fill="rgb(205,183,19)" rx="2" ry="2" />
<text  x="167.51" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (2 samples, 0.08%)</title><rect x="153.9" y="181" width="1.0" height="15.0" fill="rgb(212,207,3)" rx="2" ry="2" />
<text  x="156.94" y="191.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).NextReader (138 samples, 5.38%)</title><rect x="10.5" y="357" width="63.4" height="15.0" fill="rgb(210,151,4)" rx="2" ry="2" />
<text  x="13.46" y="367.5" >github..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="190.7" y="373" width="0.5" height="15.0" fill="rgb(249,206,53)" rx="2" ry="2" />
<text  x="193.72" y="383.5" ></text>
</g>
<g >
<title>net/http.HandlerFunc.ServeHTTP (67 samples, 2.61%)</title><rect x="155.3" y="357" width="30.8" height="15.0" fill="rgb(251,170,46)" rx="2" ry="2" />
<text  x="158.32" y="367.5" >ne..</text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (46 samples, 1.79%)</title><rect x="165.0" y="293" width="21.1" height="15.0" fill="rgb(206,102,12)" rx="2" ry="2" />
<text  x="167.97" y="303.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.04%)</title><rect x="153.9" y="149" width="0.5" height="15.0" fill="rgb(209,225,42)" rx="2" ry="2" />
<text  x="156.94" y="159.5" ></text>
</g>
<g >
<title>syscall.syscall (130 samples, 5.07%)</title><rect x="12.3" y="197" width="59.8" height="15.0" fill="rgb(213,208,16)" rx="2" ry="2" />
<text  x="15.30" y="207.5" >syscal..</text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.04%)</title><rect x="163.6" y="213" width="0.5" height="15.0" fill="rgb(210,203,31)" rx="2" ry="2" />
<text  x="166.59" y="223.5" ></text>
</g>
<g >
<title>runtime.kevent (2 samples, 0.08%)</title><rect x="1018.0" y="325" width="0.9" height="15.0" fill="rgb(205,106,38)" rx="2" ry="2" />
<text  x="1021.01" y="335.5" ></text>
</g>
<g >
<title>runtime.mcall (1,133 samples, 44.15%)</title><rect x="198.5" y="405" width="521.1" height="15.0" fill="rgb(227,168,46)" rx="2" ry="2" />
<text  x="201.54" y="415.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="186.6" y="389" width="0.4" height="15.0" fill="rgb(224,186,50)" rx="2" ry="2" />
<text  x="189.59" y="399.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (1 samples, 0.04%)</title><rect x="193.5" y="261" width="0.4" height="15.0" fill="rgb(212,135,24)" rx="2" ry="2" />
<text  x="196.48" y="271.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (2 samples, 0.08%)</title><rect x="193.9" y="245" width="1.0" height="15.0" fill="rgb(226,16,52)" rx="2" ry="2" />
<text  x="196.94" y="255.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (1 samples, 0.04%)</title><rect x="190.7" y="357" width="0.5" height="15.0" fill="rgb(216,58,30)" rx="2" ry="2" />
<text  x="193.72" y="367.5" ></text>
</g>
<g >
<title>runtime.chansend (1 samples, 0.04%)</title><rect x="164.5" y="293" width="0.5" height="15.0" fill="rgb(236,188,45)" rx="2" ry="2" />
<text  x="167.51" y="303.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="73.5" y="341" width="0.4" height="15.0" fill="rgb(210,113,19)" rx="2" ry="2" />
<text  x="76.46" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (2 samples, 0.08%)</title><rect x="189.8" y="373" width="0.9" height="15.0" fill="rgb(249,189,51)" rx="2" ry="2" />
<text  x="192.81" y="383.5" ></text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.08%)</title><rect x="74.8" y="261" width="1.0" height="15.0" fill="rgb(243,51,28)" rx="2" ry="2" />
<text  x="77.84" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock_trampoline (1 samples, 0.04%)</title><rect x="189.3" y="389" width="0.5" height="15.0" fill="rgb(238,96,12)" rx="2" ry="2" />
<text  x="192.35" y="399.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (1 samples, 0.04%)</title><rect x="163.1" y="213" width="0.5" height="15.0" fill="rgb(237,40,31)" rx="2" ry="2" />
<text  x="166.13" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (1 samples, 0.04%)</title><rect x="156.7" y="277" width="0.5" height="15.0" fill="rgb(211,140,15)" rx="2" ry="2" />
<text  x="159.70" y="287.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (1 samples, 0.04%)</title><rect x="194.4" y="213" width="0.5" height="15.0" fill="rgb(254,135,5)" rx="2" ry="2" />
<text  x="197.40" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (14 samples, 0.55%)</title><rect x="158.1" y="293" width="6.4" height="15.0" fill="rgb(211,151,32)" rx="2" ry="2" />
<text  x="161.07" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.ReadConn (147 samples, 5.73%)</title><rect x="10.0" y="405" width="67.6" height="15.0" fill="rgb(229,72,12)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >hslam.c..</text>
</g>
<g >
<title>runtime.schedule (2 samples, 0.08%)</title><rect x="198.5" y="357" width="1.0" height="15.0" fill="rgb(232,34,40)" rx="2" ry="2" />
<text  x="201.54" y="367.5" ></text>
</g>
<g >
<title>runtime.freedefer (3 samples, 0.12%)</title><rect x="80.4" y="261" width="1.3" height="15.0" fill="rgb(241,168,29)" rx="2" ry="2" />
<text  x="83.36" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.04%)</title><rect x="158.5" y="213" width="0.5" height="15.0" fill="rgb(250,69,2)" rx="2" ry="2" />
<text  x="161.53" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (3 samples, 0.12%)</title><rect x="159.0" y="245" width="1.4" height="15.0" fill="rgb(241,63,26)" rx="2" ry="2" />
<text  x="161.99" y="255.5" ></text>
</g>
<g >
<title>runtime.casgstatus (2 samples, 0.08%)</title><rect x="132.3" y="213" width="0.9" height="15.0" fill="rgb(233,45,26)" rx="2" ry="2" />
<text  x="135.32" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeWSConn (67 samples, 2.61%)</title><rect x="155.3" y="325" width="30.8" height="15.0" fill="rgb(231,4,1)" rx="2" ry="2" />
<text  x="158.32" y="335.5" >hs..</text>
</g>
<g >
<title>runtime.scanobject (6 samples, 0.23%)</title><rect x="195.8" y="341" width="2.7" height="15.0" fill="rgb(208,146,26)" rx="2" ry="2" />
<text  x="198.78" y="351.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (2 samples, 0.08%)</title><rect x="193.9" y="261" width="1.0" height="15.0" fill="rgb(238,70,39)" rx="2" ry="2" />
<text  x="196.94" y="271.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.04%)</title><rect x="394.0" y="309" width="0.4" height="15.0" fill="rgb(233,226,38)" rx="2" ry="2" />
<text  x="396.98" y="319.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).read (133 samples, 5.18%)</title><rect x="10.9" y="325" width="61.2" height="15.0" fill="rgb(233,64,38)" rx="2" ry="2" />
<text  x="13.92" y="335.5" >github..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.04%)</title><rect x="1018.9" y="277" width="0.5" height="15.0" fill="rgb(246,46,32)" rx="2" ry="2" />
<text  x="1021.93" y="287.5" ></text>
</g>
<g >
<title>runtime.netpoll (310 samples, 12.08%)</title><rect x="241.3" y="341" width="142.6" height="15.0" fill="rgb(215,225,35)" rx="2" ry="2" />
<text  x="244.31" y="351.5" >runtime.netpoll</text>
</g>
<g >
<title>runtime.sweepone (2 samples, 0.08%)</title><rect x="189.8" y="389" width="0.9" height="15.0" fill="rgb(244,194,12)" rx="2" ry="2" />
<text  x="192.81" y="399.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.04%)</title><rect x="199.0" y="325" width="0.5" height="15.0" fill="rgb(209,48,38)" rx="2" ry="2" />
<text  x="202.00" y="335.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1 samples, 0.04%)</title><rect x="65.2" y="149" width="0.4" height="15.0" fill="rgb(227,60,48)" rx="2" ry="2" />
<text  x="68.18" y="159.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.04%)</title><rect x="689.7" y="277" width="0.4" height="15.0" fill="rgb(234,179,42)" rx="2" ry="2" />
<text  x="692.67" y="287.5" ></text>
</g>
<g >
<title>runtime.startm (64 samples, 2.49%)</title><rect x="690.1" y="325" width="29.5" height="15.0" fill="rgb(215,133,38)" rx="2" ry="2" />
<text  x="693.13" y="335.5" >ru..</text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.04%)</title><rect x="154.4" y="149" width="0.5" height="15.0" fill="rgb(220,179,21)" rx="2" ry="2" />
<text  x="157.40" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (370 samples, 14.42%)</title><rect x="1019.4" y="293" width="170.1" height="15.0" fill="rgb(236,60,45)" rx="2" ry="2" />
<text  x="1022.39" y="303.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="190.3" y="325" width="0.4" height="15.0" fill="rgb(231,64,28)" rx="2" ry="2" />
<text  x="193.27" y="335.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="687.8" y="277" width="0.5" height="15.0" fill="rgb(233,94,13)" rx="2" ry="2" />
<text  x="690.83" y="287.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (115 samples, 4.48%)</title><rect x="965.1" y="373" width="52.9" height="15.0" fill="rgb(234,101,26)" rx="2" ry="2" />
<text  x="968.13" y="383.5" >runti..</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (2 samples, 0.08%)</title><rect x="689.2" y="293" width="0.9" height="15.0" fill="rgb(229,213,49)" rx="2" ry="2" />
<text  x="692.21" y="303.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (1 samples, 0.04%)</title><rect x="161.8" y="229" width="0.4" height="15.0" fill="rgb(222,9,18)" rx="2" ry="2" />
<text  x="164.75" y="239.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="162.7" y="213" width="0.4" height="15.0" fill="rgb(238,53,45)" rx="2" ry="2" />
<text  x="165.67" y="223.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).advanceFrame (133 samples, 5.18%)</title><rect x="10.9" y="341" width="61.2" height="15.0" fill="rgb(237,66,35)" rx="2" ry="2" />
<text  x="13.92" y="351.5" >github..</text>
</g>
<g >
<title>runtime.notewakeup (129 samples, 5.03%)</title><rect x="905.8" y="325" width="59.3" height="15.0" fill="rgb(254,141,2)" rx="2" ry="2" />
<text  x="908.81" y="335.5" >runtim..</text>
</g>
<g >
<title>runtime.(*mcache).nextFree (2 samples, 0.08%)</title><rect x="76.2" y="245" width="0.9" height="15.0" fill="rgb(236,197,14)" rx="2" ry="2" />
<text  x="79.22" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (6 samples, 0.23%)</title><rect x="1013.4" y="309" width="2.8" height="15.0" fill="rgb(227,56,1)" rx="2" ry="2" />
<text  x="1016.41" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (2 samples, 0.08%)</title><rect x="1188.6" y="277" width="0.9" height="15.0" fill="rgb(218,82,1)" rx="2" ry="2" />
<text  x="1191.62" y="287.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.04%)</title><rect x="158.1" y="165" width="0.4" height="15.0" fill="rgb(238,132,30)" rx="2" ry="2" />
<text  x="161.07" y="175.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*messageWriter).flushFrame (165 samples, 6.43%)</title><rect x="79.4" y="357" width="75.9" height="15.0" fill="rgb(249,171,50)" rx="2" ry="2" />
<text  x="82.44" y="367.5" >github.c..</text>
</g>
<g >
<title>net/http.(*conn).serve (67 samples, 2.61%)</title><rect x="155.3" y="405" width="30.8" height="15.0" fill="rgb(235,41,0)" rx="2" ry="2" />
<text  x="158.32" y="415.5" >ne..</text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.04%)</title><rect x="1018.9" y="309" width="0.5" height="15.0" fill="rgb(225,153,42)" rx="2" ry="2" />
<text  x="1021.93" y="319.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).SetWriteDeadline (1 samples, 0.04%)</title><rect x="79.4" y="293" width="0.5" height="15.0" fill="rgb(241,201,46)" rx="2" ry="2" />
<text  x="82.44" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.08%)</title><rect x="1187.7" y="277" width="0.9" height="15.0" fill="rgb(211,166,2)" rx="2" ry="2" />
<text  x="1190.70" y="287.5" ></text>
</g>
<g >
<title>bytes.makeSlice (2 samples, 0.08%)</title><rect x="74.8" y="293" width="1.0" height="15.0" fill="rgb(233,196,10)" rx="2" ry="2" />
<text  x="77.84" y="303.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (14 samples, 0.55%)</title><rect x="65.6" y="165" width="6.5" height="15.0" fill="rgb(242,170,34)" rx="2" ry="2" />
<text  x="68.64" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcSweepBuf).push (1 samples, 0.04%)</title><rect x="76.7" y="117" width="0.4" height="15.0" fill="rgb(222,71,34)" rx="2" ry="2" />
<text  x="79.68" y="127.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.04%)</title><rect x="159.9" y="229" width="0.5" height="15.0" fill="rgb(231,149,36)" rx="2" ry="2" />
<text  x="162.91" y="239.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Name (1 samples, 0.04%)</title><rect x="159.0" y="229" width="0.5" height="15.0" fill="rgb(207,60,5)" rx="2" ry="2" />
<text  x="161.99" y="239.5" ></text>
</g>
<g >
<title>runtime.findObject (2 samples, 0.08%)</title><rect x="194.9" y="293" width="0.9" height="15.0" fill="rgb(232,185,7)" rx="2" ry="2" />
<text  x="197.86" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (14 samples, 0.55%)</title><rect x="158.1" y="277" width="6.4" height="15.0" fill="rgb(222,224,11)" rx="2" ry="2" />
<text  x="161.07" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (1 samples, 0.04%)</title><rect x="158.5" y="261" width="0.5" height="15.0" fill="rgb(219,65,19)" rx="2" ry="2" />
<text  x="161.53" y="271.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.04%)</title><rect x="193.5" y="245" width="0.4" height="15.0" fill="rgb(249,165,34)" rx="2" ry="2" />
<text  x="196.48" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.04%)</title><rect x="158.1" y="181" width="0.4" height="15.0" fill="rgb(219,10,41)" rx="2" ry="2" />
<text  x="161.07" y="191.5" ></text>
</g>
<g >
<title>runtime.netpoll (2 samples, 0.08%)</title><rect x="1018.0" y="341" width="0.9" height="15.0" fill="rgb(234,40,5)" rx="2" ry="2" />
<text  x="1021.01" y="351.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (2 samples, 0.08%)</title><rect x="194.9" y="325" width="0.9" height="15.0" fill="rgb(219,75,46)" rx="2" ry="2" />
<text  x="197.86" y="335.5" ></text>
</g>
<g >
<title>runtime.selectgo (46 samples, 1.79%)</title><rect x="165.0" y="309" width="21.1" height="15.0" fill="rgb(226,79,13)" rx="2" ry="2" />
<text  x="167.97" y="319.5" ></text>
</g>
<g >
<title>memeqbody (1 samples, 0.04%)</title><rect x="160.4" y="149" width="0.4" height="15.0" fill="rgb(219,124,22)" rx="2" ry="2" />
<text  x="163.37" y="159.5" ></text>
</g>
<g >
<title>runtime.wakep (64 samples, 2.49%)</title><rect x="690.1" y="341" width="29.5" height="15.0" fill="rgb(238,15,39)" rx="2" ry="2" />
<text  x="693.13" y="351.5" >ru..</text>
</g>
<g >
<title>syscall.write (159 samples, 6.20%)</title><rect x="81.7" y="261" width="73.2" height="15.0" fill="rgb(232,50,27)" rx="2" ry="2" />
<text  x="84.74" y="271.5" >syscall...</text>
</g>
<g >
<title>runtime.stopm (646 samples, 25.18%)</title><rect x="393.1" y="341" width="297.0" height="15.0" fill="rgb(213,48,24)" rx="2" ry="2" />
<text  x="396.06" y="351.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.08%)</title><rect x="76.2" y="277" width="0.9" height="15.0" fill="rgb(233,207,47)" rx="2" ry="2" />
<text  x="79.22" y="287.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).ReadFrom (4 samples, 0.16%)</title><rect x="75.8" y="325" width="1.8" height="15.0" fill="rgb(230,114,23)" rx="2" ry="2" />
<text  x="78.76" y="335.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (2 samples, 0.08%)</title><rect x="160.4" y="229" width="0.9" height="15.0" fill="rgb(230,14,5)" rx="2" ry="2" />
<text  x="163.37" y="239.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (11 samples, 0.43%)</title><rect x="159.0" y="261" width="5.1" height="15.0" fill="rgb(234,226,20)" rx="2" ry="2" />
<text  x="161.99" y="271.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (1 samples, 0.04%)</title><rect x="161.3" y="213" width="0.5" height="15.0" fill="rgb(235,132,54)" rx="2" ry="2" />
<text  x="164.29" y="223.5" ></text>
</g>
<g >
<title>bytes.makeSlice (3 samples, 0.12%)</title><rect x="75.8" y="293" width="1.3" height="15.0" fill="rgb(229,133,2)" rx="2" ry="2" />
<text  x="78.76" y="303.5" ></text>
</g>
<g >
<title>runtime.gosched_m (2 samples, 0.08%)</title><rect x="198.5" y="389" width="1.0" height="15.0" fill="rgb(238,168,33)" rx="2" ry="2" />
<text  x="201.54" y="399.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (1 samples, 0.04%)</title><rect x="158.5" y="245" width="0.5" height="15.0" fill="rgb(230,84,40)" rx="2" ry="2" />
<text  x="161.53" y="255.5" ></text>
</g>
<g >
<title>runtime.notetsleep (180 samples, 7.01%)</title><rect x="773.4" y="357" width="82.7" height="15.0" fill="rgb(221,46,46)" rx="2" ry="2" />
<text  x="776.37" y="367.5" >runtime.n..</text>
</g>
<g >
<title>net/http.(*ServeMux).ServeHTTP (67 samples, 2.61%)</title><rect x="155.3" y="373" width="30.8" height="15.0" fill="rgb(226,53,46)" rx="2" ry="2" />
<text  x="158.32" y="383.5" >ne..</text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="157.2" y="277" width="0.4" height="15.0" fill="rgb(250,39,50)" rx="2" ry="2" />
<text  x="160.16" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.04%)</title><rect x="163.1" y="181" width="0.5" height="15.0" fill="rgb(219,147,27)" rx="2" ry="2" />
<text  x="166.13" y="191.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.04%)</title><rect x="75.8" y="277" width="0.4" height="15.0" fill="rgb(243,79,0)" rx="2" ry="2" />
<text  x="78.76" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (370 samples, 14.42%)</title><rect x="1019.4" y="309" width="170.1" height="15.0" fill="rgb(213,61,16)" rx="2" ry="2" />
<text  x="1022.39" y="319.5" >runtime.notewakeup</text>
</g>
<g >
<title>net.(*conn).Write (163 samples, 6.35%)</title><rect x="79.9" y="325" width="75.0" height="15.0" fill="rgb(237,115,30)" rx="2" ry="2" />
<text  x="82.90" y="335.5" >net.(*co..</text>
</g>
<g >
<title>syscall.Write (159 samples, 6.20%)</title><rect x="81.7" y="277" width="73.2" height="15.0" fill="rgb(238,197,45)" rx="2" ry="2" />
<text  x="84.74" y="287.5" >syscall...</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).ReadMessage (146 samples, 5.69%)</title><rect x="10.5" y="373" width="67.1" height="15.0" fill="rgb(242,78,49)" rx="2" ry="2" />
<text  x="13.46" y="383.5" >github...</text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (15 samples, 0.58%)</title><rect x="191.6" y="373" width="6.9" height="15.0" fill="rgb(213,54,51)" rx="2" ry="2" />
<text  x="194.64" y="383.5" ></text>
</g>
<g >
<title>runtime.spanOf (1 samples, 0.04%)</title><rect x="195.3" y="277" width="0.5" height="15.0" fill="rgb(247,227,50)" rx="2" ry="2" />
<text  x="198.32" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.04%)</title><rect x="1018.9" y="293" width="0.5" height="15.0" fill="rgb(214,41,49)" rx="2" ry="2" />
<text  x="1021.93" y="303.5" ></text>
</g>
<g >
<title>runtime.nilinterequal (1 samples, 0.04%)</title><rect x="160.4" y="197" width="0.4" height="15.0" fill="rgb(206,162,3)" rx="2" ry="2" />
<text  x="163.37" y="207.5" ></text>
</g>
<g >
<title>runtime.gcDrain (15 samples, 0.58%)</title><rect x="191.6" y="357" width="6.9" height="15.0" fill="rgb(230,179,6)" rx="2" ry="2" />
<text  x="194.64" y="367.5" ></text>
</g>
<g >
<title>runtime.handoffp (1 samples, 0.04%)</title><rect x="65.2" y="133" width="0.4" height="15.0" fill="rgb(236,52,18)" rx="2" ry="2" />
<text  x="68.18" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Marshal (1 samples, 0.04%)</title><rect x="158.5" y="229" width="0.5" height="15.0" fill="rgb(239,97,11)" rx="2" ry="2" />
<text  x="161.53" y="239.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).WriteMessage (165 samples, 6.43%)</title><rect x="79.4" y="373" width="75.9" height="15.0" fill="rgb(245,82,41)" rx="2" ry="2" />
<text  x="82.44" y="383.5" >github.c..</text>
</g>
<g >
<title>runtime.handoff (3 samples, 0.12%)</title><rect x="192.1" y="325" width="1.4" height="15.0" fill="rgb(227,188,26)" rx="2" ry="2" />
<text  x="195.10" y="335.5" ></text>
</g>
<g >
<title>internal/poll.setDeadlineImpl (1 samples, 0.04%)</title><rect x="79.4" y="277" width="0.5" height="15.0" fill="rgb(219,195,51)" rx="2" ry="2" />
<text  x="82.44" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (64 samples, 2.49%)</title><rect x="690.1" y="309" width="29.5" height="15.0" fill="rgb(217,225,22)" rx="2" ry="2" />
<text  x="693.13" y="319.5" >ru..</text>
</g>
<g >
<title>runtime.wakep (370 samples, 14.42%)</title><rect x="1019.4" y="341" width="170.1" height="15.0" fill="rgb(218,134,37)" rx="2" ry="2" />
<text  x="1022.39" y="351.5" >runtime.wakep</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ArgsDecode (2 samples, 0.08%)</title><rect x="162.2" y="245" width="0.9" height="15.0" fill="rgb(214,132,23)" rx="2" ry="2" />
<text  x="165.21" y="255.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.04%)</title><rect x="65.2" y="117" width="0.4" height="15.0" fill="rgb(243,141,16)" rx="2" ry="2" />
<text  x="68.18" y="127.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.04%)</title><rect x="190.7" y="389" width="0.5" height="15.0" fill="rgb(217,98,2)" rx="2" ry="2" />
<text  x="193.72" y="399.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WSConn.Read (147 samples, 5.73%)</title><rect x="10.0" y="389" width="67.6" height="15.0" fill="rgb(226,95,19)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >hslam.c..</text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.04%)</title><rect x="199.0" y="309" width="0.5" height="15.0" fill="rgb(210,222,44)" rx="2" ry="2" />
<text  x="202.00" y="319.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (2 samples, 0.08%)</title><rect x="160.4" y="213" width="0.9" height="15.0" fill="rgb(242,122,49)" rx="2" ry="2" />
<text  x="163.37" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.08%)</title><rect x="688.3" y="293" width="0.9" height="15.0" fill="rgb(205,147,6)" rx="2" ry="2" />
<text  x="691.29" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (2 samples, 0.08%)</title><rect x="76.2" y="229" width="0.9" height="15.0" fill="rgb(211,96,52)" rx="2" ry="2" />
<text  x="79.22" y="239.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (133 samples, 5.18%)</title><rect x="10.9" y="293" width="61.2" height="15.0" fill="rgb(244,24,16)" rx="2" ry="2" />
<text  x="13.92" y="303.5" >bufio...</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.04%)</title><rect x="76.7" y="149" width="0.4" height="15.0" fill="rgb(238,45,15)" rx="2" ry="2" />
<text  x="79.68" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (2 samples, 0.08%)</title><rect x="160.4" y="245" width="0.9" height="15.0" fill="rgb(239,37,42)" rx="2" ry="2" />
<text  x="163.37" y="255.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollSetDeadline (1 samples, 0.04%)</title><rect x="79.4" y="261" width="0.5" height="15.0" fill="rgb(218,177,22)" rx="2" ry="2" />
<text  x="82.44" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime (3 samples, 0.12%)</title><rect x="806.9" y="309" width="1.4" height="15.0" fill="rgb(224,100,3)" rx="2" ry="2" />
<text  x="809.94" y="319.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="163.6" y="197" width="0.5" height="15.0" fill="rgb(248,8,26)" rx="2" ry="2" />
<text  x="166.59" y="207.5" ></text>
</g>
<g >
<title>runtime.assertE2I (1 samples, 0.04%)</title><rect x="162.7" y="229" width="0.4" height="15.0" fill="rgb(247,119,46)" rx="2" ry="2" />
<text  x="165.67" y="239.5" ></text>
</g>
<g >
<title>net.(*conn).Read (133 samples, 5.18%)</title><rect x="10.9" y="277" width="61.2" height="15.0" fill="rgb(206,14,19)" rx="2" ry="2" />
<text  x="13.92" y="287.5" >net.(*..</text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.04%)</title><rect x="190.3" y="293" width="0.4" height="15.0" fill="rgb(242,201,54)" rx="2" ry="2" />
<text  x="193.27" y="303.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (115 samples, 4.48%)</title><rect x="965.1" y="357" width="52.9" height="15.0" fill="rgb(231,177,45)" rx="2" ry="2" />
<text  x="968.13" y="367.5" >runti..</text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.04%)</title><rect x="76.7" y="133" width="0.4" height="15.0" fill="rgb(254,175,26)" rx="2" ry="2" />
<text  x="79.68" y="143.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.04%)</title><rect x="394.0" y="325" width="0.4" height="15.0" fill="rgb(223,228,14)" rx="2" ry="2" />
<text  x="396.98" y="335.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).Grow (3 samples, 0.12%)</title><rect x="74.4" y="325" width="1.4" height="15.0" fill="rgb(251,98,5)" rx="2" ry="2" />
<text  x="77.38" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (1 samples, 0.04%)</title><rect x="156.7" y="229" width="0.5" height="15.0" fill="rgb(235,200,1)" rx="2" ry="2" />
<text  x="159.70" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (5 samples, 0.19%)</title><rect x="962.8" y="293" width="2.3" height="15.0" fill="rgb(232,23,29)" rx="2" ry="2" />
<text  x="965.83" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.04%)</title><rect x="161.3" y="117" width="0.5" height="15.0" fill="rgb(213,65,40)" rx="2" ry="2" />
<text  x="164.29" y="127.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (1 samples, 0.04%)</title><rect x="158.1" y="261" width="0.4" height="15.0" fill="rgb(237,136,31)" rx="2" ry="2" />
<text  x="161.07" y="271.5" ></text>
</g>
<g >
<title>runtime.mstart (1,022 samples, 39.83%)</title><rect x="719.6" y="405" width="469.9" height="15.0" fill="rgb(233,201,26)" rx="2" ry="2" />
<text  x="722.56" y="415.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="76.7" y="165" width="0.4" height="15.0" fill="rgb(228,121,6)" rx="2" ry="2" />
<text  x="79.68" y="175.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.04%)</title><rect x="1018.9" y="341" width="0.5" height="15.0" fill="rgb(228,77,33)" rx="2" ry="2" />
<text  x="1021.93" y="351.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.04%)</title><rect x="133.2" y="213" width="0.5" height="15.0" fill="rgb(225,161,45)" rx="2" ry="2" />
<text  x="136.24" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (63 samples, 2.46%)</title><rect x="690.6" y="293" width="29.0" height="15.0" fill="rgb(210,122,26)" rx="2" ry="2" />
<text  x="693.59" y="303.5" >ru..</text>
</g>
<g >
<title>runtime.lock (1 samples, 0.04%)</title><rect x="720.0" y="357" width="0.5" height="15.0" fill="rgb(209,76,47)" rx="2" ry="2" />
<text  x="723.02" y="367.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.04%)</title><rect x="194.4" y="181" width="0.5" height="15.0" fill="rgb(205,132,33)" rx="2" ry="2" />
<text  x="197.40" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenWS.func1 (67 samples, 2.61%)</title><rect x="155.3" y="341" width="30.8" height="15.0" fill="rgb(229,163,15)" rx="2" ry="2" />
<text  x="158.32" y="351.5" >hs..</text>
</g>
<g >
<title>runtime.ready (1 samples, 0.04%)</title><rect x="164.5" y="213" width="0.5" height="15.0" fill="rgb(216,42,32)" rx="2" ry="2" />
<text  x="167.51" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.04%)</title><rect x="161.3" y="133" width="0.5" height="15.0" fill="rgb(250,159,26)" rx="2" ry="2" />
<text  x="164.29" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="161.3" y="101" width="0.5" height="15.0" fill="rgb(238,147,36)" rx="2" ry="2" />
<text  x="164.29" y="111.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.04%)</title><rect x="158.1" y="213" width="0.4" height="15.0" fill="rgb(207,6,11)" rx="2" ry="2" />
<text  x="161.07" y="223.5" ></text>
</g>
<g >
<title>runtime.kevent_trampoline (2 samples, 0.08%)</title><rect x="188.0" y="389" width="0.9" height="15.0" fill="rgb(215,86,28)" rx="2" ry="2" />
<text  x="190.97" y="399.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.08%)</title><rect x="153.9" y="197" width="1.0" height="15.0" fill="rgb(234,163,49)" rx="2" ry="2" />
<text  x="156.94" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (2 samples, 0.08%)</title><rect x="189.8" y="341" width="0.9" height="15.0" fill="rgb(228,214,15)" rx="2" ry="2" />
<text  x="192.81" y="351.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.04%)</title><rect x="190.7" y="309" width="0.5" height="15.0" fill="rgb(220,164,38)" rx="2" ry="2" />
<text  x="193.72" y="319.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.04%)</title><rect x="194.4" y="197" width="0.5" height="15.0" fill="rgb(254,173,20)" rx="2" ry="2" />
<text  x="197.40" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="164.1" y="245" width="0.4" height="15.0" fill="rgb(214,97,7)" rx="2" ry="2" />
<text  x="167.05" y="255.5" ></text>
</g>
<g >
<title>runtime.resetspinning (64 samples, 2.49%)</title><rect x="690.1" y="357" width="29.5" height="15.0" fill="rgb(213,221,44)" rx="2" ry="2" />
<text  x="693.13" y="367.5" >ru..</text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="191.2" y="389" width="0.4" height="15.0" fill="rgb(212,117,39)" rx="2" ry="2" />
<text  x="194.18" y="399.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (1 samples, 0.04%)</title><rect x="199.5" y="357" width="0.4" height="15.0" fill="rgb(241,199,46)" rx="2" ry="2" />
<text  x="202.46" y="367.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.04%)</title><rect x="206.8" y="325" width="0.5" height="15.0" fill="rgb(253,29,21)" rx="2" ry="2" />
<text  x="209.82" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.04%)</title><rect x="163.1" y="197" width="0.5" height="15.0" fill="rgb(223,175,37)" rx="2" ry="2" />
<text  x="166.13" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.04%)</title><rect x="161.3" y="149" width="0.5" height="15.0" fill="rgb(205,228,18)" rx="2" ry="2" />
<text  x="164.29" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.04%)</title><rect x="161.3" y="37" width="0.5" height="15.0" fill="rgb(225,120,0)" rx="2" ry="2" />
<text  x="164.29" y="47.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Size (1 samples, 0.04%)</title><rect x="157.6" y="261" width="0.5" height="15.0" fill="rgb(215,33,22)" rx="2" ry="2" />
<text  x="160.61" y="271.5" ></text>
</g>
<g >
<title>io/ioutil.ReadAll (8 samples, 0.31%)</title><rect x="73.9" y="357" width="3.7" height="15.0" fill="rgb(216,34,3)" rx="2" ry="2" />
<text  x="76.92" y="367.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (1 samples, 0.04%)</title><rect x="157.6" y="293" width="0.5" height="15.0" fill="rgb(217,150,41)" rx="2" ry="2" />
<text  x="160.61" y="303.5" ></text>
</g>
<g >
<title>reflect.valueInterface (1 samples, 0.04%)</title><rect x="161.8" y="213" width="0.4" height="15.0" fill="rgb(205,186,21)" rx="2" ry="2" />
<text  x="164.75" y="223.5" ></text>
</g>
<g >
<title>runtime.usleep (9 samples, 0.35%)</title><rect x="201.8" y="309" width="4.1" height="15.0" fill="rgb(213,202,7)" rx="2" ry="2" />
<text  x="204.76" y="319.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.04%)</title><rect x="1018.9" y="325" width="0.5" height="15.0" fill="rgb(210,140,12)" rx="2" ry="2" />
<text  x="1021.93" y="335.5" ></text>
</g>
<g >
<title>runtime.semasleep (106 samples, 4.13%)</title><rect x="806.9" y="325" width="48.8" height="15.0" fill="rgb(251,158,44)" rx="2" ry="2" />
<text  x="809.94" y="335.5" >runt..</text>
</g>
<g >
<title>runtime.gentraceback (3 samples, 0.12%)</title><rect x="193.5" y="277" width="1.4" height="15.0" fill="rgb(229,174,4)" rx="2" ry="2" />
<text  x="196.48" y="287.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*messageReader).Close (2 samples, 0.08%)</title><rect x="72.1" y="341" width="0.9" height="15.0" fill="rgb(251,200,17)" rx="2" ry="2" />
<text  x="75.08" y="351.5" ></text>
</g>
<g >
<title>runtime.systemstack (617 samples, 24.05%)</title><rect x="905.8" y="389" width="283.7" height="15.0" fill="rgb(250,64,7)" rx="2" ry="2" />
<text  x="908.81" y="399.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.send (1 samples, 0.04%)</title><rect x="164.5" y="277" width="0.5" height="15.0" fill="rgb(216,30,34)" rx="2" ry="2" />
<text  x="167.51" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.04%)</title><rect x="161.3" y="69" width="0.5" height="15.0" fill="rgb(242,28,2)" rx="2" ry="2" />
<text  x="164.29" y="79.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WriteConn (169 samples, 6.59%)</title><rect x="77.6" y="405" width="77.7" height="15.0" fill="rgb(233,124,10)" rx="2" ry="2" />
<text  x="80.60" y="415.5" >hslam.co..</text>
</g>
<g >
<title>internal/poll.(*FD).Read (133 samples, 5.18%)</title><rect x="10.9" y="245" width="61.2" height="15.0" fill="rgb(244,120,35)" rx="2" ry="2" />
<text  x="13.92" y="255.5" >intern..</text>
</g>
<g >
<title>runtime.park_m (1,131 samples, 44.08%)</title><rect x="199.5" y="389" width="520.1" height="15.0" fill="rgb(231,191,36)" rx="2" ry="2" />
<text  x="202.46" y="399.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.08%)</title><rect x="76.2" y="261" width="0.9" height="15.0" fill="rgb(225,192,13)" rx="2" ry="2" />
<text  x="79.22" y="271.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (133 samples, 5.18%)</title><rect x="10.9" y="309" width="61.2" height="15.0" fill="rgb(205,112,15)" rx="2" ry="2" />
<text  x="13.92" y="319.5" >bufio...</text>
</g>
<g >
<title>runtime.acquirep (2 samples, 0.08%)</title><rect x="393.1" y="325" width="0.9" height="15.0" fill="rgb(250,103,14)" rx="2" ry="2" />
<text  x="396.06" y="335.5" ></text>
</g>
<g >
<title>runtime.strequal (1 samples, 0.04%)</title><rect x="160.4" y="165" width="0.4" height="15.0" fill="rgb(213,47,11)" rx="2" ry="2" />
<text  x="163.37" y="175.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1,066 samples, 41.54%)</title><rect x="199.9" y="357" width="490.2" height="15.0" fill="rgb(234,137,21)" rx="2" ry="2" />
<text  x="202.92" y="367.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="164.5" y="245" width="0.5" height="15.0" fill="rgb(221,160,18)" rx="2" ry="2" />
<text  x="167.51" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WSConn.Write (165 samples, 6.43%)</title><rect x="79.4" y="389" width="75.9" height="15.0" fill="rgb(221,43,17)" rx="2" ry="2" />
<text  x="82.44" y="399.5" >hslam.co..</text>
</g>
<g >
<title>runtime.schedule (1,131 samples, 44.08%)</title><rect x="199.5" y="373" width="520.1" height="15.0" fill="rgb(207,225,51)" rx="2" ry="2" />
<text  x="202.46" y="383.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.markroot.func1 (3 samples, 0.12%)</title><rect x="193.5" y="325" width="1.4" height="15.0" fill="rgb(253,40,14)" rx="2" ry="2" />
<text  x="196.48" y="335.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.08%)</title><rect x="74.8" y="277" width="1.0" height="15.0" fill="rgb(211,125,23)" rx="2" ry="2" />
<text  x="77.84" y="287.5" ></text>
</g>
<g >
<title>runtime.convI2I (1 samples, 0.04%)</title><rect x="73.0" y="341" width="0.5" height="15.0" fill="rgb(205,188,28)" rx="2" ry="2" />
<text  x="76.00" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.04%)</title><rect x="157.6" y="229" width="0.5" height="15.0" fill="rgb(228,219,49)" rx="2" ry="2" />
<text  x="160.61" y="239.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="73.0" y="325" width="0.5" height="15.0" fill="rgb(223,36,53)" rx="2" ry="2" />
<text  x="76.00" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="161.3" y="197" width="0.5" height="15.0" fill="rgb(229,174,33)" rx="2" ry="2" />
<text  x="164.29" y="207.5" ></text>
</g>
<g >
<title>runtime.deferreturn (3 samples, 0.12%)</title><rect x="80.4" y="277" width="1.3" height="15.0" fill="rgb(212,176,44)" rx="2" ry="2" />
<text  x="83.36" y="287.5" ></text>
</g>
<g >
<title>runtime.deferreturn (3 samples, 0.12%)</title><rect x="10.9" y="229" width="1.4" height="15.0" fill="rgb(223,10,15)" rx="2" ry="2" />
<text  x="13.92" y="239.5" ></text>
</g>
<g >
<title>runtime.findrunnable (2 samples, 0.08%)</title><rect x="198.5" y="341" width="1.0" height="15.0" fill="rgb(249,8,38)" rx="2" ry="2" />
<text  x="201.54" y="351.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (3 samples, 0.12%)</title><rect x="1018.0" y="357" width="1.4" height="15.0" fill="rgb(241,39,19)" rx="2" ry="2" />
<text  x="1021.01" y="367.5" ></text>
</g>
<g >
<title>io/ioutil.readAll (8 samples, 0.31%)</title><rect x="73.9" y="341" width="3.7" height="15.0" fill="rgb(209,33,46)" rx="2" ry="2" />
<text  x="76.92" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendUTF8StringValueNoZero (1 samples, 0.04%)</title><rect x="158.5" y="181" width="0.5" height="15.0" fill="rgb(208,26,49)" rx="2" ry="2" />
<text  x="161.53" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (105 samples, 4.09%)</title><rect x="965.1" y="309" width="48.3" height="15.0" fill="rgb(222,63,23)" rx="2" ry="2" />
<text  x="968.13" y="319.5" >runt..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (1 samples, 0.04%)</title><rect x="157.6" y="277" width="0.5" height="15.0" fill="rgb(254,67,4)" rx="2" ry="2" />
<text  x="160.61" y="287.5" ></text>
</g>
<g >
<title>runtime.efaceeq (1 samples, 0.04%)</title><rect x="160.4" y="181" width="0.4" height="15.0" fill="rgb(212,77,47)" rx="2" ry="2" />
<text  x="163.37" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (2 samples, 0.08%)</title><rect x="189.8" y="357" width="0.9" height="15.0" fill="rgb(215,63,28)" rx="2" ry="2" />
<text  x="192.81" y="367.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.04%)</title><rect x="190.7" y="341" width="0.5" height="15.0" fill="rgb(206,125,16)" rx="2" ry="2" />
<text  x="193.72" y="351.5" ></text>
</g>
<g >
<title>runtime.scanblock (2 samples, 0.08%)</title><rect x="194.9" y="309" width="0.9" height="15.0" fill="rgb(210,86,34)" rx="2" ry="2" />
<text  x="197.86" y="319.5" ></text>
</g>
<g >
<title>runtime.mcall (1 samples, 0.04%)</title><rect x="186.1" y="389" width="0.5" height="15.0" fill="rgb(231,8,2)" rx="2" ry="2" />
<text  x="189.13" y="399.5" ></text>
</g>
<g >
<title>runtime.lock (12 samples, 0.47%)</title><rect x="201.8" y="341" width="5.5" height="15.0" fill="rgb(216,216,19)" rx="2" ry="2" />
<text  x="204.76" y="351.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (46 samples, 1.79%)</title><rect x="133.7" y="213" width="21.2" height="15.0" fill="rgb(219,91,6)" rx="2" ry="2" />
<text  x="136.70" y="223.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (2 samples, 0.08%)</title><rect x="64.7" y="181" width="0.9" height="15.0" fill="rgb(233,121,11)" rx="2" ry="2" />
<text  x="67.72" y="191.5" ></text>
</g>
<g >
<title>runtime.notesleep (643 samples, 25.06%)</title><rect x="394.4" y="325" width="295.7" height="15.0" fill="rgb(247,79,53)" rx="2" ry="2" />
<text  x="397.44" y="335.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.04%)</title><rect x="199.0" y="293" width="0.5" height="15.0" fill="rgb(219,47,17)" rx="2" ry="2" />
<text  x="202.00" y="303.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.04%)</title><rect x="75.8" y="261" width="0.4" height="15.0" fill="rgb(244,75,6)" rx="2" ry="2" />
<text  x="78.76" y="271.5" ></text>
</g>
<g >
<title>syscall.read (130 samples, 5.07%)</title><rect x="12.3" y="213" width="59.8" height="15.0" fill="rgb(207,0,7)" rx="2" ry="2" />
<text  x="15.30" y="223.5" >syscal..</text>
</g>
<g >
<title>runtime.semasleep (642 samples, 25.02%)</title><rect x="394.9" y="309" width="295.2" height="15.0" fill="rgb(212,49,16)" rx="2" ry="2" />
<text  x="397.90" y="319.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.nanotime (115 samples, 4.48%)</title><rect x="720.5" y="357" width="52.9" height="15.0" fill="rgb(234,117,7)" rx="2" ry="2" />
<text  x="723.48" y="367.5" >runti..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (58 samples, 2.26%)</title><rect x="690.6" y="277" width="26.7" height="15.0" fill="rgb(240,128,35)" rx="2" ry="2" />
<text  x="693.59" y="287.5" >r..</text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (2 samples, 0.08%)</title><rect x="76.2" y="213" width="0.9" height="15.0" fill="rgb(222,183,40)" rx="2" ry="2" />
<text  x="79.22" y="223.5" ></text>
</g>
<g >
<title>runtime._System (2 samples, 0.08%)</title><rect x="186.1" y="405" width="0.9" height="15.0" fill="rgb(209,18,27)" rx="2" ry="2" />
<text  x="189.13" y="415.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.04%)</title><rect x="160.8" y="197" width="0.5" height="15.0" fill="rgb(241,73,45)" rx="2" ry="2" />
<text  x="163.83" y="207.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (129 samples, 5.03%)</title><rect x="905.8" y="373" width="59.3" height="15.0" fill="rgb(211,2,29)" rx="2" ry="2" />
<text  x="908.81" y="383.5" >runtim..</text>
</g>
<g >
<title>reflect.Value.call (1 samples, 0.04%)</title><rect x="159.5" y="213" width="0.4" height="15.0" fill="rgb(251,28,20)" rx="2" ry="2" />
<text  x="162.45" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.04%)</title><rect x="161.3" y="165" width="0.5" height="15.0" fill="rgb(252,193,3)" rx="2" ry="2" />
<text  x="164.29" y="175.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (3 samples, 0.12%)</title><rect x="1018.0" y="373" width="1.4" height="15.0" fill="rgb(207,1,49)" rx="2" ry="2" />
<text  x="1021.01" y="383.5" ></text>
</g>
<g >
<title>runtime.freedefer (3 samples, 0.12%)</title><rect x="10.9" y="213" width="1.4" height="15.0" fill="rgb(213,191,15)" rx="2" ry="2" />
<text  x="13.92" y="223.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.04%)</title><rect x="198.1" y="325" width="0.4" height="15.0" fill="rgb(241,189,29)" rx="2" ry="2" />
<text  x="201.08" y="335.5" ></text>
</g>
<g >
<title>runtime.syscall (1 samples, 0.04%)</title><rect x="1189.5" y="405" width="0.5" height="15.0" fill="rgb(210,114,16)" rx="2" ry="2" />
<text  x="1192.54" y="415.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.04%)</title><rect x="156.7" y="245" width="0.5" height="15.0" fill="rgb(249,41,28)" rx="2" ry="2" />
<text  x="159.70" y="255.5" ></text>
</g>
<g >
<title>syscall.Read (130 samples, 5.07%)</title><rect x="12.3" y="229" width="59.8" height="15.0" fill="rgb(215,29,8)" rx="2" ry="2" />
<text  x="15.30" y="239.5" >syscal..</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.04%)</title><rect x="161.3" y="85" width="0.5" height="15.0" fill="rgb(212,146,42)" rx="2" ry="2" />
<text  x="164.29" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce (1 samples, 0.04%)</title><rect x="190.3" y="277" width="0.4" height="15.0" fill="rgb(213,131,33)" rx="2" ry="2" />
<text  x="193.27" y="287.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="159.9" y="213" width="0.5" height="15.0" fill="rgb(240,213,17)" rx="2" ry="2" />
<text  x="162.91" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.04%)</title><rect x="206.8" y="309" width="0.5" height="15.0" fill="rgb(243,157,9)" rx="2" ry="2" />
<text  x="209.82" y="319.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*messageReader).Read (1 samples, 0.04%)</title><rect x="77.1" y="309" width="0.5" height="15.0" fill="rgb(243,196,28)" rx="2" ry="2" />
<text  x="80.14" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (1 samples, 0.04%)</title><rect x="158.1" y="197" width="0.4" height="15.0" fill="rgb(207,215,26)" rx="2" ry="2" />
<text  x="161.07" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.04%)</title><rect x="157.6" y="245" width="0.5" height="15.0" fill="rgb(210,72,17)" rx="2" ry="2" />
<text  x="160.61" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.04%)</title><rect x="76.7" y="197" width="0.4" height="15.0" fill="rgb(249,187,37)" rx="2" ry="2" />
<text  x="79.68" y="207.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (2 samples, 0.08%)</title><rect x="132.3" y="229" width="0.9" height="15.0" fill="rgb(254,63,54)" rx="2" ry="2" />
<text  x="135.32" y="239.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (163 samples, 6.35%)</title><rect x="79.9" y="309" width="75.0" height="15.0" fill="rgb(235,117,28)" rx="2" ry="2" />
<text  x="82.90" y="319.5" >net.(*ne..</text>
</g>
<g >
<title>runtime.usleep (18 samples, 0.70%)</title><rect x="384.8" y="309" width="8.3" height="15.0" fill="rgb(225,182,39)" rx="2" ry="2" />
<text  x="387.79" y="319.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (6 samples, 0.23%)</title><rect x="187.0" y="405" width="2.8" height="15.0" fill="rgb(254,222,19)" rx="2" ry="2" />
<text  x="190.05" y="415.5" ></text>
</g>
<g >
<title>net.(*netFD).SetWriteDeadline (1 samples, 0.04%)</title><rect x="79.4" y="309" width="0.5" height="15.0" fill="rgb(238,160,26)" rx="2" ry="2" />
<text  x="82.44" y="319.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollReset (1 samples, 0.04%)</title><rect x="79.9" y="245" width="0.5" height="15.0" fill="rgb(218,34,26)" rx="2" ry="2" />
<text  x="82.90" y="255.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).write (165 samples, 6.43%)</title><rect x="79.4" y="341" width="75.9" height="15.0" fill="rgb(210,138,4)" rx="2" ry="2" />
<text  x="82.44" y="351.5" >github.c..</text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.04%)</title><rect x="190.7" y="325" width="0.5" height="15.0" fill="rgb(210,97,37)" rx="2" ry="2" />
<text  x="193.72" y="335.5" ></text>
</g>
<g >
<title>runtime.runqsteal (20 samples, 0.78%)</title><rect x="383.9" y="341" width="9.2" height="15.0" fill="rgb(241,43,31)" rx="2" ry="2" />
<text  x="386.87" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.04%)</title><rect x="190.3" y="309" width="0.4" height="15.0" fill="rgb(235,138,47)" rx="2" ry="2" />
<text  x="193.27" y="319.5" ></text>
</g>
<g >
<title>runtime.procyield (2 samples, 0.08%)</title><rect x="205.9" y="325" width="0.9" height="15.0" fill="rgb(236,141,13)" rx="2" ry="2" />
<text  x="208.90" y="335.5" ></text>
</g>
<g >
<title>reflect.Value.Call (1 samples, 0.04%)</title><rect x="159.5" y="229" width="0.4" height="15.0" fill="rgb(244,225,20)" rx="2" ry="2" />
<text  x="162.45" y="239.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.04%)</title><rect x="73.0" y="309" width="0.5" height="15.0" fill="rgb(243,169,32)" rx="2" ry="2" />
<text  x="76.00" y="319.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (17 samples, 0.66%)</title><rect x="190.7" y="405" width="7.8" height="15.0" fill="rgb(233,68,10)" rx="2" ry="2" />
<text  x="193.72" y="415.5" ></text>
</g>
</g>
</svg>

