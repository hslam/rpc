<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="422.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="405" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="405" > </text>
<g id="frames">
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.02%)</title><rect x="272.0" y="133" width="0.2" height="15.0" fill="rgb(247,222,51)" rx="2" ry="2" />
<text  x="274.97" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (2 samples, 0.04%)</title><rect x="282.2" y="165" width="0.5" height="15.0" fill="rgb(220,3,52)" rx="2" ry="2" />
<text  x="285.17" y="175.5" ></text>
</g>
<g >
<title>runtime.heapBits.initSpan (1 samples, 0.02%)</title><rect x="168.2" y="133" width="0.3" height="15.0" fill="rgb(207,185,18)" rx="2" ry="2" />
<text  x="171.23" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (14 samples, 0.30%)</title><rect x="1167.9" y="245" width="3.4" height="15.0" fill="rgb(229,148,8)" rx="2" ry="2" />
<text  x="1170.86" y="255.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (3 samples, 0.06%)</title><rect x="358.8" y="213" width="0.7" height="15.0" fill="rgb(252,27,1)" rx="2" ry="2" />
<text  x="361.80" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendUTF8StringValueNoZero (1 samples, 0.02%)</title><rect x="273.0" y="133" width="0.2" height="15.0" fill="rgb(214,130,20)" rx="2" ry="2" />
<text  x="275.97" y="143.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="170.7" y="261" width="0.3" height="15.0" fill="rgb(230,81,43)" rx="2" ry="2" />
<text  x="173.72" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="170.5" y="325" width="0.5" height="15.0" fill="rgb(236,78,39)" rx="2" ry="2" />
<text  x="173.47" y="335.5" ></text>
</g>
<g >
<title>runtime.assertE2I (1 samples, 0.02%)</title><rect x="283.7" y="181" width="0.2" height="15.0" fill="rgb(233,194,44)" rx="2" ry="2" />
<text  x="286.67" y="191.5" ></text>
</g>
<g >
<title>runtime.heapBits.bits (1 samples, 0.02%)</title><rect x="170.7" y="213" width="0.3" height="15.0" fill="rgb(210,5,46)" rx="2" ry="2" />
<text  x="173.72" y="223.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (3 samples, 0.06%)</title><rect x="1179.1" y="309" width="0.7" height="15.0" fill="rgb(226,70,54)" rx="2" ry="2" />
<text  x="1182.05" y="319.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="271.7" y="229" width="0.3" height="15.0" fill="rgb(218,63,43)" rx="2" ry="2" />
<text  x="274.72" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.04%)</title><rect x="167.2" y="213" width="0.5" height="15.0" fill="rgb(243,200,50)" rx="2" ry="2" />
<text  x="170.23" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (3 samples, 0.06%)</title><rect x="281.2" y="117" width="0.7" height="15.0" fill="rgb(243,116,50)" rx="2" ry="2" />
<text  x="284.18" y="127.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (2 samples, 0.04%)</title><rect x="271.0" y="181" width="0.5" height="15.0" fill="rgb(228,166,21)" rx="2" ry="2" />
<text  x="273.98" y="191.5" ></text>
</g>
<g >
<title>runtime.handoffp (1,605 samples, 33.84%)</title><rect x="779.7" y="309" width="399.4" height="15.0" fill="rgb(235,143,18)" rx="2" ry="2" />
<text  x="782.75" y="319.5" >runtime.handoffp</text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="169.5" y="197" width="0.2" height="15.0" fill="rgb(228,2,33)" rx="2" ry="2" />
<text  x="172.47" y="207.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (1 samples, 0.02%)</title><rect x="166.0" y="133" width="0.2" height="15.0" fill="rgb(227,6,47)" rx="2" ry="2" />
<text  x="168.99" y="143.5" ></text>
</g>
<g >
<title>runtime.makeslice (3 samples, 0.06%)</title><rect x="168.0" y="229" width="0.7" height="15.0" fill="rgb(224,162,19)" rx="2" ry="2" />
<text  x="170.98" y="239.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).WriteMessage (385 samples, 8.12%)</title><rect x="172.5" y="325" width="95.7" height="15.0" fill="rgb(239,28,34)" rx="2" ry="2" />
<text  x="175.46" y="335.5" >github.com/..</text>
</g>
<g >
<title>runtime.kevent (8 samples, 0.17%)</title><rect x="366.3" y="277" width="2.0" height="15.0" fill="rgb(254,62,45)" rx="2" ry="2" />
<text  x="369.26" y="287.5" ></text>
</g>
<g >
<title>runtime.chansend1 (1 samples, 0.02%)</title><rect x="170.2" y="341" width="0.3" height="15.0" fill="rgb(226,40,13)" rx="2" ry="2" />
<text  x="173.22" y="351.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.02%)</title><rect x="1179.8" y="293" width="0.2" height="15.0" fill="rgb(216,68,33)" rx="2" ry="2" />
<text  x="1182.80" y="303.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*messageReader).Close (2 samples, 0.04%)</title><rect x="166.5" y="293" width="0.5" height="15.0" fill="rgb(220,146,31)" rx="2" ry="2" />
<text  x="169.49" y="303.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="170.0" y="229" width="0.2" height="15.0" fill="rgb(243,115,28)" rx="2" ry="2" />
<text  x="172.97" y="239.5" ></text>
</g>
<g >
<title>runtime.acquireSudog (1 samples, 0.02%)</title><rect x="355.8" y="245" width="0.3" height="15.0" fill="rgb(206,48,2)" rx="2" ry="2" />
<text  x="358.81" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (3 samples, 0.06%)</title><rect x="1180.0" y="245" width="0.8" height="15.0" fill="rgb(224,42,43)" rx="2" ry="2" />
<text  x="1183.05" y="255.5" ></text>
</g>
<g >
<title>runtime.schedule (189 samples, 3.98%)</title><rect x="729.0" y="325" width="47.0" height="15.0" fill="rgb(207,210,36)" rx="2" ry="2" />
<text  x="732.00" y="335.5" >runt..</text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (1 samples, 0.02%)</title><rect x="357.8" y="309" width="0.3" height="15.0" fill="rgb(235,115,30)" rx="2" ry="2" />
<text  x="360.81" y="319.5" ></text>
</g>
<g >
<title>runtime.startm (1,605 samples, 33.84%)</title><rect x="779.7" y="293" width="399.4" height="15.0" fill="rgb(233,86,34)" rx="2" ry="2" />
<text  x="782.75" y="303.5" >runtime.startm</text>
</g>
<g >
<title>runtime.pthread_cond_signal (4 samples, 0.08%)</title><rect x="729.5" y="229" width="1.0" height="15.0" fill="rgb(253,134,52)" rx="2" ry="2" />
<text  x="732.49" y="239.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (2 samples, 0.04%)</title><rect x="272.0" y="181" width="0.5" height="15.0" fill="rgb(233,42,3)" rx="2" ry="2" />
<text  x="274.97" y="191.5" ></text>
</g>
<g >
<title>runtime.runqget (2 samples, 0.04%)</title><rect x="374.5" y="309" width="0.5" height="15.0" fill="rgb(221,189,4)" rx="2" ry="2" />
<text  x="377.47" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Marshal (5 samples, 0.11%)</title><rect x="280.9" y="165" width="1.3" height="15.0" fill="rgb(244,81,35)" rx="2" ry="2" />
<text  x="283.93" y="175.5" ></text>
</g>
<g >
<title>runtime.binarySearchTree (1 samples, 0.02%)</title><rect x="358.1" y="213" width="0.2" height="15.0" fill="rgb(211,87,45)" rx="2" ry="2" />
<text  x="361.05" y="223.5" ></text>
</g>
<g >
<title>runtime.selectgo (285 samples, 6.01%)</title><rect x="285.9" y="261" width="70.9" height="15.0" fill="rgb(251,67,40)" rx="2" ry="2" />
<text  x="288.91" y="271.5" >runtime...</text>
</g>
<g >
<title>sync.(*Mutex).Lock (1 samples, 0.02%)</title><rect x="267.7" y="277" width="0.3" height="15.0" fill="rgb(254,97,18)" rx="2" ry="2" />
<text  x="270.74" y="287.5" ></text>
</g>
<g >
<title>runtime.startm (4 samples, 0.08%)</title><rect x="165.0" y="69" width="1.0" height="15.0" fill="rgb(250,204,1)" rx="2" ry="2" />
<text  x="167.99" y="79.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (3 samples, 0.06%)</title><rect x="1179.1" y="325" width="0.7" height="15.0" fill="rgb(215,150,34)" rx="2" ry="2" />
<text  x="1182.05" y="335.5" ></text>
</g>
<g >
<title>runtime.netpoll (113 samples, 2.38%)</title><rect x="734.0" y="293" width="28.1" height="15.0" fill="rgb(252,94,21)" rx="2" ry="2" />
<text  x="736.97" y="303.5" >r..</text>
</g>
<g >
<title>runtime.aeshash64 (1 samples, 0.02%)</title><rect x="1189.8" y="293" width="0.2" height="15.0" fill="rgb(215,211,5)" rx="2" ry="2" />
<text  x="1192.75" y="303.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.02%)</title><rect x="169.5" y="101" width="0.2" height="15.0" fill="rgb(251,162,16)" rx="2" ry="2" />
<text  x="172.47" y="111.5" ></text>
</g>
<g >
<title>runtime.newobject (4 samples, 0.08%)</title><rect x="167.0" y="293" width="1.0" height="15.0" fill="rgb(215,221,3)" rx="2" ry="2" />
<text  x="169.99" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (5 samples, 0.11%)</title><rect x="168.7" y="213" width="1.3" height="15.0" fill="rgb(205,168,44)" rx="2" ry="2" />
<text  x="171.73" y="223.5" ></text>
</g>
<g >
<title>runtime.wakep (32 samples, 0.67%)</title><rect x="1181.0" y="293" width="8.0" height="15.0" fill="rgb(239,70,51)" rx="2" ry="2" />
<text  x="1184.04" y="303.5" ></text>
</g>
<g >
<title>net/http.(*ServeMux).ServeHTTP (354 samples, 7.46%)</title><rect x="268.7" y="325" width="88.1" height="15.0" fill="rgb(211,27,42)" rx="2" ry="2" />
<text  x="271.74" y="335.5" >net/http.(..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="1179.3" y="261" width="0.3" height="15.0" fill="rgb(247,111,41)" rx="2" ry="2" />
<text  x="1182.30" y="271.5" ></text>
</g>
<g >
<title>io/ioutil.readAll (9 samples, 0.19%)</title><rect x="168.0" y="293" width="2.2" height="15.0" fill="rgb(250,23,1)" rx="2" ry="2" />
<text  x="170.98" y="303.5" ></text>
</g>
<g >
<title>runtime.(*semaRoot).dequeue (1 samples, 0.02%)</title><rect x="167.0" y="197" width="0.2" height="15.0" fill="rgb(206,26,0)" rx="2" ry="2" />
<text  x="169.99" y="207.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*messageWriter).flushFrame (382 samples, 8.05%)</title><rect x="173.0" y="309" width="95.0" height="15.0" fill="rgb(217,146,2)" rx="2" ry="2" />
<text  x="175.96" y="319.5" >github.com/..</text>
</g>
<g >
<title>runtime.stopm (22 samples, 0.46%)</title><rect x="368.3" y="293" width="5.4" height="15.0" fill="rgb(237,48,38)" rx="2" ry="2" />
<text  x="371.25" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="169.5" y="149" width="0.2" height="15.0" fill="rgb(243,170,21)" rx="2" ry="2" />
<text  x="172.47" y="159.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (3 samples, 0.06%)</title><rect x="282.7" y="165" width="0.7" height="15.0" fill="rgb(224,11,11)" rx="2" ry="2" />
<text  x="285.67" y="175.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (32 samples, 0.67%)</title><rect x="1181.0" y="325" width="8.0" height="15.0" fill="rgb(245,133,54)" rx="2" ry="2" />
<text  x="1184.04" y="335.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profMap).lookup (1 samples, 0.02%)</title><rect x="1189.8" y="325" width="0.2" height="15.0" fill="rgb(252,39,16)" rx="2" ry="2" />
<text  x="1192.75" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WSConn.Read (644 samples, 13.58%)</title><rect x="10.0" y="341" width="160.2" height="15.0" fill="rgb(213,29,50)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >hslam.com/mgit/Mort/..</text>
</g>
<g >
<title>runtime.systemstack (6 samples, 0.13%)</title><rect x="164.5" y="117" width="1.5" height="15.0" fill="rgb(236,142,45)" rx="2" ry="2" />
<text  x="167.50" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="362.0" y="293" width="0.3" height="15.0" fill="rgb(217,176,49)" rx="2" ry="2" />
<text  x="365.03" y="303.5" ></text>
</g>
<g >
<title>runtime.deferreturn (98 samples, 2.07%)</title><rect x="175.9" y="229" width="24.4" height="15.0" fill="rgb(253,186,24)" rx="2" ry="2" />
<text  x="178.94" y="239.5" >r..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (2 samples, 0.04%)</title><rect x="272.7" y="149" width="0.5" height="15.0" fill="rgb(234,196,44)" rx="2" ry="2" />
<text  x="275.72" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1,599 samples, 33.71%)</title><rect x="781.2" y="261" width="397.9" height="15.0" fill="rgb(253,129,3)" rx="2" ry="2" />
<text  x="784.24" y="271.5" >runtime.semawakeup</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (2 samples, 0.04%)</title><rect x="272.0" y="197" width="0.5" height="15.0" fill="rgb(242,184,8)" rx="2" ry="2" />
<text  x="274.97" y="207.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (2 samples, 0.04%)</title><rect x="268.2" y="341" width="0.5" height="15.0" fill="rgb(218,169,1)" rx="2" ry="2" />
<text  x="271.24" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).removeSpan (1 samples, 0.02%)</title><rect x="357.8" y="197" width="0.3" height="15.0" fill="rgb(254,229,4)" rx="2" ry="2" />
<text  x="360.81" y="207.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="168.0" y="69" width="0.2" height="15.0" fill="rgb(244,4,42)" rx="2" ry="2" />
<text  x="170.98" y="79.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (370 samples, 7.80%)</title><rect x="175.2" y="245" width="92.0" height="15.0" fill="rgb(216,111,10)" rx="2" ry="2" />
<text  x="178.20" y="255.5" >internal/po..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (3 samples, 0.06%)</title><rect x="272.7" y="197" width="0.8" height="15.0" fill="rgb(251,112,22)" rx="2" ry="2" />
<text  x="275.72" y="207.5" ></text>
</g>
<g >
<title>runtime.runqsteal (5 samples, 0.11%)</title><rect x="762.1" y="293" width="1.2" height="15.0" fill="rgb(242,18,11)" rx="2" ry="2" />
<text  x="765.09" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (4 samples, 0.08%)</title><rect x="280.9" y="133" width="1.0" height="15.0" fill="rgb(244,11,0)" rx="2" ry="2" />
<text  x="283.93" y="143.5" ></text>
</g>
<g >
<title>bytes.makeSlice (3 samples, 0.06%)</title><rect x="168.0" y="245" width="0.7" height="15.0" fill="rgb(253,29,32)" rx="2" ry="2" />
<text  x="170.98" y="255.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (2 samples, 0.04%)</title><rect x="277.2" y="117" width="0.5" height="15.0" fill="rgb(234,43,47)" rx="2" ry="2" />
<text  x="280.20" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (2 samples, 0.04%)</title><rect x="168.0" y="197" width="0.5" height="15.0" fill="rgb(214,7,35)" rx="2" ry="2" />
<text  x="170.98" y="207.5" ></text>
</g>
<g >
<title>runtime.usleep (6 samples, 0.13%)</title><rect x="779.7" y="245" width="1.5" height="15.0" fill="rgb(205,57,53)" rx="2" ry="2" />
<text  x="782.75" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (2 samples, 0.04%)</title><rect x="168.0" y="165" width="0.5" height="15.0" fill="rgb(240,61,0)" rx="2" ry="2" />
<text  x="170.98" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (2 samples, 0.04%)</title><rect x="271.0" y="197" width="0.5" height="15.0" fill="rgb(222,228,9)" rx="2" ry="2" />
<text  x="273.98" y="207.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.02%)</title><rect x="358.8" y="181" width="0.2" height="15.0" fill="rgb(225,96,35)" rx="2" ry="2" />
<text  x="361.80" y="191.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (3 samples, 0.06%)</title><rect x="1180.0" y="325" width="0.8" height="15.0" fill="rgb(211,39,30)" rx="2" ry="2" />
<text  x="1183.05" y="335.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1,605 samples, 33.84%)</title><rect x="779.7" y="325" width="399.4" height="15.0" fill="rgb(221,158,48)" rx="2" ry="2" />
<text  x="782.75" y="335.5" >runtime.entersyscallblock_handoff</text>
</g>
<g >
<title>runtime/pprof.profileWriter (1 samples, 0.02%)</title><rect x="1189.8" y="357" width="0.2" height="15.0" fill="rgb(218,101,6)" rx="2" ry="2" />
<text  x="1192.75" y="367.5" ></text>
</g>
<g >
<title>runtime.readvarint (1 samples, 0.02%)</title><rect x="358.6" y="165" width="0.2" height="15.0" fill="rgb(231,94,44)" rx="2" ry="2" />
<text  x="361.55" y="175.5" ></text>
</g>
<g >
<title>runtime.sellock (2 samples, 0.04%)</title><rect x="356.3" y="245" width="0.5" height="15.0" fill="rgb(247,163,53)" rx="2" ry="2" />
<text  x="359.31" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (2 samples, 0.04%)</title><rect x="272.7" y="165" width="0.5" height="15.0" fill="rgb(237,170,35)" rx="2" ry="2" />
<text  x="275.72" y="175.5" ></text>
</g>
<g >
<title>runtime.chanrecv (2 samples, 0.04%)</title><rect x="268.2" y="325" width="0.5" height="15.0" fill="rgb(249,36,18)" rx="2" ry="2" />
<text  x="271.24" y="335.5" ></text>
</g>
<g >
<title>runtime.sendDirect (1 samples, 0.02%)</title><rect x="285.4" y="213" width="0.3" height="15.0" fill="rgb(217,228,34)" rx="2" ry="2" />
<text  x="288.41" y="223.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (5 samples, 0.11%)</title><rect x="727.8" y="325" width="1.2" height="15.0" fill="rgb(238,128,40)" rx="2" ry="2" />
<text  x="730.75" y="335.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.02%)</title><rect x="165.2" y="37" width="0.3" height="15.0" fill="rgb(217,186,3)" rx="2" ry="2" />
<text  x="168.24" y="47.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="12.7" y="181" width="0.3" height="15.0" fill="rgb(231,167,48)" rx="2" ry="2" />
<text  x="15.74" y="191.5" ></text>
</g>
<g >
<title>net.(*conn).SetWriteDeadline (5 samples, 0.11%)</title><rect x="174.0" y="277" width="1.2" height="15.0" fill="rgb(210,143,42)" rx="2" ry="2" />
<text  x="176.95" y="287.5" ></text>
</g>
<g >
<title>runtime.releasem (1 samples, 0.02%)</title><rect x="268.5" y="277" width="0.2" height="15.0" fill="rgb(236,168,20)" rx="2" ry="2" />
<text  x="271.49" y="287.5" ></text>
</g>
<g >
<title>runtime.kevent (2 samples, 0.04%)</title><rect x="727.8" y="261" width="0.5" height="15.0" fill="rgb(252,50,27)" rx="2" ry="2" />
<text  x="730.75" y="271.5" ></text>
</g>
<g >
<title>runtime.funcdata (1 samples, 0.02%)</title><rect x="169.7" y="101" width="0.3" height="15.0" fill="rgb(247,159,52)" rx="2" ry="2" />
<text  x="172.72" y="111.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="362.0" y="309" width="0.3" height="15.0" fill="rgb(216,13,11)" rx="2" ry="2" />
<text  x="365.03" y="319.5" ></text>
</g>
<g >
<title>runtime.markroot (7 samples, 0.15%)</title><rect x="358.1" y="293" width="1.7" height="15.0" fill="rgb(250,191,52)" rx="2" ry="2" />
<text  x="361.05" y="303.5" ></text>
</g>
<g >
<title>net/http.HandlerFunc.ServeHTTP (354 samples, 7.46%)</title><rect x="268.7" y="309" width="88.1" height="15.0" fill="rgb(232,61,32)" rx="2" ry="2" />
<text  x="271.74" y="319.5" >net/http.H..</text>
</g>
<g >
<title>bytes.(*Buffer).grow (3 samples, 0.06%)</title><rect x="168.0" y="261" width="0.7" height="15.0" fill="rgb(238,219,14)" rx="2" ry="2" />
<text  x="170.98" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (1 samples, 0.02%)</title><rect x="276.7" y="101" width="0.2" height="15.0" fill="rgb(227,50,49)" rx="2" ry="2" />
<text  x="279.70" y="111.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.02%)</title><rect x="1189.5" y="325" width="0.3" height="15.0" fill="rgb(252,32,4)" rx="2" ry="2" />
<text  x="1192.50" y="335.5" ></text>
</g>
<g >
<title>runtime.schedule (3 samples, 0.06%)</title><rect x="727.8" y="309" width="0.7" height="15.0" fill="rgb(211,204,42)" rx="2" ry="2" />
<text  x="730.75" y="319.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.02%)</title><rect x="1180.8" y="293" width="0.2" height="15.0" fill="rgb(252,124,12)" rx="2" ry="2" />
<text  x="1183.79" y="303.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="374.2" y="277" width="0.3" height="15.0" fill="rgb(226,135,16)" rx="2" ry="2" />
<text  x="377.23" y="287.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="168.2" y="117" width="0.3" height="15.0" fill="rgb(244,47,35)" rx="2" ry="2" />
<text  x="171.23" y="127.5" ></text>
</g>
<g >
<title>runtime.makeslice (3 samples, 0.06%)</title><rect x="276.9" y="149" width="0.8" height="15.0" fill="rgb(206,193,48)" rx="2" ry="2" />
<text  x="279.95" y="159.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).wait (2 samples, 0.04%)</title><rect x="12.2" y="165" width="0.5" height="15.0" fill="rgb(228,79,42)" rx="2" ry="2" />
<text  x="15.24" y="175.5" ></text>
</g>
<g >
<title>runtime.kevent (101 samples, 2.13%)</title><rect x="737.0" y="277" width="25.1" height="15.0" fill="rgb(206,151,45)" rx="2" ry="2" />
<text  x="739.96" y="287.5" >r..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (3 samples, 0.06%)</title><rect x="269.7" y="197" width="0.8" height="15.0" fill="rgb(235,178,35)" rx="2" ry="2" />
<text  x="272.73" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.02%)</title><rect x="277.9" y="133" width="0.3" height="15.0" fill="rgb(239,14,6)" rx="2" ry="2" />
<text  x="280.94" y="143.5" ></text>
</g>
<g >
<title>runtime.mstart (1,661 samples, 35.02%)</title><rect x="776.0" y="357" width="413.3" height="15.0" fill="rgb(224,91,12)" rx="2" ry="2" />
<text  x="779.02" y="367.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.02%)</title><rect x="168.0" y="101" width="0.2" height="15.0" fill="rgb(253,150,34)" rx="2" ry="2" />
<text  x="170.98" y="111.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (3 samples, 0.06%)</title><rect x="269.7" y="245" width="0.8" height="15.0" fill="rgb(220,183,3)" rx="2" ry="2" />
<text  x="272.73" y="255.5" ></text>
</g>
<g >
<title>reflect.(*rtype).String (2 samples, 0.04%)</title><rect x="273.7" y="165" width="0.5" height="15.0" fill="rgb(212,2,36)" rx="2" ry="2" />
<text  x="276.71" y="175.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="265.0" y="165" width="0.3" height="15.0" fill="rgb(238,131,43)" rx="2" ry="2" />
<text  x="268.01" y="175.5" ></text>
</g>
<g >
<title>runtime.notetsleepg (1 samples, 0.02%)</title><rect x="1189.5" y="341" width="0.3" height="15.0" fill="rgb(207,76,29)" rx="2" ry="2" />
<text  x="1192.50" y="351.5" ></text>
</g>
<g >
<title>syscall.Read (382 samples, 8.05%)</title><rect x="71.2" y="181" width="95.0" height="15.0" fill="rgb(249,148,22)" rx="2" ry="2" />
<text  x="74.20" y="191.5" >syscall.Read</text>
</g>
<g >
<title>runtime.markroot.func1 (6 samples, 0.13%)</title><rect x="358.1" y="277" width="1.4" height="15.0" fill="rgb(214,95,4)" rx="2" ry="2" />
<text  x="361.05" y="287.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (7 samples, 0.15%)</title><rect x="358.1" y="357" width="1.7" height="15.0" fill="rgb(205,40,20)" rx="2" ry="2" />
<text  x="361.05" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="1179.6" y="261" width="0.2" height="15.0" fill="rgb(218,3,32)" rx="2" ry="2" />
<text  x="1182.55" y="271.5" ></text>
</g>
<g >
<title>runtime.ready (32 samples, 0.67%)</title><rect x="1181.0" y="309" width="8.0" height="15.0" fill="rgb(211,80,1)" rx="2" ry="2" />
<text  x="1184.04" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="283.4" y="149" width="0.3" height="15.0" fill="rgb(227,200,20)" rx="2" ry="2" />
<text  x="286.42" y="159.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (1 samples, 0.02%)</title><rect x="169.7" y="181" width="0.3" height="15.0" fill="rgb(205,89,25)" rx="2" ry="2" />
<text  x="172.72" y="191.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).decref (1 samples, 0.02%)</title><rect x="174.2" y="213" width="0.2" height="15.0" fill="rgb(215,33,26)" rx="2" ry="2" />
<text  x="177.20" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUTF8StringValue (1 samples, 0.02%)</title><rect x="272.2" y="133" width="0.3" height="15.0" fill="rgb(228,13,43)" rx="2" ry="2" />
<text  x="275.22" y="143.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.02%)</title><rect x="12.7" y="165" width="0.3" height="15.0" fill="rgb(225,129,29)" rx="2" ry="2" />
<text  x="15.74" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="170.2" y="277" width="0.3" height="15.0" fill="rgb(208,196,32)" rx="2" ry="2" />
<text  x="173.22" y="287.5" ></text>
</g>
<g >
<title>runtime.freedefer (234 samples, 4.93%)</title><rect x="13.0" y="165" width="58.2" height="15.0" fill="rgb(219,75,26)" rx="2" ry="2" />
<text  x="15.99" y="175.5" >runtim..</text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="359.3" y="165" width="0.2" height="15.0" fill="rgb(244,60,38)" rx="2" ry="2" />
<text  x="362.30" y="175.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (621 samples, 13.09%)</title><rect x="11.7" y="213" width="154.5" height="15.0" fill="rgb(215,197,12)" rx="2" ry="2" />
<text  x="14.74" y="223.5" >net.(*netFD).Read</text>
</g>
<g >
<title>runtime.markrootSpans (1 samples, 0.02%)</title><rect x="359.5" y="277" width="0.3" height="15.0" fill="rgb(232,120,3)" rx="2" ry="2" />
<text  x="362.55" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.02%)</title><rect x="282.4" y="133" width="0.3" height="15.0" fill="rgb(225,44,20)" rx="2" ry="2" />
<text  x="285.42" y="143.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profileBuilder).addCPUData (1 samples, 0.02%)</title><rect x="1189.8" y="341" width="0.2" height="15.0" fill="rgb(249,75,34)" rx="2" ry="2" />
<text  x="1192.75" y="351.5" ></text>
</g>
<g >
<title>runtime.gopark (2 samples, 0.04%)</title><rect x="268.2" y="293" width="0.5" height="15.0" fill="rgb(216,12,28)" rx="2" ry="2" />
<text  x="271.24" y="303.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="165.2" y="53" width="0.3" height="15.0" fill="rgb(214,78,33)" rx="2" ry="2" />
<text  x="168.24" y="63.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.02%)</title><rect x="272.0" y="117" width="0.2" height="15.0" fill="rgb(207,106,43)" rx="2" ry="2" />
<text  x="274.97" y="127.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="279.2" y="149" width="0.5" height="15.0" fill="rgb(246,7,39)" rx="2" ry="2" />
<text  x="282.19" y="159.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="283.4" y="165" width="0.3" height="15.0" fill="rgb(223,104,17)" rx="2" ry="2" />
<text  x="286.42" y="175.5" ></text>
</g>
<g >
<title>bytes.makeSlice (5 samples, 0.11%)</title><rect x="168.7" y="245" width="1.3" height="15.0" fill="rgb(247,83,16)" rx="2" ry="2" />
<text  x="171.73" y="255.5" ></text>
</g>
<g >
<title>runtime.stopm (1,418 samples, 29.90%)</title><rect x="375.0" y="325" width="352.8" height="15.0" fill="rgb(221,12,8)" rx="2" ry="2" />
<text  x="377.97" y="335.5" >runtime.stopm</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (6 samples, 0.13%)</title><rect x="270.5" y="245" width="1.5" height="15.0" fill="rgb(234,144,5)" rx="2" ry="2" />
<text  x="273.48" y="255.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).waitRead (2 samples, 0.04%)</title><rect x="12.2" y="181" width="0.5" height="15.0" fill="rgb(219,103,33)" rx="2" ry="2" />
<text  x="15.24" y="191.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="169.2" y="149" width="0.3" height="15.0" fill="rgb(212,124,1)" rx="2" ry="2" />
<text  x="172.22" y="159.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.02%)</title><rect x="167.0" y="245" width="0.2" height="15.0" fill="rgb(205,7,42)" rx="2" ry="2" />
<text  x="169.99" y="255.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="284.9" y="149" width="0.3" height="15.0" fill="rgb(225,198,9)" rx="2" ry="2" />
<text  x="287.91" y="159.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="359.8" y="325" width="0.2" height="15.0" fill="rgb(235,118,31)" rx="2" ry="2" />
<text  x="362.80" y="335.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeUnlock (1 samples, 0.02%)</title><rect x="175.4" y="229" width="0.3" height="15.0" fill="rgb(224,162,24)" rx="2" ry="2" />
<text  x="178.44" y="239.5" ></text>
</g>
<g >
<title>runtime.semrelease (1 samples, 0.02%)</title><rect x="168.5" y="165" width="0.2" height="15.0" fill="rgb(241,214,1)" rx="2" ry="2" />
<text  x="171.48" y="175.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1,599 samples, 33.71%)</title><rect x="781.2" y="277" width="397.9" height="15.0" fill="rgb(222,100,10)" rx="2" ry="2" />
<text  x="784.24" y="287.5" >runtime.notewakeup</text>
</g>
<g >
<title>runtime.gcMarkTermination.func4 (1 samples, 0.02%)</title><rect x="1180.8" y="325" width="0.2" height="15.0" fill="rgb(236,28,46)" rx="2" ry="2" />
<text  x="1183.79" y="335.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).grow (5 samples, 0.11%)</title><rect x="168.7" y="261" width="1.3" height="15.0" fill="rgb(242,200,38)" rx="2" ry="2" />
<text  x="171.73" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="276.5" y="133" width="0.4" height="15.0" fill="rgb(243,213,33)" rx="2" ry="2" />
<text  x="279.45" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (2 samples, 0.04%)</title><rect x="168.7" y="133" width="0.5" height="15.0" fill="rgb(241,146,26)" rx="2" ry="2" />
<text  x="171.73" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (1 samples, 0.02%)</title><rect x="362.5" y="309" width="0.3" height="15.0" fill="rgb(226,189,19)" rx="2" ry="2" />
<text  x="365.53" y="319.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).decref (1 samples, 0.02%)</title><rect x="174.2" y="197" width="0.2" height="15.0" fill="rgb(249,101,44)" rx="2" ry="2" />
<text  x="177.20" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="357.8" y="277" width="0.3" height="15.0" fill="rgb(216,159,32)" rx="2" ry="2" />
<text  x="360.81" y="287.5" ></text>
</g>
<g >
<title>runtime.timerproc (1 samples, 0.02%)</title><rect x="1189.5" y="357" width="0.3" height="15.0" fill="rgb(252,74,20)" rx="2" ry="2" />
<text  x="1192.50" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="730.5" y="229" width="0.2" height="15.0" fill="rgb(208,23,50)" rx="2" ry="2" />
<text  x="733.49" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (22 samples, 0.46%)</title><rect x="368.3" y="245" width="5.4" height="15.0" fill="rgb(207,26,50)" rx="2" ry="2" />
<text  x="371.25" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (5 samples, 0.11%)</title><rect x="729.5" y="245" width="1.2" height="15.0" fill="rgb(230,31,2)" rx="2" ry="2" />
<text  x="732.49" y="255.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="167.5" y="181" width="0.2" height="15.0" fill="rgb(250,188,13)" rx="2" ry="2" />
<text  x="170.48" y="191.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.02%)</title><rect x="170.2" y="245" width="0.3" height="15.0" fill="rgb(246,12,8)" rx="2" ry="2" />
<text  x="173.22" y="255.5" ></text>
</g>
<g >
<title>runtime.unlock (2 samples, 0.04%)</title><rect x="1179.3" y="293" width="0.5" height="15.0" fill="rgb(221,187,43)" rx="2" ry="2" />
<text  x="1182.30" y="303.5" ></text>
</g>
<g >
<title>runtime.netpoll (2 samples, 0.04%)</title><rect x="727.8" y="277" width="0.5" height="15.0" fill="rgb(232,50,53)" rx="2" ry="2" />
<text  x="730.75" y="287.5" ></text>
</g>
<g >
<title>runtime.duffzero (1 samples, 0.02%)</title><rect x="285.7" y="261" width="0.2" height="15.0" fill="rgb(212,24,46)" rx="2" ry="2" />
<text  x="288.66" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (1,646 samples, 34.70%)</title><rect x="779.7" y="341" width="409.6" height="15.0" fill="rgb(229,117,11)" rx="2" ry="2" />
<text  x="782.75" y="351.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.getitab (2 samples, 0.04%)</title><rect x="282.9" y="149" width="0.5" height="15.0" fill="rgb(209,77,42)" rx="2" ry="2" />
<text  x="285.92" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenWS.func1 (354 samples, 7.46%)</title><rect x="268.7" y="293" width="88.1" height="15.0" fill="rgb(238,75,45)" rx="2" ry="2" />
<text  x="271.74" y="303.5" >hslam.com/..</text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="775.8" y="245" width="0.2" height="15.0" fill="rgb(215,112,28)" rx="2" ry="2" />
<text  x="778.77" y="255.5" ></text>
</g>
<g >
<title>runtime.reflectcallmove (1 samples, 0.02%)</title><rect x="274.5" y="133" width="0.2" height="15.0" fill="rgb(237,106,28)" rx="2" ry="2" />
<text  x="277.46" y="143.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.02%)</title><rect x="357.8" y="341" width="0.3" height="15.0" fill="rgb(206,98,45)" rx="2" ry="2" />
<text  x="360.81" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).removeNode (1 samples, 0.02%)</title><rect x="169.0" y="37" width="0.2" height="15.0" fill="rgb(216,203,16)" rx="2" ry="2" />
<text  x="171.98" y="47.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Name (2 samples, 0.04%)</title><rect x="273.7" y="181" width="0.5" height="15.0" fill="rgb(246,65,54)" rx="2" ry="2" />
<text  x="276.71" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.02%)</title><rect x="281.7" y="101" width="0.2" height="15.0" fill="rgb(214,227,50)" rx="2" ry="2" />
<text  x="284.68" y="111.5" ></text>
</g>
<g >
<title>reflect.New (3 samples, 0.06%)</title><rect x="278.9" y="181" width="0.8" height="15.0" fill="rgb(214,76,17)" rx="2" ry="2" />
<text  x="281.94" y="191.5" ></text>
</g>
<g >
<title>runtime.park_m (189 samples, 3.98%)</title><rect x="729.0" y="341" width="47.0" height="15.0" fill="rgb(223,200,50)" rx="2" ry="2" />
<text  x="732.00" y="351.5" >runt..</text>
</g>
<g >
<title>runtime.exitsyscall (8 samples, 0.17%)</title><rect x="265.3" y="181" width="1.9" height="15.0" fill="rgb(224,147,26)" rx="2" ry="2" />
<text  x="268.26" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.02%)</title><rect x="271.5" y="181" width="0.2" height="15.0" fill="rgb(218,100,21)" rx="2" ry="2" />
<text  x="274.48" y="191.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (3 samples, 0.06%)</title><rect x="284.7" y="181" width="0.7" height="15.0" fill="rgb(226,176,31)" rx="2" ry="2" />
<text  x="287.66" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce.func1 (1 samples, 0.02%)</title><rect x="357.8" y="213" width="0.3" height="15.0" fill="rgb(231,40,25)" rx="2" ry="2" />
<text  x="360.81" y="223.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (3 samples, 0.06%)</title><rect x="278.2" y="181" width="0.7" height="15.0" fill="rgb(238,48,34)" rx="2" ry="2" />
<text  x="281.19" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.02%)</title><rect x="271.5" y="197" width="0.2" height="15.0" fill="rgb(225,221,51)" rx="2" ry="2" />
<text  x="274.48" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.06%)</title><rect x="168.0" y="213" width="0.7" height="15.0" fill="rgb(253,160,27)" rx="2" ry="2" />
<text  x="170.98" y="223.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="168.5" y="197" width="0.2" height="15.0" fill="rgb(231,228,14)" rx="2" ry="2" />
<text  x="171.48" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1,413 samples, 29.79%)</title><rect x="375.5" y="277" width="351.5" height="15.0" fill="rgb(233,217,39)" rx="2" ry="2" />
<text  x="378.47" y="287.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.sysmon (15 samples, 0.32%)</title><rect x="776.0" y="325" width="3.7" height="15.0" fill="rgb(225,73,8)" rx="2" ry="2" />
<text  x="779.02" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeBoolValueNoZero (1 samples, 0.02%)</title><rect x="271.5" y="165" width="0.2" height="15.0" fill="rgb(222,155,18)" rx="2" ry="2" />
<text  x="274.48" y="175.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.02%)</title><rect x="284.2" y="245" width="0.2" height="15.0" fill="rgb(246,110,38)" rx="2" ry="2" />
<text  x="287.16" y="255.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*messageReader).Read (1 samples, 0.02%)</title><rect x="170.0" y="261" width="0.2" height="15.0" fill="rgb(236,202,20)" rx="2" ry="2" />
<text  x="172.97" y="271.5" ></text>
</g>
<g >
<title>runtime.notewakeup (5 samples, 0.11%)</title><rect x="729.5" y="261" width="1.2" height="15.0" fill="rgb(212,130,46)" rx="2" ry="2" />
<text  x="732.49" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (1 samples, 0.02%)</title><rect x="357.8" y="325" width="0.3" height="15.0" fill="rgb(216,79,0)" rx="2" ry="2" />
<text  x="360.81" y="335.5" ></text>
</g>
<g >
<title>syscall.read (382 samples, 8.05%)</title><rect x="71.2" y="165" width="95.0" height="15.0" fill="rgb(226,125,18)" rx="2" ry="2" />
<text  x="74.20" y="175.5" >syscall.read</text>
</g>
<g >
<title>runtime.step (1 samples, 0.02%)</title><rect x="358.6" y="181" width="0.2" height="15.0" fill="rgb(216,114,12)" rx="2" ry="2" />
<text  x="361.55" y="191.5" ></text>
</g>
<g >
<title>all (4,743 samples, 100%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(211,212,1)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>internal/poll.setDeadlineImpl (5 samples, 0.11%)</title><rect x="174.0" y="229" width="1.2" height="15.0" fill="rgb(236,126,19)" rx="2" ry="2" />
<text  x="176.95" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.02%)</title><rect x="270.2" y="165" width="0.3" height="15.0" fill="rgb(226,208,41)" rx="2" ry="2" />
<text  x="273.23" y="175.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="374.2" y="261" width="0.3" height="15.0" fill="rgb(220,52,12)" rx="2" ry="2" />
<text  x="377.23" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC.func1 (1 samples, 0.02%)</title><rect x="283.9" y="245" width="0.3" height="15.0" fill="rgb(238,161,1)" rx="2" ry="2" />
<text  x="286.92" y="255.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (624 samples, 13.16%)</title><rect x="11.2" y="261" width="155.3" height="15.0" fill="rgb(205,224,30)" rx="2" ry="2" />
<text  x="14.24" y="271.5" >bufio.(*Reader).Peek</text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="373.7" y="293" width="0.3" height="15.0" fill="rgb(234,114,33)" rx="2" ry="2" />
<text  x="376.73" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (5 samples, 0.11%)</title><rect x="280.9" y="149" width="1.3" height="15.0" fill="rgb(219,146,26)" rx="2" ry="2" />
<text  x="283.93" y="159.5" ></text>
</g>
<g >
<title>io/ioutil.ReadAll (9 samples, 0.19%)</title><rect x="168.0" y="309" width="2.2" height="15.0" fill="rgb(235,155,8)" rx="2" ry="2" />
<text  x="170.98" y="319.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (2 samples, 0.04%)</title><rect x="279.2" y="133" width="0.5" height="15.0" fill="rgb(245,170,47)" rx="2" ry="2" />
<text  x="282.19" y="143.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (4 samples, 0.08%)</title><rect x="275.2" y="133" width="1.0" height="15.0" fill="rgb(242,198,16)" rx="2" ry="2" />
<text  x="278.21" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (1 samples, 0.02%)</title><rect x="169.0" y="69" width="0.2" height="15.0" fill="rgb(224,128,38)" rx="2" ry="2" />
<text  x="171.98" y="79.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (621 samples, 13.09%)</title><rect x="11.7" y="197" width="154.5" height="15.0" fill="rgb(210,208,3)" rx="2" ry="2" />
<text  x="14.74" y="207.5" >internal/poll.(*FD)..</text>
</g>
<g >
<title>runtime.semasleep (22 samples, 0.46%)</title><rect x="368.3" y="261" width="5.4" height="15.0" fill="rgb(231,95,50)" rx="2" ry="2" />
<text  x="371.25" y="271.5" ></text>
</g>
<g >
<title>reflect.(*rtype).exportedMethods (2 samples, 0.04%)</title><rect x="280.2" y="165" width="0.5" height="15.0" fill="rgb(238,208,49)" rx="2" ry="2" />
<text  x="283.18" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="169.0" y="117" width="0.2" height="15.0" fill="rgb(219,140,35)" rx="2" ry="2" />
<text  x="171.98" y="127.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="1180.8" y="261" width="0.2" height="15.0" fill="rgb(252,106,30)" rx="2" ry="2" />
<text  x="1183.79" y="271.5" ></text>
</g>
<g >
<title>runtime.resetspinning (1 samples, 0.02%)</title><rect x="775.8" y="309" width="0.2" height="15.0" fill="rgb(232,214,26)" rx="2" ry="2" />
<text  x="778.77" y="319.5" ></text>
</g>
<g >
<title>runtime.bgsweep (1 samples, 0.02%)</title><rect x="357.8" y="357" width="0.3" height="15.0" fill="rgb(238,101,47)" rx="2" ry="2" />
<text  x="360.81" y="367.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="267.5" y="277" width="0.2" height="15.0" fill="rgb(247,71,36)" rx="2" ry="2" />
<text  x="270.50" y="287.5" ></text>
</g>
<g >
<title>runtime.goready (3 samples, 0.06%)</title><rect x="284.7" y="213" width="0.7" height="15.0" fill="rgb(230,131,37)" rx="2" ry="2" />
<text  x="287.66" y="223.5" ></text>
</g>
<g >
<title>reflect.funcLayout (6 samples, 0.13%)</title><rect x="274.7" y="149" width="1.5" height="15.0" fill="rgb(222,145,22)" rx="2" ry="2" />
<text  x="277.71" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (1 samples, 0.02%)</title><rect x="357.8" y="293" width="0.3" height="15.0" fill="rgb(211,79,25)" rx="2" ry="2" />
<text  x="360.81" y="303.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwunlock (1 samples, 0.02%)</title><rect x="175.4" y="213" width="0.3" height="15.0" fill="rgb(233,215,11)" rx="2" ry="2" />
<text  x="178.44" y="223.5" ></text>
</g>
<g >
<title>reflect.packEface (1 samples, 0.02%)</title><rect x="279.9" y="149" width="0.3" height="15.0" fill="rgb(238,219,4)" rx="2" ry="2" />
<text  x="282.93" y="159.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).ReadMessage (644 samples, 13.58%)</title><rect x="10.0" y="325" width="160.2" height="15.0" fill="rgb(214,186,7)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >github.com/gorilla/w..</text>
</g>
<g >
<title>runtime.exitsyscallfast (1 samples, 0.02%)</title><rect x="166.0" y="117" width="0.2" height="15.0" fill="rgb(233,85,16)" rx="2" ry="2" />
<text  x="168.99" y="127.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="1179.8" y="229" width="0.2" height="15.0" fill="rgb(210,110,9)" rx="2" ry="2" />
<text  x="1182.80" y="239.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareWrite (1 samples, 0.02%)</title><rect x="175.7" y="229" width="0.2" height="15.0" fill="rgb(253,62,8)" rx="2" ry="2" />
<text  x="178.69" y="239.5" ></text>
</g>
<g >
<title>runtime.semawakeup (32 samples, 0.67%)</title><rect x="1181.0" y="245" width="8.0" height="15.0" fill="rgb(209,97,6)" rx="2" ry="2" />
<text  x="1184.04" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Marshal (2 samples, 0.04%)</title><rect x="272.7" y="181" width="0.5" height="15.0" fill="rgb(243,11,7)" rx="2" ry="2" />
<text  x="275.72" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.02%)</title><rect x="168.0" y="133" width="0.2" height="15.0" fill="rgb(223,80,31)" rx="2" ry="2" />
<text  x="170.98" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrain (1 samples, 0.02%)</title><rect x="1179.8" y="309" width="0.2" height="15.0" fill="rgb(223,130,53)" rx="2" ry="2" />
<text  x="1182.80" y="319.5" ></text>
</g>
<g >
<title>runtime.runqempty (1 samples, 0.02%)</title><rect x="164.7" y="69" width="0.3" height="15.0" fill="rgb(215,158,0)" rx="2" ry="2" />
<text  x="167.75" y="79.5" ></text>
</g>
<g >
<title>reflect.(*rtype).uncommon (2 samples, 0.04%)</title><rect x="280.2" y="149" width="0.5" height="15.0" fill="rgb(221,50,21)" rx="2" ry="2" />
<text  x="283.18" y="159.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="1189.5" y="309" width="0.3" height="15.0" fill="rgb(211,228,32)" rx="2" ry="2" />
<text  x="1192.50" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (3 samples, 0.06%)</title><rect x="168.7" y="181" width="0.8" height="15.0" fill="rgb(232,55,20)" rx="2" ry="2" />
<text  x="171.73" y="191.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="169.5" y="165" width="0.2" height="15.0" fill="rgb(249,139,23)" rx="2" ry="2" />
<text  x="172.47" y="175.5" ></text>
</g>
<g >
<title>net/http.serverHandler.ServeHTTP (354 samples, 7.46%)</title><rect x="268.7" y="341" width="88.1" height="15.0" fill="rgb(215,19,51)" rx="2" ry="2" />
<text  x="271.74" y="351.5" >net/http.s..</text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.02%)</title><rect x="1189.0" y="261" width="0.3" height="15.0" fill="rgb(221,197,31)" rx="2" ry="2" />
<text  x="1192.00" y="271.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Discard (2 samples, 0.04%)</title><rect x="10.7" y="261" width="0.5" height="15.0" fill="rgb(218,11,39)" rx="2" ry="2" />
<text  x="13.75" y="271.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).NextReader (634 samples, 13.37%)</title><rect x="10.2" y="309" width="157.8" height="15.0" fill="rgb(213,37,36)" rx="2" ry="2" />
<text  x="13.25" y="319.5" >github.com/gorilla/w..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.02%)</title><rect x="282.4" y="149" width="0.3" height="15.0" fill="rgb(251,211,17)" rx="2" ry="2" />
<text  x="285.42" y="159.5" ></text>
</g>
<g >
<title>runtime.funcdata (1 samples, 0.02%)</title><rect x="358.8" y="165" width="0.2" height="15.0" fill="rgb(243,223,53)" rx="2" ry="2" />
<text  x="361.80" y="175.5" ></text>
</g>
<g >
<title>runtime.callers.func1 (1 samples, 0.02%)</title><rect x="169.7" y="133" width="0.3" height="15.0" fill="rgb(241,74,14)" rx="2" ry="2" />
<text  x="172.72" y="143.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="167.2" y="149" width="0.3" height="15.0" fill="rgb(231,173,45)" rx="2" ry="2" />
<text  x="170.23" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="775.8" y="229" width="0.2" height="15.0" fill="rgb(218,161,44)" rx="2" ry="2" />
<text  x="778.77" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (2 samples, 0.04%)</title><rect x="168.7" y="149" width="0.5" height="15.0" fill="rgb(243,185,51)" rx="2" ry="2" />
<text  x="171.73" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="169.5" y="133" width="0.2" height="15.0" fill="rgb(218,66,9)" rx="2" ry="2" />
<text  x="172.47" y="143.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (2 samples, 0.04%)</title><rect x="279.7" y="181" width="0.5" height="15.0" fill="rgb(243,40,17)" rx="2" ry="2" />
<text  x="282.69" y="191.5" ></text>
</g>
<g >
<title>runtime.nanotime (11 samples, 0.23%)</title><rect x="776.0" y="309" width="2.8" height="15.0" fill="rgb(226,94,23)" rx="2" ry="2" />
<text  x="779.02" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Marshal (2 samples, 0.04%)</title><rect x="271.0" y="213" width="0.5" height="15.0" fill="rgb(254,47,39)" rx="2" ry="2" />
<text  x="273.98" y="223.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.02%)</title><rect x="1179.8" y="261" width="0.2" height="15.0" fill="rgb(228,29,33)" rx="2" ry="2" />
<text  x="1182.80" y="271.5" ></text>
</g>
<g >
<title>runtime.chanrecv1 (1 samples, 0.02%)</title><rect x="267.2" y="277" width="0.3" height="15.0" fill="rgb(242,51,51)" rx="2" ry="2" />
<text  x="270.25" y="287.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (1,479 samples, 31.18%)</title><rect x="359.8" y="341" width="368.0" height="15.0" fill="rgb(207,179,20)" rx="2" ry="2" />
<text  x="362.80" y="351.5" >runtime.exitsyscall0</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).write (380 samples, 8.01%)</title><rect x="173.5" y="293" width="94.5" height="15.0" fill="rgb(219,206,34)" rx="2" ry="2" />
<text  x="176.45" y="303.5" >github.com/..</text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (6 samples, 0.13%)</title><rect x="164.5" y="101" width="1.5" height="15.0" fill="rgb(228,214,18)" rx="2" ry="2" />
<text  x="167.50" y="111.5" ></text>
</g>
<g >
<title>runtime.mallocgc (4 samples, 0.08%)</title><rect x="167.0" y="277" width="1.0" height="15.0" fill="rgb(217,45,16)" rx="2" ry="2" />
<text  x="169.99" y="287.5" ></text>
</g>
<g >
<title>runtime.runqput (1 samples, 0.02%)</title><rect x="285.2" y="149" width="0.2" height="15.0" fill="rgb(237,33,17)" rx="2" ry="2" />
<text  x="288.16" y="159.5" ></text>
</g>
<g >
<title>runtime.schedule (51 samples, 1.08%)</title><rect x="362.3" y="325" width="12.7" height="15.0" fill="rgb(247,26,42)" rx="2" ry="2" />
<text  x="365.28" y="335.5" ></text>
</g>
<g >
<title>runtime.lock (6 samples, 0.13%)</title><rect x="779.7" y="277" width="1.5" height="15.0" fill="rgb(244,181,34)" rx="2" ry="2" />
<text  x="782.75" y="287.5" ></text>
</g>
<g >
<title>net.(*conn).Write (370 samples, 7.80%)</title><rect x="175.2" y="277" width="92.0" height="15.0" fill="rgb(232,85,31)" rx="2" ry="2" />
<text  x="178.20" y="287.5" >net.(*conn)..</text>
</g>
<g >
<title>bytes.(*Buffer).Grow (3 samples, 0.06%)</title><rect x="168.0" y="277" width="0.7" height="15.0" fill="rgb(229,207,21)" rx="2" ry="2" />
<text  x="170.98" y="287.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.02%)</title><rect x="1189.0" y="309" width="0.3" height="15.0" fill="rgb(220,17,14)" rx="2" ry="2" />
<text  x="1192.00" y="319.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).SetWriteDeadline (5 samples, 0.11%)</title><rect x="174.0" y="245" width="1.2" height="15.0" fill="rgb(251,49,28)" rx="2" ry="2" />
<text  x="176.95" y="255.5" ></text>
</g>
<g >
<title>runtime.osyield (6 samples, 0.13%)</title><rect x="779.7" y="261" width="1.5" height="15.0" fill="rgb(254,117,50)" rx="2" ry="2" />
<text  x="782.75" y="271.5" ></text>
</g>
<g >
<title>runtime.chansend (1 samples, 0.02%)</title><rect x="170.2" y="325" width="0.3" height="15.0" fill="rgb(212,145,27)" rx="2" ry="2" />
<text  x="173.22" y="335.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.02%)</title><rect x="728.3" y="261" width="0.2" height="15.0" fill="rgb(218,129,4)" rx="2" ry="2" />
<text  x="731.25" y="271.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (1 samples, 0.02%)</title><rect x="1189.0" y="325" width="0.3" height="15.0" fill="rgb(222,18,43)" rx="2" ry="2" />
<text  x="1192.00" y="335.5" ></text>
</g>
<g >
<title>bufio.(*Reader).readErr (1 samples, 0.02%)</title><rect x="166.2" y="245" width="0.3" height="15.0" fill="rgb(226,114,33)" rx="2" ry="2" />
<text  x="169.24" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="362.8" y="261" width="0.2" height="15.0" fill="rgb(247,212,13)" rx="2" ry="2" />
<text  x="365.78" y="271.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="268.0" y="309" width="0.2" height="15.0" fill="rgb(208,123,48)" rx="2" ry="2" />
<text  x="270.99" y="319.5" ></text>
</g>
<g >
<title>runtime.notesleep (22 samples, 0.46%)</title><rect x="368.3" y="277" width="5.4" height="15.0" fill="rgb(209,133,13)" rx="2" ry="2" />
<text  x="371.25" y="287.5" ></text>
</g>
<g >
<title>reflect.Value.Type (1 samples, 0.02%)</title><rect x="277.7" y="181" width="0.2" height="15.0" fill="rgb(205,190,43)" rx="2" ry="2" />
<text  x="280.70" y="191.5" ></text>
</g>
<g >
<title>runtime.notetsleep (3 samples, 0.06%)</title><rect x="1180.0" y="293" width="0.8" height="15.0" fill="rgb(207,210,41)" rx="2" ry="2" />
<text  x="1183.05" y="303.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="170.7" y="245" width="0.3" height="15.0" fill="rgb(231,229,32)" rx="2" ry="2" />
<text  x="173.72" y="255.5" ></text>
</g>
<g >
<title>runtime.findrunnable (186 samples, 3.92%)</title><rect x="729.5" y="309" width="46.3" height="15.0" fill="rgb(215,162,49)" rx="2" ry="2" />
<text  x="732.49" y="319.5" >runt..</text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.02%)</title><rect x="358.6" y="197" width="0.2" height="15.0" fill="rgb(211,49,36)" rx="2" ry="2" />
<text  x="361.55" y="207.5" ></text>
</g>
<g >
<title>runtime._System (3 samples, 0.06%)</title><rect x="356.8" y="357" width="0.8" height="15.0" fill="rgb(246,61,17)" rx="2" ry="2" />
<text  x="359.81" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (50 samples, 1.05%)</title><rect x="763.3" y="245" width="12.5" height="15.0" fill="rgb(207,118,23)" rx="2" ry="2" />
<text  x="766.33" y="255.5" ></text>
</g>
<g >
<title>runtime.callers (1 samples, 0.02%)</title><rect x="169.7" y="165" width="0.3" height="15.0" fill="rgb(229,152,9)" rx="2" ry="2" />
<text  x="172.72" y="175.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="727.5" y="277" width="0.3" height="15.0" fill="rgb(248,158,26)" rx="2" ry="2" />
<text  x="730.50" y="287.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (370 samples, 7.80%)</title><rect x="175.2" y="261" width="92.0" height="15.0" fill="rgb(217,211,50)" rx="2" ry="2" />
<text  x="178.20" y="271.5" >net.(*netFD..</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="728.3" y="245" width="0.2" height="15.0" fill="rgb(219,18,14)" rx="2" ry="2" />
<text  x="731.25" y="255.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="169.2" y="133" width="0.3" height="15.0" fill="rgb(237,2,51)" rx="2" ry="2" />
<text  x="172.22" y="143.5" ></text>
</g>
<g >
<title>runtime.usleep (4 samples, 0.08%)</title><rect x="778.8" y="309" width="0.9" height="15.0" fill="rgb(213,99,27)" rx="2" ry="2" />
<text  x="781.75" y="319.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="168.0" y="117" width="0.2" height="15.0" fill="rgb(231,49,17)" rx="2" ry="2" />
<text  x="170.98" y="127.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (3 samples, 0.06%)</title><rect x="167.0" y="261" width="0.7" height="15.0" fill="rgb(214,101,13)" rx="2" ry="2" />
<text  x="169.99" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Size (1 samples, 0.02%)</title><rect x="271.5" y="213" width="0.2" height="15.0" fill="rgb(245,127,46)" rx="2" ry="2" />
<text  x="274.48" y="223.5" ></text>
</g>
<g >
<title>runtime.scanblock (2 samples, 0.04%)</title><rect x="359.0" y="181" width="0.5" height="15.0" fill="rgb(226,57,9)" rx="2" ry="2" />
<text  x="362.05" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.04%)</title><rect x="167.2" y="197" width="0.5" height="15.0" fill="rgb(214,7,35)" rx="2" ry="2" />
<text  x="170.23" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="1179.1" y="277" width="0.2" height="15.0" fill="rgb(241,115,4)" rx="2" ry="2" />
<text  x="1182.05" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (3 samples, 0.06%)</title><rect x="168.7" y="165" width="0.8" height="15.0" fill="rgb(228,135,48)" rx="2" ry="2" />
<text  x="171.73" y="175.5" ></text>
</g>
<g >
<title>syscall.syscall (268 samples, 5.65%)</title><rect x="200.6" y="197" width="66.6" height="15.0" fill="rgb(209,52,49)" rx="2" ry="2" />
<text  x="203.57" y="207.5" >syscall..</text>
</g>
<g >
<title>runtime.scanframeworker (3 samples, 0.06%)</title><rect x="358.8" y="197" width="0.7" height="15.0" fill="rgb(205,102,50)" rx="2" ry="2" />
<text  x="361.80" y="207.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (1 samples, 0.02%)</title><rect x="357.6" y="357" width="0.2" height="15.0" fill="rgb(237,155,28)" rx="2" ry="2" />
<text  x="360.56" y="367.5" ></text>
</g>
<g >
<title>runtime.osyield (6 samples, 0.13%)</title><rect x="360.5" y="309" width="1.5" height="15.0" fill="rgb(250,118,39)" rx="2" ry="2" />
<text  x="363.54" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WriteConn (393 samples, 8.29%)</title><rect x="171.0" y="357" width="97.7" height="15.0" fill="rgb(245,67,51)" rx="2" ry="2" />
<text  x="173.97" y="367.5" >hslam.com/m..</text>
</g>
<g >
<title>reflect.(*rtype).nameOff (1 samples, 0.02%)</title><rect x="274.0" y="149" width="0.2" height="15.0" fill="rgb(228,229,6)" rx="2" ry="2" />
<text  x="276.96" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.02%)</title><rect x="277.9" y="149" width="0.3" height="15.0" fill="rgb(222,173,32)" rx="2" ry="2" />
<text  x="280.94" y="159.5" ></text>
</g>
<g >
<title>net.(*conn).Read (621 samples, 13.09%)</title><rect x="11.7" y="229" width="154.5" height="15.0" fill="rgb(213,0,45)" rx="2" ry="2" />
<text  x="14.74" y="239.5" >net.(*conn).Read</text>
</g>
<g >
<title>runtime.pthread_cond_signal (29 samples, 0.61%)</title><rect x="1181.0" y="229" width="7.3" height="15.0" fill="rgb(227,97,25)" rx="2" ry="2" />
<text  x="1184.04" y="239.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="167.7" y="261" width="0.3" height="15.0" fill="rgb(207,197,22)" rx="2" ry="2" />
<text  x="170.73" y="271.5" ></text>
</g>
<g >
<title>runtime.semrelease1 (1 samples, 0.02%)</title><rect x="167.0" y="213" width="0.2" height="15.0" fill="rgb(231,136,14)" rx="2" ry="2" />
<text  x="169.99" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (3 samples, 0.06%)</title><rect x="269.7" y="229" width="0.8" height="15.0" fill="rgb(231,170,1)" rx="2" ry="2" />
<text  x="272.73" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="170.7" y="293" width="0.3" height="15.0" fill="rgb(235,74,16)" rx="2" ry="2" />
<text  x="173.72" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="775.8" y="261" width="0.2" height="15.0" fill="rgb(245,89,5)" rx="2" ry="2" />
<text  x="778.77" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (31 samples, 0.65%)</title><rect x="1171.3" y="245" width="7.8" height="15.0" fill="rgb(220,144,41)" rx="2" ry="2" />
<text  x="1174.34" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (3 samples, 0.06%)</title><rect x="278.2" y="197" width="0.7" height="15.0" fill="rgb(254,26,51)" rx="2" ry="2" />
<text  x="281.19" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (2 samples, 0.04%)</title><rect x="272.0" y="165" width="0.5" height="15.0" fill="rgb(218,140,41)" rx="2" ry="2" />
<text  x="274.97" y="175.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (1 samples, 0.02%)</title><rect x="170.0" y="245" width="0.2" height="15.0" fill="rgb(228,99,40)" rx="2" ry="2" />
<text  x="172.97" y="255.5" ></text>
</g>
<g >
<title>syscall.Write (269 samples, 5.67%)</title><rect x="200.3" y="229" width="66.9" height="15.0" fill="rgb(210,171,36)" rx="2" ry="2" />
<text  x="203.32" y="239.5" >syscall..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="169.5" y="181" width="0.2" height="15.0" fill="rgb(220,71,49)" rx="2" ry="2" />
<text  x="172.47" y="191.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).advanceFrame (627 samples, 13.22%)</title><rect x="10.5" y="293" width="156.0" height="15.0" fill="rgb(215,170,11)" rx="2" ry="2" />
<text  x="13.50" y="303.5" >github.com/gorilla/w..</text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="170.7" y="309" width="0.3" height="15.0" fill="rgb(213,44,47)" rx="2" ry="2" />
<text  x="173.72" y="319.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (3 samples, 0.06%)</title><rect x="278.9" y="165" width="0.8" height="15.0" fill="rgb(251,165,14)" rx="2" ry="2" />
<text  x="281.94" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (4 samples, 0.08%)</title><rect x="270.7" y="229" width="1.0" height="15.0" fill="rgb(208,127,2)" rx="2" ry="2" />
<text  x="273.73" y="239.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (7 samples, 0.15%)</title><rect x="358.1" y="325" width="1.7" height="15.0" fill="rgb(224,192,37)" rx="2" ry="2" />
<text  x="361.05" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (48 samples, 1.01%)</title><rect x="272.0" y="245" width="11.9" height="15.0" fill="rgb(244,44,27)" rx="2" ry="2" />
<text  x="274.97" y="255.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="1179.1" y="293" width="0.2" height="15.0" fill="rgb(241,189,5)" rx="2" ry="2" />
<text  x="1182.05" y="303.5" ></text>
</g>
<g >
<title>runtime.nanotime (3 samples, 0.06%)</title><rect x="363.0" y="293" width="0.8" height="15.0" fill="rgb(222,5,32)" rx="2" ry="2" />
<text  x="366.03" y="303.5" ></text>
</g>
<g >
<title>reflect.Value.Call (14 samples, 0.30%)</title><rect x="274.2" y="181" width="3.5" height="15.0" fill="rgb(212,45,51)" rx="2" ry="2" />
<text  x="277.21" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="362.8" y="277" width="0.2" height="15.0" fill="rgb(223,8,16)" rx="2" ry="2" />
<text  x="365.78" y="287.5" ></text>
</g>
<g >
<title>runtime.chansend1 (5 samples, 0.11%)</title><rect x="284.4" y="261" width="1.3" height="15.0" fill="rgb(218,155,34)" rx="2" ry="2" />
<text  x="287.41" y="271.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="1179.8" y="245" width="0.2" height="15.0" fill="rgb(239,51,53)" rx="2" ry="2" />
<text  x="1182.80" y="255.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.02%)</title><rect x="1189.0" y="293" width="0.3" height="15.0" fill="rgb(212,31,30)" rx="2" ry="2" />
<text  x="1192.00" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeVarintS32ValueNoZero (1 samples, 0.02%)</title><rect x="282.4" y="117" width="0.3" height="15.0" fill="rgb(252,198,47)" rx="2" ry="2" />
<text  x="285.42" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (7 samples, 0.15%)</title><rect x="358.1" y="341" width="1.7" height="15.0" fill="rgb(227,143,5)" rx="2" ry="2" />
<text  x="361.05" y="351.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (2 samples, 0.04%)</title><rect x="282.9" y="133" width="0.5" height="15.0" fill="rgb(222,125,21)" rx="2" ry="2" />
<text  x="285.92" y="143.5" ></text>
</g>
<g >
<title>runtime.lock (9 samples, 0.19%)</title><rect x="360.0" y="325" width="2.3" height="15.0" fill="rgb(220,38,8)" rx="2" ry="2" />
<text  x="363.04" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.04%)</title><rect x="727.0" y="277" width="0.5" height="15.0" fill="rgb(223,125,25)" rx="2" ry="2" />
<text  x="730.01" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (19 samples, 0.40%)</title><rect x="273.5" y="197" width="4.7" height="15.0" fill="rgb(242,194,34)" rx="2" ry="2" />
<text  x="276.47" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (7 samples, 0.15%)</title><rect x="278.9" y="197" width="1.8" height="15.0" fill="rgb(227,8,54)" rx="2" ry="2" />
<text  x="281.94" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).pickFreeSpan (1 samples, 0.02%)</title><rect x="169.0" y="53" width="0.2" height="15.0" fill="rgb(248,78,51)" rx="2" ry="2" />
<text  x="171.98" y="63.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="169.7" y="149" width="0.3" height="15.0" fill="rgb(251,202,2)" rx="2" ry="2" />
<text  x="172.72" y="159.5" ></text>
</g>
<g >
<title>runtime.(*stackScanState).buildIndex (1 samples, 0.02%)</title><rect x="358.1" y="229" width="0.2" height="15.0" fill="rgb(223,119,18)" rx="2" ry="2" />
<text  x="361.05" y="239.5" ></text>
</g>
<g >
<title>runtime.(*waitq).enqueue (1 samples, 0.02%)</title><rect x="355.6" y="245" width="0.2" height="15.0" fill="rgb(244,5,21)" rx="2" ry="2" />
<text  x="358.57" y="255.5" ></text>
</g>
<g >
<title>reflect.typedmemclrpartial (1 samples, 0.02%)</title><rect x="276.2" y="149" width="0.3" height="15.0" fill="rgb(247,193,9)" rx="2" ry="2" />
<text  x="279.20" y="159.5" ></text>
</g>
<g >
<title>runtime.send (1 samples, 0.02%)</title><rect x="170.2" y="309" width="0.3" height="15.0" fill="rgb(226,189,12)" rx="2" ry="2" />
<text  x="173.22" y="319.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="277.9" y="181" width="0.3" height="15.0" fill="rgb(223,198,22)" rx="2" ry="2" />
<text  x="280.94" y="191.5" ></text>
</g>
<g >
<title>callRet (1 samples, 0.02%)</title><rect x="274.5" y="149" width="0.2" height="15.0" fill="rgb(210,155,43)" rx="2" ry="2" />
<text  x="277.46" y="159.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="169.5" y="69" width="0.2" height="15.0" fill="rgb(232,152,39)" rx="2" ry="2" />
<text  x="172.47" y="79.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_fast64 (1 samples, 0.02%)</title><rect x="1189.8" y="309" width="0.2" height="15.0" fill="rgb(237,94,29)" rx="2" ry="2" />
<text  x="1192.75" y="319.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.06%)</title><rect x="1180.0" y="261" width="0.8" height="15.0" fill="rgb(220,1,49)" rx="2" ry="2" />
<text  x="1183.05" y="271.5" ></text>
</g>
<g >
<title>runtime.semrelease1 (1 samples, 0.02%)</title><rect x="168.5" y="149" width="0.2" height="15.0" fill="rgb(250,81,4)" rx="2" ry="2" />
<text  x="171.48" y="159.5" ></text>
</g>
<g >
<title>runtime.usleep (5 samples, 0.11%)</title><rect x="762.1" y="261" width="1.2" height="15.0" fill="rgb(236,90,26)" rx="2" ry="2" />
<text  x="765.09" y="271.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="169.2" y="117" width="0.3" height="15.0" fill="rgb(236,224,53)" rx="2" ry="2" />
<text  x="172.22" y="127.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (1 samples, 0.02%)</title><rect x="1179.8" y="325" width="0.2" height="15.0" fill="rgb(240,19,5)" rx="2" ry="2" />
<text  x="1182.80" y="335.5" ></text>
</g>
<g >
<title>runtime.scanstack (6 samples, 0.13%)</title><rect x="358.1" y="245" width="1.4" height="15.0" fill="rgb(208,108,35)" rx="2" ry="2" />
<text  x="361.05" y="255.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="169.7" y="117" width="0.3" height="15.0" fill="rgb(211,148,13)" rx="2" ry="2" />
<text  x="172.72" y="127.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (3 samples, 0.06%)</title><rect x="1180.0" y="277" width="0.8" height="15.0" fill="rgb(248,226,36)" rx="2" ry="2" />
<text  x="1183.05" y="287.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.02%)</title><rect x="174.9" y="213" width="0.3" height="15.0" fill="rgb(209,115,13)" rx="2" ry="2" />
<text  x="177.95" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="165.5" y="37" width="0.2" height="15.0" fill="rgb(254,13,45)" rx="2" ry="2" />
<text  x="168.49" y="47.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (3 samples, 0.06%)</title><rect x="1188.3" y="229" width="0.7" height="15.0" fill="rgb(231,133,6)" rx="2" ry="2" />
<text  x="1191.26" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="271.7" y="213" width="0.3" height="15.0" fill="rgb(211,129,32)" rx="2" ry="2" />
<text  x="274.72" y="223.5" ></text>
</g>
<g >
<title>runtime.findrunnable (45 samples, 0.95%)</title><rect x="362.8" y="309" width="11.2" height="15.0" fill="rgb(220,40,3)" rx="2" ry="2" />
<text  x="365.78" y="319.5" ></text>
</g>
<g >
<title>runtime.ready (3 samples, 0.06%)</title><rect x="284.7" y="165" width="0.7" height="15.0" fill="rgb(247,112,26)" rx="2" ry="2" />
<text  x="287.66" y="175.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.02%)</title><rect x="167.2" y="165" width="0.3" height="15.0" fill="rgb(208,21,33)" rx="2" ry="2" />
<text  x="170.23" y="175.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.02%)</title><rect x="728.3" y="277" width="0.2" height="15.0" fill="rgb(213,218,54)" rx="2" ry="2" />
<text  x="731.25" y="287.5" ></text>
</g>
<g >
<title>runtime.injectglist (5 samples, 0.11%)</title><rect x="729.5" y="293" width="1.2" height="15.0" fill="rgb(237,27,3)" rx="2" ry="2" />
<text  x="732.49" y="303.5" ></text>
</g>
<g >
<title>runtime.casgstatus (2 samples, 0.04%)</title><rect x="729.0" y="293" width="0.5" height="15.0" fill="rgb(228,223,19)" rx="2" ry="2" />
<text  x="732.00" y="303.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (2 samples, 0.04%)</title><rect x="264.8" y="181" width="0.5" height="15.0" fill="rgb(231,136,43)" rx="2" ry="2" />
<text  x="267.76" y="191.5" ></text>
</g>
<g >
<title>runtime.startm (32 samples, 0.67%)</title><rect x="1181.0" y="277" width="8.0" height="15.0" fill="rgb(244,123,41)" rx="2" ry="2" />
<text  x="1184.04" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (42 samples, 0.89%)</title><rect x="273.5" y="213" width="10.4" height="15.0" fill="rgb(240,191,34)" rx="2" ry="2" />
<text  x="276.47" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.02%)</title><rect x="1189.5" y="293" width="0.3" height="15.0" fill="rgb(225,56,48)" rx="2" ry="2" />
<text  x="1192.50" y="303.5" ></text>
</g>
<g >
<title>runtime.stopm (50 samples, 1.05%)</title><rect x="763.3" y="293" width="12.5" height="15.0" fill="rgb(243,144,26)" rx="2" ry="2" />
<text  x="766.33" y="303.5" ></text>
</g>
<g >
<title>runtime.resolveNameOff (1 samples, 0.02%)</title><rect x="274.0" y="117" width="0.2" height="15.0" fill="rgb(206,136,33)" rx="2" ry="2" />
<text  x="276.96" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="728.3" y="229" width="0.2" height="15.0" fill="rgb(241,67,23)" rx="2" ry="2" />
<text  x="731.25" y="239.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="374.2" y="293" width="0.3" height="15.0" fill="rgb(243,4,18)" rx="2" ry="2" />
<text  x="377.23" y="303.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).ReadFrom (6 samples, 0.13%)</title><rect x="168.7" y="277" width="1.5" height="15.0" fill="rgb(216,204,12)" rx="2" ry="2" />
<text  x="171.73" y="287.5" ></text>
</g>
<g >
<title>runtime.semrelease (1 samples, 0.02%)</title><rect x="167.0" y="229" width="0.2" height="15.0" fill="rgb(236,224,25)" rx="2" ry="2" />
<text  x="169.99" y="239.5" ></text>
</g>
<g >
<title>runtime.notesleep (50 samples, 1.05%)</title><rect x="763.3" y="277" width="12.5" height="15.0" fill="rgb(217,115,21)" rx="2" ry="2" />
<text  x="766.33" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.02%)</title><rect x="169.0" y="101" width="0.2" height="15.0" fill="rgb(245,185,30)" rx="2" ry="2" />
<text  x="171.98" y="111.5" ></text>
</g>
<g >
<title>reflect.valueInterface (2 samples, 0.04%)</title><rect x="279.7" y="165" width="0.5" height="15.0" fill="rgb(208,107,44)" rx="2" ry="2" />
<text  x="282.69" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (3 samples, 0.06%)</title><rect x="269.7" y="181" width="0.8" height="15.0" fill="rgb(233,24,24)" rx="2" ry="2" />
<text  x="272.73" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.02%)</title><rect x="276.7" y="117" width="0.2" height="15.0" fill="rgb(216,208,45)" rx="2" ry="2" />
<text  x="279.70" y="127.5" ></text>
</g>
<g >
<title>runtime.netpoll (18 samples, 0.38%)</title><rect x="363.8" y="293" width="4.5" height="15.0" fill="rgb(246,149,10)" rx="2" ry="2" />
<text  x="366.78" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (2 samples, 0.04%)</title><rect x="168.0" y="149" width="0.5" height="15.0" fill="rgb(234,140,8)" rx="2" ry="2" />
<text  x="170.98" y="159.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="1189.0" y="277" width="0.3" height="15.0" fill="rgb(226,26,7)" rx="2" ry="2" />
<text  x="1192.00" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (2 samples, 0.04%)</title><rect x="272.0" y="213" width="0.5" height="15.0" fill="rgb(231,35,24)" rx="2" ry="2" />
<text  x="274.97" y="223.5" ></text>
</g>
<g >
<title>runtime.findrunnable (3 samples, 0.06%)</title><rect x="727.8" y="293" width="0.7" height="15.0" fill="rgb(243,85,38)" rx="2" ry="2" />
<text  x="730.75" y="303.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.02%)</title><rect x="169.5" y="85" width="0.2" height="15.0" fill="rgb(250,13,7)" rx="2" ry="2" />
<text  x="172.47" y="95.5" ></text>
</g>
<g >
<title>runtime.goparkunlock (2 samples, 0.04%)</title><rect x="268.2" y="309" width="0.5" height="15.0" fill="rgb(244,192,34)" rx="2" ry="2" />
<text  x="271.24" y="319.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.02%)</title><rect x="775.8" y="277" width="0.2" height="15.0" fill="rgb(239,72,39)" rx="2" ry="2" />
<text  x="778.77" y="287.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="283.7" y="165" width="0.2" height="15.0" fill="rgb(248,190,48)" rx="2" ry="2" />
<text  x="286.67" y="175.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="164.2" y="117" width="0.3" height="15.0" fill="rgb(252,228,23)" rx="2" ry="2" />
<text  x="167.25" y="127.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.02%)</title><rect x="168.5" y="181" width="0.2" height="15.0" fill="rgb(237,180,54)" rx="2" ry="2" />
<text  x="171.48" y="191.5" ></text>
</g>
<g >
<title>runtime.aeshashbody (1 samples, 0.02%)</title><rect x="278.7" y="133" width="0.2" height="15.0" fill="rgb(236,85,5)" rx="2" ry="2" />
<text  x="281.69" y="143.5" ></text>
</g>
<g >
<title>syscall.write (269 samples, 5.67%)</title><rect x="200.3" y="213" width="66.9" height="15.0" fill="rgb(241,20,35)" rx="2" ry="2" />
<text  x="203.32" y="223.5" >syscall..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (13 samples, 0.27%)</title><rect x="280.7" y="197" width="3.2" height="15.0" fill="rgb(236,218,0)" rx="2" ry="2" />
<text  x="283.68" y="207.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (1 samples, 0.02%)</title><rect x="170.2" y="261" width="0.3" height="15.0" fill="rgb(220,74,31)" rx="2" ry="2" />
<text  x="173.22" y="271.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).read (627 samples, 13.22%)</title><rect x="10.5" y="277" width="156.0" height="15.0" fill="rgb(212,204,36)" rx="2" ry="2" />
<text  x="13.50" y="287.5" >github.com/gorilla/w..</text>
</g>
<g >
<title>runtime.goready (1 samples, 0.02%)</title><rect x="170.2" y="293" width="0.3" height="15.0" fill="rgb(242,218,1)" rx="2" ry="2" />
<text  x="173.22" y="303.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="170.7" y="229" width="0.3" height="15.0" fill="rgb(240,0,38)" rx="2" ry="2" />
<text  x="173.72" y="239.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="168.7" y="117" width="0.3" height="15.0" fill="rgb(228,27,26)" rx="2" ry="2" />
<text  x="171.73" y="127.5" ></text>
</g>
<g >
<title>runtime.gosched_m (5 samples, 0.11%)</title><rect x="727.8" y="341" width="1.2" height="15.0" fill="rgb(217,159,45)" rx="2" ry="2" />
<text  x="730.75" y="351.5" ></text>
</g>
<g >
<title>reflect.Value.call (14 samples, 0.30%)</title><rect x="274.2" y="165" width="3.5" height="15.0" fill="rgb(239,85,7)" rx="2" ry="2" />
<text  x="277.21" y="175.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollSetDeadline (2 samples, 0.04%)</title><rect x="174.4" y="213" width="0.5" height="15.0" fill="rgb(208,94,42)" rx="2" ry="2" />
<text  x="177.45" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.02%)</title><rect x="1180.8" y="277" width="0.2" height="15.0" fill="rgb(212,125,4)" rx="2" ry="2" />
<text  x="1183.79" y="287.5" ></text>
</g>
<g >
<title>runtime.gopark (1 samples, 0.02%)</title><rect x="356.1" y="245" width="0.2" height="15.0" fill="rgb(228,166,47)" rx="2" ry="2" />
<text  x="359.06" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (6 samples, 0.13%)</title><rect x="360.5" y="293" width="1.5" height="15.0" fill="rgb(211,134,19)" rx="2" ry="2" />
<text  x="363.54" y="303.5" ></text>
</g>
<g >
<title>reflect.resolveNameOff (1 samples, 0.02%)</title><rect x="274.0" y="133" width="0.2" height="15.0" fill="rgb(246,0,15)" rx="2" ry="2" />
<text  x="276.96" y="143.5" ></text>
</g>
<g >
<title>runtime.resetspinning (1 samples, 0.02%)</title><rect x="374.0" y="309" width="0.2" height="15.0" fill="rgb(240,165,53)" rx="2" ry="2" />
<text  x="376.98" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (2 samples, 0.04%)</title><rect x="272.0" y="149" width="0.5" height="15.0" fill="rgb(213,194,23)" rx="2" ry="2" />
<text  x="274.97" y="159.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="170.7" y="277" width="0.3" height="15.0" fill="rgb(241,164,39)" rx="2" ry="2" />
<text  x="173.72" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.02%)</title><rect x="271.2" y="149" width="0.3" height="15.0" fill="rgb(237,201,26)" rx="2" ry="2" />
<text  x="274.23" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrain (7 samples, 0.15%)</title><rect x="358.1" y="309" width="1.7" height="15.0" fill="rgb(215,143,51)" rx="2" ry="2" />
<text  x="361.05" y="319.5" ></text>
</g>
<g >
<title>runtime.send (5 samples, 0.11%)</title><rect x="284.4" y="229" width="1.3" height="15.0" fill="rgb(254,0,52)" rx="2" ry="2" />
<text  x="287.41" y="239.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="362.8" y="293" width="0.2" height="15.0" fill="rgb(222,130,0)" rx="2" ry="2" />
<text  x="365.78" y="303.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (8 samples, 0.17%)</title><rect x="265.3" y="165" width="1.9" height="15.0" fill="rgb(226,68,18)" rx="2" ry="2" />
<text  x="268.26" y="175.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (7 samples, 0.15%)</title><rect x="164.2" y="133" width="1.8" height="15.0" fill="rgb(219,3,42)" rx="2" ry="2" />
<text  x="167.25" y="143.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (2 samples, 0.04%)</title><rect x="278.4" y="165" width="0.5" height="15.0" fill="rgb(225,113,37)" rx="2" ry="2" />
<text  x="281.44" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (1 samples, 0.02%)</title><rect x="175.7" y="213" width="0.2" height="15.0" fill="rgb(221,213,16)" rx="2" ry="2" />
<text  x="178.69" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.02%)</title><rect x="357.8" y="261" width="0.3" height="15.0" fill="rgb(222,101,26)" rx="2" ry="2" />
<text  x="360.81" y="271.5" ></text>
</g>
<g >
<title>syscall.syscall (382 samples, 8.05%)</title><rect x="71.2" y="149" width="95.0" height="15.0" fill="rgb(229,173,40)" rx="2" ry="2" />
<text  x="74.20" y="159.5" >syscall.sys..</text>
</g>
<g >
<title>reflect.(*rtype).typeOff (1 samples, 0.02%)</title><rect x="277.7" y="165" width="0.2" height="15.0" fill="rgb(221,202,30)" rx="2" ry="2" />
<text  x="280.70" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.02%)</title><rect x="168.0" y="85" width="0.2" height="15.0" fill="rgb(247,161,49)" rx="2" ry="2" />
<text  x="170.98" y="95.5" ></text>
</g>
<g >
<title>runtime.runqgrab (5 samples, 0.11%)</title><rect x="762.1" y="277" width="1.2" height="15.0" fill="rgb(222,152,29)" rx="2" ry="2" />
<text  x="765.09" y="287.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollWait (2 samples, 0.04%)</title><rect x="12.2" y="149" width="0.5" height="15.0" fill="rgb(228,79,0)" rx="2" ry="2" />
<text  x="15.24" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="277.9" y="165" width="0.3" height="15.0" fill="rgb(251,88,9)" rx="2" ry="2" />
<text  x="280.94" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce (1 samples, 0.02%)</title><rect x="357.8" y="229" width="0.3" height="15.0" fill="rgb(230,77,44)" rx="2" ry="2" />
<text  x="360.81" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.06%)</title><rect x="276.9" y="133" width="0.8" height="15.0" fill="rgb(251,24,1)" rx="2" ry="2" />
<text  x="279.95" y="143.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.02%)</title><rect x="169.5" y="117" width="0.2" height="15.0" fill="rgb(227,143,15)" rx="2" ry="2" />
<text  x="172.47" y="127.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.02%)</title><rect x="283.7" y="149" width="0.2" height="15.0" fill="rgb(215,4,36)" rx="2" ry="2" />
<text  x="286.67" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (32 samples, 0.67%)</title><rect x="1181.0" y="261" width="8.0" height="15.0" fill="rgb(243,35,41)" rx="2" ry="2" />
<text  x="1184.04" y="271.5" ></text>
</g>
<g >
<title>runtime.(*semaRoot).dequeue (1 samples, 0.02%)</title><rect x="168.5" y="133" width="0.2" height="15.0" fill="rgb(237,14,11)" rx="2" ry="2" />
<text  x="171.48" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.02%)</title><rect x="1180.8" y="245" width="0.2" height="15.0" fill="rgb(223,176,30)" rx="2" ry="2" />
<text  x="1183.79" y="255.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.02%)</title><rect x="1180.8" y="309" width="0.2" height="15.0" fill="rgb(213,37,29)" rx="2" ry="2" />
<text  x="1183.79" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="1179.1" y="261" width="0.2" height="15.0" fill="rgb(245,200,35)" rx="2" ry="2" />
<text  x="1182.05" y="271.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.02%)</title><rect x="170.5" y="309" width="0.2" height="15.0" fill="rgb(223,117,1)" rx="2" ry="2" />
<text  x="173.47" y="319.5" ></text>
</g>
<g >
<title>runtime.makeslice (5 samples, 0.11%)</title><rect x="168.7" y="229" width="1.3" height="15.0" fill="rgb(238,208,13)" rx="2" ry="2" />
<text  x="171.73" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="272.2" y="101" width="0.3" height="15.0" fill="rgb(246,171,15)" rx="2" ry="2" />
<text  x="275.22" y="111.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeWSConn (354 samples, 7.46%)</title><rect x="268.7" y="277" width="88.1" height="15.0" fill="rgb(249,123,54)" rx="2" ry="2" />
<text  x="271.74" y="287.5" >hslam.com/..</text>
</g>
<g >
<title>runtime.handoffp (6 samples, 0.13%)</title><rect x="164.5" y="85" width="1.5" height="15.0" fill="rgb(247,225,50)" rx="2" ry="2" />
<text  x="167.50" y="95.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (2 samples, 0.04%)</title><rect x="271.0" y="165" width="0.5" height="15.0" fill="rgb(222,214,54)" rx="2" ry="2" />
<text  x="273.98" y="175.5" ></text>
</g>
<g >
<title>net/http.(*conn).serve (354 samples, 7.46%)</title><rect x="268.7" y="357" width="88.1" height="15.0" fill="rgb(229,169,48)" rx="2" ry="2" />
<text  x="271.74" y="367.5" >net/http.(..</text>
</g>
<g >
<title>runtime.unlock (2 samples, 0.04%)</title><rect x="728.5" y="309" width="0.5" height="15.0" fill="rgb(219,148,15)" rx="2" ry="2" />
<text  x="731.50" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (4 samples, 0.08%)</title><rect x="272.5" y="213" width="1.0" height="15.0" fill="rgb(212,87,51)" rx="2" ry="2" />
<text  x="275.47" y="223.5" ></text>
</g>
<g >
<title>runtime.deferreturn (234 samples, 4.93%)</title><rect x="13.0" y="181" width="58.2" height="15.0" fill="rgb(214,122,24)" rx="2" ry="2" />
<text  x="15.99" y="191.5" >runtim..</text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.02%)</title><rect x="357.8" y="245" width="0.3" height="15.0" fill="rgb(240,117,14)" rx="2" ry="2" />
<text  x="360.81" y="255.5" ></text>
</g>
<g >
<title>runtime.forEachP (3 samples, 0.06%)</title><rect x="1180.0" y="309" width="0.8" height="15.0" fill="rgb(232,162,45)" rx="2" ry="2" />
<text  x="1183.05" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (11 samples, 0.23%)</title><rect x="280.9" y="181" width="2.8" height="15.0" fill="rgb(247,160,53)" rx="2" ry="2" />
<text  x="283.93" y="191.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="273.2" y="165" width="0.3" height="15.0" fill="rgb(221,116,44)" rx="2" ry="2" />
<text  x="276.22" y="175.5" ></text>
</g>
<g >
<title>reflect.Value.Type (2 samples, 0.04%)</title><rect x="280.2" y="181" width="0.5" height="15.0" fill="rgb(236,15,10)" rx="2" ry="2" />
<text  x="283.18" y="191.5" ></text>
</g>
<g >
<title>runtime.startm (5 samples, 0.11%)</title><rect x="729.5" y="277" width="1.2" height="15.0" fill="rgb(248,36,10)" rx="2" ry="2" />
<text  x="732.49" y="287.5" ></text>
</g>
<g >
<title>runtime.nanotime (13 samples, 0.27%)</title><rect x="730.7" y="293" width="3.3" height="15.0" fill="rgb(228,200,28)" rx="2" ry="2" />
<text  x="733.74" y="303.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="165.7" y="53" width="0.3" height="15.0" fill="rgb(253,97,9)" rx="2" ry="2" />
<text  x="168.74" y="63.5" ></text>
</g>
<g >
<title>runtime.profilealloc (1 samples, 0.02%)</title><rect x="169.7" y="197" width="0.3" height="15.0" fill="rgb(212,145,37)" rx="2" ry="2" />
<text  x="172.72" y="207.5" ></text>
</g>
<g >
<title>runtime.syscall (1 samples, 0.02%)</title><rect x="1189.3" y="357" width="0.2" height="15.0" fill="rgb(224,74,7)" rx="2" ry="2" />
<text  x="1192.25" y="367.5" ></text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.04%)</title><rect x="170.5" y="341" width="0.5" height="15.0" fill="rgb(243,50,9)" rx="2" ry="2" />
<text  x="173.47" y="351.5" ></text>
</g>
<g >
<title>runtime.semasleep (50 samples, 1.05%)</title><rect x="763.3" y="261" width="12.5" height="15.0" fill="rgb(221,187,34)" rx="2" ry="2" />
<text  x="766.33" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WSConn.Write (387 samples, 8.16%)</title><rect x="172.0" y="341" width="96.2" height="15.0" fill="rgb(240,33,28)" rx="2" ry="2" />
<text  x="174.96" y="351.5" >hslam.com/m..</text>
</g>
<g >
<title>runtime.freedefer (98 samples, 2.07%)</title><rect x="175.9" y="213" width="24.4" height="15.0" fill="rgb(251,72,42)" rx="2" ry="2" />
<text  x="178.94" y="223.5" >r..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (48 samples, 1.01%)</title><rect x="272.0" y="229" width="11.9" height="15.0" fill="rgb(247,93,8)" rx="2" ry="2" />
<text  x="274.97" y="239.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (1 samples, 0.02%)</title><rect x="358.6" y="213" width="0.2" height="15.0" fill="rgb(230,42,33)" rx="2" ry="2" />
<text  x="361.55" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.02%)</title><rect x="169.0" y="85" width="0.2" height="15.0" fill="rgb(249,83,43)" rx="2" ry="2" />
<text  x="171.98" y="95.5" ></text>
</g>
<g >
<title>net.(*netFD).SetWriteDeadline (5 samples, 0.11%)</title><rect x="174.0" y="261" width="1.2" height="15.0" fill="rgb(250,129,38)" rx="2" ry="2" />
<text  x="176.95" y="271.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (2 samples, 0.04%)</title><rect x="276.5" y="149" width="0.4" height="15.0" fill="rgb(224,26,38)" rx="2" ry="2" />
<text  x="279.45" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (3 samples, 0.06%)</title><rect x="168.7" y="197" width="0.8" height="15.0" fill="rgb(242,225,1)" rx="2" ry="2" />
<text  x="171.73" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.06%)</title><rect x="284.7" y="197" width="0.7" height="15.0" fill="rgb(206,105,50)" rx="2" ry="2" />
<text  x="287.66" y="207.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.04%)</title><rect x="167.2" y="229" width="0.5" height="15.0" fill="rgb(248,197,34)" rx="2" ry="2" />
<text  x="170.23" y="239.5" ></text>
</g>
<g >
<title>runtime.gentraceback (5 samples, 0.11%)</title><rect x="358.3" y="229" width="1.2" height="15.0" fill="rgb(218,93,3)" rx="2" ry="2" />
<text  x="361.30" y="239.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="375.0" y="309" width="0.2" height="15.0" fill="rgb(252,226,34)" rx="2" ry="2" />
<text  x="377.97" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (2 samples, 0.04%)</title><rect x="168.0" y="181" width="0.5" height="15.0" fill="rgb(243,27,9)" rx="2" ry="2" />
<text  x="170.98" y="191.5" ></text>
</g>
<g >
<title>runtime.notesleep (1,417 samples, 29.88%)</title><rect x="375.2" y="309" width="352.6" height="15.0" fill="rgb(246,108,32)" rx="2" ry="2" />
<text  x="378.22" y="319.5" >runtime.notesleep</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.ReadConn (647 samples, 13.64%)</title><rect x="10.0" y="357" width="161.0" height="15.0" fill="rgb(210,28,18)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >hslam.com/mgit/Mort/..</text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.02%)</title><rect x="167.2" y="181" width="0.3" height="15.0" fill="rgb(235,210,27)" rx="2" ry="2" />
<text  x="170.23" y="191.5" ></text>
</g>
<g >
<title>runtime.chansend (5 samples, 0.11%)</title><rect x="284.4" y="245" width="1.3" height="15.0" fill="rgb(246,110,32)" rx="2" ry="2" />
<text  x="287.41" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (3 samples, 0.06%)</title><rect x="269.7" y="213" width="0.8" height="15.0" fill="rgb(240,80,19)" rx="2" ry="2" />
<text  x="272.73" y="223.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.02%)</title><rect x="272.2" y="117" width="0.3" height="15.0" fill="rgb(209,204,47)" rx="2" ry="2" />
<text  x="275.22" y="127.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.02%)</title><rect x="775.8" y="293" width="0.2" height="15.0" fill="rgb(248,73,45)" rx="2" ry="2" />
<text  x="778.77" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (1 samples, 0.02%)</title><rect x="281.9" y="133" width="0.3" height="15.0" fill="rgb(231,65,43)" rx="2" ry="2" />
<text  x="284.92" y="143.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.02%)</title><rect x="1179.8" y="277" width="0.2" height="15.0" fill="rgb(243,15,39)" rx="2" ry="2" />
<text  x="1182.80" y="287.5" ></text>
</g>
<g >
<title>reflect.resolveTypeOff (1 samples, 0.02%)</title><rect x="277.7" y="149" width="0.2" height="15.0" fill="rgb(232,161,49)" rx="2" ry="2" />
<text  x="280.70" y="159.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.02%)</title><rect x="273.2" y="181" width="0.3" height="15.0" fill="rgb(219,152,48)" rx="2" ry="2" />
<text  x="276.22" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.06%)</title><rect x="356.8" y="341" width="0.8" height="15.0" fill="rgb(219,179,11)" rx="2" ry="2" />
<text  x="359.81" y="351.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).prepWrite (1 samples, 0.02%)</title><rect x="172.7" y="309" width="0.3" height="15.0" fill="rgb(226,83,8)" rx="2" ry="2" />
<text  x="175.71" y="319.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="356.6" y="229" width="0.2" height="15.0" fill="rgb(207,106,17)" rx="2" ry="2" />
<text  x="359.56" y="239.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (1 samples, 0.02%)</title><rect x="374.2" y="309" width="0.3" height="15.0" fill="rgb(211,165,12)" rx="2" ry="2" />
<text  x="377.23" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (62 samples, 1.31%)</title><rect x="269.0" y="261" width="15.4" height="15.0" fill="rgb(208,15,40)" rx="2" ry="2" />
<text  x="271.99" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1,554 samples, 32.76%)</title><rect x="781.2" y="245" width="386.7" height="15.0" fill="rgb(208,113,6)" rx="2" ry="2" />
<text  x="784.24" y="255.5" >runtime.pthread_cond_signal</text>
</g>
<g >
<title>runtime.netpollblock (2 samples, 0.04%)</title><rect x="12.2" y="133" width="0.5" height="15.0" fill="rgb(251,65,8)" rx="2" ry="2" />
<text  x="15.24" y="143.5" ></text>
</g>
<g >
<title>runtime.scang (6 samples, 0.13%)</title><rect x="358.1" y="261" width="1.4" height="15.0" fill="rgb(237,99,50)" rx="2" ry="2" />
<text  x="361.05" y="271.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (273 samples, 5.76%)</title><rect x="287.6" y="245" width="68.0" height="15.0" fill="rgb(230,6,6)" rx="2" ry="2" />
<text  x="290.65" y="255.5" >runtime..</text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.02%)</title><rect x="278.7" y="149" width="0.2" height="15.0" fill="rgb(235,14,36)" rx="2" ry="2" />
<text  x="281.69" y="159.5" ></text>
</g>
<g >
<title>runtime.typeBitsBulkBarrier (1 samples, 0.02%)</title><rect x="285.4" y="197" width="0.3" height="15.0" fill="rgb(252,168,4)" rx="2" ry="2" />
<text  x="288.41" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.04%)</title><rect x="1179.3" y="277" width="0.5" height="15.0" fill="rgb(240,154,15)" rx="2" ry="2" />
<text  x="1182.30" y="287.5" ></text>
</g>
<g >
<title>runtime.semasleep (1,417 samples, 29.88%)</title><rect x="375.2" y="293" width="352.6" height="15.0" fill="rgb(231,221,35)" rx="2" ry="2" />
<text  x="378.22" y="303.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="270.2" y="149" width="0.3" height="15.0" fill="rgb(208,90,24)" rx="2" ry="2" />
<text  x="273.23" y="159.5" ></text>
</g>
<g >
<title>runtime.mcall (1,673 samples, 35.27%)</title><rect x="359.8" y="357" width="416.2" height="15.0" fill="rgb(228,51,23)" rx="2" ry="2" />
<text  x="362.80" y="367.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="167.2" y="245" width="0.5" height="15.0" fill="rgb(245,124,38)" rx="2" ry="2" />
<text  x="170.23" y="255.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (623 samples, 13.14%)</title><rect x="11.2" y="245" width="155.0" height="15.0" fill="rgb(221,116,11)" rx="2" ry="2" />
<text  x="14.24" y="255.5" >bufio.(*Reader).fill</text>
</g>
<g >
<title>runtime.execute (2 samples, 0.04%)</title><rect x="729.0" y="309" width="0.5" height="15.0" fill="rgb(208,81,53)" rx="2" ry="2" />
<text  x="732.00" y="319.5" ></text>
</g>
<g >
<title>runtime.mstart1 (15 samples, 0.32%)</title><rect x="776.0" y="341" width="3.7" height="15.0" fill="rgb(254,192,6)" rx="2" ry="2" />
<text  x="779.02" y="351.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="165.5" y="53" width="0.2" height="15.0" fill="rgb(209,22,13)" rx="2" ry="2" />
<text  x="168.49" y="63.5" ></text>
</g>
</g>
</svg>

