<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>runtime.gcMarkTermination.func3 (2 samples, 0.05%)</title><rect x="1189.2" y="357" width="0.5" height="15.0" fill="rgb(231,104,21)" rx="2" ry="2" />
<text  x="1192.20" y="367.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.02%)</title><rect x="414.0" y="373" width="0.2" height="15.0" fill="rgb(231,124,23)" rx="2" ry="2" />
<text  x="416.97" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.02%)</title><rect x="405.2" y="245" width="0.3" height="15.0" fill="rgb(253,21,32)" rx="2" ry="2" />
<text  x="408.19" y="255.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="197.8" y="133" width="0.2" height="15.0" fill="rgb(244,136,15)" rx="2" ry="2" />
<text  x="200.76" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (86 samples, 1.94%)</title><rect x="197.0" y="277" width="22.8" height="15.0" fill="rgb(216,214,5)" rx="2" ry="2" />
<text  x="199.96" y="287.5" >h..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="417.7" y="325" width="0.3" height="15.0" fill="rgb(250,37,44)" rx="2" ry="2" />
<text  x="420.69" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (4 samples, 0.09%)</title><rect x="192.7" y="229" width="1.1" height="15.0" fill="rgb(224,23,6)" rx="2" ry="2" />
<text  x="195.70" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="213.7" y="149" width="0.3" height="15.0" fill="rgb(207,205,48)" rx="2" ry="2" />
<text  x="216.71" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalInt32Value (2 samples, 0.05%)</title><rect x="193.2" y="197" width="0.6" height="15.0" fill="rgb(226,28,6)" rx="2" ry="2" />
<text  x="196.24" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (11 samples, 0.25%)</title><rect x="192.2" y="277" width="2.9" height="15.0" fill="rgb(206,19,28)" rx="2" ry="2" />
<text  x="195.17" y="287.5" ></text>
</g>
<g >
<title>runtime.freedefer (218 samples, 4.91%)</title><rect x="227.8" y="197" width="58.0" height="15.0" fill="rgb(235,208,43)" rx="2" ry="2" />
<text  x="230.81" y="207.5" >runtim..</text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="213.7" y="165" width="0.3" height="15.0" fill="rgb(207,177,52)" rx="2" ry="2" />
<text  x="216.71" y="175.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.05%)</title><rect x="739.0" y="325" width="0.5" height="15.0" fill="rgb(252,112,51)" rx="2" ry="2" />
<text  x="741.96" y="335.5" ></text>
</g>
<g >
<title>runtime.startm (1,399 samples, 31.53%)</title><rect x="814.2" y="325" width="372.1" height="15.0" fill="rgb(241,75,32)" rx="2" ry="2" />
<text  x="817.22" y="335.5" >runtime.startm</text>
</g>
<g >
<title>runtime.notewakeup (4 samples, 0.09%)</title><rect x="1186.3" y="325" width="1.0" height="15.0" fill="rgb(253,59,52)" rx="2" ry="2" />
<text  x="1189.28" y="335.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.02%)</title><rect x="212.9" y="165" width="0.3" height="15.0" fill="rgb(223,127,2)" rx="2" ry="2" />
<text  x="215.92" y="175.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="220.1" y="277" width="0.3" height="15.0" fill="rgb(233,96,43)" rx="2" ry="2" />
<text  x="223.10" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).Read (663 samples, 14.94%)</title><rect x="227.3" y="325" width="176.3" height="15.0" fill="rgb(241,140,20)" rx="2" ry="2" />
<text  x="230.28" y="335.5" >github.com/valyala/fas..</text>
</g>
<g >
<title>net.ipEmptyString (2 samples, 0.05%)</title><rect x="220.6" y="277" width="0.6" height="15.0" fill="rgb(228,162,40)" rx="2" ry="2" />
<text  x="223.63" y="287.5" ></text>
</g>
<g >
<title>time.Time.Sub (2 samples, 0.05%)</title><rect x="411.3" y="341" width="0.5" height="15.0" fill="rgb(215,210,3)" rx="2" ry="2" />
<text  x="414.31" y="351.5" ></text>
</g>
<g >
<title>runtime.stopm (49 samples, 1.10%)</title><rect x="785.2" y="325" width="13.1" height="15.0" fill="rgb(242,202,9)" rx="2" ry="2" />
<text  x="788.23" y="335.5" ></text>
</g>
<g >
<title>syscall.write (455 samples, 10.25%)</title><rect x="67.4" y="261" width="121.0" height="15.0" fill="rgb(217,187,25)" rx="2" ry="2" />
<text  x="70.44" y="271.5" >syscall.write</text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.02%)</title><rect x="1189.7" y="341" width="0.3" height="15.0" fill="rgb(225,120,1)" rx="2" ry="2" />
<text  x="1192.73" y="351.5" ></text>
</g>
<g >
<title>runtime.freedefer (206 samples, 4.64%)</title><rect x="12.7" y="261" width="54.7" height="15.0" fill="rgb(249,94,15)" rx="2" ry="2" />
<text  x="15.66" y="271.5" >runti..</text>
</g>
<g >
<title>runtime.markroot (2 samples, 0.05%)</title><rect x="414.5" y="325" width="0.5" height="15.0" fill="rgb(243,27,0)" rx="2" ry="2" />
<text  x="417.50" y="335.5" ></text>
</g>
<g >
<title>runtime.netpoll (144 samples, 3.25%)</title><rect x="746.9" y="325" width="38.3" height="15.0" fill="rgb(220,204,47)" rx="2" ry="2" />
<text  x="749.93" y="335.5" >run..</text>
</g>
<g >
<title>net.(*netFD).Write (665 samples, 14.99%)</title><rect x="11.6" y="309" width="176.8" height="15.0" fill="rgb(253,45,7)" rx="2" ry="2" />
<text  x="14.60" y="319.5" >net.(*netFD).Write</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).ConnectionClose (1 samples, 0.02%)</title><rect x="408.7" y="261" width="0.2" height="15.0" fill="rgb(221,39,41)" rx="2" ry="2" />
<text  x="411.65" y="271.5" ></text>
</g>
<g >
<title>runtime.heapBitsForAddr (1 samples, 0.02%)</title><rect x="224.1" y="261" width="0.3" height="15.0" fill="rgb(232,218,21)" rx="2" ry="2" />
<text  x="227.09" y="271.5" ></text>
</g>
<g >
<title>runtime.startm (22 samples, 0.50%)</title><rect x="733.1" y="309" width="5.9" height="15.0" fill="rgb(222,32,25)" rx="2" ry="2" />
<text  x="736.11" y="319.5" ></text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.02%)</title><rect x="732.8" y="309" width="0.3" height="15.0" fill="rgb(236,160,14)" rx="2" ry="2" />
<text  x="735.84" y="319.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.02%)</title><rect x="210.0" y="101" width="0.3" height="15.0" fill="rgb(222,16,50)" rx="2" ry="2" />
<text  x="212.99" y="111.5" ></text>
</g>
<g >
<title>runtime.aeshashbody (1 samples, 0.02%)</title><rect x="212.1" y="165" width="0.3" height="15.0" fill="rgb(235,51,34)" rx="2" ry="2" />
<text  x="215.12" y="175.5" ></text>
</g>
<g >
<title>github.com/buaazp/fasthttprouter.(*node).getValue (1 samples, 0.02%)</title><rect x="189.0" y="325" width="0.2" height="15.0" fill="rgb(244,13,0)" rx="2" ry="2" />
<text  x="191.98" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUTF8StringValue (2 samples, 0.05%)</title><rect x="197.8" y="165" width="0.5" height="15.0" fill="rgb(205,146,13)" rx="2" ry="2" />
<text  x="200.76" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).wait (1 samples, 0.02%)</title><rect x="227.3" y="197" width="0.2" height="15.0" fill="rgb(215,188,5)" rx="2" ry="2" />
<text  x="230.28" y="207.5" ></text>
</g>
<g >
<title>sync.(*entry).load (1 samples, 0.02%)</title><rect x="207.3" y="149" width="0.3" height="15.0" fill="rgb(216,228,52)" rx="2" ry="2" />
<text  x="210.33" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="1189.2" y="325" width="0.3" height="15.0" fill="rgb(254,199,51)" rx="2" ry="2" />
<text  x="1192.20" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.05%)</title><rect x="731.8" y="309" width="0.5" height="15.0" fill="rgb(244,64,34)" rx="2" ry="2" />
<text  x="734.78" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (4 samples, 0.09%)</title><rect x="218.5" y="213" width="1.1" height="15.0" fill="rgb(217,146,35)" rx="2" ry="2" />
<text  x="221.50" y="223.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (2 samples, 0.05%)</title><rect x="406.3" y="309" width="0.5" height="15.0" fill="rgb(225,175,16)" rx="2" ry="2" />
<text  x="409.26" y="319.5" ></text>
</g>
<g >
<title>runtime.(*maptype).indirectvalue (1 samples, 0.02%)</title><rect x="207.1" y="133" width="0.2" height="15.0" fill="rgb(228,29,29)" rx="2" ry="2" />
<text  x="210.07" y="143.5" ></text>
</g>
<g >
<title>syscall.read (435 samples, 9.80%)</title><rect x="285.8" y="197" width="115.7" height="15.0" fill="rgb(206,183,33)" rx="2" ry="2" />
<text  x="288.79" y="207.5" >syscall.read</text>
</g>
<g >
<title>runtime.scanobject (2 samples, 0.05%)</title><rect x="405.7" y="197" width="0.6" height="15.0" fill="rgb(231,148,19)" rx="2" ry="2" />
<text  x="408.73" y="207.5" ></text>
</g>
<g >
<title>net.uitoa (1 samples, 0.02%)</title><rect x="223.3" y="277" width="0.3" height="15.0" fill="rgb(236,207,7)" rx="2" ry="2" />
<text  x="226.29" y="287.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="420.1" y="309" width="0.3" height="15.0" fill="rgb(211,227,38)" rx="2" ry="2" />
<text  x="423.09" y="319.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.02%)</title><rect x="222.5" y="117" width="0.3" height="15.0" fill="rgb(235,180,23)" rx="2" ry="2" />
<text  x="225.49" y="127.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.02%)</title><rect x="219.6" y="181" width="0.2" height="15.0" fill="rgb(238,137,15)" rx="2" ry="2" />
<text  x="222.57" y="191.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.02%)</title><rect x="1189.5" y="309" width="0.2" height="15.0" fill="rgb(219,179,51)" rx="2" ry="2" />
<text  x="1192.47" y="319.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="405.5" y="309" width="0.2" height="15.0" fill="rgb(243,120,1)" rx="2" ry="2" />
<text  x="408.46" y="319.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.05%)</title><rect x="224.4" y="325" width="0.5" height="15.0" fill="rgb(224,31,54)" rx="2" ry="2" />
<text  x="227.35" y="335.5" ></text>
</g>
<g >
<title>bytes.Equal (1 samples, 0.02%)</title><rect x="226.5" y="277" width="0.2" height="15.0" fill="rgb(212,192,7)" rx="2" ry="2" />
<text  x="229.48" y="287.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.02%)</title><rect x="197.8" y="149" width="0.2" height="15.0" fill="rgb(245,16,34)" rx="2" ry="2" />
<text  x="200.76" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (3 samples, 0.07%)</title><rect x="218.8" y="149" width="0.8" height="15.0" fill="rgb(205,104,51)" rx="2" ry="2" />
<text  x="221.77" y="159.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Response).AppendBody (1 samples, 0.02%)</title><rect x="190.8" y="277" width="0.3" height="15.0" fill="rgb(237,52,31)" rx="2" ry="2" />
<text  x="193.84" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.02%)</title><rect x="405.2" y="261" width="0.3" height="15.0" fill="rgb(212,25,33)" rx="2" ry="2" />
<text  x="408.19" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.07%)</title><rect x="807.0" y="309" width="0.8" height="15.0" fill="rgb(251,29,42)" rx="2" ry="2" />
<text  x="810.04" y="319.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.05%)</title><rect x="798.5" y="341" width="0.6" height="15.0" fill="rgb(243,87,38)" rx="2" ry="2" />
<text  x="801.53" y="351.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (8 samples, 0.18%)</title><rect x="414.2" y="389" width="2.2" height="15.0" fill="rgb(226,110,45)" rx="2" ry="2" />
<text  x="417.24" y="399.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="208.7" y="165" width="0.5" height="15.0" fill="rgb(216,220,15)" rx="2" ry="2" />
<text  x="211.66" y="175.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.02%)</title><rect x="222.5" y="101" width="0.3" height="15.0" fill="rgb(244,166,49)" rx="2" ry="2" />
<text  x="225.49" y="111.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.09%)</title><rect x="814.2" y="309" width="1.1" height="15.0" fill="rgb(218,81,31)" rx="2" ry="2" />
<text  x="817.22" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="439.8" y="325" width="0.2" height="15.0" fill="rgb(221,94,16)" rx="2" ry="2" />
<text  x="442.77" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="405.2" y="293" width="0.3" height="15.0" fill="rgb(216,145,12)" rx="2" ry="2" />
<text  x="408.19" y="303.5" ></text>
</g>
<g >
<title>reflect.New (8 samples, 0.18%)</title><rect x="213.2" y="213" width="2.1" height="15.0" fill="rgb(227,122,27)" rx="2" ry="2" />
<text  x="216.18" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).parseURI (1 samples, 0.02%)</title><rect x="189.2" y="277" width="0.3" height="15.0" fill="rgb(217,102,50)" rx="2" ry="2" />
<text  x="192.25" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="439.8" y="309" width="0.2" height="15.0" fill="rgb(237,179,41)" rx="2" ry="2" />
<text  x="442.77" y="319.5" ></text>
</g>
<g >
<title>runtime.findrunnable (80 samples, 1.80%)</title><rect x="418.5" y="341" width="21.3" height="15.0" fill="rgb(217,136,50)" rx="2" ry="2" />
<text  x="421.49" y="351.5" >r..</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="417.7" y="341" width="0.3" height="15.0" fill="rgb(243,82,20)" rx="2" ry="2" />
<text  x="420.69" y="351.5" ></text>
</g>
<g >
<title>runtime.schedule (245 samples, 5.52%)</title><rect x="733.1" y="357" width="65.2" height="15.0" fill="rgb(251,55,42)" rx="2" ry="2" />
<text  x="736.11" y="367.5" >runtime..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (8 samples, 0.18%)</title><rect x="192.2" y="261" width="2.1" height="15.0" fill="rgb(225,161,20)" rx="2" ry="2" />
<text  x="195.17" y="271.5" ></text>
</g>
<g >
<title>runtime.growslice (2 samples, 0.05%)</title><rect x="405.7" y="309" width="0.6" height="15.0" fill="rgb(237,97,15)" rx="2" ry="2" />
<text  x="408.73" y="319.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.02%)</title><rect x="414.2" y="309" width="0.3" height="15.0" fill="rgb(238,81,32)" rx="2" ry="2" />
<text  x="417.24" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.05%)</title><rect x="222.2" y="229" width="0.6" height="15.0" fill="rgb(211,13,37)" rx="2" ry="2" />
<text  x="225.22" y="239.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.02%)</title><rect x="417.4" y="341" width="0.3" height="15.0" fill="rgb(252,99,46)" rx="2" ry="2" />
<text  x="420.43" y="351.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Size (1 samples, 0.02%)</title><rect x="205.5" y="181" width="0.2" height="15.0" fill="rgb(231,74,35)" rx="2" ry="2" />
<text  x="208.47" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="1189.5" y="293" width="0.2" height="15.0" fill="rgb(226,77,32)" rx="2" ry="2" />
<text  x="1192.47" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="213.7" y="133" width="0.3" height="15.0" fill="rgb(213,197,43)" rx="2" ry="2" />
<text  x="216.71" y="143.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*workerPool).getCh.func1 (1,511 samples, 34.05%)</title><rect x="10.0" y="389" width="401.8" height="15.0" fill="rgb(234,227,23)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >github.com/valyala/fasthttp.(*workerPool).getCh.func1</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.02%)</title><rect x="195.4" y="229" width="0.2" height="15.0" fill="rgb(219,45,11)" rx="2" ry="2" />
<text  x="198.36" y="239.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).Write (13 samples, 0.29%)</title><rect x="407.9" y="309" width="3.4" height="15.0" fill="rgb(218,179,51)" rx="2" ry="2" />
<text  x="410.85" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="404.7" y="277" width="0.2" height="15.0" fill="rgb(208,23,39)" rx="2" ry="2" />
<text  x="407.66" y="287.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="196.2" y="213" width="0.2" height="15.0" fill="rgb(218,226,19)" rx="2" ry="2" />
<text  x="199.16" y="223.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="405.2" y="309" width="0.3" height="15.0" fill="rgb(222,137,48)" rx="2" ry="2" />
<text  x="408.19" y="319.5" ></text>
</g>
<g >
<title>net.ubtoa (1 samples, 0.02%)</title><rect x="221.4" y="261" width="0.3" height="15.0" fill="rgb(210,22,42)" rx="2" ry="2" />
<text  x="224.43" y="271.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="1189.2" y="309" width="0.3" height="15.0" fill="rgb(228,135,32)" rx="2" ry="2" />
<text  x="1192.20" y="319.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="405.2" y="165" width="0.3" height="15.0" fill="rgb(215,71,41)" rx="2" ry="2" />
<text  x="408.19" y="175.5" ></text>
</g>
<g >
<title>runtime.netpollblock (1 samples, 0.02%)</title><rect x="227.3" y="165" width="0.2" height="15.0" fill="rgb(220,92,49)" rx="2" ry="2" />
<text  x="230.28" y="175.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="219.6" y="197" width="0.2" height="15.0" fill="rgb(227,130,29)" rx="2" ry="2" />
<text  x="222.57" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Marshal (3 samples, 0.07%)</title><rect x="198.6" y="213" width="0.8" height="15.0" fill="rgb(230,159,34)" rx="2" ry="2" />
<text  x="201.56" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="405.7" y="293" width="0.6" height="15.0" fill="rgb(229,180,38)" rx="2" ry="2" />
<text  x="408.73" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (4 samples, 0.09%)</title><rect x="192.7" y="245" width="1.1" height="15.0" fill="rgb(244,150,17)" rx="2" ry="2" />
<text  x="195.70" y="255.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (4 samples, 0.09%)</title><rect x="412.9" y="389" width="1.1" height="15.0" fill="rgb(234,19,11)" rx="2" ry="2" />
<text  x="415.91" y="399.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (29 samples, 0.65%)</title><rect x="180.5" y="213" width="7.7" height="15.0" fill="rgb(218,225,36)" rx="2" ry="2" />
<text  x="183.47" y="223.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.02%)</title><rect x="195.6" y="245" width="0.3" height="15.0" fill="rgb(217,161,16)" rx="2" ry="2" />
<text  x="198.63" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (1 samples, 0.02%)</title><rect x="414.0" y="357" width="0.2" height="15.0" fill="rgb(213,10,2)" rx="2" ry="2" />
<text  x="416.97" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal_trampoline (1 samples, 0.02%)</title><rect x="412.9" y="373" width="0.3" height="15.0" fill="rgb(235,43,14)" rx="2" ry="2" />
<text  x="415.91" y="383.5" ></text>
</g>
<g >
<title>callRet (1 samples, 0.02%)</title><rect x="204.7" y="181" width="0.2" height="15.0" fill="rgb(218,175,5)" rx="2" ry="2" />
<text  x="207.67" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (3 samples, 0.07%)</title><rect x="212.4" y="213" width="0.8" height="15.0" fill="rgb(225,105,51)" rx="2" ry="2" />
<text  x="215.38" y="223.5" ></text>
</g>
<g >
<title>runtime.mget (1 samples, 0.02%)</title><rect x="398.5" y="85" width="0.3" height="15.0" fill="rgb(231,80,28)" rx="2" ry="2" />
<text  x="401.55" y="95.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1,371 samples, 30.90%)</title><rect x="815.3" y="277" width="364.6" height="15.0" fill="rgb(240,125,12)" rx="2" ry="2" />
<text  x="818.28" y="287.5" >runtime.pthread_cond_signal</text>
</g>
<g >
<title>runtime.exitsyscall (30 samples, 0.68%)</title><rect x="180.2" y="229" width="8.0" height="15.0" fill="rgb(226,188,33)" rx="2" ry="2" />
<text  x="183.21" y="239.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (7 samples, 0.16%)</title><rect x="1187.3" y="309" width="1.9" height="15.0" fill="rgb(232,133,45)" rx="2" ry="2" />
<text  x="1190.34" y="319.5" ></text>
</g>
<g >
<title>runtime._System (4 samples, 0.09%)</title><rect x="411.8" y="389" width="1.1" height="15.0" fill="rgb(239,205,8)" rx="2" ry="2" />
<text  x="414.84" y="399.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="798.3" y="261" width="0.2" height="15.0" fill="rgb(250,29,51)" rx="2" ry="2" />
<text  x="801.26" y="271.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (2 samples, 0.05%)</title><rect x="210.5" y="181" width="0.6" height="15.0" fill="rgb(248,221,10)" rx="2" ry="2" />
<text  x="213.52" y="191.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.05%)</title><rect x="210.0" y="133" width="0.5" height="15.0" fill="rgb(230,182,25)" rx="2" ry="2" />
<text  x="212.99" y="143.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).tryRead (663 samples, 14.94%)</title><rect x="227.3" y="309" width="176.3" height="15.0" fill="rgb(222,4,53)" rx="2" ry="2" />
<text  x="230.28" y="319.5" >github.com/valyala/fas..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="1189.5" y="261" width="0.2" height="15.0" fill="rgb(206,61,4)" rx="2" ry="2" />
<text  x="1192.47" y="271.5" ></text>
</g>
<g >
<title>runtime.notesleep (1,095 samples, 24.68%)</title><rect x="441.1" y="341" width="291.2" height="15.0" fill="rgb(213,139,44)" rx="2" ry="2" />
<text  x="444.10" y="351.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.handoffp (3 samples, 0.07%)</title><rect x="398.0" y="117" width="0.8" height="15.0" fill="rgb(232,202,33)" rx="2" ry="2" />
<text  x="401.01" y="127.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.appendHeaderLine (3 samples, 0.07%)</title><rect x="408.9" y="261" width="0.8" height="15.0" fill="rgb(206,17,6)" rx="2" ry="2" />
<text  x="411.92" y="271.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="199.6" y="197" width="0.3" height="15.0" fill="rgb(215,30,23)" rx="2" ry="2" />
<text  x="202.62" y="207.5" ></text>
</g>
<g >
<title>runtime.wakep (2 samples, 0.05%)</title><rect x="440.3" y="325" width="0.5" height="15.0" fill="rgb(207,184,34)" rx="2" ry="2" />
<text  x="443.30" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (4 samples, 0.09%)</title><rect x="1186.3" y="293" width="1.0" height="15.0" fill="rgb(241,187,46)" rx="2" ry="2" />
<text  x="1189.28" y="303.5" ></text>
</g>
<g >
<title>runtime.nanotime (28 samples, 0.63%)</title><rect x="739.5" y="325" width="7.4" height="15.0" fill="rgb(249,165,26)" rx="2" ry="2" />
<text  x="742.49" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="404.7" y="293" width="0.2" height="15.0" fill="rgb(249,222,31)" rx="2" ry="2" />
<text  x="407.66" y="303.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (1 samples, 0.02%)</title><rect x="11.9" y="261" width="0.2" height="15.0" fill="rgb(250,111,24)" rx="2" ry="2" />
<text  x="14.86" y="271.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.02%)</title><rect x="1189.5" y="325" width="0.2" height="15.0" fill="rgb(243,212,35)" rx="2" ry="2" />
<text  x="1192.47" y="335.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (1 samples, 0.02%)</title><rect x="208.4" y="181" width="0.3" height="15.0" fill="rgb(229,115,47)" rx="2" ry="2" />
<text  x="211.40" y="191.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (3 samples, 0.07%)</title><rect x="732.3" y="357" width="0.8" height="15.0" fill="rgb(251,136,7)" rx="2" ry="2" />
<text  x="735.31" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="223.6" y="293" width="0.8" height="15.0" fill="rgb(228,80,30)" rx="2" ry="2" />
<text  x="226.55" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="401.2" y="133" width="0.3" height="15.0" fill="rgb(228,117,22)" rx="2" ry="2" />
<text  x="404.21" y="143.5" ></text>
</g>
<g >
<title>runtime.notetsleep (3 samples, 0.07%)</title><rect x="807.0" y="341" width="0.8" height="15.0" fill="rgb(249,105,8)" rx="2" ry="2" />
<text  x="810.04" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.02%)</title><rect x="219.3" y="133" width="0.3" height="15.0" fill="rgb(213,61,15)" rx="2" ry="2" />
<text  x="222.30" y="143.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (3 samples, 0.07%)</title><rect x="214.5" y="165" width="0.8" height="15.0" fill="rgb(237,57,10)" rx="2" ry="2" />
<text  x="217.51" y="175.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (1 samples, 0.02%)</title><rect x="405.2" y="197" width="0.3" height="15.0" fill="rgb(237,183,39)" rx="2" ry="2" />
<text  x="408.19" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (2 samples, 0.05%)</title><rect x="732.6" y="341" width="0.5" height="15.0" fill="rgb(209,143,5)" rx="2" ry="2" />
<text  x="735.57" y="351.5" ></text>
</g>
<g >
<title>runtime.bgsweep (1 samples, 0.02%)</title><rect x="414.0" y="389" width="0.2" height="15.0" fill="rgb(247,194,42)" rx="2" ry="2" />
<text  x="416.97" y="399.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (4 samples, 0.09%)</title><rect x="195.4" y="261" width="1.0" height="15.0" fill="rgb(227,153,36)" rx="2" ry="2" />
<text  x="198.36" y="271.5" ></text>
</g>
<g >
<title>reflect.methodReceiver (2 samples, 0.05%)</title><rect x="207.6" y="181" width="0.5" height="15.0" fill="rgb(241,188,19)" rx="2" ry="2" />
<text  x="210.60" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).ContinueReadBody (3 samples, 0.07%)</title><rect x="225.9" y="325" width="0.8" height="15.0" fill="rgb(245,154,34)" rx="2" ry="2" />
<text  x="228.95" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenFASTHTTP.func1 (131 samples, 2.95%)</title><rect x="189.5" y="325" width="34.9" height="15.0" fill="rgb(218,74,15)" rx="2" ry="2" />
<text  x="192.51" y="335.5" >hs..</text>
</g>
<g >
<title>runtime.heapBitsSetType (3 samples, 0.07%)</title><rect x="223.6" y="277" width="0.8" height="15.0" fill="rgb(247,130,30)" rx="2" ry="2" />
<text  x="226.55" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).closeBodyStream (1 samples, 0.02%)</title><rect x="225.7" y="293" width="0.2" height="15.0" fill="rgb(249,180,37)" rx="2" ry="2" />
<text  x="228.68" y="303.5" ></text>
</g>
<g >
<title>runtime.morestack (1 samples, 0.02%)</title><rect x="798.3" y="389" width="0.2" height="15.0" fill="rgb(230,12,13)" rx="2" ry="2" />
<text  x="801.26" y="399.5" ></text>
</g>
<g >
<title>bufio.NewWriterSize (1 samples, 0.02%)</title><rect x="405.2" y="325" width="0.3" height="15.0" fill="rgb(235,188,2)" rx="2" ry="2" />
<text  x="408.19" y="335.5" ></text>
</g>
<g >
<title>runtime.deferreturn (207 samples, 4.67%)</title><rect x="12.4" y="277" width="55.0" height="15.0" fill="rgb(241,115,19)" rx="2" ry="2" />
<text  x="15.39" y="287.5" >runti..</text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="222.5" y="165" width="0.3" height="15.0" fill="rgb(232,7,50)" rx="2" ry="2" />
<text  x="225.49" y="175.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="420.1" y="325" width="0.3" height="15.0" fill="rgb(236,58,50)" rx="2" ry="2" />
<text  x="423.09" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.05%)</title><rect x="405.7" y="245" width="0.6" height="15.0" fill="rgb(250,187,50)" rx="2" ry="2" />
<text  x="408.73" y="255.5" ></text>
</g>
<g >
<title>runtime.handoffp (4 samples, 0.09%)</title><rect x="179.1" y="181" width="1.1" height="15.0" fill="rgb(243,20,1)" rx="2" ry="2" />
<text  x="182.14" y="191.5" ></text>
</g>
<g >
<title>runtime.netpollready (1 samples, 0.02%)</title><rect x="785.0" y="309" width="0.2" height="15.0" fill="rgb(251,26,29)" rx="2" ry="2" />
<text  x="787.97" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.02%)</title><rect x="1189.7" y="277" width="0.3" height="15.0" fill="rgb(245,72,6)" rx="2" ry="2" />
<text  x="1192.73" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.05%)</title><rect x="405.7" y="261" width="0.6" height="15.0" fill="rgb(248,123,2)" rx="2" ry="2" />
<text  x="408.73" y="271.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="798.3" y="277" width="0.2" height="15.0" fill="rgb(222,2,26)" rx="2" ry="2" />
<text  x="801.26" y="287.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (4 samples, 0.09%)</title><rect x="397.7" y="133" width="1.1" height="15.0" fill="rgb(233,225,48)" rx="2" ry="2" />
<text  x="400.75" y="143.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.05%)</title><rect x="210.0" y="181" width="0.5" height="15.0" fill="rgb(213,181,6)" rx="2" ry="2" />
<text  x="212.99" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.02%)</title><rect x="195.4" y="213" width="0.2" height="15.0" fill="rgb(248,156,39)" rx="2" ry="2" />
<text  x="198.36" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (3 samples, 0.07%)</title><rect x="198.6" y="229" width="0.8" height="15.0" fill="rgb(253,4,17)" rx="2" ry="2" />
<text  x="201.56" y="239.5" ></text>
</g>
<g >
<title>runtime.usleep (24 samples, 0.54%)</title><rect x="807.8" y="341" width="6.4" height="15.0" fill="rgb(238,202,28)" rx="2" ry="2" />
<text  x="810.84" y="351.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (655 samples, 14.76%)</title><rect x="227.3" y="293" width="174.2" height="15.0" fill="rgb(209,161,15)" rx="2" ry="2" />
<text  x="230.28" y="303.5" >bufio.(*Reader).Peek</text>
</g>
<g >
<title>github.com/valyala/fasthttp.acquireWriter (3 samples, 0.07%)</title><rect x="404.9" y="341" width="0.8" height="15.0" fill="rgb(252,42,9)" rx="2" ry="2" />
<text  x="407.93" y="351.5" ></text>
</g>
<g >
<title>runtime.notesleep (31 samples, 0.70%)</title><rect x="431.5" y="309" width="8.3" height="15.0" fill="rgb(242,165,50)" rx="2" ry="2" />
<text  x="434.52" y="319.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (5 samples, 0.11%)</title><rect x="397.5" y="165" width="1.3" height="15.0" fill="rgb(225,157,21)" rx="2" ry="2" />
<text  x="400.48" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (86 samples, 1.94%)</title><rect x="197.0" y="261" width="22.8" height="15.0" fill="rgb(225,73,39)" rx="2" ry="2" />
<text  x="199.96" y="271.5" >h..</text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.05%)</title><rect x="210.0" y="149" width="0.5" height="15.0" fill="rgb(230,197,40)" rx="2" ry="2" />
<text  x="212.99" y="159.5" ></text>
</g>
<g >
<title>runtime.resetspinning (2 samples, 0.05%)</title><rect x="440.3" y="341" width="0.5" height="15.0" fill="rgb(236,79,40)" rx="2" ry="2" />
<text  x="443.30" y="351.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.AppendUint (1 samples, 0.02%)</title><rect x="407.1" y="293" width="0.2" height="15.0" fill="rgb(214,183,34)" rx="2" ry="2" />
<text  x="410.06" y="303.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.peekArgBytes (1 samples, 0.02%)</title><rect x="227.0" y="293" width="0.3" height="15.0" fill="rgb(239,162,27)" rx="2" ry="2" />
<text  x="230.01" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.05%)</title><rect x="405.7" y="229" width="0.6" height="15.0" fill="rgb(212,200,44)" rx="2" ry="2" />
<text  x="408.73" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (2 samples, 0.05%)</title><rect x="198.6" y="165" width="0.5" height="15.0" fill="rgb(243,90,39)" rx="2" ry="2" />
<text  x="201.56" y="175.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="404.7" y="229" width="0.2" height="15.0" fill="rgb(240,105,2)" rx="2" ry="2" />
<text  x="407.66" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (3 samples, 0.07%)</title><rect x="218.8" y="165" width="0.8" height="15.0" fill="rgb(227,36,3)" rx="2" ry="2" />
<text  x="221.77" y="175.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).Header (10 samples, 0.23%)</title><rect x="408.7" y="293" width="2.6" height="15.0" fill="rgb(248,133,12)" rx="2" ry="2" />
<text  x="411.65" y="303.5" ></text>
</g>
<g >
<title>runtime.usleep (4 samples, 0.09%)</title><rect x="416.4" y="325" width="1.0" height="15.0" fill="rgb(205,16,16)" rx="2" ry="2" />
<text  x="419.36" y="335.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="1189.7" y="293" width="0.3" height="15.0" fill="rgb(247,215,32)" rx="2" ry="2" />
<text  x="1192.73" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (4 samples, 0.09%)</title><rect x="419.0" y="309" width="1.1" height="15.0" fill="rgb(214,201,48)" rx="2" ry="2" />
<text  x="422.02" y="319.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="227.5" y="213" width="0.3" height="15.0" fill="rgb(218,187,23)" rx="2" ry="2" />
<text  x="230.54" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeFASTHTTP (114 samples, 2.57%)</title><rect x="190.8" y="309" width="30.4" height="15.0" fill="rgb(213,20,13)" rx="2" ry="2" />
<text  x="193.84" y="319.5" >hs..</text>
</g>
<g >
<title>runtime.forEachP (7 samples, 0.16%)</title><rect x="1187.3" y="341" width="1.9" height="15.0" fill="rgb(249,156,7)" rx="2" ry="2" />
<text  x="1190.34" y="351.5" ></text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.05%)</title><rect x="195.9" y="245" width="0.5" height="15.0" fill="rgb(212,81,39)" rx="2" ry="2" />
<text  x="198.90" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ArgsDecode (4 samples, 0.09%)</title><rect x="217.2" y="229" width="1.0" height="15.0" fill="rgb(208,7,18)" rx="2" ry="2" />
<text  x="220.17" y="239.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (4 samples, 0.09%)</title><rect x="211.3" y="213" width="1.1" height="15.0" fill="rgb(215,122,19)" rx="2" ry="2" />
<text  x="214.32" y="223.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.02%)</title><rect x="222.5" y="37" width="0.3" height="15.0" fill="rgb(209,59,8)" rx="2" ry="2" />
<text  x="225.49" y="47.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.05%)</title><rect x="398.3" y="101" width="0.5" height="15.0" fill="rgb(250,217,22)" rx="2" ry="2" />
<text  x="401.28" y="111.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.02%)</title><rect x="222.5" y="149" width="0.3" height="15.0" fill="rgb(206,138,54)" rx="2" ry="2" />
<text  x="225.49" y="159.5" ></text>
</g>
<g >
<title>memeqbody (1 samples, 0.02%)</title><rect x="226.5" y="261" width="0.2" height="15.0" fill="rgb(229,76,41)" rx="2" ry="2" />
<text  x="229.48" y="271.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeUnlock (1 samples, 0.02%)</title><rect x="11.6" y="277" width="0.3" height="15.0" fill="rgb(254,112,40)" rx="2" ry="2" />
<text  x="14.60" y="287.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="222.8" y="229" width="0.2" height="15.0" fill="rgb(205,133,53)" rx="2" ry="2" />
<text  x="225.76" y="239.5" ></text>
</g>
<g >
<title>runtime.(*_type).textOff (1 samples, 0.02%)</title><rect x="207.6" y="133" width="0.3" height="15.0" fill="rgb(237,196,15)" rx="2" ry="2" />
<text  x="210.60" y="143.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.05%)</title><rect x="408.1" y="277" width="0.6" height="15.0" fill="rgb(232,51,3)" rx="2" ry="2" />
<text  x="411.12" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).IsHead (1 samples, 0.02%)</title><rect x="403.6" y="341" width="0.3" height="15.0" fill="rgb(220,74,49)" rx="2" ry="2" />
<text  x="406.60" y="351.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parse (8 samples, 0.18%)</title><rect x="401.5" y="293" width="2.1" height="15.0" fill="rgb(250,123,42)" rx="2" ry="2" />
<text  x="404.47" y="303.5" ></text>
</g>
<g >
<title>runtime.gcstopm (2 samples, 0.05%)</title><rect x="439.8" y="341" width="0.5" height="15.0" fill="rgb(238,62,16)" rx="2" ry="2" />
<text  x="442.77" y="351.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="798.3" y="293" width="0.2" height="15.0" fill="rgb(223,39,37)" rx="2" ry="2" />
<text  x="801.26" y="303.5" ></text>
</g>
<g >
<title>bufio.(*Reader).reset (1 samples, 0.02%)</title><rect x="404.4" y="309" width="0.3" height="15.0" fill="rgb(241,42,12)" rx="2" ry="2" />
<text  x="407.40" y="319.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (4 samples, 0.09%)</title><rect x="215.3" y="213" width="1.1" height="15.0" fill="rgb(234,192,42)" rx="2" ry="2" />
<text  x="218.31" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.05%)</title><rect x="179.7" y="149" width="0.5" height="15.0" fill="rgb(210,177,46)" rx="2" ry="2" />
<text  x="182.67" y="159.5" ></text>
</g>
<g >
<title>runtime.efaceeq (1 samples, 0.02%)</title><rect x="211.6" y="165" width="0.3" height="15.0" fill="rgb(212,141,40)" rx="2" ry="2" />
<text  x="214.59" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (4 samples, 0.09%)</title><rect x="197.5" y="245" width="1.1" height="15.0" fill="rgb(205,224,7)" rx="2" ry="2" />
<text  x="200.49" y="255.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="195.9" y="149" width="0.3" height="15.0" fill="rgb(207,4,44)" rx="2" ry="2" />
<text  x="198.90" y="159.5" ></text>
</g>
<g >
<title>runtime.injectglist (4 samples, 0.09%)</title><rect x="419.0" y="325" width="1.1" height="15.0" fill="rgb(225,37,12)" rx="2" ry="2" />
<text  x="422.02" y="335.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).waitRead (1 samples, 0.02%)</title><rect x="227.3" y="213" width="0.2" height="15.0" fill="rgb(253,152,4)" rx="2" ry="2" />
<text  x="230.28" y="223.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (3 samples, 0.07%)</title><rect x="212.4" y="197" width="0.8" height="15.0" fill="rgb(242,181,11)" rx="2" ry="2" />
<text  x="215.38" y="207.5" ></text>
</g>
<g >
<title>reflect.Value.call (26 samples, 0.59%)</title><rect x="202.8" y="197" width="6.9" height="15.0" fill="rgb(231,39,29)" rx="2" ry="2" />
<text  x="205.81" y="207.5" ></text>
</g>
<g >
<title>reflect.(*rtype).textOff (1 samples, 0.02%)</title><rect x="207.6" y="165" width="0.3" height="15.0" fill="rgb(245,145,52)" rx="2" ry="2" />
<text  x="210.60" y="175.5" ></text>
</g>
<g >
<title>runtime.netpollunblock (1 samples, 0.02%)</title><rect x="785.0" y="293" width="0.2" height="15.0" fill="rgb(247,187,51)" rx="2" ry="2" />
<text  x="787.97" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (7 samples, 0.16%)</title><rect x="213.4" y="181" width="1.9" height="15.0" fill="rgb(230,113,53)" rx="2" ry="2" />
<text  x="216.45" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (4 samples, 0.09%)</title><rect x="179.1" y="213" width="1.1" height="15.0" fill="rgb(216,100,27)" rx="2" ry="2" />
<text  x="182.14" y="223.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.02%)</title><rect x="210.0" y="69" width="0.3" height="15.0" fill="rgb(228,34,20)" rx="2" ry="2" />
<text  x="212.99" y="79.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Server).serveConn (1,511 samples, 34.05%)</title><rect x="10.0" y="357" width="401.8" height="15.0" fill="rgb(239,84,48)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >github.com/valyala/fasthttp.(*Server).serveConn</text>
</g>
<g >
<title>runtime.kevent (14 samples, 0.32%)</title><rect x="427.5" y="309" width="3.8" height="15.0" fill="rgb(210,179,37)" rx="2" ry="2" />
<text  x="430.53" y="319.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.02%)</title><rect x="1189.7" y="325" width="0.3" height="15.0" fill="rgb(252,26,26)" rx="2" ry="2" />
<text  x="1192.73" y="335.5" ></text>
</g>
<g >
<title>bufio.NewReaderSize (1 samples, 0.02%)</title><rect x="404.7" y="325" width="0.2" height="15.0" fill="rgb(229,107,40)" rx="2" ry="2" />
<text  x="407.66" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (7 samples, 0.16%)</title><rect x="195.1" y="277" width="1.9" height="15.0" fill="rgb(206,39,36)" rx="2" ry="2" />
<text  x="198.10" y="287.5" ></text>
</g>
<g >
<title>runtime.netpoll (34 samples, 0.77%)</title><rect x="422.2" y="325" width="9.1" height="15.0" fill="rgb(228,218,44)" rx="2" ry="2" />
<text  x="425.22" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).URI (1 samples, 0.02%)</title><rect x="189.2" y="293" width="0.3" height="15.0" fill="rgb(224,110,51)" rx="2" ry="2" />
<text  x="192.25" y="303.5" ></text>
</g>
<g >
<title>runtime.schedule (86 samples, 1.94%)</title><rect x="418.0" y="357" width="22.8" height="15.0" fill="rgb(252,111,3)" rx="2" ry="2" />
<text  x="420.96" y="367.5" >r..</text>
</g>
<g >
<title>internal/poll.(*FD).Write (665 samples, 14.99%)</title><rect x="11.6" y="293" width="176.8" height="15.0" fill="rgb(227,105,30)" rx="2" ry="2" />
<text  x="14.60" y="303.5" >internal/poll.(*FD).Wr..</text>
</g>
<g >
<title>runtime.(*mspan).countAlloc (1 samples, 0.02%)</title><rect x="414.0" y="341" width="0.2" height="15.0" fill="rgb(220,159,38)" rx="2" ry="2" />
<text  x="416.97" y="351.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.02%)</title><rect x="405.5" y="293" width="0.2" height="15.0" fill="rgb(234,183,19)" rx="2" ry="2" />
<text  x="408.46" y="303.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1,395 samples, 31.44%)</title><rect x="815.3" y="293" width="371.0" height="15.0" fill="rgb(231,127,11)" rx="2" ry="2" />
<text  x="818.28" y="303.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (2 samples, 0.05%)</title><rect x="194.6" y="229" width="0.5" height="15.0" fill="rgb(238,146,1)" rx="2" ry="2" />
<text  x="197.57" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (10 samples, 0.23%)</title><rect x="398.8" y="165" width="2.7" height="15.0" fill="rgb(206,30,28)" rx="2" ry="2" />
<text  x="401.81" y="175.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="195.9" y="181" width="0.3" height="15.0" fill="rgb(220,64,37)" rx="2" ry="2" />
<text  x="198.90" y="191.5" ></text>
</g>
<g >
<title>runtime.mallocgc (5 samples, 0.11%)</title><rect x="210.0" y="197" width="1.3" height="15.0" fill="rgb(208,110,16)" rx="2" ry="2" />
<text  x="212.99" y="207.5" ></text>
</g>
<g >
<title>reflect.funcLayout (6 samples, 0.14%)</title><rect x="206.0" y="181" width="1.6" height="15.0" fill="rgb(226,52,44)" rx="2" ry="2" />
<text  x="209.00" y="191.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (4 samples, 0.09%)</title><rect x="1186.3" y="341" width="1.0" height="15.0" fill="rgb(208,163,10)" rx="2" ry="2" />
<text  x="1189.28" y="351.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).peek (2 samples, 0.05%)</title><rect x="226.7" y="309" width="0.6" height="15.0" fill="rgb(222,19,13)" rx="2" ry="2" />
<text  x="229.75" y="319.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.02%)</title><rect x="1189.7" y="309" width="0.3" height="15.0" fill="rgb(246,67,17)" rx="2" ry="2" />
<text  x="1192.73" y="319.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (2 samples, 0.05%)</title><rect x="211.9" y="181" width="0.5" height="15.0" fill="rgb(242,228,22)" rx="2" ry="2" />
<text  x="214.85" y="191.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (1 samples, 0.02%)</title><rect x="414.5" y="245" width="0.3" height="15.0" fill="rgb(240,151,17)" rx="2" ry="2" />
<text  x="417.50" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithRequest).XXX_Unmarshal (1 samples, 0.02%)</title><rect x="217.7" y="197" width="0.3" height="15.0" fill="rgb(235,155,53)" rx="2" ry="2" />
<text  x="220.70" y="207.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*workerPool).workerFunc (1,511 samples, 34.05%)</title><rect x="10.0" y="373" width="401.8" height="15.0" fill="rgb(228,109,13)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >github.com/valyala/fasthttp.(*workerPool).workerFunc</text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.02%)</title><rect x="195.6" y="213" width="0.3" height="15.0" fill="rgb(251,216,7)" rx="2" ry="2" />
<text  x="198.63" y="223.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Out (1 samples, 0.02%)</title><rect x="202.3" y="213" width="0.2" height="15.0" fill="rgb(207,215,13)" rx="2" ry="2" />
<text  x="205.28" y="223.5" ></text>
</g>
<g >
<title>reflect.ValueOf (1 samples, 0.02%)</title><rect x="209.7" y="213" width="0.3" height="15.0" fill="rgb(249,215,12)" rx="2" ry="2" />
<text  x="212.73" y="223.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.02%)</title><rect x="401.2" y="85" width="0.3" height="15.0" fill="rgb(212,98,51)" rx="2" ry="2" />
<text  x="404.21" y="95.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="419.8" y="261" width="0.3" height="15.0" fill="rgb(240,223,29)" rx="2" ry="2" />
<text  x="422.82" y="271.5" ></text>
</g>
<g >
<title>reflect.valueInterface (4 samples, 0.09%)</title><rect x="215.3" y="197" width="1.1" height="15.0" fill="rgb(231,87,29)" rx="2" ry="2" />
<text  x="218.31" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.02%)</title><rect x="405.2" y="277" width="0.3" height="15.0" fill="rgb(236,23,31)" rx="2" ry="2" />
<text  x="408.19" y="287.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.05%)</title><rect x="440.3" y="309" width="0.5" height="15.0" fill="rgb(253,206,30)" rx="2" ry="2" />
<text  x="443.30" y="319.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.05%)</title><rect x="210.0" y="165" width="0.5" height="15.0" fill="rgb(245,100,40)" rx="2" ry="2" />
<text  x="212.99" y="175.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.delAllArgs (1 samples, 0.02%)</title><rect x="407.6" y="277" width="0.3" height="15.0" fill="rgb(228,121,48)" rx="2" ry="2" />
<text  x="410.59" y="287.5" ></text>
</g>
<g >
<title>net.itoa (1 samples, 0.02%)</title><rect x="223.3" y="293" width="0.3" height="15.0" fill="rgb(228,51,16)" rx="2" ry="2" />
<text  x="226.29" y="303.5" ></text>
</g>
<g >
<title>net.(*conn).Write (666 samples, 15.01%)</title><rect x="11.3" y="325" width="177.1" height="15.0" fill="rgb(231,125,6)" rx="2" ry="2" />
<text  x="14.33" y="335.5" >net.(*conn).Write</text>
</g>
<g >
<title>runtime.semawakeup (4 samples, 0.09%)</title><rect x="419.0" y="277" width="1.1" height="15.0" fill="rgb(237,189,45)" rx="2" ry="2" />
<text  x="422.02" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (7 samples, 0.16%)</title><rect x="1187.3" y="277" width="1.9" height="15.0" fill="rgb(210,97,9)" rx="2" ry="2" />
<text  x="1190.34" y="287.5" ></text>
</g>
<g >
<title>runtime.semasleep (1,094 samples, 24.66%)</title><rect x="441.4" y="325" width="290.9" height="15.0" fill="rgb(251,184,31)" rx="2" ry="2" />
<text  x="444.36" y="335.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.runSafePointFn (1 samples, 0.02%)</title><rect x="798.3" y="309" width="0.2" height="15.0" fill="rgb(239,176,37)" rx="2" ry="2" />
<text  x="801.26" y="319.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="401.7" y="261" width="0.3" height="15.0" fill="rgb(248,44,27)" rx="2" ry="2" />
<text  x="404.74" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (31 samples, 0.70%)</title><rect x="431.5" y="293" width="8.3" height="15.0" fill="rgb(225,74,26)" rx="2" ry="2" />
<text  x="434.52" y="303.5" ></text>
</g>
<g >
<title>runtime.runqempty (1 samples, 0.02%)</title><rect x="179.1" y="165" width="0.3" height="15.0" fill="rgb(233,205,37)" rx="2" ry="2" />
<text  x="182.14" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithRequest).Reset (1 samples, 0.02%)</title><rect x="217.4" y="197" width="0.3" height="15.0" fill="rgb(216,182,39)" rx="2" ry="2" />
<text  x="220.44" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC.func1 (1 samples, 0.02%)</title><rect x="219.8" y="277" width="0.3" height="15.0" fill="rgb(227,222,39)" rx="2" ry="2" />
<text  x="222.83" y="287.5" ></text>
</g>
<g >
<title>runtime.reflectcallmove (1 samples, 0.02%)</title><rect x="204.7" y="165" width="0.2" height="15.0" fill="rgb(227,143,39)" rx="2" ry="2" />
<text  x="207.67" y="175.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).Reset (3 samples, 0.07%)</title><rect x="225.1" y="341" width="0.8" height="15.0" fill="rgb(241,39,33)" rx="2" ry="2" />
<text  x="228.15" y="351.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.05%)</title><rect x="405.7" y="213" width="0.6" height="15.0" fill="rgb(246,0,35)" rx="2" ry="2" />
<text  x="408.73" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (75 samples, 1.69%)</title><rect x="199.9" y="245" width="19.9" height="15.0" fill="rgb(210,50,30)" rx="2" ry="2" />
<text  x="202.89" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (22 samples, 0.50%)</title><rect x="733.1" y="277" width="5.9" height="15.0" fill="rgb(254,212,11)" rx="2" ry="2" />
<text  x="736.11" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1,395 samples, 31.44%)</title><rect x="815.3" y="309" width="371.0" height="15.0" fill="rgb(228,228,53)" rx="2" ry="2" />
<text  x="818.28" y="319.5" >runtime.notewakeup</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="738.2" y="261" width="0.8" height="15.0" fill="rgb(245,153,51)" rx="2" ry="2" />
<text  x="741.16" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (8 samples, 0.18%)</title><rect x="414.2" y="373" width="2.2" height="15.0" fill="rgb(212,22,39)" rx="2" ry="2" />
<text  x="417.24" y="383.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="179.4" y="149" width="0.3" height="15.0" fill="rgb(224,68,37)" rx="2" ry="2" />
<text  x="182.41" y="159.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="404.7" y="245" width="0.2" height="15.0" fill="rgb(253,88,39)" rx="2" ry="2" />
<text  x="407.66" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (3 samples, 0.07%)</title><rect x="218.8" y="181" width="0.8" height="15.0" fill="rgb(249,173,32)" rx="2" ry="2" />
<text  x="221.77" y="191.5" ></text>
</g>
<g >
<title>runtime.usleep (4 samples, 0.09%)</title><rect x="814.2" y="277" width="1.1" height="15.0" fill="rgb(206,132,35)" rx="2" ry="2" />
<text  x="817.22" y="287.5" ></text>
</g>
<g >
<title>runtime.spanOf (1 samples, 0.02%)</title><rect x="415.8" y="293" width="0.3" height="15.0" fill="rgb(254,175,45)" rx="2" ry="2" />
<text  x="418.83" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (5 samples, 0.11%)</title><rect x="198.6" y="245" width="1.3" height="15.0" fill="rgb(242,107,36)" rx="2" ry="2" />
<text  x="201.56" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).URI (1 samples, 0.02%)</title><rect x="189.2" y="309" width="0.3" height="15.0" fill="rgb(213,49,44)" rx="2" ry="2" />
<text  x="192.25" y="319.5" ></text>
</g>
<g >
<title>sync.(*Pool).Put (4 samples, 0.09%)</title><rect x="405.7" y="325" width="1.1" height="15.0" fill="rgb(223,72,11)" rx="2" ry="2" />
<text  x="408.73" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (19 samples, 0.43%)</title><rect x="733.1" y="261" width="5.1" height="15.0" fill="rgb(247,141,43)" rx="2" ry="2" />
<text  x="736.11" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="198.3" y="213" width="0.3" height="15.0" fill="rgb(220,52,26)" rx="2" ry="2" />
<text  x="201.29" y="223.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.02%)</title><rect x="414.5" y="277" width="0.3" height="15.0" fill="rgb(229,84,42)" rx="2" ry="2" />
<text  x="417.50" y="287.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Name (6 samples, 0.14%)</title><rect x="200.7" y="213" width="1.6" height="15.0" fill="rgb(235,73,45)" rx="2" ry="2" />
<text  x="203.68" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (9 samples, 0.20%)</title><rect x="1179.9" y="277" width="2.4" height="15.0" fill="rgb(213,194,12)" rx="2" ry="2" />
<text  x="1182.89" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parseFirstLine (2 samples, 0.05%)</title><rect x="401.5" y="277" width="0.5" height="15.0" fill="rgb(250,204,37)" rx="2" ry="2" />
<text  x="404.47" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="1189.2" y="293" width="0.3" height="15.0" fill="rgb(252,59,24)" rx="2" ry="2" />
<text  x="1192.20" y="303.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.02%)</title><rect x="414.5" y="309" width="0.3" height="15.0" fill="rgb(215,207,45)" rx="2" ry="2" />
<text  x="417.50" y="319.5" ></text>
</g>
<g >
<title>reflect.(*rtype).String (5 samples, 0.11%)</title><rect x="200.9" y="197" width="1.4" height="15.0" fill="rgb(207,220,44)" rx="2" ry="2" />
<text  x="203.95" y="207.5" ></text>
</g>
<g >
<title>syscall.syscall (434 samples, 9.78%)</title><rect x="286.1" y="181" width="115.4" height="15.0" fill="rgb(253,0,34)" rx="2" ry="2" />
<text  x="289.05" y="191.5" >syscall.syscall</text>
</g>
<g >
<title>runtime.return0 (1 samples, 0.02%)</title><rect x="12.1" y="261" width="0.3" height="15.0" fill="rgb(218,15,19)" rx="2" ry="2" />
<text  x="15.13" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (3 samples, 0.07%)</title><rect x="217.4" y="213" width="0.8" height="15.0" fill="rgb(221,23,14)" rx="2" ry="2" />
<text  x="220.44" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.decodeVarint (1 samples, 0.02%)</title><rect x="193.5" y="181" width="0.3" height="15.0" fill="rgb(232,77,13)" rx="2" ry="2" />
<text  x="196.50" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.05%)</title><rect x="222.2" y="213" width="0.6" height="15.0" fill="rgb(251,111,18)" rx="2" ry="2" />
<text  x="225.22" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).Write (1 samples, 0.02%)</title><rect x="190.8" y="293" width="0.3" height="15.0" fill="rgb(213,47,37)" rx="2" ry="2" />
<text  x="193.84" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (3 samples, 0.07%)</title><rect x="197.5" y="181" width="0.8" height="15.0" fill="rgb(241,134,41)" rx="2" ry="2" />
<text  x="200.49" y="191.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (3 samples, 0.07%)</title><rect x="211.6" y="197" width="0.8" height="15.0" fill="rgb(237,0,32)" rx="2" ry="2" />
<text  x="214.59" y="207.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollWait (1 samples, 0.02%)</title><rect x="227.3" y="181" width="0.2" height="15.0" fill="rgb(215,220,47)" rx="2" ry="2" />
<text  x="230.28" y="191.5" ></text>
</g>
<g >
<title>runtime.convI2I (1 samples, 0.02%)</title><rect x="405.5" y="325" width="0.2" height="15.0" fill="rgb(247,14,44)" rx="2" ry="2" />
<text  x="408.46" y="335.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="213.7" y="101" width="0.3" height="15.0" fill="rgb(213,215,15)" rx="2" ry="2" />
<text  x="216.71" y="111.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.02%)</title><rect x="220.9" y="245" width="0.3" height="15.0" fill="rgb(243,71,54)" rx="2" ry="2" />
<text  x="223.89" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (42 samples, 0.95%)</title><rect x="200.2" y="229" width="11.1" height="15.0" fill="rgb(243,141,31)" rx="2" ry="2" />
<text  x="203.15" y="239.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.02%)</title><rect x="195.9" y="117" width="0.3" height="15.0" fill="rgb(233,173,42)" rx="2" ry="2" />
<text  x="198.90" y="127.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).peek (1 samples, 0.02%)</title><rect x="224.9" y="325" width="0.2" height="15.0" fill="rgb(246,124,22)" rx="2" ry="2" />
<text  x="227.88" y="335.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.02%)</title><rect x="220.4" y="261" width="0.2" height="15.0" fill="rgb(220,37,54)" rx="2" ry="2" />
<text  x="223.36" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.02%)</title><rect x="405.2" y="229" width="0.3" height="15.0" fill="rgb(251,67,0)" rx="2" ry="2" />
<text  x="408.19" y="239.5" ></text>
</g>
<g >
<title>runtime.nanotime (7 samples, 0.16%)</title><rect x="420.4" y="325" width="1.8" height="15.0" fill="rgb(206,206,35)" rx="2" ry="2" />
<text  x="423.35" y="335.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="414.5" y="261" width="0.3" height="15.0" fill="rgb(233,71,41)" rx="2" ry="2" />
<text  x="417.50" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.writeResponse (17 samples, 0.38%)</title><rect x="406.8" y="341" width="4.5" height="15.0" fill="rgb(220,101,22)" rx="2" ry="2" />
<text  x="409.79" y="351.5" ></text>
</g>
<g >
<title>runtime.heapBits.bits (1 samples, 0.02%)</title><rect x="406.0" y="181" width="0.3" height="15.0" fill="rgb(214,192,38)" rx="2" ry="2" />
<text  x="408.99" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).MayContinue (1 samples, 0.02%)</title><rect x="224.9" y="341" width="0.2" height="15.0" fill="rgb(218,25,4)" rx="2" ry="2" />
<text  x="227.88" y="351.5" ></text>
</g>
<g >
<title>reflect.(*rtype).typeOff (3 samples, 0.07%)</title><rect x="216.4" y="197" width="0.8" height="15.0" fill="rgb(240,156,27)" rx="2" ry="2" />
<text  x="219.37" y="207.5" ></text>
</g>
<g >
<title>runtime.nanotime (30 samples, 0.68%)</title><rect x="799.1" y="341" width="7.9" height="15.0" fill="rgb(205,107,21)" rx="2" ry="2" />
<text  x="802.06" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*Arith).Multiply (1 samples, 0.02%)</title><rect x="204.9" y="181" width="0.3" height="15.0" fill="rgb(209,208,35)" rx="2" ry="2" />
<text  x="207.94" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.CoarseTimeNow (2 samples, 0.05%)</title><rect x="403.9" y="341" width="0.5" height="15.0" fill="rgb(234,167,16)" rx="2" ry="2" />
<text  x="406.87" y="351.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.02%)</title><rect x="220.4" y="277" width="0.2" height="15.0" fill="rgb(230,39,53)" rx="2" ry="2" />
<text  x="223.36" y="287.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.02%)</title><rect x="440.0" y="309" width="0.3" height="15.0" fill="rgb(235,89,27)" rx="2" ry="2" />
<text  x="443.03" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.05%)</title><rect x="440.3" y="261" width="0.5" height="15.0" fill="rgb(234,42,34)" rx="2" ry="2" />
<text  x="443.30" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.delAllArgsBytes (2 samples, 0.05%)</title><rect x="407.3" y="293" width="0.6" height="15.0" fill="rgb(207,143,6)" rx="2" ry="2" />
<text  x="410.32" y="303.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (2 samples, 0.05%)</title><rect x="214.0" y="165" width="0.5" height="15.0" fill="rgb(220,87,23)" rx="2" ry="2" />
<text  x="216.98" y="175.5" ></text>
</g>
<g >
<title>reflect.Value.Call (27 samples, 0.61%)</title><rect x="202.5" y="213" width="7.2" height="15.0" fill="rgb(222,166,36)" rx="2" ry="2" />
<text  x="205.54" y="223.5" ></text>
</g>
<g >
<title>runtime.lock (6 samples, 0.14%)</title><rect x="416.4" y="357" width="1.6" height="15.0" fill="rgb(208,144,50)" rx="2" ry="2" />
<text  x="419.36" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="439.8" y="293" width="0.2" height="15.0" fill="rgb(230,208,7)" rx="2" ry="2" />
<text  x="442.77" y="303.5" ></text>
</g>
<g >
<title>runtime.stopm (31 samples, 0.70%)</title><rect x="431.5" y="325" width="8.3" height="15.0" fill="rgb(209,61,52)" rx="2" ry="2" />
<text  x="434.52" y="335.5" ></text>
</g>
<g >
<title>sync/atomic.(*Value).Load (1 samples, 0.02%)</title><rect x="411.0" y="261" width="0.3" height="15.0" fill="rgb(210,27,53)" rx="2" ry="2" />
<text  x="414.05" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="195.9" y="197" width="0.3" height="15.0" fill="rgb(214,201,20)" rx="2" ry="2" />
<text  x="198.90" y="207.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.nextLine (1 samples, 0.02%)</title><rect x="401.5" y="261" width="0.2" height="15.0" fill="rgb(236,91,43)" rx="2" ry="2" />
<text  x="404.47" y="271.5" ></text>
</g>
<g >
<title>time.(*Time).nsec (1 samples, 0.02%)</title><rect x="411.6" y="309" width="0.2" height="15.0" fill="rgb(210,74,2)" rx="2" ry="2" />
<text  x="414.58" y="319.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="440.0" y="293" width="0.3" height="15.0" fill="rgb(228,21,37)" rx="2" ry="2" />
<text  x="443.03" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="199.4" y="213" width="0.5" height="15.0" fill="rgb(219,57,41)" rx="2" ry="2" />
<text  x="202.35" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).ResetBody (1 samples, 0.02%)</title><rect x="225.7" y="309" width="0.2" height="15.0" fill="rgb(227,118,49)" rx="2" ry="2" />
<text  x="228.68" y="319.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.05%)</title><rect x="739.0" y="309" width="0.5" height="15.0" fill="rgb(223,191,3)" rx="2" ry="2" />
<text  x="741.96" y="319.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="415.8" y="309" width="0.3" height="15.0" fill="rgb(207,63,38)" rx="2" ry="2" />
<text  x="418.83" y="319.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.05%)</title><rect x="410.5" y="261" width="0.5" height="15.0" fill="rgb(244,211,40)" rx="2" ry="2" />
<text  x="413.51" y="271.5" ></text>
</g>
<g >
<title>net.(*conn).Read (655 samples, 14.76%)</title><rect x="227.3" y="261" width="174.2" height="15.0" fill="rgb(252,45,29)" rx="2" ry="2" />
<text  x="230.28" y="271.5" >net.(*conn).Read</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Marshal (4 samples, 0.09%)</title><rect x="218.5" y="197" width="1.1" height="15.0" fill="rgb(217,210,19)" rx="2" ry="2" />
<text  x="221.50" y="207.5" ></text>
</g>
<g >
<title>net.ubtoa (1 samples, 0.02%)</title><rect x="220.6" y="245" width="0.3" height="15.0" fill="rgb(251,40,47)" rx="2" ry="2" />
<text  x="223.63" y="255.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.02%)</title><rect x="210.0" y="85" width="0.3" height="15.0" fill="rgb(226,224,42)" rx="2" ry="2" />
<text  x="212.99" y="95.5" ></text>
</g>
<g >
<title>reflect.packEface (3 samples, 0.07%)</title><rect x="215.6" y="181" width="0.8" height="15.0" fill="rgb(244,132,32)" rx="2" ry="2" />
<text  x="218.58" y="191.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.05%)</title><rect x="405.7" y="277" width="0.6" height="15.0" fill="rgb(217,165,48)" rx="2" ry="2" />
<text  x="408.73" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="412.6" y="373" width="0.3" height="15.0" fill="rgb(215,32,30)" rx="2" ry="2" />
<text  x="415.64" y="383.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="404.7" y="261" width="0.2" height="15.0" fill="rgb(225,77,39)" rx="2" ry="2" />
<text  x="407.66" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (111 samples, 2.50%)</title><rect x="191.1" y="293" width="29.5" height="15.0" fill="rgb(222,24,4)" rx="2" ry="2" />
<text  x="194.11" y="303.5" >hs..</text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="194.0" y="229" width="0.3" height="15.0" fill="rgb(224,108,20)" rx="2" ry="2" />
<text  x="197.03" y="239.5" ></text>
</g>
<g >
<title>cmpbody (1 samples, 0.02%)</title><rect x="403.1" y="261" width="0.2" height="15.0" fill="rgb(229,146,22)" rx="2" ry="2" />
<text  x="406.07" y="271.5" ></text>
</g>
<g >
<title>reflect.(*rtype).nameOff (1 samples, 0.02%)</title><rect x="202.0" y="181" width="0.3" height="15.0" fill="rgb(249,54,32)" rx="2" ry="2" />
<text  x="205.01" y="191.5" ></text>
</g>
<g >
<title>runtime.handoffp (1,399 samples, 31.53%)</title><rect x="814.2" y="341" width="372.1" height="15.0" fill="rgb(218,102,13)" rx="2" ry="2" />
<text  x="817.22" y="351.5" >runtime.handoffp</text>
</g>
<g >
<title>runtime.systemstack (4 samples, 0.09%)</title><rect x="397.7" y="149" width="1.1" height="15.0" fill="rgb(233,181,46)" rx="2" ry="2" />
<text  x="400.75" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock_trampoline (1 samples, 0.02%)</title><rect x="413.4" y="373" width="0.3" height="15.0" fill="rgb(218,126,18)" rx="2" ry="2" />
<text  x="416.44" y="383.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.02%)</title><rect x="193.0" y="197" width="0.2" height="15.0" fill="rgb(237,147,2)" rx="2" ry="2" />
<text  x="195.97" y="207.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.05%)</title><rect x="210.0" y="117" width="0.5" height="15.0" fill="rgb(222,112,21)" rx="2" ry="2" />
<text  x="212.99" y="127.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="213.7" y="85" width="0.3" height="15.0" fill="rgb(210,42,1)" rx="2" ry="2" />
<text  x="216.71" y="95.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="207.9" y="133" width="0.2" height="15.0" fill="rgb(240,108,53)" rx="2" ry="2" />
<text  x="210.86" y="143.5" ></text>
</g>
<g >
<title>runtime.aeshashbody (1 samples, 0.02%)</title><rect x="212.9" y="149" width="0.3" height="15.0" fill="rgb(242,186,16)" rx="2" ry="2" />
<text  x="215.92" y="159.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.05%)</title><rect x="798.5" y="325" width="0.6" height="15.0" fill="rgb(236,69,30)" rx="2" ry="2" />
<text  x="801.53" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.02%)</title><rect x="179.9" y="117" width="0.3" height="15.0" fill="rgb(245,161,17)" rx="2" ry="2" />
<text  x="182.94" y="127.5" ></text>
</g>
<g >
<title>syscall.Write (455 samples, 10.25%)</title><rect x="67.4" y="277" width="121.0" height="15.0" fill="rgb(241,114,12)" rx="2" ry="2" />
<text  x="70.44" y="287.5" >syscall.Write</text>
</g>
<g >
<title>reflect.Value.Type (3 samples, 0.07%)</title><rect x="216.4" y="213" width="0.8" height="15.0" fill="rgb(215,40,12)" rx="2" ry="2" />
<text  x="219.37" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).MayContinue (2 samples, 0.05%)</title><rect x="226.7" y="325" width="0.6" height="15.0" fill="rgb(224,109,45)" rx="2" ry="2" />
<text  x="229.75" y="335.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (1 samples, 0.02%)</title><rect x="401.2" y="101" width="0.3" height="15.0" fill="rgb(231,20,7)" rx="2" ry="2" />
<text  x="404.21" y="111.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="211.1" y="181" width="0.2" height="15.0" fill="rgb(247,193,21)" rx="2" ry="2" />
<text  x="214.05" y="191.5" ></text>
</g>
<g >
<title>reflect.(*funcType).out (1 samples, 0.02%)</title><rect x="202.3" y="197" width="0.2" height="15.0" fill="rgb(252,19,37)" rx="2" ry="2" />
<text  x="205.28" y="207.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="420.1" y="293" width="0.3" height="15.0" fill="rgb(211,6,16)" rx="2" ry="2" />
<text  x="423.09" y="303.5" ></text>
</g>
<g >
<title>all (4,437 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(211,32,49)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (4 samples, 0.09%)</title><rect x="1186.3" y="357" width="1.0" height="15.0" fill="rgb(237,204,37)" rx="2" ry="2" />
<text  x="1189.28" y="367.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (2 samples, 0.05%)</title><rect x="1189.2" y="341" width="0.5" height="15.0" fill="rgb(249,124,32)" rx="2" ry="2" />
<text  x="1192.20" y="351.5" ></text>
</g>
<g >
<title>runtime.semasleep (49 samples, 1.10%)</title><rect x="785.2" y="293" width="13.1" height="15.0" fill="rgb(225,157,14)" rx="2" ry="2" />
<text  x="788.23" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (15 samples, 0.34%)</title><rect x="1182.3" y="277" width="4.0" height="15.0" fill="rgb(214,226,41)" rx="2" ry="2" />
<text  x="1185.29" y="287.5" ></text>
</g>
<g >
<title>runtime.newobject (2 samples, 0.05%)</title><rect x="199.4" y="229" width="0.5" height="15.0" fill="rgb(224,95,27)" rx="2" ry="2" />
<text  x="202.35" y="239.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="195.9" y="101" width="0.3" height="15.0" fill="rgb(243,27,43)" rx="2" ry="2" />
<text  x="198.90" y="111.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (1 samples, 0.02%)</title><rect x="798.3" y="357" width="0.2" height="15.0" fill="rgb(244,115,28)" rx="2" ry="2" />
<text  x="801.26" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (31 samples, 0.70%)</title><rect x="431.5" y="277" width="8.3" height="15.0" fill="rgb(238,217,45)" rx="2" ry="2" />
<text  x="434.52" y="287.5" ></text>
</g>
<g >
<title>runtime.(*_type).typeOff (3 samples, 0.07%)</title><rect x="216.4" y="165" width="0.8" height="15.0" fill="rgb(221,60,47)" rx="2" ry="2" />
<text  x="219.37" y="175.5" ></text>
</g>
<g >
<title>runtime.strequal (1 samples, 0.02%)</title><rect x="211.6" y="149" width="0.3" height="15.0" fill="rgb(233,213,41)" rx="2" ry="2" />
<text  x="214.59" y="159.5" ></text>
</g>
<g >
<title>net.ipEmptyString (7 samples, 0.16%)</title><rect x="221.4" y="293" width="1.9" height="15.0" fill="rgb(230,226,47)" rx="2" ry="2" />
<text  x="224.43" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="207.9" y="149" width="0.2" height="15.0" fill="rgb(247,171,42)" rx="2" ry="2" />
<text  x="210.86" y="159.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*headerScanner).next (1 samples, 0.02%)</title><rect x="403.3" y="261" width="0.3" height="15.0" fill="rgb(241,218,19)" rx="2" ry="2" />
<text  x="406.33" y="271.5" ></text>
</g>
<g >
<title>runtime.kevent (72 samples, 1.62%)</title><rect x="765.8" y="309" width="19.2" height="15.0" fill="rgb(240,153,8)" rx="2" ry="2" />
<text  x="768.82" y="319.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.02%)</title><rect x="414.8" y="309" width="0.2" height="15.0" fill="rgb(234,26,35)" rx="2" ry="2" />
<text  x="417.77" y="319.5" ></text>
</g>
<g >
<title>runtime.reflectcall (2 samples, 0.05%)</title><rect x="209.2" y="181" width="0.5" height="15.0" fill="rgb(213,190,2)" rx="2" ry="2" />
<text  x="212.19" y="191.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func4 (1 samples, 0.02%)</title><rect x="1189.7" y="357" width="0.3" height="15.0" fill="rgb(224,208,28)" rx="2" ry="2" />
<text  x="1192.73" y="367.5" ></text>
</g>
<g >
<title>runtime.semasleep (7 samples, 0.16%)</title><rect x="1187.3" y="293" width="1.9" height="15.0" fill="rgb(233,122,54)" rx="2" ry="2" />
<text  x="1190.34" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (3 samples, 0.07%)</title><rect x="419.0" y="261" width="0.8" height="15.0" fill="rgb(225,20,52)" rx="2" ry="2" />
<text  x="422.02" y="271.5" ></text>
</g>
<g >
<title>runtime.save (1 samples, 0.02%)</title><rect x="178.9" y="213" width="0.2" height="15.0" fill="rgb(215,123,5)" rx="2" ry="2" />
<text  x="181.88" y="223.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.02%)</title><rect x="414.2" y="325" width="0.3" height="15.0" fill="rgb(250,160,22)" rx="2" ry="2" />
<text  x="417.24" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (6 samples, 0.14%)</title><rect x="218.2" y="229" width="1.6" height="15.0" fill="rgb(231,193,34)" rx="2" ry="2" />
<text  x="221.24" y="239.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (1 samples, 0.02%)</title><rect x="415.8" y="277" width="0.3" height="15.0" fill="rgb(244,137,27)" rx="2" ry="2" />
<text  x="418.83" y="287.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (655 samples, 14.76%)</title><rect x="227.3" y="277" width="174.2" height="15.0" fill="rgb(251,207,38)" rx="2" ry="2" />
<text  x="230.28" y="287.5" >bufio.(*Reader).fill</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Response).Write (17 samples, 0.38%)</title><rect x="406.8" y="325" width="4.5" height="15.0" fill="rgb(212,23,27)" rx="2" ry="2" />
<text  x="409.79" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="195.9" y="229" width="0.5" height="15.0" fill="rgb(229,118,9)" rx="2" ry="2" />
<text  x="198.90" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait_trampoline (1 samples, 0.02%)</title><rect x="413.2" y="373" width="0.2" height="15.0" fill="rgb(218,59,34)" rx="2" ry="2" />
<text  x="416.17" y="383.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="1189.5" y="277" width="0.2" height="15.0" fill="rgb(211,187,50)" rx="2" ry="2" />
<text  x="1192.47" y="287.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="198.3" y="197" width="0.3" height="15.0" fill="rgb(214,16,50)" rx="2" ry="2" />
<text  x="201.29" y="207.5" ></text>
</g>
<g >
<title>runtime.stopm (1,096 samples, 24.70%)</title><rect x="440.8" y="357" width="291.5" height="15.0" fill="rgb(250,82,2)" rx="2" ry="2" />
<text  x="443.83" y="367.5" >runtime.stopm</text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (4 samples, 0.09%)</title><rect x="211.3" y="229" width="1.1" height="15.0" fill="rgb(212,96,22)" rx="2" ry="2" />
<text  x="214.32" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="213.7" y="117" width="0.3" height="15.0" fill="rgb(223,135,39)" rx="2" ry="2" />
<text  x="216.71" y="127.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*URI).parseQuick (1 samples, 0.02%)</title><rect x="189.2" y="261" width="0.3" height="15.0" fill="rgb(214,204,41)" rx="2" ry="2" />
<text  x="192.25" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="195.9" y="213" width="0.3" height="15.0" fill="rgb(242,2,34)" rx="2" ry="2" />
<text  x="198.90" y="223.5" ></text>
</g>
<g >
<title>runtime.scanobject (5 samples, 0.11%)</title><rect x="415.0" y="325" width="1.4" height="15.0" fill="rgb(215,169,14)" rx="2" ry="2" />
<text  x="418.03" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).resetSkipHeader (3 samples, 0.07%)</title><rect x="225.1" y="325" width="0.8" height="15.0" fill="rgb(239,122,34)" rx="2" ry="2" />
<text  x="228.15" y="335.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.02%)</title><rect x="414.8" y="293" width="0.2" height="15.0" fill="rgb(220,169,22)" rx="2" ry="2" />
<text  x="417.77" y="303.5" ></text>
</g>
<g >
<title>runtime.semawakeup (4 samples, 0.09%)</title><rect x="1186.3" y="309" width="1.0" height="15.0" fill="rgb(237,76,50)" rx="2" ry="2" />
<text  x="1189.28" y="319.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.02%)</title><rect x="194.0" y="213" width="0.3" height="15.0" fill="rgb(212,155,24)" rx="2" ry="2" />
<text  x="197.03" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).MultipartFormBoundary (1 samples, 0.02%)</title><rect x="226.5" y="309" width="0.2" height="15.0" fill="rgb(246,87,38)" rx="2" ry="2" />
<text  x="229.48" y="319.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (2 samples, 0.05%)</title><rect x="193.8" y="245" width="0.5" height="15.0" fill="rgb(228,180,42)" rx="2" ry="2" />
<text  x="196.77" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (49 samples, 1.10%)</title><rect x="785.2" y="309" width="13.1" height="15.0" fill="rgb(239,135,10)" rx="2" ry="2" />
<text  x="788.23" y="319.5" ></text>
</g>
<g >
<title>net.(*TCPAddr).String (9 samples, 0.20%)</title><rect x="221.2" y="309" width="2.4" height="15.0" fill="rgb(227,157,33)" rx="2" ry="2" />
<text  x="224.16" y="319.5" ></text>
</g>
<g >
<title>runtime.mcall (3 samples, 0.07%)</title><rect x="411.8" y="373" width="0.8" height="15.0" fill="rgb(222,91,23)" rx="2" ry="2" />
<text  x="414.84" y="383.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.02%)</title><rect x="218.0" y="197" width="0.2" height="15.0" fill="rgb(207,15,18)" rx="2" ry="2" />
<text  x="220.97" y="207.5" ></text>
</g>
<g >
<title>bytes.HasPrefix (1 samples, 0.02%)</title><rect x="226.5" y="293" width="0.2" height="15.0" fill="rgb(239,184,42)" rx="2" ry="2" />
<text  x="229.48" y="303.5" ></text>
</g>
<g >
<title>syscall.Read (435 samples, 9.80%)</title><rect x="285.8" y="213" width="115.7" height="15.0" fill="rgb(212,31,26)" rx="2" ry="2" />
<text  x="288.79" y="223.5" >syscall.Read</text>
</g>
<g >
<title>runtime.nilinterequal (1 samples, 0.02%)</title><rect x="211.6" y="181" width="0.3" height="15.0" fill="rgb(209,67,50)" rx="2" ry="2" />
<text  x="214.59" y="191.5" ></text>
</g>
<g >
<title>runtime.releasep (1 samples, 0.02%)</title><rect x="431.3" y="325" width="0.2" height="15.0" fill="rgb(216,138,35)" rx="2" ry="2" />
<text  x="434.26" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).readLimitBody (668 samples, 15.06%)</title><rect x="225.9" y="341" width="177.7" height="15.0" fill="rgb(215,94,54)" rx="2" ry="2" />
<text  x="228.95" y="351.5" >github.com/valyala/fast..</text>
</g>
<g >
<title>bufio.(*Writer).Write (3 samples, 0.07%)</title><rect x="407.9" y="293" width="0.8" height="15.0" fill="rgb(209,217,22)" rx="2" ry="2" />
<text  x="410.85" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (3 samples, 0.07%)</title><rect x="179.4" y="165" width="0.8" height="15.0" fill="rgb(206,166,42)" rx="2" ry="2" />
<text  x="182.41" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrain (8 samples, 0.18%)</title><rect x="414.2" y="341" width="2.2" height="15.0" fill="rgb(245,146,25)" rx="2" ry="2" />
<text  x="417.24" y="351.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (1,188 samples, 26.77%)</title><rect x="416.4" y="373" width="315.9" height="15.0" fill="rgb(219,145,3)" rx="2" ry="2" />
<text  x="419.36" y="383.5" >runtime.exitsyscall0</text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.05%)</title><rect x="406.3" y="277" width="0.5" height="15.0" fill="rgb(210,9,35)" rx="2" ry="2" />
<text  x="409.26" y="287.5" ></text>
</g>
<g >
<title>unicode/utf8.ValidString (1 samples, 0.02%)</title><rect x="198.0" y="149" width="0.3" height="15.0" fill="rgb(208,221,44)" rx="2" ry="2" />
<text  x="201.02" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (3 samples, 0.07%)</title><rect x="197.5" y="213" width="0.8" height="15.0" fill="rgb(233,127,50)" rx="2" ry="2" />
<text  x="200.49" y="223.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (2 samples, 0.05%)</title><rect x="206.8" y="149" width="0.5" height="15.0" fill="rgb(250,197,49)" rx="2" ry="2" />
<text  x="209.80" y="159.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).AppendBytes (10 samples, 0.23%)</title><rect x="408.7" y="277" width="2.6" height="15.0" fill="rgb(222,144,4)" rx="2" ry="2" />
<text  x="411.65" y="287.5" ></text>
</g>
<g >
<title>runtime.resolveTypeOff (2 samples, 0.05%)</title><rect x="216.6" y="149" width="0.6" height="15.0" fill="rgb(252,42,25)" rx="2" ry="2" />
<text  x="219.64" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (4 samples, 0.09%)</title><rect x="192.7" y="213" width="1.1" height="15.0" fill="rgb(246,9,52)" rx="2" ry="2" />
<text  x="195.70" y="223.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.02%)</title><rect x="798.3" y="325" width="0.2" height="15.0" fill="rgb(246,111,1)" rx="2" ry="2" />
<text  x="801.26" y="335.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (8 samples, 0.18%)</title><rect x="414.2" y="357" width="2.2" height="15.0" fill="rgb(228,130,25)" rx="2" ry="2" />
<text  x="417.24" y="367.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).RemoteAddr (1 samples, 0.02%)</title><rect x="190.6" y="309" width="0.2" height="15.0" fill="rgb(229,13,45)" rx="2" ry="2" />
<text  x="193.58" y="319.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.02%)</title><rect x="414.5" y="293" width="0.3" height="15.0" fill="rgb(247,86,32)" rx="2" ry="2" />
<text  x="417.50" y="303.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (5 samples, 0.11%)</title><rect x="206.3" y="165" width="1.3" height="15.0" fill="rgb(210,215,28)" rx="2" ry="2" />
<text  x="209.27" y="175.5" ></text>
</g>
<g >
<title>runtime.gosched_m (3 samples, 0.07%)</title><rect x="732.3" y="373" width="0.8" height="15.0" fill="rgb(247,125,23)" rx="2" ry="2" />
<text  x="735.31" y="383.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="732.3" y="341" width="0.3" height="15.0" fill="rgb(254,104,19)" rx="2" ry="2" />
<text  x="735.31" y="351.5" ></text>
</g>
<g >
<title>runtime.newobject (2 samples, 0.05%)</title><rect x="196.4" y="261" width="0.6" height="15.0" fill="rgb(216,10,3)" rx="2" ry="2" />
<text  x="199.43" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint64ValueNoZero (1 samples, 0.02%)</title><rect x="195.4" y="197" width="0.2" height="15.0" fill="rgb(229,150,11)" rx="2" ry="2" />
<text  x="198.36" y="207.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="731.5" y="293" width="0.3" height="15.0" fill="rgb(239,38,26)" rx="2" ry="2" />
<text  x="734.51" y="303.5" ></text>
</g>
<g >
<title>runtime.assertE2I (1 samples, 0.02%)</title><rect x="219.6" y="213" width="0.2" height="15.0" fill="rgb(242,163,13)" rx="2" ry="2" />
<text  x="222.57" y="223.5" ></text>
</g>
<g >
<title>reflect.storeRcvr (1 samples, 0.02%)</title><rect x="208.1" y="181" width="0.3" height="15.0" fill="rgb(226,39,43)" rx="2" ry="2" />
<text  x="211.13" y="191.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="179.9" y="133" width="0.3" height="15.0" fill="rgb(249,224,54)" rx="2" ry="2" />
<text  x="182.94" y="143.5" ></text>
</g>
<g >
<title>runtime.mstart (1,472 samples, 33.18%)</title><rect x="798.5" y="389" width="391.5" height="15.0" fill="rgb(208,132,44)" rx="2" ry="2" />
<text  x="801.53" y="399.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (2 samples, 0.05%)</title><rect x="208.7" y="149" width="0.5" height="15.0" fill="rgb(233,194,21)" rx="2" ry="2" />
<text  x="211.66" y="159.5" ></text>
</g>
<g >
<title>runtime.newArenaMayUnlock (1 samples, 0.02%)</title><rect x="405.2" y="181" width="0.3" height="15.0" fill="rgb(212,166,38)" rx="2" ry="2" />
<text  x="408.19" y="191.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.02%)</title><rect x="222.5" y="133" width="0.3" height="15.0" fill="rgb(250,77,47)" rx="2" ry="2" />
<text  x="225.49" y="143.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="12.1" y="277" width="0.3" height="15.0" fill="rgb(228,175,25)" rx="2" ry="2" />
<text  x="15.13" y="287.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="207.9" y="165" width="0.2" height="15.0" fill="rgb(254,177,34)" rx="2" ry="2" />
<text  x="210.86" y="175.5" ></text>
</g>
<g >
<title>runtime.heapBits.initSpan (1 samples, 0.02%)</title><rect x="405.2" y="213" width="0.3" height="15.0" fill="rgb(225,52,35)" rx="2" ry="2" />
<text  x="408.19" y="223.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.05%)</title><rect x="798.5" y="309" width="0.6" height="15.0" fill="rgb(232,79,23)" rx="2" ry="2" />
<text  x="801.53" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (5 samples, 0.11%)</title><rect x="221.7" y="245" width="1.3" height="15.0" fill="rgb(211,123,49)" rx="2" ry="2" />
<text  x="224.69" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (10 samples, 0.23%)</title><rect x="398.8" y="149" width="2.7" height="15.0" fill="rgb(243,194,51)" rx="2" ry="2" />
<text  x="401.81" y="159.5" ></text>
</g>
<g >
<title>runtime.mstart1 (59 samples, 1.33%)</title><rect x="798.5" y="373" width="15.7" height="15.0" fill="rgb(254,155,4)" rx="2" ry="2" />
<text  x="801.53" y="383.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.02%)</title><rect x="222.5" y="53" width="0.3" height="15.0" fill="rgb(253,137,5)" rx="2" ry="2" />
<text  x="225.49" y="63.5" ></text>
</g>
<g >
<title>runtime.notetsleep (7 samples, 0.16%)</title><rect x="1187.3" y="325" width="1.9" height="15.0" fill="rgb(240,135,40)" rx="2" ry="2" />
<text  x="1190.34" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.02%)</title><rect x="217.7" y="181" width="0.3" height="15.0" fill="rgb(247,210,24)" rx="2" ry="2" />
<text  x="220.70" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (22 samples, 0.50%)</title><rect x="733.1" y="293" width="5.9" height="15.0" fill="rgb(244,225,14)" rx="2" ry="2" />
<text  x="736.11" y="303.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (1 samples, 0.02%)</title><rect x="418.2" y="341" width="0.3" height="15.0" fill="rgb(254,209,36)" rx="2" ry="2" />
<text  x="421.23" y="351.5" ></text>
</g>
<g >
<title>syscall.syscall (453 samples, 10.21%)</title><rect x="68.0" y="245" width="120.4" height="15.0" fill="rgb(241,144,1)" rx="2" ry="2" />
<text  x="70.98" y="255.5" >syscall.syscall</text>
</g>
<g >
<title>indexbytebody (1 samples, 0.02%)</title><rect x="401.5" y="229" width="0.2" height="15.0" fill="rgb(235,165,11)" rx="2" ry="2" />
<text  x="404.47" y="239.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (4 samples, 0.09%)</title><rect x="179.1" y="197" width="1.1" height="15.0" fill="rgb(232,51,45)" rx="2" ry="2" />
<text  x="182.14" y="207.5" ></text>
</g>
<g >
<title>reflect.unpackEface (1 samples, 0.02%)</title><rect x="209.7" y="197" width="0.3" height="15.0" fill="rgb(209,199,8)" rx="2" ry="2" />
<text  x="212.73" y="207.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (1 samples, 0.02%)</title><rect x="222.5" y="69" width="0.3" height="15.0" fill="rgb(236,108,32)" rx="2" ry="2" />
<text  x="225.49" y="79.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="440.0" y="277" width="0.3" height="15.0" fill="rgb(227,177,19)" rx="2" ry="2" />
<text  x="443.03" y="287.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="222.5" y="85" width="0.3" height="15.0" fill="rgb(253,160,35)" rx="2" ry="2" />
<text  x="225.49" y="95.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.05%)</title><rect x="440.3" y="293" width="0.5" height="15.0" fill="rgb(208,158,30)" rx="2" ry="2" />
<text  x="443.30" y="303.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.acquireReader (2 samples, 0.05%)</title><rect x="404.4" y="341" width="0.5" height="15.0" fill="rgb(221,89,35)" rx="2" ry="2" />
<text  x="407.40" y="351.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.02%)</title><rect x="798.3" y="341" width="0.2" height="15.0" fill="rgb(212,114,20)" rx="2" ry="2" />
<text  x="801.26" y="351.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="194.3" y="245" width="0.8" height="15.0" fill="rgb(215,170,31)" rx="2" ry="2" />
<text  x="197.30" y="255.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (7 samples, 0.16%)</title><rect x="213.4" y="197" width="1.9" height="15.0" fill="rgb(238,38,38)" rx="2" ry="2" />
<text  x="216.45" y="207.5" ></text>
</g>
<g >
<title>reflect.flag.mustBeExported (1 samples, 0.02%)</title><rect x="205.7" y="181" width="0.3" height="15.0" fill="rgb(242,192,36)" rx="2" ry="2" />
<text  x="208.74" y="191.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="397.5" y="149" width="0.2" height="15.0" fill="rgb(205,187,45)" rx="2" ry="2" />
<text  x="400.48" y="159.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (2 samples, 0.05%)</title><rect x="212.7" y="181" width="0.5" height="15.0" fill="rgb(220,84,34)" rx="2" ry="2" />
<text  x="215.65" y="191.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.05%)</title><rect x="409.2" y="245" width="0.5" height="15.0" fill="rgb(247,215,41)" rx="2" ry="2" />
<text  x="412.18" y="255.5" ></text>
</g>
<g >
<title>runtime.osyield (4 samples, 0.09%)</title><rect x="416.4" y="341" width="1.0" height="15.0" fill="rgb(243,38,50)" rx="2" ry="2" />
<text  x="419.36" y="351.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="223.0" y="245" width="0.3" height="15.0" fill="rgb(253,195,51)" rx="2" ry="2" />
<text  x="226.02" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parseHeaders (6 samples, 0.14%)</title><rect x="402.0" y="277" width="1.6" height="15.0" fill="rgb(243,226,1)" rx="2" ry="2" />
<text  x="405.00" y="287.5" ></text>
</g>
<g >
<title>runtime.makeslice (5 samples, 0.11%)</title><rect x="210.0" y="213" width="1.3" height="15.0" fill="rgb(223,98,16)" rx="2" ry="2" />
<text  x="212.99" y="223.5" ></text>
</g>
<g >
<title>runtime.convTstring (3 samples, 0.07%)</title><rect x="223.6" y="309" width="0.8" height="15.0" fill="rgb(214,5,45)" rx="2" ry="2" />
<text  x="226.55" y="319.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (6 samples, 0.14%)</title><rect x="221.7" y="261" width="1.6" height="15.0" fill="rgb(224,218,39)" rx="2" ry="2" />
<text  x="224.69" y="271.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="188.2" y="229" width="0.2" height="15.0" fill="rgb(234,142,22)" rx="2" ry="2" />
<text  x="191.18" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (3 samples, 0.07%)</title><rect x="198.6" y="197" width="0.8" height="15.0" fill="rgb(251,87,46)" rx="2" ry="2" />
<text  x="201.56" y="207.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="198.3" y="229" width="0.3" height="15.0" fill="rgb(209,67,35)" rx="2" ry="2" />
<text  x="201.29" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (1,413 samples, 31.85%)</title><rect x="814.2" y="373" width="375.8" height="15.0" fill="rgb(207,218,34)" rx="2" ry="2" />
<text  x="817.22" y="383.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="404.7" y="309" width="0.2" height="15.0" fill="rgb(222,152,29)" rx="2" ry="2" />
<text  x="407.66" y="319.5" ></text>
</g>
<g >
<title>runtime.deferreturn (218 samples, 4.91%)</title><rect x="227.8" y="213" width="58.0" height="15.0" fill="rgb(237,98,42)" rx="2" ry="2" />
<text  x="230.81" y="223.5" >runtim..</text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.02%)</title><rect x="401.2" y="117" width="0.3" height="15.0" fill="rgb(225,102,21)" rx="2" ry="2" />
<text  x="404.21" y="127.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.02%)</title><rect x="440.0" y="325" width="0.3" height="15.0" fill="rgb(247,138,34)" rx="2" ry="2" />
<text  x="443.03" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (3 samples, 0.07%)</title><rect x="197.5" y="229" width="0.8" height="15.0" fill="rgb(245,84,43)" rx="2" ry="2" />
<text  x="200.49" y="239.5" ></text>
</g>
<g >
<title>runtime.runqempty (1 samples, 0.02%)</title><rect x="398.0" y="101" width="0.3" height="15.0" fill="rgb(244,142,38)" rx="2" ry="2" />
<text  x="401.01" y="111.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1 samples, 0.02%)</title><rect x="732.8" y="325" width="0.3" height="15.0" fill="rgb(217,147,4)" rx="2" ry="2" />
<text  x="735.84" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).Reset (1 samples, 0.02%)</title><rect x="192.4" y="245" width="0.3" height="15.0" fill="rgb(251,153,12)" rx="2" ry="2" />
<text  x="195.44" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.05%)</title><rect x="222.2" y="197" width="0.6" height="15.0" fill="rgb(207,208,27)" rx="2" ry="2" />
<text  x="225.22" y="207.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="195.9" y="165" width="0.3" height="15.0" fill="rgb(226,150,46)" rx="2" ry="2" />
<text  x="198.90" y="175.5" ></text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.02%)</title><rect x="732.8" y="293" width="0.3" height="15.0" fill="rgb(210,203,36)" rx="2" ry="2" />
<text  x="735.84" y="303.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareWrite (1 samples, 0.02%)</title><rect x="11.9" y="277" width="0.2" height="15.0" fill="rgb(216,108,2)" rx="2" ry="2" />
<text  x="14.86" y="287.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.02%)</title><rect x="195.9" y="133" width="0.3" height="15.0" fill="rgb(245,16,9)" rx="2" ry="2" />
<text  x="198.90" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (3 samples, 0.07%)</title><rect x="807.0" y="293" width="0.8" height="15.0" fill="rgb(232,4,6)" rx="2" ry="2" />
<text  x="810.04" y="303.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="210.0" y="53" width="0.3" height="15.0" fill="rgb(246,10,44)" rx="2" ry="2" />
<text  x="212.99" y="63.5" ></text>
</g>
<g >
<title>reflect.resolveNameOff (1 samples, 0.02%)</title><rect x="202.0" y="165" width="0.3" height="15.0" fill="rgb(247,49,46)" rx="2" ry="2" />
<text  x="205.01" y="175.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (6 samples, 0.14%)</title><rect x="178.6" y="229" width="1.6" height="15.0" fill="rgb(210,170,28)" rx="2" ry="2" />
<text  x="181.61" y="239.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (655 samples, 14.76%)</title><rect x="227.3" y="245" width="174.2" height="15.0" fill="rgb(254,76,54)" rx="2" ry="2" />
<text  x="230.28" y="255.5" >net.(*netFD).Read</text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.05%)</title><rect x="208.7" y="181" width="0.5" height="15.0" fill="rgb(225,132,9)" rx="2" ry="2" />
<text  x="211.66" y="191.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (655 samples, 14.76%)</title><rect x="227.3" y="229" width="174.2" height="15.0" fill="rgb(225,16,44)" rx="2" ry="2" />
<text  x="230.28" y="239.5" >internal/poll.(*FD).Read</text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="195.6" y="229" width="0.3" height="15.0" fill="rgb(213,89,48)" rx="2" ry="2" />
<text  x="198.63" y="239.5" ></text>
</g>
<g >
<title>runtime.add1 (1 samples, 0.02%)</title><rect x="416.1" y="293" width="0.3" height="15.0" fill="rgb(235,93,15)" rx="2" ry="2" />
<text  x="419.10" y="303.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).IsHead (1 samples, 0.02%)</title><rect x="403.6" y="325" width="0.3" height="15.0" fill="rgb(249,167,53)" rx="2" ry="2" />
<text  x="406.60" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendUTF8StringValueNoZero (1 samples, 0.02%)</title><rect x="199.1" y="165" width="0.3" height="15.0" fill="rgb(251,195,54)" rx="2" ry="2" />
<text  x="202.09" y="175.5" ></text>
</g>
<g >
<title>net.IP.String (7 samples, 0.16%)</title><rect x="221.4" y="277" width="1.9" height="15.0" fill="rgb(242,2,30)" rx="2" ry="2" />
<text  x="224.43" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.05%)</title><rect x="739.0" y="293" width="0.5" height="15.0" fill="rgb(239,44,44)" rx="2" ry="2" />
<text  x="741.96" y="303.5" ></text>
</g>
<g >
<title>reflect.(*rtype).AssignableTo (1 samples, 0.02%)</title><rect x="205.2" y="181" width="0.3" height="15.0" fill="rgb(218,226,37)" rx="2" ry="2" />
<text  x="208.20" y="191.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (668 samples, 15.06%)</title><rect x="10.8" y="341" width="177.6" height="15.0" fill="rgb(246,194,3)" rx="2" ry="2" />
<text  x="13.80" y="351.5" >bufio.(*Writer).Flush</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1,091 samples, 24.59%)</title><rect x="441.6" y="309" width="290.2" height="15.0" fill="rgb(213,32,30)" rx="2" ry="2" />
<text  x="444.63" y="319.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.notetsleep_internal (3 samples, 0.07%)</title><rect x="807.0" y="325" width="0.8" height="15.0" fill="rgb(215,172,19)" rx="2" ry="2" />
<text  x="810.04" y="335.5" ></text>
</g>
<g >
<title>runtime.heapBits.next (1 samples, 0.02%)</title><rect x="416.1" y="309" width="0.3" height="15.0" fill="rgb(226,83,40)" rx="2" ry="2" />
<text  x="419.10" y="319.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1,399 samples, 31.53%)</title><rect x="814.2" y="357" width="372.1" height="15.0" fill="rgb(210,36,45)" rx="2" ry="2" />
<text  x="817.22" y="367.5" >runtime.entersyscallblock_handoff</text>
</g>
<g >
<title>runtime.injectglist (22 samples, 0.50%)</title><rect x="733.1" y="325" width="5.9" height="15.0" fill="rgb(248,139,33)" rx="2" ry="2" />
<text  x="736.11" y="335.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (7 samples, 0.16%)</title><rect x="1187.3" y="357" width="1.9" height="15.0" fill="rgb(246,71,29)" rx="2" ry="2" />
<text  x="1190.34" y="367.5" ></text>
</g>
<g >
<title>runtime.newstack (1 samples, 0.02%)</title><rect x="798.3" y="373" width="0.2" height="15.0" fill="rgb(216,200,53)" rx="2" ry="2" />
<text  x="801.26" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.statusLine (3 samples, 0.07%)</title><rect x="409.7" y="261" width="0.8" height="15.0" fill="rgb(211,176,4)" rx="2" ry="2" />
<text  x="412.72" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).Path (1 samples, 0.02%)</title><rect x="189.2" y="325" width="0.3" height="15.0" fill="rgb(211,55,2)" rx="2" ry="2" />
<text  x="192.25" y="335.5" ></text>
</g>
<g >
<title>reflect.resolveTextOff (1 samples, 0.02%)</title><rect x="207.6" y="149" width="0.3" height="15.0" fill="rgb(208,182,8)" rx="2" ry="2" />
<text  x="210.60" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (3 samples, 0.07%)</title><rect x="198.6" y="181" width="0.8" height="15.0" fill="rgb(241,80,13)" rx="2" ry="2" />
<text  x="201.56" y="191.5" ></text>
</g>
<g >
<title>runtime.park_m (245 samples, 5.52%)</title><rect x="733.1" y="373" width="65.2" height="15.0" fill="rgb(242,40,49)" rx="2" ry="2" />
<text  x="736.11" y="383.5" >runtime..</text>
</g>
<g >
<title>runtime.newobject (3 samples, 0.07%)</title><rect x="194.3" y="261" width="0.8" height="15.0" fill="rgb(234,6,51)" rx="2" ry="2" />
<text  x="197.30" y="271.5" ></text>
</g>
<g >
<title>runtime.syscall (1 samples, 0.02%)</title><rect x="413.7" y="373" width="0.3" height="15.0" fill="rgb(253,61,24)" rx="2" ry="2" />
<text  x="416.71" y="383.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="196.4" y="245" width="0.6" height="15.0" fill="rgb(222,21,38)" rx="2" ry="2" />
<text  x="199.43" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Response).AppendBodyString (1 samples, 0.02%)</title><rect x="190.8" y="261" width="0.3" height="15.0" fill="rgb(208,26,0)" rx="2" ry="2" />
<text  x="193.84" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.05%)</title><rect x="222.2" y="181" width="0.6" height="15.0" fill="rgb(210,86,40)" rx="2" ry="2" />
<text  x="225.22" y="191.5" ></text>
</g>
<g >
<title>runtime.sysmon (59 samples, 1.33%)</title><rect x="798.5" y="357" width="15.7" height="15.0" fill="rgb(225,47,33)" rx="2" ry="2" />
<text  x="801.53" y="367.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.02%)</title><rect x="732.6" y="325" width="0.2" height="15.0" fill="rgb(212,187,36)" rx="2" ry="2" />
<text  x="735.57" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (3 samples, 0.07%)</title><rect x="197.5" y="197" width="0.8" height="15.0" fill="rgb(232,136,40)" rx="2" ry="2" />
<text  x="200.49" y="207.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="210.3" y="101" width="0.2" height="15.0" fill="rgb(210,167,25)" rx="2" ry="2" />
<text  x="213.26" y="111.5" ></text>
</g>
<g >
<title>runtime.notewakeup (4 samples, 0.09%)</title><rect x="419.0" y="293" width="1.1" height="15.0" fill="rgb(252,100,13)" rx="2" ry="2" />
<text  x="422.02" y="303.5" ></text>
</g>
<g >
<title>sync.runtime_nanotime (2 samples, 0.05%)</title><rect x="406.3" y="293" width="0.5" height="15.0" fill="rgb(225,120,3)" rx="2" ry="2" />
<text  x="409.26" y="303.5" ></text>
</g>
<g >
<title>github.com/buaazp/fasthttprouter.(*Router).Handler (137 samples, 3.09%)</title><rect x="188.4" y="341" width="36.5" height="15.0" fill="rgb(240,120,36)" rx="2" ry="2" />
<text  x="191.45" y="351.5" >git..</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).SetContentLength (3 samples, 0.07%)</title><rect x="407.1" y="309" width="0.8" height="15.0" fill="rgb(207,223,35)" rx="2" ry="2" />
<text  x="410.06" y="319.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="414.2" y="293" width="0.3" height="15.0" fill="rgb(224,22,44)" rx="2" ry="2" />
<text  x="417.24" y="303.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Kind (1 samples, 0.02%)</title><rect x="209.7" y="181" width="0.3" height="15.0" fill="rgb(207,80,26)" rx="2" ry="2" />
<text  x="212.73" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Response).closeBodyStream (1 samples, 0.02%)</title><rect x="190.8" y="245" width="0.3" height="15.0" fill="rgb(230,88,53)" rx="2" ry="2" />
<text  x="193.84" y="255.5" ></text>
</g>
<g >
<title>time.Time.Equal (1 samples, 0.02%)</title><rect x="411.6" y="325" width="0.2" height="15.0" fill="rgb(215,197,45)" rx="2" ry="2" />
<text  x="414.58" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.releaseReader (4 samples, 0.09%)</title><rect x="405.7" y="341" width="1.1" height="15.0" fill="rgb(252,154,43)" rx="2" ry="2" />
<text  x="408.73" y="351.5" ></text>
</g>
<g >
<title>runtime.mcall (1,436 samples, 32.36%)</title><rect x="416.4" y="389" width="381.9" height="15.0" fill="rgb(206,201,34)" rx="2" ry="2" />
<text  x="419.36" y="399.5" >runtime.mcall</text>
</g>
<g >
<title>internal/poll.runtime_pollReset (1 samples, 0.02%)</title><rect x="11.9" y="245" width="0.2" height="15.0" fill="rgb(244,72,18)" rx="2" ry="2" />
<text  x="14.86" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.05%)</title><rect x="440.3" y="277" width="0.5" height="15.0" fill="rgb(231,208,12)" rx="2" ry="2" />
<text  x="443.30" y="287.5" ></text>
</g>
<g >
<title>runtime.findrunnable (245 samples, 5.52%)</title><rect x="733.1" y="341" width="65.2" height="15.0" fill="rgb(209,60,4)" rx="2" ry="2" />
<text  x="736.11" y="351.5" >runtime..</text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.02%)</title><rect x="401.5" y="245" width="0.2" height="15.0" fill="rgb(220,164,36)" rx="2" ry="2" />
<text  x="404.47" y="255.5" ></text>
</g>
<g >
<title>net.(*TCPAddr).String (2 samples, 0.05%)</title><rect x="220.6" y="293" width="0.6" height="15.0" fill="rgb(230,49,28)" rx="2" ry="2" />
<text  x="223.63" y="303.5" ></text>
</g>
<g >
<title>reflect.resolveTypeOff (3 samples, 0.07%)</title><rect x="216.4" y="181" width="0.8" height="15.0" fill="rgb(238,61,53)" rx="2" ry="2" />
<text  x="219.37" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Marshal (1 samples, 0.02%)</title><rect x="195.4" y="245" width="0.2" height="15.0" fill="rgb(210,5,22)" rx="2" ry="2" />
<text  x="198.36" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (18 samples, 0.41%)</title><rect x="212.4" y="229" width="4.8" height="15.0" fill="rgb(236,158,41)" rx="2" ry="2" />
<text  x="215.38" y="239.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Reset (1 samples, 0.02%)</title><rect x="404.4" y="325" width="0.3" height="15.0" fill="rgb(237,158,53)" rx="2" ry="2" />
<text  x="407.40" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (49 samples, 1.10%)</title><rect x="785.2" y="277" width="13.1" height="15.0" fill="rgb(233,42,27)" rx="2" ry="2" />
<text  x="788.23" y="287.5" ></text>
</g>
<g >
<title>runtime.osyield (4 samples, 0.09%)</title><rect x="814.2" y="293" width="1.1" height="15.0" fill="rgb(215,70,16)" rx="2" ry="2" />
<text  x="817.22" y="303.5" ></text>
</g>
<g >
<title>net.IP.String (2 samples, 0.05%)</title><rect x="220.6" y="261" width="0.6" height="15.0" fill="rgb(252,176,35)" rx="2" ry="2" />
<text  x="223.63" y="271.5" ></text>
</g>
</g>
</svg>

