<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="550.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>encoding/gob.(*encoderState).encodeInt (1 samples, 0.02%)</title><rect x="166.1" y="357" width="0.2" height="15.0" fill="rgb(210,163,34)" rx="2" ry="2" />
<text  x="169.07" y="367.5" ></text>
</g>
<g >
<title>runtime.stackcacherelease (1 samples, 0.02%)</title><rect x="721.3" y="421" width="0.2" height="15.0" fill="rgb(216,75,52)" rx="2" ry="2" />
<text  x="724.28" y="431.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (3 samples, 0.07%)</title><rect x="722.1" y="357" width="0.7" height="15.0" fill="rgb(206,157,22)" rx="2" ry="2" />
<text  x="725.06" y="367.5" ></text>
</g>
<g >
<title>encoding/gob.decodeUintReader (582 samples, 12.85%)</title><rect x="185.3" y="325" width="151.7" height="15.0" fill="rgb(214,154,48)" rx="2" ry="2" />
<text  x="188.35" y="335.5" >encoding/gob.decode..</text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.02%)</title><rect x="335.9" y="37" width="0.3" height="15.0" fill="rgb(216,86,48)" rx="2" ry="2" />
<text  x="338.94" y="47.5" ></text>
</g>
<g >
<title>reflect.Value.FieldByIndex (2 samples, 0.04%)</title><rect x="342.5" y="341" width="0.5" height="15.0" fill="rgb(221,129,5)" rx="2" ry="2" />
<text  x="345.45" y="351.5" ></text>
</g>
<g >
<title>encoding/gob.getTypeInfo (1 samples, 0.02%)</title><rect x="169.5" y="373" width="0.2" height="15.0" fill="rgb(251,67,12)" rx="2" ry="2" />
<text  x="172.45" y="383.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (581 samples, 12.83%)</title><rect x="185.6" y="277" width="151.4" height="15.0" fill="rgb(209,148,18)" rx="2" ry="2" />
<text  x="188.61" y="287.5" >bufio.(*Reader).Read</text>
</g>
<g >
<title>runtime.park_m (58 samples, 1.28%)</title><rect x="752.3" y="469" width="15.1" height="15.0" fill="rgb(214,201,49)" rx="2" ry="2" />
<text  x="755.29" y="479.5" ></text>
</g>
<g >
<title>runtime.nanotime (5 samples, 0.11%)</title><rect x="349.7" y="421" width="1.4" height="15.0" fill="rgb(251,80,54)" rx="2" ry="2" />
<text  x="352.75" y="431.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (6 samples, 0.13%)</title><rect x="162.4" y="325" width="1.6" height="15.0" fill="rgb(211,96,50)" rx="2" ry="2" />
<text  x="165.42" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).encode (17 samples, 0.38%)</title><rect x="165.5" y="405" width="4.5" height="15.0" fill="rgb(244,125,25)" rx="2" ry="2" />
<text  x="168.54" y="415.5" ></text>
</g>
<g >
<title>encoding/gob.encOpFor.func4 (1 samples, 0.02%)</title><rect x="166.3" y="373" width="0.3" height="15.0" fill="rgb(230,170,28)" rx="2" ry="2" />
<text  x="169.33" y="383.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.02%)</title><rect x="358.6" y="405" width="0.3" height="15.0" fill="rgb(241,210,31)" rx="2" ry="2" />
<text  x="361.61" y="415.5" ></text>
</g>
<g >
<title>runtime.stopm (10 samples, 0.22%)</title><rect x="764.8" y="421" width="2.6" height="15.0" fill="rgb(211,176,54)" rx="2" ry="2" />
<text  x="767.79" y="431.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).readRequest (616 samples, 13.60%)</title><rect x="183.8" y="437" width="160.5" height="15.0" fill="rgb(219,183,47)" rx="2" ry="2" />
<text  x="186.78" y="447.5" >net/rpc.(*Server).re..</text>
</g>
<g >
<title>io.ReadFull (582 samples, 12.85%)</title><rect x="185.3" y="309" width="151.7" height="15.0" fill="rgb(213,63,53)" rx="2" ry="2" />
<text  x="188.35" y="319.5" >io.ReadFull</text>
</g>
<g >
<title>runtime.schedule (38 samples, 0.84%)</title><rect x="349.0" y="453" width="9.9" height="15.0" fill="rgb(209,177,12)" rx="2" ry="2" />
<text  x="351.97" y="463.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Kind (1 samples, 0.02%)</title><rect x="338.5" y="293" width="0.3" height="15.0" fill="rgb(237,228,52)" rx="2" ry="2" />
<text  x="341.54" y="303.5" ></text>
</g>
<g >
<title>encoding/gob.encInt (2 samples, 0.04%)</title><rect x="165.8" y="373" width="0.5" height="15.0" fill="rgb(252,229,29)" rx="2" ry="2" />
<text  x="168.80" y="383.5" ></text>
</g>
<g >
<title>runtime.nanotime (16 samples, 0.35%)</title><rect x="767.9" y="437" width="4.2" height="15.0" fill="rgb(231,29,35)" rx="2" ry="2" />
<text  x="770.92" y="447.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (1 samples, 0.02%)</title><rect x="75.9" y="357" width="0.3" height="15.0" fill="rgb(243,205,41)" rx="2" ry="2" />
<text  x="78.92" y="367.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="338.3" y="229" width="0.2" height="15.0" fill="rgb(254,25,51)" rx="2" ry="2" />
<text  x="341.28" y="239.5" ></text>
</g>
<g >
<title>runtime.step (3 samples, 0.07%)</title><rect x="180.1" y="341" width="0.8" height="15.0" fill="rgb(234,141,11)" rx="2" ry="2" />
<text  x="183.13" y="351.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (2 samples, 0.04%)</title><rect x="340.4" y="405" width="0.5" height="15.0" fill="rgb(254,216,24)" rx="2" ry="2" />
<text  x="343.37" y="415.5" ></text>
</g>
<g >
<title>runtime.stopm (16 samples, 0.35%)</title><rect x="354.4" y="421" width="4.2" height="15.0" fill="rgb(231,64,15)" rx="2" ry="2" />
<text  x="357.44" y="431.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (1 samples, 0.02%)</title><rect x="172.8" y="405" width="0.3" height="15.0" fill="rgb(240,84,54)" rx="2" ry="2" />
<text  x="175.84" y="415.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (2 samples, 0.04%)</title><rect x="182.7" y="437" width="0.6" height="15.0" fill="rgb(245,206,14)" rx="2" ry="2" />
<text  x="185.74" y="447.5" ></text>
</g>
<g >
<title>encoding/gob.validUserType (3 samples, 0.07%)</title><rect x="171.8" y="405" width="0.8" height="15.0" fill="rgb(222,126,36)" rx="2" ry="2" />
<text  x="174.80" y="415.5" ></text>
</g>
<g >
<title>runtime.globrunqget (1 samples, 0.02%)</title><rect x="349.2" y="421" width="0.3" height="15.0" fill="rgb(244,219,44)" rx="2" ry="2" />
<text  x="352.23" y="431.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (1 samples, 0.02%)</title><rect x="1182.7" y="437" width="0.3" height="15.0" fill="rgb(253,6,15)" rx="2" ry="2" />
<text  x="1185.70" y="447.5" ></text>
</g>
<g >
<title>runtime.mget (1 samples, 0.02%)</title><rect x="163.2" y="245" width="0.3" height="15.0" fill="rgb(246,49,43)" rx="2" ry="2" />
<text  x="166.20" y="255.5" ></text>
</g>
<g >
<title>runtime.schedule (58 samples, 1.28%)</title><rect x="752.3" y="453" width="15.1" height="15.0" fill="rgb(207,98,15)" rx="2" ry="2" />
<text  x="755.29" y="463.5" ></text>
</g>
<g >
<title>runtime.systemstack (5 samples, 0.11%)</title><rect x="334.9" y="149" width="1.3" height="15.0" fill="rgb(229,107,7)" rx="2" ry="2" />
<text  x="337.90" y="159.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="723.1" y="421" width="0.3" height="15.0" fill="rgb(216,203,29)" rx="2" ry="2" />
<text  x="726.11" y="431.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (1,434 samples, 31.66%)</title><rect x="347.7" y="469" width="373.6" height="15.0" fill="rgb(246,75,25)" rx="2" ry="2" />
<text  x="350.66" y="479.5" >runtime.exitsyscall0</text>
</g>
<g >
<title>runtime.handoffp (1,562 samples, 34.49%)</title><rect x="775.7" y="437" width="407.0" height="15.0" fill="rgb(249,175,45)" rx="2" ry="2" />
<text  x="778.74" y="447.5" >runtime.handoffp</text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.02%)</title><rect x="358.6" y="437" width="0.3" height="15.0" fill="rgb(214,31,29)" rx="2" ry="2" />
<text  x="361.61" y="447.5" ></text>
</g>
<g >
<title>runtime.gcDrain (2 samples, 0.04%)</title><rect x="347.1" y="437" width="0.6" height="15.0" fill="rgb(213,174,45)" rx="2" ry="2" />
<text  x="350.14" y="447.5" ></text>
</g>
<g >
<title>encoding/gob.(*encoderState).encodeInt (2 samples, 0.04%)</title><rect x="170.5" y="389" width="0.5" height="15.0" fill="rgb(215,60,12)" rx="2" ry="2" />
<text  x="173.49" y="399.5" ></text>
</g>
<g >
<title>reflect.Value.Type (2 samples, 0.04%)</title><rect x="339.8" y="341" width="0.6" height="15.0" fill="rgb(222,148,17)" rx="2" ry="2" />
<text  x="342.85" y="351.5" ></text>
</g>
<g >
<title>runtime.notetsleep (5 samples, 0.11%)</title><rect x="772.1" y="437" width="1.3" height="15.0" fill="rgb(230,81,50)" rx="2" ry="2" />
<text  x="775.09" y="447.5" ></text>
</g>
<g >
<title>runtime.systemstack (1,589 samples, 35.09%)</title><rect x="775.7" y="469" width="414.0" height="15.0" fill="rgb(251,43,3)" rx="2" ry="2" />
<text  x="778.74" y="479.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.gostringnocopy (1 samples, 0.02%)</title><rect x="721.5" y="421" width="0.3" height="15.0" fill="rgb(249,208,2)" rx="2" ry="2" />
<text  x="724.54" y="431.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.02%)</title><rect x="773.1" y="389" width="0.3" height="15.0" fill="rgb(245,99,18)" rx="2" ry="2" />
<text  x="776.13" y="399.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="721.0" y="421" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="724.02" y="431.5" ></text>
</g>
<g >
<title>runtime.newstack (28 samples, 0.62%)</title><rect x="174.1" y="421" width="7.3" height="15.0" fill="rgb(230,83,14)" rx="2" ry="2" />
<text  x="177.14" y="431.5" ></text>
</g>
<g >
<title>runtime.gfget.func1 (1 samples, 0.02%)</title><rect x="344.8" y="357" width="0.3" height="15.0" fill="rgb(254,204,9)" rx="2" ry="2" />
<text  x="347.80" y="367.5" ></text>
</g>
<g >
<title>reflect.packEface (1 samples, 0.02%)</title><rect x="344.0" y="389" width="0.3" height="15.0" fill="rgb(228,188,36)" rx="2" ry="2" />
<text  x="347.02" y="399.5" ></text>
</g>
<g >
<title>runtime.deferreturn (80 samples, 1.77%)</title><rect x="76.4" y="373" width="20.9" height="15.0" fill="rgb(220,220,46)" rx="2" ry="2" />
<text  x="79.44" y="383.5" ></text>
</g>
<g >
<title>runtime.semasleep (4 samples, 0.09%)</title><rect x="1183.0" y="389" width="1.0" height="15.0" fill="rgb(244,103,40)" rx="2" ry="2" />
<text  x="1185.97" y="399.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeTypeSequence (584 samples, 12.89%)</title><rect x="184.8" y="357" width="152.2" height="15.0" fill="rgb(237,171,2)" rx="2" ry="2" />
<text  x="187.82" y="367.5" >encoding/gob.(*Deco..</text>
</g>
<g >
<title>runtime.gostringnocopy (1 samples, 0.02%)</title><rect x="345.6" y="341" width="0.2" height="15.0" fill="rgb(245,13,49)" rx="2" ry="2" />
<text  x="348.58" y="351.5" ></text>
</g>
<g >
<title>runtime.freedefer (80 samples, 1.77%)</title><rect x="76.4" y="357" width="20.9" height="15.0" fill="rgb(229,135,50)" rx="2" ry="2" />
<text  x="79.44" y="367.5" ></text>
</g>
<g >
<title>runtime.newproc1 (6 samples, 0.13%)</title><rect x="344.5" y="389" width="1.6" height="15.0" fill="rgb(207,49,27)" rx="2" ry="2" />
<text  x="347.54" y="399.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).newEncoderState (1 samples, 0.02%)</title><rect x="165.5" y="373" width="0.3" height="15.0" fill="rgb(234,214,52)" rx="2" ry="2" />
<text  x="168.54" y="383.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).readUnlock (1 samples, 0.02%)</title><rect x="186.4" y="213" width="0.2" height="15.0" fill="rgb(225,68,47)" rx="2" ry="2" />
<text  x="189.39" y="223.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (21 samples, 0.46%)</title><rect x="1184.3" y="453" width="5.4" height="15.0" fill="rgb(224,129,4)" rx="2" ry="2" />
<text  x="1187.27" y="463.5" ></text>
</g>
<g >
<title>runtime.gentraceback (22 samples, 0.49%)</title><rect x="175.2" y="389" width="5.7" height="15.0" fill="rgb(210,2,53)" rx="2" ry="2" />
<text  x="178.18" y="399.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).encodeStruct (15 samples, 0.33%)</title><rect x="165.5" y="389" width="4.0" height="15.0" fill="rgb(232,86,27)" rx="2" ry="2" />
<text  x="168.54" y="399.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.02%)</title><rect x="174.9" y="341" width="0.3" height="15.0" fill="rgb(223,58,3)" rx="2" ry="2" />
<text  x="177.92" y="351.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="166.6" y="341" width="0.2" height="15.0" fill="rgb(231,158,5)" rx="2" ry="2" />
<text  x="169.59" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="349.5" y="357" width="0.2" height="15.0" fill="rgb(210,64,13)" rx="2" ry="2" />
<text  x="352.49" y="367.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="338.3" y="197" width="0.2" height="15.0" fill="rgb(247,140,29)" rx="2" ry="2" />
<text  x="341.28" y="207.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).sendTypeId (3 samples, 0.07%)</title><rect x="170.5" y="405" width="0.8" height="15.0" fill="rgb(224,142,51)" rx="2" ry="2" />
<text  x="173.49" y="415.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.02%)</title><rect x="347.1" y="405" width="0.3" height="15.0" fill="rgb(251,143,16)" rx="2" ry="2" />
<text  x="350.14" y="415.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (3 samples, 0.07%)</title><rect x="171.8" y="389" width="0.8" height="15.0" fill="rgb(235,32,53)" rx="2" ry="2" />
<text  x="174.80" y="399.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="775.7" y="389" width="0.3" height="15.0" fill="rgb(206,97,32)" rx="2" ry="2" />
<text  x="778.74" y="399.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.02%)</title><rect x="721.3" y="373" width="0.2" height="15.0" fill="rgb(251,56,19)" rx="2" ry="2" />
<text  x="724.28" y="383.5" ></text>
</g>
<g >
<title>runtime.findnull (1 samples, 0.02%)</title><rect x="721.5" y="405" width="0.3" height="15.0" fill="rgb(222,20,51)" rx="2" ry="2" />
<text  x="724.54" y="415.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.02%)</title><rect x="340.6" y="389" width="0.3" height="15.0" fill="rgb(234,210,20)" rx="2" ry="2" />
<text  x="343.63" y="399.5" ></text>
</g>
<g >
<title>encoding/gob.decodeUintReader (1 samples, 0.02%)</title><rect x="341.4" y="341" width="0.3" height="15.0" fill="rgb(229,0,16)" rx="2" ry="2" />
<text  x="344.41" y="351.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (579 samples, 12.78%)</title><rect x="186.1" y="229" width="150.9" height="15.0" fill="rgb(211,62,43)" rx="2" ry="2" />
<text  x="189.13" y="239.5" >internal/poll.(*FD)..</text>
</g>
<g >
<title>io.ReadFull (1 samples, 0.02%)</title><rect x="341.9" y="325" width="0.3" height="15.0" fill="rgb(225,171,4)" rx="2" ry="2" />
<text  x="344.93" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.(*encBuffer).WriteString (1 samples, 0.02%)</title><rect x="166.6" y="357" width="0.2" height="15.0" fill="rgb(244,86,50)" rx="2" ry="2" />
<text  x="169.59" y="367.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="752.0" y="373" width="0.3" height="15.0" fill="rgb(244,131,43)" rx="2" ry="2" />
<text  x="755.03" y="383.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="767.7" y="405" width="0.2" height="15.0" fill="rgb(219,94,29)" rx="2" ry="2" />
<text  x="770.66" y="415.5" ></text>
</g>
<g >
<title>encoding/gob.(*decoderState).decodeUint (1 samples, 0.02%)</title><rect x="337.0" y="325" width="0.2" height="15.0" fill="rgb(249,190,34)" rx="2" ry="2" />
<text  x="339.98" y="335.5" ></text>
</g>
<g >
<title>runtime.readvarint (1 samples, 0.02%)</title><rect x="180.7" y="325" width="0.2" height="15.0" fill="rgb(235,184,7)" rx="2" ry="2" />
<text  x="183.66" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).getDecEnginePtr (2 samples, 0.04%)</title><rect x="339.1" y="341" width="0.5" height="15.0" fill="rgb(247,161,36)" rx="2" ry="2" />
<text  x="342.07" y="351.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_fast64 (1 samples, 0.02%)</title><rect x="1189.7" y="437" width="0.3" height="15.0" fill="rgb(209,200,42)" rx="2" ry="2" />
<text  x="1192.74" y="447.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.02%)</title><rect x="347.4" y="389" width="0.3" height="15.0" fill="rgb(254,151,2)" rx="2" ry="2" />
<text  x="350.40" y="399.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.09%)</title><rect x="776.0" y="405" width="1.0" height="15.0" fill="rgb(226,51,40)" rx="2" ry="2" />
<text  x="779.00" y="415.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1,527 samples, 33.72%)</title><rect x="777.0" y="373" width="397.9" height="15.0" fill="rgb(216,97,9)" rx="2" ry="2" />
<text  x="780.04" y="383.5" >runtime.pthread_cond_signal</text>
</g>
<g >
<title>encoding/gob.encString (2 samples, 0.04%)</title><rect x="166.6" y="373" width="0.5" height="15.0" fill="rgb(237,125,4)" rx="2" ry="2" />
<text  x="169.59" y="383.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).writeMessage (2 samples, 0.04%)</title><rect x="171.3" y="405" width="0.5" height="15.0" fill="rgb(230,38,25)" rx="2" ry="2" />
<text  x="174.28" y="415.5" ></text>
</g>
<g >
<title>runtime.semasleep (16 samples, 0.35%)</title><rect x="354.4" y="389" width="4.2" height="15.0" fill="rgb(221,134,4)" rx="2" ry="2" />
<text  x="357.44" y="399.5" ></text>
</g>
<g >
<title>runtime.memhash128 (1 samples, 0.02%)</title><rect x="182.0" y="373" width="0.2" height="15.0" fill="rgb(211,23,19)" rx="2" ry="2" />
<text  x="184.96" y="383.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.02%)</title><rect x="1182.7" y="453" width="0.3" height="15.0" fill="rgb(252,212,22)" rx="2" ry="2" />
<text  x="1185.70" y="463.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeValue (13 samples, 0.29%)</title><rect x="337.0" y="357" width="3.4" height="15.0" fill="rgb(246,197,1)" rx="2" ry="2" />
<text  x="339.98" y="367.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.02%)</title><rect x="340.6" y="373" width="0.3" height="15.0" fill="rgb(234,180,5)" rx="2" ry="2" />
<text  x="343.63" y="383.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (16 samples, 0.35%)</title><rect x="354.4" y="373" width="4.2" height="15.0" fill="rgb(251,102,51)" rx="2" ry="2" />
<text  x="357.44" y="383.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.02%)</title><rect x="338.8" y="309" width="0.3" height="15.0" fill="rgb(229,171,30)" rx="2" ry="2" />
<text  x="341.81" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="335.9" y="53" width="0.3" height="15.0" fill="rgb(232,16,29)" rx="2" ry="2" />
<text  x="338.94" y="63.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.02%)</title><rect x="349.5" y="405" width="0.2" height="15.0" fill="rgb(245,163,49)" rx="2" ry="2" />
<text  x="352.49" y="415.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).recvMessage (2 samples, 0.04%)</title><rect x="341.7" y="357" width="0.5" height="15.0" fill="rgb(227,47,40)" rx="2" ry="2" />
<text  x="344.67" y="367.5" ></text>
</g>
<g >
<title>runtime.semawakeup (21 samples, 0.46%)</title><rect x="1184.3" y="373" width="5.4" height="15.0" fill="rgb(231,222,11)" rx="2" ry="2" />
<text  x="1187.27" y="383.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.02%)</title><rect x="347.1" y="389" width="0.3" height="15.0" fill="rgb(222,57,13)" rx="2" ry="2" />
<text  x="350.14" y="399.5" ></text>
</g>
<g >
<title>runtime.funcdata (2 samples, 0.04%)</title><rect x="178.8" y="341" width="0.6" height="15.0" fill="rgb(235,61,47)" rx="2" ry="2" />
<text  x="181.83" y="351.5" ></text>
</g>
<g >
<title>runtime.stackalloc (1 samples, 0.02%)</title><rect x="344.8" y="341" width="0.3" height="15.0" fill="rgb(242,180,50)" rx="2" ry="2" />
<text  x="347.80" y="351.5" ></text>
</g>
<g >
<title>runtime.runqget (1 samples, 0.02%)</title><rect x="744.7" y="421" width="0.3" height="15.0" fill="rgb(211,49,40)" rx="2" ry="2" />
<text  x="747.73" y="431.5" ></text>
</g>
<g >
<title>runtime.memhash (1 samples, 0.02%)</title><rect x="182.0" y="357" width="0.2" height="15.0" fill="rgb(247,74,23)" rx="2" ry="2" />
<text  x="184.96" y="367.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.02%)</title><rect x="339.6" y="309" width="0.2" height="15.0" fill="rgb(220,194,38)" rx="2" ry="2" />
<text  x="342.59" y="319.5" ></text>
</g>
<g >
<title>encoding/gob.(*encoderState).encodeUint (1 samples, 0.02%)</title><rect x="166.8" y="341" width="0.3" height="15.0" fill="rgb(243,199,39)" rx="2" ry="2" />
<text  x="169.85" y="351.5" ></text>
</g>
<g >
<title>syscall.syscall (385 samples, 8.50%)</title><rect x="236.7" y="181" width="100.3" height="15.0" fill="rgb(211,197,35)" rx="2" ry="2" />
<text  x="239.67" y="191.5" >syscall.sysc..</text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="775.7" y="405" width="0.3" height="15.0" fill="rgb(248,228,31)" rx="2" ry="2" />
<text  x="778.74" y="415.5" ></text>
</g>
<g >
<title>runtime.isSystemGoroutine (3 samples, 0.07%)</title><rect x="345.1" y="373" width="0.7" height="15.0" fill="rgb(241,194,42)" rx="2" ry="2" />
<text  x="348.06" y="383.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (344 samples, 7.60%)</title><rect x="75.9" y="389" width="89.6" height="15.0" fill="rgb(214,27,38)" rx="2" ry="2" />
<text  x="78.92" y="399.5" >internal/p..</text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.04%)</title><rect x="335.7" y="69" width="0.5" height="15.0" fill="rgb(232,6,15)" rx="2" ry="2" />
<text  x="338.68" y="79.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.02%)</title><rect x="752.0" y="421" width="0.3" height="15.0" fill="rgb(238,223,42)" rx="2" ry="2" />
<text  x="755.03" y="431.5" ></text>
</g>
<g >
<title>reflect.Value.FieldByIndex (1 samples, 0.02%)</title><rect x="338.5" y="325" width="0.3" height="15.0" fill="rgb(254,220,35)" rx="2" ry="2" />
<text  x="341.54" y="335.5" ></text>
</g>
<g >
<title>runtime.freedefer (4 samples, 0.09%)</title><rect x="168.4" y="357" width="1.1" height="15.0" fill="rgb(205,76,27)" rx="2" ry="2" />
<text  x="171.41" y="367.5" ></text>
</g>
<g >
<title>runtime.freedefer (190 samples, 4.20%)</title><rect x="186.9" y="197" width="49.5" height="15.0" fill="rgb(234,5,16)" rx="2" ry="2" />
<text  x="189.91" y="207.5" >runt..</text>
</g>
<g >
<title>encoding/gob.(*Decoder).readMessage (1 samples, 0.02%)</title><rect x="341.7" y="341" width="0.2" height="15.0" fill="rgb(252,158,51)" rx="2" ry="2" />
<text  x="344.67" y="351.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (6 samples, 0.13%)</title><rect x="164.0" y="309" width="1.5" height="15.0" fill="rgb(207,171,18)" rx="2" ry="2" />
<text  x="166.98" y="319.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (5 samples, 0.11%)</title><rect x="334.9" y="133" width="1.3" height="15.0" fill="rgb(212,212,1)" rx="2" ry="2" />
<text  x="337.90" y="143.5" ></text>
</g>
<g >
<title>net/rpc.(*gobServerCodec).ReadRequestHeader (598 samples, 13.20%)</title><rect x="184.6" y="405" width="155.8" height="15.0" fill="rgb(211,112,27)" rx="2" ry="2" />
<text  x="187.56" y="415.5" >net/rpc.(*gobServerC..</text>
</g>
<g >
<title>runtime.newproc1 (21 samples, 0.46%)</title><rect x="1184.3" y="437" width="5.4" height="15.0" fill="rgb(230,62,13)" rx="2" ry="2" />
<text  x="1187.27" y="447.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (349 samples, 7.71%)</title><rect x="74.6" y="437" width="90.9" height="15.0" fill="rgb(223,53,9)" rx="2" ry="2" />
<text  x="77.61" y="447.5" >bufio.(*Wr..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1,380 samples, 30.47%)</title><rect x="360.2" y="405" width="359.5" height="15.0" fill="rgb(243,163,2)" rx="2" ry="2" />
<text  x="363.17" y="415.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="720.2" y="405" width="0.8" height="15.0" fill="rgb(211,196,18)" rx="2" ry="2" />
<text  x="723.24" y="415.5" ></text>
</g>
<g >
<title>runtime.mstart1 (32 samples, 0.71%)</title><rect x="767.4" y="469" width="8.3" height="15.0" fill="rgb(211,13,49)" rx="2" ry="2" />
<text  x="770.40" y="479.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="1184.0" y="389" width="0.3" height="15.0" fill="rgb(223,223,21)" rx="2" ry="2" />
<text  x="1187.01" y="399.5" ></text>
</g>
<g >
<title>runtime.notesleep (1,385 samples, 30.58%)</title><rect x="360.2" y="437" width="360.8" height="15.0" fill="rgb(214,155,40)" rx="2" ry="2" />
<text  x="363.17" y="447.5" >runtime.notesleep</text>
</g>
<g >
<title>encoding/gob.(*Decoder).nextInt (2 samples, 0.04%)</title><rect x="184.8" y="341" width="0.5" height="15.0" fill="rgb(242,30,30)" rx="2" ry="2" />
<text  x="187.82" y="351.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).getRequest (1 samples, 0.02%)</title><rect x="184.3" y="405" width="0.3" height="15.0" fill="rgb(232,162,25)" rx="2" ry="2" />
<text  x="187.30" y="415.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="767.4" y="405" width="0.3" height="15.0" fill="rgb(217,96,7)" rx="2" ry="2" />
<text  x="770.40" y="415.5" ></text>
</g>
<g >
<title>runtime.resetspinning (1 samples, 0.02%)</title><rect x="752.0" y="437" width="0.3" height="15.0" fill="rgb(251,161,53)" rx="2" ry="2" />
<text  x="755.03" y="447.5" ></text>
</g>
<g >
<title>io.ReadAtLeast (582 samples, 12.85%)</title><rect x="185.3" y="293" width="151.7" height="15.0" fill="rgb(212,1,19)" rx="2" ry="2" />
<text  x="188.35" y="303.5" >io.ReadAtLeast</text>
</g>
<g >
<title>net/rpc.(*Server).sendResponse (383 samples, 8.46%)</title><rect x="73.3" y="469" width="99.8" height="15.0" fill="rgb(238,83,52)" rx="2" ry="2" />
<text  x="76.31" y="479.5" >net/rpc.(*Se..</text>
</g>
<g >
<title>runtime.exitsyscallfast (3 samples, 0.07%)</title><rect x="336.2" y="149" width="0.8" height="15.0" fill="rgb(229,64,8)" rx="2" ry="2" />
<text  x="339.20" y="159.5" ></text>
</g>
<g >
<title>runtime.deferreturn (190 samples, 4.20%)</title><rect x="186.9" y="213" width="49.5" height="15.0" fill="rgb(214,82,0)" rx="2" ry="2" />
<text  x="189.91" y="223.5" >runt..</text>
</g>
<g >
<title>runtime.getStackMap (12 samples, 0.26%)</title><rect x="177.0" y="357" width="3.1" height="15.0" fill="rgb(233,73,6)" rx="2" ry="2" />
<text  x="180.01" y="367.5" ></text>
</g>
<g >
<title>runtime.startm (6 samples, 0.13%)</title><rect x="162.4" y="261" width="1.6" height="15.0" fill="rgb(228,41,3)" rx="2" ry="2" />
<text  x="165.42" y="271.5" ></text>
</g>
<g >
<title>runtime.stopm (25 samples, 0.55%)</title><rect x="745.5" y="421" width="6.5" height="15.0" fill="rgb(254,67,50)" rx="2" ry="2" />
<text  x="748.51" y="431.5" ></text>
</g>
<g >
<title>runtime.kevent (35 samples, 0.77%)</title><rect x="755.7" y="405" width="9.1" height="15.0" fill="rgb(234,56,22)" rx="2" ry="2" />
<text  x="758.67" y="415.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="167.9" y="373" width="0.2" height="15.0" fill="rgb(238,3,54)" rx="2" ry="2" />
<text  x="170.89" y="383.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (2 samples, 0.04%)</title><rect x="347.1" y="453" width="0.6" height="15.0" fill="rgb(220,28,32)" rx="2" ry="2" />
<text  x="350.14" y="463.5" ></text>
</g>
<g >
<title>runtime.runqgrab (2 samples, 0.04%)</title><rect x="745.0" y="405" width="0.5" height="15.0" fill="rgb(228,142,27)" rx="2" ry="2" />
<text  x="747.99" y="415.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (5 samples, 0.11%)</title><rect x="337.2" y="309" width="1.3" height="15.0" fill="rgb(208,103,12)" rx="2" ry="2" />
<text  x="340.24" y="319.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (3 samples, 0.07%)</title><rect x="346.4" y="485" width="0.7" height="15.0" fill="rgb(249,62,13)" rx="2" ry="2" />
<text  x="349.36" y="495.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="338.3" y="245" width="0.2" height="15.0" fill="rgb(246,32,4)" rx="2" ry="2" />
<text  x="341.28" y="255.5" ></text>
</g>
<g >
<title>reflect.typedmemclrpartial (2 samples, 0.04%)</title><rect x="182.2" y="437" width="0.5" height="15.0" fill="rgb(253,85,38)" rx="2" ry="2" />
<text  x="185.22" y="447.5" ></text>
</g>
<g >
<title>runtime.funcname (1 samples, 0.02%)</title><rect x="721.5" y="437" width="0.3" height="15.0" fill="rgb(245,54,35)" rx="2" ry="2" />
<text  x="724.54" y="447.5" ></text>
</g>
<g >
<title>net.(*conn).Write (345 samples, 7.62%)</title><rect x="75.7" y="421" width="89.8" height="15.0" fill="rgb(236,195,14)" rx="2" ry="2" />
<text  x="78.66" y="431.5" >net.(*conn..</text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="335.7" y="37" width="0.2" height="15.0" fill="rgb(213,191,4)" rx="2" ry="2" />
<text  x="338.68" y="47.5" ></text>
</g>
<g >
<title>runtime.(*mSpanList).remove (1 samples, 0.02%)</title><rect x="181.2" y="341" width="0.2" height="15.0" fill="rgb(220,57,20)" rx="2" ry="2" />
<text  x="184.18" y="351.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="722.8" y="405" width="0.3" height="15.0" fill="rgb(213,47,35)" rx="2" ry="2" />
<text  x="725.85" y="415.5" ></text>
</g>
<g >
<title>encoding/gob.(*encoderState).encodeUint (2 samples, 0.04%)</title><rect x="170.5" y="373" width="0.5" height="15.0" fill="rgb(248,174,14)" rx="2" ry="2" />
<text  x="173.49" y="383.5" ></text>
</g>
<g >
<title>runtime.systemstack (6 samples, 0.13%)</title><rect x="344.5" y="421" width="1.6" height="15.0" fill="rgb(229,36,54)" rx="2" ry="2" />
<text  x="347.54" y="431.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="1189.5" y="357" width="0.2" height="15.0" fill="rgb(224,197,22)" rx="2" ry="2" />
<text  x="1192.48" y="367.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (1 samples, 0.02%)</title><rect x="341.9" y="293" width="0.3" height="15.0" fill="rgb(217,97,34)" rx="2" ry="2" />
<text  x="344.93" y="303.5" ></text>
</g>
<g >
<title>runtime.handoffp (5 samples, 0.11%)</title><rect x="334.9" y="117" width="1.3" height="15.0" fill="rgb(224,217,33)" rx="2" ry="2" />
<text  x="337.90" y="127.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="767.4" y="421" width="0.3" height="15.0" fill="rgb(244,209,54)" rx="2" ry="2" />
<text  x="770.40" y="431.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (25 samples, 0.55%)</title><rect x="745.5" y="373" width="6.5" height="15.0" fill="rgb(223,107,36)" rx="2" ry="2" />
<text  x="748.51" y="383.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="349.5" y="373" width="0.2" height="15.0" fill="rgb(235,91,39)" rx="2" ry="2" />
<text  x="352.49" y="383.5" ></text>
</g>
<g >
<title>runtime.forEachP (4 samples, 0.09%)</title><rect x="1183.0" y="437" width="1.0" height="15.0" fill="rgb(208,202,53)" rx="2" ry="2" />
<text  x="1185.97" y="447.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwunlock (1 samples, 0.02%)</title><rect x="186.4" y="197" width="0.2" height="15.0" fill="rgb(210,36,14)" rx="2" ry="2" />
<text  x="189.39" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.04%)</title><rect x="719.7" y="405" width="0.5" height="15.0" fill="rgb(250,88,18)" rx="2" ry="2" />
<text  x="722.72" y="415.5" ></text>
</g>
<g >
<title>encoding/gob.decodeUintReader (1 samples, 0.02%)</title><rect x="341.9" y="341" width="0.3" height="15.0" fill="rgb(222,184,12)" rx="2" ry="2" />
<text  x="344.93" y="351.5" ></text>
</g>
<g >
<title>syscall.syscall (262 samples, 5.78%)</title><rect x="97.3" y="341" width="68.2" height="15.0" fill="rgb(208,222,29)" rx="2" ry="2" />
<text  x="100.28" y="351.5" >syscall..</text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="338.3" y="213" width="0.2" height="15.0" fill="rgb(217,133,23)" rx="2" ry="2" />
<text  x="341.28" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (4 samples, 0.09%)</title><rect x="335.2" y="85" width="1.0" height="15.0" fill="rgb(217,152,15)" rx="2" ry="2" />
<text  x="338.16" y="95.5" ></text>
</g>
<g >
<title>runtime.isSystemGoroutine (1 samples, 0.02%)</title><rect x="721.5" y="453" width="0.3" height="15.0" fill="rgb(206,26,33)" rx="2" ry="2" />
<text  x="724.54" y="463.5" ></text>
</g>
<g >
<title>io.ReadFull (2 samples, 0.04%)</title><rect x="184.8" y="309" width="0.5" height="15.0" fill="rgb(231,75,30)" rx="2" ry="2" />
<text  x="187.82" y="319.5" ></text>
</g>
<g >
<title>syscall.Write (262 samples, 5.78%)</title><rect x="97.3" y="373" width="68.2" height="15.0" fill="rgb(223,143,19)" rx="2" ry="2" />
<text  x="100.28" y="383.5" >syscall..</text>
</g>
<g >
<title>encoding/gob.(*decBuffer).Read (1 samples, 0.02%)</title><rect x="185.1" y="277" width="0.2" height="15.0" fill="rgb(245,173,1)" rx="2" ry="2" />
<text  x="188.09" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="721.0" y="405" width="0.3" height="15.0" fill="rgb(223,109,27)" rx="2" ry="2" />
<text  x="724.02" y="415.5" ></text>
</g>
<g >
<title>reflect.funcLayout (31 samples, 0.68%)</title><rect x="174.1" y="437" width="8.1" height="15.0" fill="rgb(213,1,37)" rx="2" ry="2" />
<text  x="177.14" y="447.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.02%)</title><rect x="773.1" y="421" width="0.3" height="15.0" fill="rgb(232,213,3)" rx="2" ry="2" />
<text  x="776.13" y="431.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (3 samples, 0.07%)</title><rect x="180.1" y="373" width="0.8" height="15.0" fill="rgb(238,22,20)" rx="2" ry="2" />
<text  x="183.13" y="383.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (3 samples, 0.07%)</title><rect x="179.4" y="341" width="0.7" height="15.0" fill="rgb(234,60,27)" rx="2" ry="2" />
<text  x="182.35" y="351.5" ></text>
</g>
<g >
<title>runtime.notewakeup (3 samples, 0.07%)</title><rect x="722.1" y="389" width="0.7" height="15.0" fill="rgb(216,16,4)" rx="2" ry="2" />
<text  x="725.06" y="399.5" ></text>
</g>
<g >
<title>syscall.Read (386 samples, 8.52%)</title><rect x="236.4" y="213" width="100.6" height="15.0" fill="rgb(252,217,17)" rx="2" ry="2" />
<text  x="239.41" y="223.5" >syscall.Read</text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="180.9" y="389" width="0.3" height="15.0" fill="rgb(243,110,34)" rx="2" ry="2" />
<text  x="183.92" y="399.5" ></text>
</g>
<g >
<title>runtime.stackpoolfree (1 samples, 0.02%)</title><rect x="721.3" y="405" width="0.2" height="15.0" fill="rgb(248,191,12)" rx="2" ry="2" />
<text  x="724.28" y="415.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="773.1" y="405" width="0.3" height="15.0" fill="rgb(249,192,12)" rx="2" ry="2" />
<text  x="776.13" y="415.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.02%)</title><rect x="172.6" y="405" width="0.2" height="15.0" fill="rgb(231,12,47)" rx="2" ry="2" />
<text  x="175.58" y="415.5" ></text>
</g>
<g >
<title>runtime.sysmon (32 samples, 0.71%)</title><rect x="767.4" y="453" width="8.3" height="15.0" fill="rgb(221,141,24)" rx="2" ry="2" />
<text  x="770.40" y="463.5" ></text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.02%)</title><rect x="345.3" y="357" width="0.3" height="15.0" fill="rgb(231,98,2)" rx="2" ry="2" />
<text  x="348.32" y="367.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="338.3" y="277" width="0.2" height="15.0" fill="rgb(221,193,42)" rx="2" ry="2" />
<text  x="341.28" y="287.5" ></text>
</g>
<g >
<title>runtime.mcall (1 samples, 0.02%)</title><rect x="346.1" y="469" width="0.3" height="15.0" fill="rgb(242,53,23)" rx="2" ry="2" />
<text  x="349.10" y="479.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).ServeCodec (625 samples, 13.80%)</title><rect x="183.3" y="453" width="162.8" height="15.0" fill="rgb(237,108,37)" rx="2" ry="2" />
<text  x="186.26" y="463.5" >net/rpc.(*Server).Se..</text>
</g>
<g >
<title>encoding/gob.(*Encoder).Encode (29 samples, 0.64%)</title><rect x="165.5" y="437" width="7.6" height="15.0" fill="rgb(241,37,34)" rx="2" ry="2" />
<text  x="168.54" y="447.5" ></text>
</g>
<g >
<title>runtime.gfget (2 samples, 0.04%)</title><rect x="344.5" y="373" width="0.6" height="15.0" fill="rgb(242,228,12)" rx="2" ry="2" />
<text  x="347.54" y="383.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.02%)</title><rect x="170.2" y="389" width="0.3" height="15.0" fill="rgb(216,36,8)" rx="2" ry="2" />
<text  x="173.23" y="399.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).readRequestHeader (603 samples, 13.31%)</title><rect x="183.8" y="421" width="157.1" height="15.0" fill="rgb(247,7,47)" rx="2" ry="2" />
<text  x="186.78" y="431.5" >net/rpc.(*Server).re..</text>
</g>
<g >
<title>reflect.Value.Call (39 samples, 0.86%)</title><rect x="173.1" y="469" width="10.2" height="15.0" fill="rgb(241,132,28)" rx="2" ry="2" />
<text  x="176.10" y="479.5" ></text>
</g>
<g >
<title>encoding/gob.(*encoderState).encodeUint (1 samples, 0.02%)</title><rect x="171.5" y="389" width="0.3" height="15.0" fill="rgb(243,177,27)" rx="2" ry="2" />
<text  x="174.54" y="399.5" ></text>
</g>
<g >
<title>runtime.aeshashbody (1 samples, 0.02%)</title><rect x="340.6" y="357" width="0.3" height="15.0" fill="rgb(232,32,18)" rx="2" ry="2" />
<text  x="343.63" y="367.5" ></text>
</g>
<g >
<title>runtime.stackfree (1 samples, 0.02%)</title><rect x="721.3" y="437" width="0.2" height="15.0" fill="rgb(247,172,1)" rx="2" ry="2" />
<text  x="724.28" y="447.5" ></text>
</g>
<g >
<title>encoding/gob.userType (1 samples, 0.02%)</title><rect x="339.6" y="341" width="0.2" height="15.0" fill="rgb(212,139,52)" rx="2" ry="2" />
<text  x="342.59" y="351.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).nextInt (1 samples, 0.02%)</title><rect x="341.4" y="357" width="0.3" height="15.0" fill="rgb(209,144,52)" rx="2" ry="2" />
<text  x="344.41" y="367.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="171.3" y="373" width="0.2" height="15.0" fill="rgb(217,1,18)" rx="2" ry="2" />
<text  x="174.28" y="383.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="334.9" y="85" width="0.3" height="15.0" fill="rgb(211,158,43)" rx="2" ry="2" />
<text  x="337.90" y="95.5" ></text>
</g>
<g >
<title>runtime.usleep (5 samples, 0.11%)</title><rect x="347.7" y="421" width="1.3" height="15.0" fill="rgb(243,185,15)" rx="2" ry="2" />
<text  x="350.66" y="431.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.02%)</title><rect x="1184.0" y="405" width="0.3" height="15.0" fill="rgb(215,96,16)" rx="2" ry="2" />
<text  x="1187.01" y="415.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).getResponse (4 samples, 0.09%)</title><rect x="73.3" y="453" width="1.1" height="15.0" fill="rgb(250,116,15)" rx="2" ry="2" />
<text  x="76.31" y="463.5" ></text>
</g>
<g >
<title>runtime.newproc (7 samples, 0.15%)</title><rect x="344.3" y="437" width="1.8" height="15.0" fill="rgb(245,130,46)" rx="2" ry="2" />
<text  x="347.28" y="447.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (6 samples, 0.13%)</title><rect x="162.4" y="293" width="1.6" height="15.0" fill="rgb(254,5,21)" rx="2" ry="2" />
<text  x="165.42" y="303.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollReset (1 samples, 0.02%)</title><rect x="75.9" y="341" width="0.3" height="15.0" fill="rgb(207,170,22)" rx="2" ry="2" />
<text  x="78.92" y="351.5" ></text>
</g>
<g >
<title>io.ReadFull (1 samples, 0.02%)</title><rect x="341.7" y="325" width="0.2" height="15.0" fill="rgb(228,97,49)" rx="2" ry="2" />
<text  x="344.67" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.decString (5 samples, 0.11%)</title><rect x="337.2" y="325" width="1.3" height="15.0" fill="rgb(245,47,18)" rx="2" ry="2" />
<text  x="340.24" y="335.5" ></text>
</g>
<g >
<title>runtime.startm (21 samples, 0.46%)</title><rect x="1184.3" y="405" width="5.4" height="15.0" fill="rgb(214,168,25)" rx="2" ry="2" />
<text  x="1187.27" y="415.5" ></text>
</g>
<g >
<title>syscall.write (262 samples, 5.78%)</title><rect x="97.3" y="357" width="68.2" height="15.0" fill="rgb(226,196,27)" rx="2" ry="2" />
<text  x="100.28" y="367.5" >syscall..</text>
</g>
<g >
<title>runtime.semasleep (25 samples, 0.55%)</title><rect x="745.5" y="389" width="6.5" height="15.0" fill="rgb(254,228,15)" rx="2" ry="2" />
<text  x="748.51" y="399.5" ></text>
</g>
<g >
<title>runtime.usleep (9 samples, 0.20%)</title><rect x="773.4" y="437" width="2.3" height="15.0" fill="rgb(239,183,8)" rx="2" ry="2" />
<text  x="776.39" y="447.5" ></text>
</g>
<g >
<title>runtime.adjustpointers (2 samples, 0.04%)</title><rect x="176.5" y="357" width="0.5" height="15.0" fill="rgb(237,227,0)" rx="2" ry="2" />
<text  x="179.49" y="367.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="721.0" y="437" width="0.3" height="15.0" fill="rgb(227,2,20)" rx="2" ry="2" />
<text  x="724.02" y="447.5" ></text>
</g>
<g >
<title>all (4,529 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(225,97,12)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="345.8" y="373" width="0.3" height="15.0" fill="rgb(218,17,12)" rx="2" ry="2" />
<text  x="348.84" y="383.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.02%)</title><rect x="347.4" y="405" width="0.3" height="15.0" fill="rgb(242,151,26)" rx="2" ry="2" />
<text  x="350.40" y="415.5" ></text>
</g>
<g >
<title>runtime.notewakeup (21 samples, 0.46%)</title><rect x="1184.3" y="389" width="5.4" height="15.0" fill="rgb(239,157,21)" rx="2" ry="2" />
<text  x="1187.27" y="399.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_fast32 (1 samples, 0.02%)</title><rect x="339.3" y="325" width="0.3" height="15.0" fill="rgb(238,93,41)" rx="2" ry="2" />
<text  x="342.33" y="335.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.02%)</title><rect x="1184.0" y="421" width="0.3" height="15.0" fill="rgb(224,191,6)" rx="2" ry="2" />
<text  x="1187.01" y="431.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (4 samples, 0.09%)</title><rect x="1183.0" y="453" width="1.0" height="15.0" fill="rgb(253,130,14)" rx="2" ry="2" />
<text  x="1185.97" y="463.5" ></text>
</g>
<g >
<title>io.ReadAtLeast (1 samples, 0.02%)</title><rect x="341.9" y="309" width="0.3" height="15.0" fill="rgb(208,116,20)" rx="2" ry="2" />
<text  x="344.93" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="163.5" y="245" width="0.2" height="15.0" fill="rgb(248,161,12)" rx="2" ry="2" />
<text  x="166.46" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="335.7" y="53" width="0.2" height="15.0" fill="rgb(223,54,35)" rx="2" ry="2" />
<text  x="338.68" y="63.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="163.5" y="197" width="0.2" height="15.0" fill="rgb(252,154,49)" rx="2" ry="2" />
<text  x="166.46" y="207.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).freeEncoderState (1 samples, 0.02%)</title><rect x="170.0" y="405" width="0.2" height="15.0" fill="rgb(236,223,11)" rx="2" ry="2" />
<text  x="172.97" y="415.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareRead (1 samples, 0.02%)</title><rect x="186.6" y="213" width="0.3" height="15.0" fill="rgb(244,221,38)" rx="2" ry="2" />
<text  x="189.65" y="223.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).Decode (11 samples, 0.24%)</title><rect x="340.9" y="405" width="2.9" height="15.0" fill="rgb(231,164,35)" rx="2" ry="2" />
<text  x="343.89" y="415.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.02%)</title><rect x="347.1" y="373" width="0.3" height="15.0" fill="rgb(214,140,52)" rx="2" ry="2" />
<text  x="350.14" y="383.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.02%)</title><rect x="182.0" y="389" width="0.2" height="15.0" fill="rgb(250,143,12)" rx="2" ry="2" />
<text  x="184.96" y="399.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1,557 samples, 34.38%)</title><rect x="777.0" y="389" width="405.7" height="15.0" fill="rgb(247,107,52)" rx="2" ry="2" />
<text  x="780.04" y="399.5" >runtime.semawakeup</text>
</g>
<g >
<title>reflect.(*rtype).AssignableTo (1 samples, 0.02%)</title><rect x="173.9" y="437" width="0.2" height="15.0" fill="rgb(219,84,25)" rx="2" ry="2" />
<text  x="176.88" y="447.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.02%)</title><rect x="752.0" y="405" width="0.3" height="15.0" fill="rgb(234,4,4)" rx="2" ry="2" />
<text  x="755.03" y="415.5" ></text>
</g>
<g >
<title>runtime.runqsteal (2 samples, 0.04%)</title><rect x="353.9" y="421" width="0.5" height="15.0" fill="rgb(230,98,12)" rx="2" ry="2" />
<text  x="356.92" y="431.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc_example/arith/proto.(*Arith).Multiply (2 samples, 0.04%)</title><rect x="173.4" y="437" width="0.5" height="15.0" fill="rgb(243,88,44)" rx="2" ry="2" />
<text  x="176.36" y="447.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.04%)</title><rect x="353.9" y="389" width="0.5" height="15.0" fill="rgb(230,120,22)" rx="2" ry="2" />
<text  x="356.92" y="399.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (3 samples, 0.07%)</title><rect x="181.4" y="421" width="0.8" height="15.0" fill="rgb(246,142,18)" rx="2" ry="2" />
<text  x="184.44" y="431.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="182.7" y="421" width="0.6" height="15.0" fill="rgb(252,37,10)" rx="2" ry="2" />
<text  x="185.74" y="431.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profMap).lookup (1 samples, 0.02%)</title><rect x="1189.7" y="453" width="0.3" height="15.0" fill="rgb(253,20,23)" rx="2" ry="2" />
<text  x="1192.74" y="463.5" ></text>
</g>
<g >
<title>encoding/gob.validUserType (1 samples, 0.02%)</title><rect x="339.6" y="325" width="0.2" height="15.0" fill="rgb(207,4,5)" rx="2" ry="2" />
<text  x="342.59" y="335.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="182.5" y="421" width="0.2" height="15.0" fill="rgb(237,211,7)" rx="2" ry="2" />
<text  x="185.48" y="431.5" ></text>
</g>
<g >
<title>net/rpc.(*gobServerCodec).WriteResponse (379 samples, 8.37%)</title><rect x="74.4" y="453" width="98.7" height="15.0" fill="rgb(239,210,51)" rx="2" ry="2" />
<text  x="77.35" y="463.5" >net/rpc.(*g..</text>
</g>
<g >
<title>runtime.aeshashbody (1 samples, 0.02%)</title><rect x="182.0" y="341" width="0.2" height="15.0" fill="rgb(242,108,38)" rx="2" ry="2" />
<text  x="184.96" y="351.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="767.7" y="421" width="0.2" height="15.0" fill="rgb(239,99,19)" rx="2" ry="2" />
<text  x="770.66" y="431.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Write (1 samples, 0.02%)</title><rect x="171.3" y="389" width="0.2" height="15.0" fill="rgb(214,223,43)" rx="2" ry="2" />
<text  x="174.28" y="399.5" ></text>
</g>
<g >
<title>runtime.startm (1,561 samples, 34.47%)</title><rect x="776.0" y="421" width="406.7" height="15.0" fill="rgb(219,191,27)" rx="2" ry="2" />
<text  x="779.00" y="431.5" >runtime.startm</text>
</g>
<g >
<title>runtime.runqsteal (2 samples, 0.04%)</title><rect x="745.0" y="421" width="0.5" height="15.0" fill="rgb(246,29,38)" rx="2" ry="2" />
<text  x="747.99" y="431.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (6 samples, 0.13%)</title><rect x="164.0" y="325" width="1.5" height="15.0" fill="rgb(248,53,45)" rx="2" ry="2" />
<text  x="166.98" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeStruct (8 samples, 0.18%)</title><rect x="337.0" y="341" width="2.1" height="15.0" fill="rgb(248,168,11)" rx="2" ry="2" />
<text  x="339.98" y="351.5" ></text>
</g>
<g >
<title>runtime.stackalloc (1 samples, 0.02%)</title><rect x="181.2" y="389" width="0.2" height="15.0" fill="rgb(232,39,37)" rx="2" ry="2" />
<text  x="184.18" y="399.5" ></text>
</g>
<g >
<title>syscall.read (386 samples, 8.52%)</title><rect x="236.4" y="197" width="100.6" height="15.0" fill="rgb(240,175,21)" rx="2" ry="2" />
<text  x="239.41" y="207.5" >syscall.read</text>
</g>
<g >
<title>runtime.nanotime (10 samples, 0.22%)</title><rect x="723.4" y="421" width="2.6" height="15.0" fill="rgb(209,30,21)" rx="2" ry="2" />
<text  x="726.37" y="431.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="723.1" y="405" width="0.3" height="15.0" fill="rgb(244,57,52)" rx="2" ry="2" />
<text  x="726.11" y="415.5" ></text>
</g>
<g >
<title>reflect.Value.Field (3 samples, 0.07%)</title><rect x="167.1" y="357" width="0.8" height="15.0" fill="rgb(251,125,49)" rx="2" ry="2" />
<text  x="170.11" y="367.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (1 samples, 0.02%)</title><rect x="344.0" y="421" width="0.3" height="15.0" fill="rgb(220,54,19)" rx="2" ry="2" />
<text  x="347.02" y="431.5" ></text>
</g>
<g >
<title>runtime.stackpoolalloc (1 samples, 0.02%)</title><rect x="181.2" y="357" width="0.2" height="15.0" fill="rgb(220,140,17)" rx="2" ry="2" />
<text  x="184.18" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="1184.0" y="357" width="0.3" height="15.0" fill="rgb(223,225,34)" rx="2" ry="2" />
<text  x="1187.01" y="367.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="1182.7" y="421" width="0.3" height="15.0" fill="rgb(237,138,14)" rx="2" ry="2" />
<text  x="1185.70" y="431.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (22 samples, 0.49%)</title><rect x="1177.0" y="373" width="5.7" height="15.0" fill="rgb(249,144,13)" rx="2" ry="2" />
<text  x="1179.97" y="383.5" ></text>
</g>
<g >
<title>runtime.handoffp (6 samples, 0.13%)</title><rect x="162.4" y="277" width="1.6" height="15.0" fill="rgb(249,141,2)" rx="2" ry="2" />
<text  x="165.42" y="287.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).sendTypeDescriptor (1 samples, 0.02%)</title><rect x="170.2" y="405" width="0.3" height="15.0" fill="rgb(226,205,46)" rx="2" ry="2" />
<text  x="173.23" y="415.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="338.3" y="261" width="0.2" height="15.0" fill="rgb(254,176,23)" rx="2" ry="2" />
<text  x="341.28" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (10 samples, 0.22%)</title><rect x="764.8" y="373" width="2.6" height="15.0" fill="rgb(249,158,49)" rx="2" ry="2" />
<text  x="767.79" y="383.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareWrite (1 samples, 0.02%)</title><rect x="75.9" y="373" width="0.3" height="15.0" fill="rgb(249,99,21)" rx="2" ry="2" />
<text  x="78.92" y="383.5" ></text>
</g>
<g >
<title>runtime.goexit0 (119 samples, 2.63%)</title><rect x="721.3" y="469" width="31.0" height="15.0" fill="rgb(210,33,22)" rx="2" ry="2" />
<text  x="724.28" y="479.5" >ru..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="752.0" y="357" width="0.3" height="15.0" fill="rgb(235,107,18)" rx="2" ry="2" />
<text  x="755.03" y="367.5" ></text>
</g>
<g >
<title>runtime.markroot (2 samples, 0.04%)</title><rect x="347.1" y="421" width="0.6" height="15.0" fill="rgb(208,93,48)" rx="2" ry="2" />
<text  x="350.14" y="431.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Kind (1 samples, 0.02%)</title><rect x="343.8" y="421" width="0.2" height="15.0" fill="rgb(239,120,36)" rx="2" ry="2" />
<text  x="346.76" y="431.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="723.1" y="389" width="0.3" height="15.0" fill="rgb(214,229,36)" rx="2" ry="2" />
<text  x="726.11" y="399.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="1182.7" y="405" width="0.3" height="15.0" fill="rgb(228,106,12)" rx="2" ry="2" />
<text  x="1185.70" y="415.5" ></text>
</g>
<g >
<title>runtime.schedule (117 samples, 2.58%)</title><rect x="721.8" y="453" width="30.5" height="15.0" fill="rgb(230,72,29)" rx="2" ry="2" />
<text  x="724.80" y="463.5" >ru..</text>
</g>
<g >
<title>io.ReadAtLeast (1 samples, 0.02%)</title><rect x="341.7" y="309" width="0.2" height="15.0" fill="rgb(226,75,29)" rx="2" ry="2" />
<text  x="344.67" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="1182.7" y="389" width="0.3" height="15.0" fill="rgb(232,92,48)" rx="2" ry="2" />
<text  x="1185.70" y="399.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.02%)</title><rect x="1184.0" y="437" width="0.3" height="15.0" fill="rgb(238,28,37)" rx="2" ry="2" />
<text  x="1187.01" y="447.5" ></text>
</g>
<g >
<title>reflect.Value.Field (1 samples, 0.02%)</title><rect x="338.5" y="309" width="0.3" height="15.0" fill="rgb(239,41,22)" rx="2" ry="2" />
<text  x="341.54" y="319.5" ></text>
</g>
<g >
<title>encoding/gob.decodeUintReader (2 samples, 0.04%)</title><rect x="184.8" y="325" width="0.5" height="15.0" fill="rgb(237,124,6)" rx="2" ry="2" />
<text  x="187.82" y="335.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (2 samples, 0.04%)</title><rect x="182.7" y="405" width="0.6" height="15.0" fill="rgb(219,57,38)" rx="2" ry="2" />
<text  x="185.74" y="415.5" ></text>
</g>
<g >
<title>reflect.Value.call (39 samples, 0.86%)</title><rect x="173.1" y="453" width="10.2" height="15.0" fill="rgb(218,182,26)" rx="2" ry="2" />
<text  x="176.10" y="463.5" ></text>
</g>
<g >
<title>runtime._System (1 samples, 0.02%)</title><rect x="346.1" y="485" width="0.3" height="15.0" fill="rgb(241,22,43)" rx="2" ry="2" />
<text  x="349.10" y="495.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.02%)</title><rect x="167.9" y="357" width="0.2" height="15.0" fill="rgb(220,210,42)" rx="2" ry="2" />
<text  x="170.89" y="367.5" ></text>
</g>
<g >
<title>io.ReadFull (1 samples, 0.02%)</title><rect x="341.4" y="325" width="0.3" height="15.0" fill="rgb(216,145,26)" rx="2" ry="2" />
<text  x="344.41" y="335.5" ></text>
</g>
<g >
<title>runtime.netpollcheckerr (1 samples, 0.02%)</title><rect x="75.9" y="325" width="0.3" height="15.0" fill="rgb(215,187,50)" rx="2" ry="2" />
<text  x="78.92" y="335.5" ></text>
</g>
<g >
<title>runtime.semasleep (10 samples, 0.22%)</title><rect x="764.8" y="389" width="2.6" height="15.0" fill="rgb(212,11,43)" rx="2" ry="2" />
<text  x="767.79" y="399.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="163.5" y="213" width="0.2" height="15.0" fill="rgb(240,102,54)" rx="2" ry="2" />
<text  x="166.46" y="223.5" ></text>
</g>
<g >
<title>runtime.kevent (67 samples, 1.48%)</title><rect x="727.3" y="405" width="17.4" height="15.0" fill="rgb(233,79,53)" rx="2" ry="2" />
<text  x="730.28" y="415.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Kind (3 samples, 0.07%)</title><rect x="167.1" y="341" width="0.8" height="15.0" fill="rgb(208,50,34)" rx="2" ry="2" />
<text  x="170.11" y="351.5" ></text>
</g>
<g >
<title>runtime.kevent (5 samples, 0.11%)</title><rect x="352.6" y="405" width="1.3" height="15.0" fill="rgb(239,217,40)" rx="2" ry="2" />
<text  x="355.61" y="415.5" ></text>
</g>
<g >
<title>runtime.notetsleep (4 samples, 0.09%)</title><rect x="1183.0" y="421" width="1.0" height="15.0" fill="rgb(248,122,52)" rx="2" ry="2" />
<text  x="1185.97" y="431.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="76.2" y="373" width="0.2" height="15.0" fill="rgb(212,214,8)" rx="2" ry="2" />
<text  x="79.18" y="383.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="170.8" y="341" width="0.2" height="15.0" fill="rgb(215,90,6)" rx="2" ry="2" />
<text  x="173.76" y="351.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="358.6" y="389" width="0.3" height="15.0" fill="rgb(241,26,31)" rx="2" ry="2" />
<text  x="361.61" y="399.5" ></text>
</g>
<g >
<title>encoding/gob.getEncEngine (1 samples, 0.02%)</title><rect x="169.5" y="389" width="0.2" height="15.0" fill="rgb(211,133,23)" rx="2" ry="2" />
<text  x="172.45" y="399.5" ></text>
</g>
<g >
<title>runtime.netpoll (72 samples, 1.59%)</title><rect x="726.0" y="421" width="18.7" height="15.0" fill="rgb(205,224,23)" rx="2" ry="2" />
<text  x="728.97" y="431.5" ></text>
</g>
<g >
<title>sync.(*entry).load (1 samples, 0.02%)</title><rect x="343.5" y="309" width="0.3" height="15.0" fill="rgb(230,192,18)" rx="2" ry="2" />
<text  x="346.50" y="319.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (579 samples, 12.78%)</title><rect x="186.1" y="245" width="150.9" height="15.0" fill="rgb(253,184,12)" rx="2" ry="2" />
<text  x="189.13" y="255.5" >net.(*netFD).Read</text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.02%)</title><rect x="358.6" y="421" width="0.3" height="15.0" fill="rgb(235,214,18)" rx="2" ry="2" />
<text  x="361.61" y="431.5" ></text>
</g>
<g >
<title>runtime.copystack (28 samples, 0.62%)</title><rect x="174.1" y="405" width="7.3" height="15.0" fill="rgb(242,146,0)" rx="2" ry="2" />
<text  x="177.14" y="415.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="1184.0" y="373" width="0.3" height="15.0" fill="rgb(243,124,27)" rx="2" ry="2" />
<text  x="1187.01" y="383.5" ></text>
</g>
<g >
<title>reflect.valueInterface (1 samples, 0.02%)</title><rect x="344.0" y="405" width="0.3" height="15.0" fill="rgb(212,178,52)" rx="2" ry="2" />
<text  x="347.02" y="415.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (2 samples, 0.04%)</title><rect x="73.8" y="437" width="0.6" height="15.0" fill="rgb(244,162,32)" rx="2" ry="2" />
<text  x="76.83" y="447.5" ></text>
</g>
<g >
<title>runtime.semawakeup (3 samples, 0.07%)</title><rect x="722.1" y="373" width="0.7" height="15.0" fill="rgb(217,143,35)" rx="2" ry="2" />
<text  x="725.06" y="383.5" ></text>
</g>
<g >
<title>runtime.injectglist (1 samples, 0.02%)</title><rect x="349.5" y="421" width="0.2" height="15.0" fill="rgb(207,156,9)" rx="2" ry="2" />
<text  x="352.49" y="431.5" ></text>
</g>
<g >
<title>encoding/gob.validUserType (3 samples, 0.07%)</title><rect x="343.0" y="341" width="0.8" height="15.0" fill="rgb(247,146,52)" rx="2" ry="2" />
<text  x="345.97" y="351.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="163.7" y="245" width="0.3" height="15.0" fill="rgb(216,151,42)" rx="2" ry="2" />
<text  x="166.72" y="255.5" ></text>
</g>
<g >
<title>io.ReadAtLeast (1 samples, 0.02%)</title><rect x="341.4" y="309" width="0.3" height="15.0" fill="rgb(236,145,30)" rx="2" ry="2" />
<text  x="344.41" y="319.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (1 samples, 0.02%)</title><rect x="186.6" y="197" width="0.3" height="15.0" fill="rgb(231,85,29)" rx="2" ry="2" />
<text  x="189.65" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (6 samples, 0.13%)</title><rect x="162.4" y="309" width="1.6" height="15.0" fill="rgb(247,106,2)" rx="2" ry="2" />
<text  x="165.42" y="319.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).DecodeValue (11 samples, 0.24%)</title><rect x="340.9" y="389" width="2.9" height="15.0" fill="rgb(230,37,43)" rx="2" ry="2" />
<text  x="343.89" y="399.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeManual (1 samples, 0.02%)</title><rect x="721.3" y="389" width="0.2" height="15.0" fill="rgb(251,170,26)" rx="2" ry="2" />
<text  x="724.28" y="399.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="358.6" y="373" width="0.3" height="15.0" fill="rgb(210,66,40)" rx="2" ry="2" />
<text  x="361.61" y="383.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="347.1" y="357" width="0.3" height="15.0" fill="rgb(242,181,30)" rx="2" ry="2" />
<text  x="350.14" y="367.5" ></text>
</g>
<g >
<title>runtime.libcCall (2 samples, 0.04%)</title><rect x="720.5" y="389" width="0.5" height="15.0" fill="rgb(246,88,21)" rx="2" ry="2" />
<text  x="723.50" y="399.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.02%)</title><rect x="179.9" y="309" width="0.2" height="15.0" fill="rgb(242,11,12)" rx="2" ry="2" />
<text  x="182.87" y="319.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollReset (1 samples, 0.02%)</title><rect x="186.6" y="181" width="0.3" height="15.0" fill="rgb(245,21,8)" rx="2" ry="2" />
<text  x="189.65" y="191.5" ></text>
</g>
<g >
<title>runtime.notesleep (16 samples, 0.35%)</title><rect x="354.4" y="405" width="4.2" height="15.0" fill="rgb(251,109,41)" rx="2" ry="2" />
<text  x="357.44" y="415.5" ></text>
</g>
<g >
<title>runtime.findrunnable (116 samples, 2.56%)</title><rect x="721.8" y="437" width="30.2" height="15.0" fill="rgb(253,110,46)" rx="2" ry="2" />
<text  x="724.80" y="447.5" >ru..</text>
</g>
<g >
<title>runtime.mstart (1,621 samples, 35.79%)</title><rect x="767.4" y="485" width="422.3" height="15.0" fill="rgb(217,189,24)" rx="2" ry="2" />
<text  x="770.40" y="495.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.usleep_trampoline (1 samples, 0.02%)</title><rect x="346.9" y="469" width="0.2" height="15.0" fill="rgb(240,55,4)" rx="2" ry="2" />
<text  x="349.88" y="479.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).EncodeValue (29 samples, 0.64%)</title><rect x="165.5" y="421" width="7.6" height="15.0" fill="rgb(209,146,18)" rx="2" ry="2" />
<text  x="168.54" y="431.5" ></text>
</g>
<g >
<title>encoding/gob.(*encBuffer).WriteByte (1 samples, 0.02%)</title><rect x="171.5" y="373" width="0.3" height="15.0" fill="rgb(233,61,5)" rx="2" ry="2" />
<text  x="174.54" y="383.5" ></text>
</g>
<g >
<title>runtime.stopm (1,391 samples, 30.71%)</title><rect x="358.9" y="453" width="362.4" height="15.0" fill="rgb(218,200,3)" rx="2" ry="2" />
<text  x="361.87" y="463.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.wakep (21 samples, 0.46%)</title><rect x="1184.3" y="421" width="5.4" height="15.0" fill="rgb(206,199,45)" rx="2" ry="2" />
<text  x="1187.27" y="431.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).Decode (598 samples, 13.20%)</title><rect x="184.6" y="389" width="155.8" height="15.0" fill="rgb(213,91,25)" rx="2" ry="2" />
<text  x="187.56" y="399.5" >encoding/gob.(*Decod..</text>
</g>
<g >
<title>net.(*conn).Read (579 samples, 12.78%)</title><rect x="186.1" y="261" width="150.9" height="15.0" fill="rgb(232,97,38)" rx="2" ry="2" />
<text  x="189.13" y="271.5" >net.(*conn).Read</text>
</g>
<g >
<title>runtime.runqput (1 samples, 0.02%)</title><rect x="349.2" y="405" width="0.3" height="15.0" fill="rgb(219,187,31)" rx="2" ry="2" />
<text  x="352.23" y="415.5" ></text>
</g>
<g >
<title>net/rpc.(*service).call (665 samples, 14.68%)</title><rect x="10.0" y="485" width="173.3" height="15.0" fill="rgb(220,86,27)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >net/rpc.(*service).call</text>
</g>
<g >
<title>runtime.notesleep (10 samples, 0.22%)</title><rect x="764.8" y="405" width="2.6" height="15.0" fill="rgb(216,170,11)" rx="2" ry="2" />
<text  x="767.79" y="415.5" ></text>
</g>
<g >
<title>encoding/gob.lookupTypeInfo (1 samples, 0.02%)</title><rect x="169.5" y="357" width="0.2" height="15.0" fill="rgb(229,209,14)" rx="2" ry="2" />
<text  x="172.45" y="367.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.04%)</title><rect x="767.4" y="437" width="0.5" height="15.0" fill="rgb(211,36,5)" rx="2" ry="2" />
<text  x="770.40" y="447.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.02%)</title><rect x="345.6" y="309" width="0.2" height="15.0" fill="rgb(244,115,23)" rx="2" ry="2" />
<text  x="348.58" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1,557 samples, 34.38%)</title><rect x="777.0" y="405" width="405.7" height="15.0" fill="rgb(254,63,47)" rx="2" ry="2" />
<text  x="780.04" y="415.5" >runtime.notewakeup</text>
</g>
<g >
<title>runtime.netpoll (11 samples, 0.24%)</title><rect x="351.1" y="421" width="2.8" height="15.0" fill="rgb(212,148,35)" rx="2" ry="2" />
<text  x="354.05" y="431.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (2 samples, 0.04%)</title><rect x="172.1" y="373" width="0.5" height="15.0" fill="rgb(221,224,36)" rx="2" ry="2" />
<text  x="175.06" y="383.5" ></text>
</g>
<g >
<title>runtime.findrunnable (36 samples, 0.79%)</title><rect x="349.2" y="437" width="9.4" height="15.0" fill="rgb(231,37,27)" rx="2" ry="2" />
<text  x="352.23" y="447.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profileBuilder).addCPUData (1 samples, 0.02%)</title><rect x="1189.7" y="469" width="0.3" height="15.0" fill="rgb(229,52,10)" rx="2" ry="2" />
<text  x="1192.74" y="479.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeTypeSequence (3 samples, 0.07%)</title><rect x="341.4" y="373" width="0.8" height="15.0" fill="rgb(245,66,46)" rx="2" ry="2" />
<text  x="344.41" y="383.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (8 samples, 0.18%)</title><rect x="1174.9" y="373" width="2.1" height="15.0" fill="rgb(222,119,52)" rx="2" ry="2" />
<text  x="1177.89" y="383.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (2 samples, 0.04%)</title><rect x="347.1" y="485" width="0.6" height="15.0" fill="rgb(239,88,7)" rx="2" ry="2" />
<text  x="350.14" y="495.5" ></text>
</g>
<g >
<title>runtime.findrunnable (58 samples, 1.28%)</title><rect x="752.3" y="437" width="15.1" height="15.0" fill="rgb(240,142,49)" rx="2" ry="2" />
<text  x="755.29" y="447.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="347.4" y="373" width="0.3" height="15.0" fill="rgb(248,214,54)" rx="2" ry="2" />
<text  x="350.40" y="383.5" ></text>
</g>
<g >
<title>runtime.semasleep (1,385 samples, 30.58%)</title><rect x="360.2" y="421" width="360.8" height="15.0" fill="rgb(254,220,45)" rx="2" ry="2" />
<text  x="363.17" y="431.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.funcname (1 samples, 0.02%)</title><rect x="345.6" y="357" width="0.2" height="15.0" fill="rgb(250,49,11)" rx="2" ry="2" />
<text  x="348.58" y="367.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (1 samples, 0.02%)</title><rect x="1184.0" y="453" width="0.3" height="15.0" fill="rgb(251,138,28)" rx="2" ry="2" />
<text  x="1187.01" y="463.5" ></text>
</g>
<g >
<title>encoding/gob.(*encoderState).update (1 samples, 0.02%)</title><rect x="166.8" y="357" width="0.3" height="15.0" fill="rgb(251,80,37)" rx="2" ry="2" />
<text  x="169.85" y="367.5" ></text>
</g>
<g >
<title>runtime/pprof.profileWriter (1 samples, 0.02%)</title><rect x="1189.7" y="485" width="0.3" height="15.0" fill="rgb(238,106,41)" rx="2" ry="2" />
<text  x="1192.74" y="495.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).DecodeValue (597 samples, 13.18%)</title><rect x="184.8" y="373" width="155.6" height="15.0" fill="rgb(205,227,29)" rx="2" ry="2" />
<text  x="187.82" y="383.5" >encoding/gob.(*Deco..</text>
</g>
<g >
<title>runtime.kevent_trampoline (1 samples, 0.02%)</title><rect x="346.6" y="469" width="0.3" height="15.0" fill="rgb(222,73,37)" rx="2" ry="2" />
<text  x="349.62" y="479.5" ></text>
</g>
<g >
<title>runtime.stackcacherefill (1 samples, 0.02%)</title><rect x="181.2" y="373" width="0.2" height="15.0" fill="rgb(237,11,40)" rx="2" ry="2" />
<text  x="184.18" y="383.5" ></text>
</g>
<g >
<title>runtime.pcvalue (3 samples, 0.07%)</title><rect x="179.4" y="325" width="0.7" height="15.0" fill="rgb(215,23,37)" rx="2" ry="2" />
<text  x="182.35" y="335.5" ></text>
</g>
<g >
<title>runtime.acquirep (4 samples, 0.09%)</title><rect x="359.1" y="437" width="1.1" height="15.0" fill="rgb(216,39,53)" rx="2" ry="2" />
<text  x="362.13" y="447.5" ></text>
</g>
<g >
<title>reflect.Value.FieldByIndex (3 samples, 0.07%)</title><rect x="167.1" y="373" width="0.8" height="15.0" fill="rgb(223,214,2)" rx="2" ry="2" />
<text  x="170.11" y="383.5" ></text>
</g>
<g >
<title>runtime.findnull (1 samples, 0.02%)</title><rect x="345.6" y="325" width="0.2" height="15.0" fill="rgb(208,176,25)" rx="2" ry="2" />
<text  x="348.58" y="335.5" ></text>
</g>
<g >
<title>runtime.nanotime (5 samples, 0.11%)</title><rect x="752.3" y="421" width="1.3" height="15.0" fill="rgb(227,187,20)" rx="2" ry="2" />
<text  x="755.29" y="431.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.02%)</title><rect x="721.3" y="357" width="0.2" height="15.0" fill="rgb(228,135,45)" rx="2" ry="2" />
<text  x="724.28" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="337.8" y="293" width="0.7" height="15.0" fill="rgb(222,138,50)" rx="2" ry="2" />
<text  x="340.76" y="303.5" ></text>
</g>
<g >
<title>runtime.gfput (1 samples, 0.02%)</title><rect x="721.3" y="453" width="0.2" height="15.0" fill="rgb(212,21,29)" rx="2" ry="2" />
<text  x="724.28" y="463.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (6 samples, 0.13%)</title><rect x="344.5" y="405" width="1.6" height="15.0" fill="rgb(251,106,49)" rx="2" ry="2" />
<text  x="347.54" y="415.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="169.7" y="389" width="0.3" height="15.0" fill="rgb(246,222,22)" rx="2" ry="2" />
<text  x="172.71" y="399.5" ></text>
</g>
<g >
<title>runtime.tracebackdefers (3 samples, 0.07%)</title><rect x="174.4" y="373" width="0.8" height="15.0" fill="rgb(234,6,28)" rx="2" ry="2" />
<text  x="177.40" y="383.5" ></text>
</g>
<g >
<title>runtime.wirep (3 samples, 0.07%)</title><rect x="359.4" y="421" width="0.8" height="15.0" fill="rgb(207,148,9)" rx="2" ry="2" />
<text  x="362.39" y="431.5" ></text>
</g>
<g >
<title>runtime.mapaccess1 (1 samples, 0.02%)</title><rect x="171.0" y="389" width="0.3" height="15.0" fill="rgb(243,10,36)" rx="2" ry="2" />
<text  x="174.02" y="399.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (4 samples, 0.09%)</title><rect x="1183.0" y="405" width="1.0" height="15.0" fill="rgb(235,3,31)" rx="2" ry="2" />
<text  x="1185.97" y="415.5" ></text>
</g>
<g >
<title>runtime.adjustdefers (3 samples, 0.07%)</title><rect x="174.4" y="389" width="0.8" height="15.0" fill="rgb(225,78,23)" rx="2" ry="2" />
<text  x="177.40" y="399.5" ></text>
</g>
<g >
<title>runtime.mcall (1,611 samples, 35.57%)</title><rect x="347.7" y="485" width="419.7" height="15.0" fill="rgb(210,11,41)" rx="2" ry="2" />
<text  x="350.66" y="495.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.02%)</title><rect x="338.8" y="325" width="0.3" height="15.0" fill="rgb(244,200,24)" rx="2" ry="2" />
<text  x="341.81" y="335.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.04%)</title><rect x="745.0" y="389" width="0.5" height="15.0" fill="rgb(250,84,33)" rx="2" ry="2" />
<text  x="747.99" y="399.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="775.7" y="421" width="0.3" height="15.0" fill="rgb(211,26,40)" rx="2" ry="2" />
<text  x="778.74" y="431.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="752.0" y="389" width="0.3" height="15.0" fill="rgb(218,152,49)" rx="2" ry="2" />
<text  x="755.03" y="399.5" ></text>
</g>
<g >
<title>runtime.lock (5 samples, 0.11%)</title><rect x="347.7" y="453" width="1.3" height="15.0" fill="rgb(234,162,0)" rx="2" ry="2" />
<text  x="350.66" y="463.5" ></text>
</g>
<g >
<title>runtime.pcvalue (3 samples, 0.07%)</title><rect x="180.1" y="357" width="0.8" height="15.0" fill="rgb(231,62,29)" rx="2" ry="2" />
<text  x="183.13" y="367.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (345 samples, 7.62%)</title><rect x="75.7" y="405" width="89.8" height="15.0" fill="rgb(219,55,17)" rx="2" ry="2" />
<text  x="78.66" y="415.5" >net.(*netF..</text>
</g>
<g >
<title>runtime.lock (2 samples, 0.04%)</title><rect x="162.7" y="245" width="0.5" height="15.0" fill="rgb(221,49,40)" rx="2" ry="2" />
<text  x="165.68" y="255.5" ></text>
</g>
<g >
<title>runtime.netpoll (43 samples, 0.95%)</title><rect x="753.6" y="421" width="11.2" height="15.0" fill="rgb(220,130,26)" rx="2" ry="2" />
<text  x="756.59" y="431.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (4 samples, 0.09%)</title><rect x="1183.0" y="373" width="1.0" height="15.0" fill="rgb(239,181,7)" rx="2" ry="2" />
<text  x="1185.97" y="383.5" ></text>
</g>
<g >
<title>runtime.runqgrab (2 samples, 0.04%)</title><rect x="353.9" y="405" width="0.5" height="15.0" fill="rgb(209,90,53)" rx="2" ry="2" />
<text  x="356.92" y="415.5" ></text>
</g>
<g >
<title>runtime.deferreturn (5 samples, 0.11%)</title><rect x="168.1" y="373" width="1.4" height="15.0" fill="rgb(216,71,25)" rx="2" ry="2" />
<text  x="171.15" y="383.5" ></text>
</g>
<g >
<title>net/rpc.(*gobServerCodec).ReadRequestBody (11 samples, 0.24%)</title><rect x="340.9" y="421" width="2.9" height="15.0" fill="rgb(246,86,13)" rx="2" ry="2" />
<text  x="343.89" y="431.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (2 samples, 0.04%)</title><rect x="181.7" y="405" width="0.5" height="15.0" fill="rgb(231,44,15)" rx="2" ry="2" />
<text  x="184.70" y="415.5" ></text>
</g>
<g >
<title>runtime.startm (5 samples, 0.11%)</title><rect x="334.9" y="101" width="1.3" height="15.0" fill="rgb(253,204,21)" rx="2" ry="2" />
<text  x="337.90" y="111.5" ></text>
</g>
<g >
<title>net/rpc.ServeConn (625 samples, 13.80%)</title><rect x="183.3" y="485" width="162.8" height="15.0" fill="rgb(209,197,12)" rx="2" ry="2" />
<text  x="186.26" y="495.5" >net/rpc.ServeConn</text>
</g>
<g >
<title>runtime.startm (3 samples, 0.07%)</title><rect x="722.1" y="405" width="0.7" height="15.0" fill="rgb(229,104,49)" rx="2" ry="2" />
<text  x="725.06" y="415.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="163.5" y="229" width="0.2" height="15.0" fill="rgb(241,159,5)" rx="2" ry="2" />
<text  x="166.46" y="239.5" ></text>
</g>
<g >
<title>runtime.osyield (4 samples, 0.09%)</title><rect x="776.0" y="389" width="1.0" height="15.0" fill="rgb(243,214,35)" rx="2" ry="2" />
<text  x="779.00" y="399.5" ></text>
</g>
<g >
<title>runtime.injectglist (4 samples, 0.09%)</title><rect x="722.1" y="421" width="1.0" height="15.0" fill="rgb(249,147,13)" rx="2" ry="2" />
<text  x="725.06" y="431.5" ></text>
</g>
<g >
<title>io.ReadAtLeast (2 samples, 0.04%)</title><rect x="184.8" y="293" width="0.5" height="15.0" fill="rgb(242,150,22)" rx="2" ry="2" />
<text  x="187.82" y="303.5" ></text>
</g>
<g >
<title>runtime.osyield (5 samples, 0.11%)</title><rect x="347.7" y="437" width="1.3" height="15.0" fill="rgb(236,217,43)" rx="2" ry="2" />
<text  x="350.66" y="447.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).ServeConn (625 samples, 13.80%)</title><rect x="183.3" y="469" width="162.8" height="15.0" fill="rgb(237,207,49)" rx="2" ry="2" />
<text  x="186.26" y="479.5" >net/rpc.(*Server).Se..</text>
</g>
<g >
<title>runtime.adjustframe (2 samples, 0.04%)</title><rect x="174.7" y="357" width="0.5" height="15.0" fill="rgb(227,73,41)" rx="2" ry="2" />
<text  x="177.66" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (20 samples, 0.44%)</title><rect x="1184.3" y="357" width="5.2" height="15.0" fill="rgb(253,210,5)" rx="2" ry="2" />
<text  x="1187.27" y="367.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="349.5" y="389" width="0.2" height="15.0" fill="rgb(210,113,22)" rx="2" ry="2" />
<text  x="352.49" y="399.5" ></text>
</g>
<g >
<title>runtime.aeshash64 (1 samples, 0.02%)</title><rect x="1189.7" y="421" width="0.3" height="15.0" fill="rgb(228,99,8)" rx="2" ry="2" />
<text  x="1192.74" y="431.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1,562 samples, 34.49%)</title><rect x="775.7" y="453" width="407.0" height="15.0" fill="rgb(254,227,46)" rx="2" ry="2" />
<text  x="778.74" y="463.5" >runtime.entersyscallblock_handoff</text>
</g>
<g >
<title>bufio.(*Reader).Read (1 samples, 0.02%)</title><rect x="341.7" y="293" width="0.2" height="15.0" fill="rgb(206,150,47)" rx="2" ry="2" />
<text  x="344.67" y="303.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (5 samples, 0.11%)</title><rect x="334.9" y="165" width="1.3" height="15.0" fill="rgb(247,206,25)" rx="2" ry="2" />
<text  x="337.90" y="175.5" ></text>
</g>
<g >
<title>runtime.usleep (4 samples, 0.09%)</title><rect x="776.0" y="373" width="1.0" height="15.0" fill="rgb(207,53,11)" rx="2" ry="2" />
<text  x="779.00" y="383.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeStruct (3 samples, 0.07%)</title><rect x="342.2" y="357" width="0.8" height="15.0" fill="rgb(247,103,18)" rx="2" ry="2" />
<text  x="345.19" y="367.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (3 samples, 0.07%)</title><rect x="336.2" y="165" width="0.8" height="15.0" fill="rgb(212,68,17)" rx="2" ry="2" />
<text  x="339.20" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="347.1" y="469" width="0.6" height="15.0" fill="rgb(235,133,47)" rx="2" ry="2" />
<text  x="350.14" y="479.5" ></text>
</g>
<g >
<title>runtime.notesleep (25 samples, 0.55%)</title><rect x="745.5" y="405" width="6.5" height="15.0" fill="rgb(252,155,44)" rx="2" ry="2" />
<text  x="748.51" y="415.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (2 samples, 0.04%)</title><rect x="343.2" y="325" width="0.6" height="15.0" fill="rgb(244,185,51)" rx="2" ry="2" />
<text  x="346.23" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.userType (3 samples, 0.07%)</title><rect x="343.0" y="357" width="0.8" height="15.0" fill="rgb(234,29,8)" rx="2" ry="2" />
<text  x="345.97" y="367.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).recvMessage (582 samples, 12.85%)</title><rect x="185.3" y="341" width="151.7" height="15.0" fill="rgb(248,97,37)" rx="2" ry="2" />
<text  x="188.35" y="351.5" >encoding/gob.(*Deco..</text>
</g>
<g >
<title>encoding/gob.(*encBuffer).Write (2 samples, 0.04%)</title><rect x="170.5" y="357" width="0.5" height="15.0" fill="rgb(222,0,16)" rx="2" ry="2" />
<text  x="173.49" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.02%)</title><rect x="359.1" y="421" width="0.3" height="15.0" fill="rgb(238,28,51)" rx="2" ry="2" />
<text  x="362.13" y="431.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeValue (6 samples, 0.13%)</title><rect x="342.2" y="373" width="1.6" height="15.0" fill="rgb(215,194,27)" rx="2" ry="2" />
<text  x="345.19" y="383.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.02%)</title><rect x="339.1" y="325" width="0.2" height="15.0" fill="rgb(226,30,31)" rx="2" ry="2" />
<text  x="342.07" y="335.5" ></text>
</g>
<g >
<title>runtime.adjustframe (17 samples, 0.38%)</title><rect x="175.7" y="373" width="4.4" height="15.0" fill="rgb(215,148,27)" rx="2" ry="2" />
<text  x="178.71" y="383.5" ></text>
</g>
</g>
</svg>

