<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="342.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="325" > </text>
<g id="frames">
<g >
<title>runtime.gcBgMarkWorker (1 samples, 0.04%)</title><rect x="207.1" y="277" width="0.4" height="15.0" fill="rgb(207,102,53)" rx="2" ry="2" />
<text  x="210.05" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (4 samples, 0.16%)</title><rect x="12.8" y="181" width="1.8" height="15.0" fill="rgb(221,201,18)" rx="2" ry="2" />
<text  x="15.78" y="191.5" ></text>
</g>
<g >
<title>runtime.netpollready (1 samples, 0.04%)</title><rect x="427.3" y="197" width="0.5" height="15.0" fill="rgb(212,193,44)" rx="2" ry="2" />
<text  x="430.29" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (4 samples, 0.16%)</title><rect x="15.6" y="197" width="1.8" height="15.0" fill="rgb(213,25,2)" rx="2" ry="2" />
<text  x="18.56" y="207.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.04%)</title><rect x="213.5" y="213" width="0.5" height="15.0" fill="rgb(247,136,11)" rx="2" ry="2" />
<text  x="216.54" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeBytes3 (1 samples, 0.04%)</title><rect x="15.1" y="133" width="0.5" height="15.0" fill="rgb(206,170,7)" rx="2" ry="2" />
<text  x="18.10" y="143.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.04%)</title><rect x="49.4" y="101" width="0.5" height="15.0" fill="rgb(228,159,26)" rx="2" ry="2" />
<text  x="52.41" y="111.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="731.0" y="149" width="0.4" height="15.0" fill="rgb(209,110,1)" rx="2" ry="2" />
<text  x="733.98" y="159.5" ></text>
</g>
<g >
<title>runtime.deferreturn (8 samples, 0.31%)</title><rect x="108.8" y="213" width="3.7" height="15.0" fill="rgb(218,11,9)" rx="2" ry="2" />
<text  x="111.76" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.04%)</title><rect x="49.4" y="85" width="0.5" height="15.0" fill="rgb(244,202,22)" rx="2" ry="2" />
<text  x="52.41" y="95.5" ></text>
</g>
<g >
<title>runtime.mstart1 (380 samples, 14.93%)</title><rect x="750.9" y="261" width="176.2" height="15.0" fill="rgb(244,94,7)" rx="2" ry="2" />
<text  x="753.92" y="271.5" >runtime.mstart1</text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.08%)</title><rect x="214.5" y="197" width="0.9" height="15.0" fill="rgb(206,85,52)" rx="2" ry="2" />
<text  x="217.47" y="207.5" ></text>
</g>
<g >
<title>callRet (1 samples, 0.04%)</title><rect x="15.6" y="149" width="0.4" height="15.0" fill="rgb(247,167,24)" rx="2" ry="2" />
<text  x="18.56" y="159.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.04%)</title><rect x="10.9" y="181" width="0.5" height="15.0" fill="rgb(226,84,39)" rx="2" ry="2" />
<text  x="13.93" y="191.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.08%)</title><rect x="752.3" y="197" width="0.9" height="15.0" fill="rgb(217,141,3)" rx="2" ry="2" />
<text  x="755.31" y="207.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.04%)</title><rect x="201.5" y="69" width="0.5" height="15.0" fill="rgb(207,1,23)" rx="2" ry="2" />
<text  x="204.49" y="79.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="731.4" y="149" width="0.5" height="15.0" fill="rgb(246,90,27)" rx="2" ry="2" />
<text  x="734.45" y="159.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.04%)</title><rect x="13.7" y="85" width="0.5" height="15.0" fill="rgb(221,49,29)" rx="2" ry="2" />
<text  x="16.71" y="95.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.ReadStream (133 samples, 5.23%)</title><rect x="45.7" y="277" width="61.7" height="15.0" fill="rgb(252,100,0)" rx="2" ry="2" />
<text  x="48.70" y="287.5" >hslam...</text>
</g>
<g >
<title>runtime.lock (6 samples, 0.24%)</title><rect x="751.8" y="229" width="2.8" height="15.0" fill="rgb(247,191,51)" rx="2" ry="2" />
<text  x="754.85" y="239.5" ></text>
</g>
<g >
<title>runtime.reflectcallmove (1 samples, 0.04%)</title><rect x="15.6" y="133" width="0.4" height="15.0" fill="rgb(227,15,24)" rx="2" ry="2" />
<text  x="18.56" y="143.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.04%)</title><rect x="107.4" y="165" width="0.4" height="15.0" fill="rgb(254,196,21)" rx="2" ry="2" />
<text  x="110.37" y="175.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.04%)</title><rect x="50.3" y="213" width="0.5" height="15.0" fill="rgb(233,83,2)" rx="2" ry="2" />
<text  x="53.34" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (4 samples, 0.16%)</title><rect x="12.8" y="197" width="1.8" height="15.0" fill="rgb(210,129,45)" rx="2" ry="2" />
<text  x="15.78" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (2 samples, 0.08%)</title><rect x="208.0" y="229" width="0.9" height="15.0" fill="rgb(220,21,50)" rx="2" ry="2" />
<text  x="210.98" y="239.5" ></text>
</g>
<g >
<title>runtime.mstart (945 samples, 37.13%)</title><rect x="750.9" y="277" width="438.2" height="15.0" fill="rgb(206,18,54)" rx="2" ry="2" />
<text  x="753.92" y="287.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="107.4" y="229" width="0.4" height="15.0" fill="rgb(208,209,31)" rx="2" ry="2" />
<text  x="110.37" y="239.5" ></text>
</g>
<g >
<title>runtime.wakep (37 samples, 1.45%)</title><rect x="733.3" y="213" width="17.2" height="15.0" fill="rgb(250,24,6)" rx="2" ry="2" />
<text  x="736.30" y="223.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="106.9" y="261" width="0.5" height="15.0" fill="rgb(224,39,15)" rx="2" ry="2" />
<text  x="109.90" y="271.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (1 samples, 0.04%)</title><rect x="1189.1" y="245" width="0.4" height="15.0" fill="rgb(219,22,30)" rx="2" ry="2" />
<text  x="1192.07" y="255.5" ></text>
</g>
<g >
<title>syscall.write (193 samples, 7.58%)</title><rect x="112.5" y="197" width="89.5" height="15.0" fill="rgb(232,4,25)" rx="2" ry="2" />
<text  x="115.47" y="207.5" >syscall.wr..</text>
</g>
<g >
<title>runtime.procyield (2 samples, 0.08%)</title><rect x="215.4" y="197" width="0.9" height="15.0" fill="rgb(250,210,44)" rx="2" ry="2" />
<text  x="218.40" y="207.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (1 samples, 0.04%)</title><rect x="100.9" y="165" width="0.4" height="15.0" fill="rgb(232,6,15)" rx="2" ry="2" />
<text  x="103.88" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (565 samples, 22.20%)</title><rect x="927.1" y="261" width="262.0" height="15.0" fill="rgb(206,112,20)" rx="2" ry="2" />
<text  x="930.11" y="271.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="11.4" y="213" width="0.5" height="15.0" fill="rgb(215,99,35)" rx="2" ry="2" />
<text  x="14.39" y="223.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (1 samples, 0.04%)</title><rect x="49.4" y="165" width="0.5" height="15.0" fill="rgb(219,97,21)" rx="2" ry="2" />
<text  x="52.41" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.04%)</title><rect x="10.5" y="197" width="0.4" height="15.0" fill="rgb(219,17,28)" rx="2" ry="2" />
<text  x="13.46" y="207.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.04%)</title><rect x="22.5" y="165" width="0.5" height="15.0" fill="rgb(239,18,35)" rx="2" ry="2" />
<text  x="25.52" y="175.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="833.9" y="181" width="0.5" height="15.0" fill="rgb(236,159,22)" rx="2" ry="2" />
<text  x="836.91" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (1 samples, 0.04%)</title><rect x="11.9" y="165" width="0.4" height="15.0" fill="rgb(253,77,19)" rx="2" ry="2" />
<text  x="14.85" y="175.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.04%)</title><rect x="207.1" y="213" width="0.4" height="15.0" fill="rgb(218,97,14)" rx="2" ry="2" />
<text  x="210.05" y="223.5" ></text>
</g>
<g >
<title>runtime.acquirep (3 samples, 0.12%)</title><rect x="444.9" y="197" width="1.4" height="15.0" fill="rgb(223,129,24)" rx="2" ry="2" />
<text  x="447.91" y="207.5" ></text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.08%)</title><rect x="50.8" y="197" width="0.9" height="15.0" fill="rgb(215,111,52)" rx="2" ry="2" />
<text  x="53.80" y="207.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (203 samples, 7.98%)</title><rect x="107.8" y="229" width="94.2" height="15.0" fill="rgb(239,38,49)" rx="2" ry="2" />
<text  x="110.83" y="239.5" >internal/po..</text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="107.4" y="245" width="0.4" height="15.0" fill="rgb(242,68,0)" rx="2" ry="2" />
<text  x="110.37" y="255.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareWrite (1 samples, 0.04%)</title><rect x="108.3" y="213" width="0.5" height="15.0" fill="rgb(206,61,46)" rx="2" ry="2" />
<text  x="111.29" y="223.5" ></text>
</g>
<g >
<title>runtime.acquireSudog (1 samples, 0.04%)</title><rect x="202.4" y="229" width="0.5" height="15.0" fill="rgb(230,172,38)" rx="2" ry="2" />
<text  x="205.42" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (2 samples, 0.08%)</title><rect x="208.0" y="149" width="0.9" height="15.0" fill="rgb(212,183,25)" rx="2" ry="2" />
<text  x="210.98" y="159.5" ></text>
</g>
<g >
<title>runtime.aeshashbody (1 samples, 0.04%)</title><rect x="17.4" y="133" width="0.5" height="15.0" fill="rgb(237,69,22)" rx="2" ry="2" />
<text  x="20.42" y="143.5" ></text>
</g>
<g >
<title>unicode/utf8.ValidString (1 samples, 0.04%)</title><rect x="14.2" y="117" width="0.4" height="15.0" fill="rgb(238,47,28)" rx="2" ry="2" />
<text  x="17.17" y="127.5" ></text>
</g>
<g >
<title>runtime.notetsleep (180 samples, 7.07%)</title><rect x="798.2" y="229" width="83.5" height="15.0" fill="rgb(218,43,13)" rx="2" ry="2" />
<text  x="801.21" y="239.5" >runtime.n..</text>
</g>
<g >
<title>runtime.schedule (1,167 samples, 45.85%)</title><rect x="209.4" y="245" width="541.1" height="15.0" fill="rgb(230,33,32)" rx="2" ry="2" />
<text  x="212.37" y="255.5" >runtime.schedule</text>
</g>
<g >
<title>reflect.Value.call (4 samples, 0.16%)</title><rect x="15.6" y="165" width="1.8" height="15.0" fill="rgb(249,206,2)" rx="2" ry="2" />
<text  x="18.56" y="175.5" ></text>
</g>
<g >
<title>runtime.findrunnable (2 samples, 0.08%)</title><rect x="208.0" y="213" width="0.9" height="15.0" fill="rgb(209,72,8)" rx="2" ry="2" />
<text  x="210.98" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="107.4" y="197" width="0.4" height="15.0" fill="rgb(216,109,47)" rx="2" ry="2" />
<text  x="110.37" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.04%)</title><rect x="23.4" y="149" width="0.5" height="15.0" fill="rgb(240,177,51)" rx="2" ry="2" />
<text  x="26.45" y="159.5" ></text>
</g>
<g >
<title>runtime.wirep (1 samples, 0.04%)</title><rect x="445.8" y="181" width="0.5" height="15.0" fill="rgb(210,10,10)" rx="2" ry="2" />
<text  x="448.83" y="191.5" ></text>
</g>
<g >
<title>reflect.resolveTypeOff (3 samples, 0.12%)</title><rect x="21.1" y="149" width="1.4" height="15.0" fill="rgb(213,169,44)" rx="2" ry="2" />
<text  x="24.13" y="159.5" ></text>
</g>
<g >
<title>runtime.notesleep (617 samples, 24.24%)</title><rect x="446.3" y="197" width="286.1" height="15.0" fill="rgb(233,169,31)" rx="2" ry="2" />
<text  x="449.30" y="207.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.bgsweep (1 samples, 0.04%)</title><rect x="206.6" y="277" width="0.5" height="15.0" fill="rgb(211,57,36)" rx="2" ry="2" />
<text  x="209.59" y="287.5" ></text>
</g>
<g >
<title>runtime.gosched_m (2 samples, 0.08%)</title><rect x="208.0" y="261" width="0.9" height="15.0" fill="rgb(232,25,45)" rx="2" ry="2" />
<text  x="210.98" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.04%)</title><rect x="731.4" y="165" width="0.5" height="15.0" fill="rgb(214,164,48)" rx="2" ry="2" />
<text  x="734.45" y="175.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (123 samples, 4.83%)</title><rect x="49.9" y="245" width="57.0" height="15.0" fill="rgb(225,181,22)" rx="2" ry="2" />
<text  x="52.87" y="255.5" >net.(*..</text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (2 samples, 0.08%)</title><rect x="444.9" y="181" width="0.9" height="15.0" fill="rgb(248,144,29)" rx="2" ry="2" />
<text  x="447.91" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.04%)</title><rect x="23.0" y="133" width="0.4" height="15.0" fill="rgb(221,98,9)" rx="2" ry="2" />
<text  x="25.98" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (2 samples, 0.08%)</title><rect x="14.6" y="213" width="1.0" height="15.0" fill="rgb(206,76,0)" rx="2" ry="2" />
<text  x="17.64" y="223.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.04%)</title><rect x="22.5" y="133" width="0.5" height="15.0" fill="rgb(210,56,46)" rx="2" ry="2" />
<text  x="25.52" y="143.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.04%)</title><rect x="15.1" y="149" width="0.5" height="15.0" fill="rgb(214,219,42)" rx="2" ry="2" />
<text  x="18.10" y="159.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.04%)</title><rect x="49.4" y="133" width="0.5" height="15.0" fill="rgb(226,104,47)" rx="2" ry="2" />
<text  x="52.41" y="143.5" ></text>
</g>
<g >
<title>net.(*conn).Write (203 samples, 7.98%)</title><rect x="107.8" y="261" width="94.2" height="15.0" fill="rgb(238,190,40)" rx="2" ry="2" />
<text  x="110.83" y="271.5" >net.(*conn)..</text>
</g>
<g >
<title>runtime.deferclass (1 samples, 0.04%)</title><rect x="50.3" y="181" width="0.5" height="15.0" fill="rgb(205,166,25)" rx="2" ry="2" />
<text  x="53.34" y="191.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (2 samples, 0.08%)</title><rect x="208.0" y="245" width="0.9" height="15.0" fill="rgb(231,39,19)" rx="2" ry="2" />
<text  x="210.98" y="255.5" ></text>
</g>
<g >
<title>runtime.gcStart.func1 (1 samples, 0.04%)</title><rect x="17.0" y="85" width="0.4" height="15.0" fill="rgb(251,148,48)" rx="2" ry="2" />
<text  x="19.95" y="95.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (342 samples, 13.44%)</title><rect x="1029.1" y="149" width="158.6" height="15.0" fill="rgb(247,202,34)" rx="2" ry="2" />
<text  x="1032.11" y="159.5" >runtime.pthread_cond..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (27 samples, 1.06%)</title><rect x="12.3" y="245" width="12.5" height="15.0" fill="rgb(253,85,9)" rx="2" ry="2" />
<text  x="15.32" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.04%)</title><rect x="14.6" y="165" width="0.5" height="15.0" fill="rgb(239,110,14)" rx="2" ry="2" />
<text  x="17.64" y="175.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (1 samples, 0.04%)</title><rect x="1189.1" y="229" width="0.4" height="15.0" fill="rgb(225,40,34)" rx="2" ry="2" />
<text  x="1192.07" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.04%)</title><rect x="107.4" y="181" width="0.4" height="15.0" fill="rgb(239,133,18)" rx="2" ry="2" />
<text  x="110.37" y="191.5" ></text>
</g>
<g >
<title>runtime.startm (134 samples, 5.27%)</title><rect x="927.1" y="213" width="62.1" height="15.0" fill="rgb(234,65,7)" rx="2" ry="2" />
<text  x="930.11" y="223.5" >runtim..</text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.04%)</title><rect x="25.3" y="245" width="0.5" height="15.0" fill="rgb(251,129,19)" rx="2" ry="2" />
<text  x="28.30" y="255.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="17.9" y="165" width="0.4" height="15.0" fill="rgb(224,223,50)" rx="2" ry="2" />
<text  x="20.88" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (1 samples, 0.04%)</title><rect x="10.5" y="213" width="0.4" height="15.0" fill="rgb(252,3,38)" rx="2" ry="2" />
<text  x="13.46" y="223.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.04%)</title><rect x="49.4" y="149" width="0.5" height="15.0" fill="rgb(217,129,4)" rx="2" ry="2" />
<text  x="52.41" y="159.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.08%)</title><rect x="208.0" y="165" width="0.9" height="15.0" fill="rgb(208,6,48)" rx="2" ry="2" />
<text  x="210.98" y="175.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (2 samples, 0.08%)</title><rect x="201.0" y="117" width="1.0" height="15.0" fill="rgb(205,133,1)" rx="2" ry="2" />
<text  x="204.03" y="127.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.04%)</title><rect x="257.6" y="197" width="0.5" height="15.0" fill="rgb(226,30,44)" rx="2" ry="2" />
<text  x="260.59" y="207.5" ></text>
</g>
<g >
<title>reflect.packEface (1 samples, 0.04%)</title><rect x="20.2" y="149" width="0.5" height="15.0" fill="rgb(248,60,6)" rx="2" ry="2" />
<text  x="23.20" y="159.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1 samples, 0.04%)</title><rect x="207.5" y="229" width="0.5" height="15.0" fill="rgb(240,27,25)" rx="2" ry="2" />
<text  x="210.52" y="239.5" ></text>
</g>
<g >
<title>runtime.chansend1 (2 samples, 0.08%)</title><rect x="48.9" y="245" width="1.0" height="15.0" fill="rgb(228,60,39)" rx="2" ry="2" />
<text  x="51.95" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Marshal (1 samples, 0.04%)</title><rect x="23.0" y="165" width="0.4" height="15.0" fill="rgb(206,28,22)" rx="2" ry="2" />
<text  x="25.98" y="175.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="797.7" y="213" width="0.5" height="15.0" fill="rgb(221,119,15)" rx="2" ry="2" />
<text  x="800.75" y="223.5" ></text>
</g>
<g >
<title>runtime.goready (1 samples, 0.04%)</title><rect x="49.4" y="197" width="0.5" height="15.0" fill="rgb(253,88,5)" rx="2" ry="2" />
<text  x="52.41" y="207.5" ></text>
</g>
<g >
<title>syscall.syscall (119 samples, 4.68%)</title><rect x="51.7" y="181" width="55.2" height="15.0" fill="rgb(241,73,35)" rx="2" ry="2" />
<text  x="54.73" y="191.5" >sysca..</text>
</g>
<g >
<title>runtime.notetsleep_internal (104 samples, 4.09%)</title><rect x="833.4" y="213" width="48.3" height="15.0" fill="rgb(217,191,54)" rx="2" ry="2" />
<text  x="836.45" y="223.5" >runt..</text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.04%)</title><rect x="207.5" y="197" width="0.5" height="15.0" fill="rgb(246,121,21)" rx="2" ry="2" />
<text  x="210.52" y="207.5" ></text>
</g>
<g >
<title>runtime.ready (345 samples, 13.56%)</title><rect x="1029.1" y="229" width="160.0" height="15.0" fill="rgb(215,210,22)" rx="2" ry="2" />
<text  x="1032.11" y="239.5" >runtime.ready</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (4 samples, 0.16%)</title><rect x="12.8" y="149" width="1.8" height="15.0" fill="rgb(220,21,19)" rx="2" ry="2" />
<text  x="15.78" y="159.5" ></text>
</g>
<g >
<title>runtime.(*_type).typeOff (3 samples, 0.12%)</title><rect x="21.1" y="133" width="1.4" height="15.0" fill="rgb(254,125,11)" rx="2" ry="2" />
<text  x="24.13" y="143.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.04%)</title><rect x="11.9" y="149" width="0.4" height="15.0" fill="rgb(242,166,2)" rx="2" ry="2" />
<text  x="14.85" y="159.5" ></text>
</g>
<g >
<title>runtime.semasleep (616 samples, 24.20%)</title><rect x="446.8" y="181" width="285.6" height="15.0" fill="rgb(227,146,26)" rx="2" ry="2" />
<text  x="449.76" y="191.5" >runtime.semasleep</text>
</g>
<g >
<title>reflect.(*rtype).ptrTo (1 samples, 0.04%)</title><rect x="19.3" y="165" width="0.4" height="15.0" fill="rgb(230,185,8)" rx="2" ry="2" />
<text  x="22.27" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (103 samples, 4.05%)</title><rect x="833.9" y="197" width="47.8" height="15.0" fill="rgb(240,8,18)" rx="2" ry="2" />
<text  x="836.91" y="207.5" >runt..</text>
</g>
<g >
<title>runtime.exitsyscall0 (1 samples, 0.04%)</title><rect x="207.5" y="261" width="0.5" height="15.0" fill="rgb(224,20,28)" rx="2" ry="2" />
<text  x="210.52" y="271.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.04%)</title><rect x="210.8" y="229" width="0.4" height="15.0" fill="rgb(253,0,4)" rx="2" ry="2" />
<text  x="213.76" y="239.5" ></text>
</g>
<g >
<title>runtime.runqgrab (35 samples, 1.38%)</title><rect x="428.2" y="197" width="16.2" height="15.0" fill="rgb(214,66,2)" rx="2" ry="2" />
<text  x="431.22" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.04%)</title><rect x="207.5" y="181" width="0.5" height="15.0" fill="rgb(216,61,8)" rx="2" ry="2" />
<text  x="210.52" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.04%)</title><rect x="10.5" y="165" width="0.4" height="15.0" fill="rgb(245,143,5)" rx="2" ry="2" />
<text  x="13.46" y="175.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="10.9" y="197" width="0.5" height="15.0" fill="rgb(210,34,51)" rx="2" ry="2" />
<text  x="13.93" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (31 samples, 1.22%)</title><rect x="733.3" y="149" width="14.4" height="15.0" fill="rgb(227,193,29)" rx="2" ry="2" />
<text  x="736.30" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Marshal (1 samples, 0.04%)</title><rect x="11.9" y="213" width="0.4" height="15.0" fill="rgb(226,118,23)" rx="2" ry="2" />
<text  x="14.85" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (2 samples, 0.08%)</title><rect x="14.6" y="197" width="1.0" height="15.0" fill="rgb(234,31,36)" rx="2" ry="2" />
<text  x="17.64" y="207.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.04%)</title><rect x="24.8" y="245" width="0.5" height="15.0" fill="rgb(223,67,8)" rx="2" ry="2" />
<text  x="27.84" y="255.5" ></text>
</g>
<g >
<title>runtime.convTstring (1 samples, 0.04%)</title><rect x="24.4" y="213" width="0.4" height="15.0" fill="rgb(218,152,48)" rx="2" ry="2" />
<text  x="27.37" y="223.5" ></text>
</g>
<g >
<title>runtime.gcStart (1 samples, 0.04%)</title><rect x="17.0" y="117" width="0.4" height="15.0" fill="rgb(211,42,41)" rx="2" ry="2" />
<text  x="19.95" y="127.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (123 samples, 4.83%)</title><rect x="49.9" y="229" width="57.0" height="15.0" fill="rgb(244,65,52)" rx="2" ry="2" />
<text  x="52.87" y="239.5" >intern..</text>
</g>
<g >
<title>runtime.usleep (97 samples, 3.81%)</title><rect x="882.1" y="229" width="45.0" height="15.0" fill="rgb(236,61,37)" rx="2" ry="2" />
<text  x="885.13" y="239.5" >runt..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (33 samples, 1.30%)</title><rect x="10.5" y="261" width="15.3" height="15.0" fill="rgb(207,21,36)" rx="2" ry="2" />
<text  x="13.46" y="271.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (1 samples, 0.04%)</title><rect x="108.3" y="197" width="0.5" height="15.0" fill="rgb(209,143,51)" rx="2" ry="2" />
<text  x="111.29" y="207.5" ></text>
</g>
<g >
<title>all (2,545 samples, 100%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(208,27,21)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="731.9" y="165" width="0.5" height="15.0" fill="rgb(226,113,28)" rx="2" ry="2" />
<text  x="734.91" y="175.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (4 samples, 0.16%)</title><rect x="1027.3" y="181" width="1.8" height="15.0" fill="rgb(224,37,13)" rx="2" ry="2" />
<text  x="1030.26" y="191.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="926.6" y="213" width="0.5" height="15.0" fill="rgb(254,32,4)" rx="2" ry="2" />
<text  x="929.64" y="223.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (8 samples, 0.31%)</title><rect x="202.9" y="277" width="3.7" height="15.0" fill="rgb(212,205,13)" rx="2" ry="2" />
<text  x="205.88" y="287.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.04%)</title><rect x="10.9" y="213" width="0.5" height="15.0" fill="rgb(208,30,36)" rx="2" ry="2" />
<text  x="13.93" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (2 samples, 0.08%)</title><rect x="1188.1" y="149" width="1.0" height="15.0" fill="rgb(241,104,25)" rx="2" ry="2" />
<text  x="1191.15" y="159.5" ></text>
</g>
<g >
<title>runtime.freedefer (8 samples, 0.31%)</title><rect x="108.8" y="197" width="3.7" height="15.0" fill="rgb(216,172,32)" rx="2" ry="2" />
<text  x="111.76" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (345 samples, 13.56%)</title><rect x="1029.1" y="165" width="160.0" height="15.0" fill="rgb(206,123,33)" rx="2" ry="2" />
<text  x="1032.11" y="175.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.pthread_cond_wait_trampoline (1 samples, 0.04%)</title><rect x="206.1" y="261" width="0.5" height="15.0" fill="rgb(234,149,32)" rx="2" ry="2" />
<text  x="209.13" y="271.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (86 samples, 3.38%)</title><rect x="989.2" y="245" width="39.9" height="15.0" fill="rgb(253,32,38)" rx="2" ry="2" />
<text  x="992.24" y="255.5" >run..</text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.04%)</title><rect x="1189.5" y="245" width="0.5" height="15.0" fill="rgb(220,209,53)" rx="2" ry="2" />
<text  x="1192.54" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.04%)</title><rect x="107.4" y="213" width="0.4" height="15.0" fill="rgb(241,185,39)" rx="2" ry="2" />
<text  x="110.37" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleepg (2 samples, 0.08%)</title><rect x="1189.1" y="261" width="0.9" height="15.0" fill="rgb(251,24,53)" rx="2" ry="2" />
<text  x="1192.07" y="271.5" ></text>
</g>
<g >
<title>runtime.lock (5 samples, 0.20%)</title><rect x="214.0" y="213" width="2.3" height="15.0" fill="rgb(226,63,45)" rx="2" ry="2" />
<text  x="217.01" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Size (1 samples, 0.04%)</title><rect x="15.1" y="181" width="0.5" height="15.0" fill="rgb(242,56,0)" rx="2" ry="2" />
<text  x="18.10" y="191.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="22.5" y="149" width="0.5" height="15.0" fill="rgb(248,14,43)" rx="2" ry="2" />
<text  x="25.52" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (37 samples, 1.45%)</title><rect x="733.3" y="165" width="17.2" height="15.0" fill="rgb(212,179,30)" rx="2" ry="2" />
<text  x="736.30" y="175.5" ></text>
</g>
<g >
<title>reflect.valueInterface (1 samples, 0.04%)</title><rect x="20.2" y="165" width="0.5" height="15.0" fill="rgb(205,58,8)" rx="2" ry="2" />
<text  x="23.20" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="17.0" y="101" width="0.4" height="15.0" fill="rgb(222,177,12)" rx="2" ry="2" />
<text  x="19.95" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="49.4" y="181" width="0.5" height="15.0" fill="rgb(253,63,34)" rx="2" ry="2" />
<text  x="52.41" y="191.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="107.4" y="101" width="0.4" height="15.0" fill="rgb(225,210,38)" rx="2" ry="2" />
<text  x="110.37" y="111.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.08%)</title><rect x="1026.3" y="181" width="1.0" height="15.0" fill="rgb(233,56,5)" rx="2" ry="2" />
<text  x="1029.33" y="191.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (2 samples, 0.08%)</title><rect x="201.0" y="101" width="1.0" height="15.0" fill="rgb(211,118,31)" rx="2" ry="2" />
<text  x="204.03" y="111.5" ></text>
</g>
<g >
<title>runtime.unlock (2 samples, 0.08%)</title><rect x="732.4" y="213" width="0.9" height="15.0" fill="rgb(219,47,34)" rx="2" ry="2" />
<text  x="735.37" y="223.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="19.7" y="133" width="0.5" height="15.0" fill="rgb(238,206,4)" rx="2" ry="2" />
<text  x="22.74" y="143.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.04%)</title><rect x="49.4" y="117" width="0.5" height="15.0" fill="rgb(250,102,40)" rx="2" ry="2" />
<text  x="52.41" y="127.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.08%)</title><rect x="13.2" y="117" width="1.0" height="15.0" fill="rgb(205,63,38)" rx="2" ry="2" />
<text  x="16.25" y="127.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (2 samples, 0.08%)</title><rect x="16.0" y="133" width="1.0" height="15.0" fill="rgb(242,37,39)" rx="2" ry="2" />
<text  x="19.03" y="143.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (1 samples, 0.04%)</title><rect x="20.2" y="181" width="0.5" height="15.0" fill="rgb(238,67,4)" rx="2" ry="2" />
<text  x="23.20" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (3 samples, 0.12%)</title><rect x="23.0" y="197" width="1.4" height="15.0" fill="rgb(208,49,35)" rx="2" ry="2" />
<text  x="25.98" y="207.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.04%)</title><rect x="13.7" y="53" width="0.5" height="15.0" fill="rgb(210,178,35)" rx="2" ry="2" />
<text  x="16.71" y="63.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (5 samples, 0.20%)</title><rect x="986.9" y="165" width="2.3" height="15.0" fill="rgb(254,97,26)" rx="2" ry="2" />
<text  x="989.92" y="175.5" ></text>
</g>
<g >
<title>runtime.notewakeup (134 samples, 5.27%)</title><rect x="927.1" y="197" width="62.1" height="15.0" fill="rgb(232,93,31)" rx="2" ry="2" />
<text  x="930.11" y="207.5" >runtim..</text>
</g>
<g >
<title>runtime.startm (37 samples, 1.45%)</title><rect x="733.3" y="197" width="17.2" height="15.0" fill="rgb(207,181,43)" rx="2" ry="2" />
<text  x="736.30" y="207.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.04%)</title><rect x="207.5" y="213" width="0.5" height="15.0" fill="rgb(215,133,28)" rx="2" ry="2" />
<text  x="210.52" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (3 samples, 0.12%)</title><rect x="10.5" y="245" width="1.4" height="15.0" fill="rgb(224,95,46)" rx="2" ry="2" />
<text  x="13.46" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.08%)</title><rect x="214.5" y="181" width="0.9" height="15.0" fill="rgb(215,97,32)" rx="2" ry="2" />
<text  x="217.47" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (1 samples, 0.04%)</title><rect x="23.4" y="165" width="0.5" height="15.0" fill="rgb(226,76,9)" rx="2" ry="2" />
<text  x="26.45" y="175.5" ></text>
</g>
<g >
<title>runtime.notesleep (2 samples, 0.08%)</title><rect x="208.0" y="181" width="0.9" height="15.0" fill="rgb(225,177,13)" rx="2" ry="2" />
<text  x="210.98" y="191.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="24.4" y="181" width="0.4" height="15.0" fill="rgb(221,70,46)" rx="2" ry="2" />
<text  x="27.37" y="191.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.04%)</title><rect x="175.5" y="149" width="0.5" height="15.0" fill="rgb(229,66,52)" rx="2" ry="2" />
<text  x="178.52" y="159.5" ></text>
</g>
<g >
<title>runtime.runqsteal (35 samples, 1.38%)</title><rect x="428.2" y="213" width="16.2" height="15.0" fill="rgb(217,46,31)" rx="2" ry="2" />
<text  x="431.22" y="223.5" ></text>
</g>
<g >
<title>runtime.nanotime (94 samples, 3.69%)</title><rect x="754.6" y="229" width="43.6" height="15.0" fill="rgb(225,200,8)" rx="2" ry="2" />
<text  x="757.63" y="239.5" >runt..</text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.08%)</title><rect x="752.3" y="213" width="0.9" height="15.0" fill="rgb(214,49,47)" rx="2" ry="2" />
<text  x="755.31" y="223.5" ></text>
</g>
<g >
<title>runtime.selectgo (43 samples, 1.69%)</title><rect x="25.8" y="261" width="19.9" height="15.0" fill="rgb(207,135,12)" rx="2" ry="2" />
<text  x="28.76" y="271.5" ></text>
</g>
<g >
<title>runtime.semawakeup (86 samples, 3.38%)</title><rect x="989.2" y="197" width="39.9" height="15.0" fill="rgb(232,214,43)" rx="2" ry="2" />
<text  x="992.24" y="207.5" >run..</text>
</g>
<g >
<title>syscall.syscall (192 samples, 7.54%)</title><rect x="112.9" y="181" width="89.1" height="15.0" fill="rgb(245,159,34)" rx="2" ry="2" />
<text  x="115.93" y="191.5" >syscall.sy..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.04%)</title><rect x="15.1" y="165" width="0.5" height="15.0" fill="rgb(253,226,25)" rx="2" ry="2" />
<text  x="18.10" y="175.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (2 samples, 0.08%)</title><rect x="202.0" y="261" width="0.9" height="15.0" fill="rgb(254,225,23)" rx="2" ry="2" />
<text  x="204.95" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.PacketStream (1 samples, 0.04%)</title><rect x="107.4" y="261" width="0.4" height="15.0" fill="rgb(241,204,50)" rx="2" ry="2" />
<text  x="110.37" y="271.5" ></text>
</g>
<g >
<title>runtime.timerproc (2 samples, 0.08%)</title><rect x="1189.1" y="277" width="0.9" height="15.0" fill="rgb(251,64,27)" rx="2" ry="2" />
<text  x="1192.07" y="287.5" ></text>
</g>
<g >
<title>runtime.stopm (2 samples, 0.08%)</title><rect x="208.0" y="197" width="0.9" height="15.0" fill="rgb(226,10,7)" rx="2" ry="2" />
<text  x="210.98" y="207.5" ></text>
</g>
<g >
<title>runtime.(*randomEnum).next (1 samples, 0.04%)</title><rect x="213.1" y="213" width="0.4" height="15.0" fill="rgb(216,195,9)" rx="2" ry="2" />
<text  x="216.08" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (134 samples, 5.27%)</title><rect x="927.1" y="181" width="62.1" height="15.0" fill="rgb(222,16,8)" rx="2" ry="2" />
<text  x="930.11" y="191.5" >runtim..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (1 samples, 0.04%)</title><rect x="14.6" y="133" width="0.5" height="15.0" fill="rgb(247,107,30)" rx="2" ry="2" />
<text  x="17.64" y="143.5" ></text>
</g>
<g >
<title>runtime.netpollcheckerr (1 samples, 0.04%)</title><rect x="108.3" y="165" width="0.5" height="15.0" fill="rgb(213,138,41)" rx="2" ry="2" />
<text  x="111.29" y="175.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.04%)</title><rect x="17.4" y="149" width="0.5" height="15.0" fill="rgb(227,186,42)" rx="2" ry="2" />
<text  x="20.42" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (37 samples, 1.45%)</title><rect x="733.3" y="181" width="17.2" height="15.0" fill="rgb(219,23,1)" rx="2" ry="2" />
<text  x="736.30" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Marshal (1 samples, 0.04%)</title><rect x="14.6" y="181" width="0.5" height="15.0" fill="rgb(243,28,6)" rx="2" ry="2" />
<text  x="17.64" y="191.5" ></text>
</g>
<g >
<title>runtime.park_m (1,169 samples, 45.93%)</title><rect x="208.9" y="261" width="542.0" height="15.0" fill="rgb(220,224,8)" rx="2" ry="2" />
<text  x="211.91" y="271.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.04%)</title><rect x="207.5" y="165" width="0.5" height="15.0" fill="rgb(213,67,29)" rx="2" ry="2" />
<text  x="210.52" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (27 samples, 1.06%)</title><rect x="12.3" y="229" width="12.5" height="15.0" fill="rgb(220,34,26)" rx="2" ry="2" />
<text  x="15.32" y="239.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.UnpackStream (9 samples, 0.35%)</title><rect x="45.7" y="261" width="4.2" height="15.0" fill="rgb(221,183,52)" rx="2" ry="2" />
<text  x="48.70" y="271.5" ></text>
</g>
<g >
<title>runtime.usleep (33 samples, 1.30%)</title><rect x="429.1" y="181" width="15.3" height="15.0" fill="rgb(232,44,23)" rx="2" ry="2" />
<text  x="432.14" y="191.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.04%)</title><rect x="24.8" y="229" width="0.5" height="15.0" fill="rgb(216,41,10)" rx="2" ry="2" />
<text  x="27.84" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="24.4" y="197" width="0.4" height="15.0" fill="rgb(238,218,54)" rx="2" ry="2" />
<text  x="27.37" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (6 samples, 0.24%)</title><rect x="747.7" y="149" width="2.8" height="15.0" fill="rgb(218,72,41)" rx="2" ry="2" />
<text  x="750.67" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (1 samples, 0.04%)</title><rect x="11.9" y="229" width="0.4" height="15.0" fill="rgb(232,188,38)" rx="2" ry="2" />
<text  x="14.85" y="239.5" ></text>
</g>
<g >
<title>runtime.finishsweep_m (1 samples, 0.04%)</title><rect x="17.0" y="69" width="0.4" height="15.0" fill="rgb(228,89,11)" rx="2" ry="2" />
<text  x="19.95" y="79.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.04%)</title><rect x="10.5" y="149" width="0.4" height="15.0" fill="rgb(229,209,52)" rx="2" ry="2" />
<text  x="13.46" y="159.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (12 samples, 0.47%)</title><rect x="101.3" y="165" width="5.6" height="15.0" fill="rgb(219,100,16)" rx="2" ry="2" />
<text  x="104.34" y="175.5" ></text>
</g>
<g >
<title>runtime.chansend (2 samples, 0.08%)</title><rect x="48.9" y="229" width="1.0" height="15.0" fill="rgb(226,186,7)" rx="2" ry="2" />
<text  x="51.95" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.04%)</title><rect x="14.6" y="149" width="0.5" height="15.0" fill="rgb(248,51,7)" rx="2" ry="2" />
<text  x="17.64" y="159.5" ></text>
</g>
<g >
<title>runtime.wakep (345 samples, 13.56%)</title><rect x="1029.1" y="213" width="160.0" height="15.0" fill="rgb(225,59,53)" rx="2" ry="2" />
<text  x="1032.11" y="223.5" >runtime.wakep</text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.04%)</title><rect x="213.5" y="197" width="0.5" height="15.0" fill="rgb(205,93,1)" rx="2" ry="2" />
<text  x="216.54" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.08%)</title><rect x="201.0" y="133" width="1.0" height="15.0" fill="rgb(220,179,39)" rx="2" ry="2" />
<text  x="204.03" y="143.5" ></text>
</g>
<g >
<title>reflect.(*rtype).In (1 samples, 0.04%)</title><rect x="18.8" y="181" width="0.5" height="15.0" fill="rgb(212,145,20)" rx="2" ry="2" />
<text  x="21.81" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (101 samples, 3.97%)</title><rect x="834.4" y="181" width="46.8" height="15.0" fill="rgb(229,18,37)" rx="2" ry="2" />
<text  x="837.38" y="191.5" >runt..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (2 samples, 0.08%)</title><rect x="23.0" y="181" width="0.9" height="15.0" fill="rgb(233,128,19)" rx="2" ry="2" />
<text  x="25.98" y="191.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="833.4" y="197" width="0.5" height="15.0" fill="rgb(245,79,29)" rx="2" ry="2" />
<text  x="836.45" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (4 samples, 0.16%)</title><rect x="12.8" y="213" width="1.8" height="15.0" fill="rgb(246,173,43)" rx="2" ry="2" />
<text  x="15.78" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="207.1" y="261" width="0.4" height="15.0" fill="rgb(209,6,21)" rx="2" ry="2" />
<text  x="210.05" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (10 samples, 0.39%)</title><rect x="17.9" y="197" width="4.6" height="15.0" fill="rgb(222,220,29)" rx="2" ry="2" />
<text  x="20.88" y="207.5" ></text>
</g>
<g >
<title>runtime.selparkcommit (1 samples, 0.04%)</title><rect x="750.5" y="245" width="0.4" height="15.0" fill="rgb(246,113,42)" rx="2" ry="2" />
<text  x="753.46" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (129 samples, 5.07%)</title><rect x="927.1" y="165" width="59.8" height="15.0" fill="rgb(233,18,12)" rx="2" ry="2" />
<text  x="930.11" y="175.5" >runtim..</text>
</g>
<g >
<title>runtime.mcall (1,172 samples, 46.05%)</title><rect x="207.5" y="277" width="543.4" height="15.0" fill="rgb(237,72,13)" rx="2" ry="2" />
<text  x="210.52" y="287.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.pthread_cond_signal (80 samples, 3.14%)</title><rect x="989.2" y="181" width="37.1" height="15.0" fill="rgb(231,74,3)" rx="2" ry="2" />
<text  x="992.24" y="191.5" >run..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (1 samples, 0.04%)</title><rect x="22.5" y="181" width="0.5" height="15.0" fill="rgb(234,188,14)" rx="2" ry="2" />
<text  x="25.52" y="191.5" ></text>
</g>
<g >
<title>runtime.chanrecv (2 samples, 0.08%)</title><rect x="202.0" y="245" width="0.9" height="15.0" fill="rgb(212,115,48)" rx="2" ry="2" />
<text  x="204.95" y="255.5" ></text>
</g>
<g >
<title>runtime.retake (1 samples, 0.04%)</title><rect x="881.7" y="229" width="0.4" height="15.0" fill="rgb(207,178,27)" rx="2" ry="2" />
<text  x="884.67" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.04%)</title><rect x="107.4" y="149" width="0.4" height="15.0" fill="rgb(237,162,0)" rx="2" ry="2" />
<text  x="110.37" y="159.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.08%)</title><rect x="201.0" y="85" width="1.0" height="15.0" fill="rgb(229,37,5)" rx="2" ry="2" />
<text  x="204.03" y="95.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.04%)</title><rect x="11.9" y="197" width="0.4" height="15.0" fill="rgb(231,213,52)" rx="2" ry="2" />
<text  x="14.85" y="207.5" ></text>
</g>
<g >
<title>runtime.stopm (621 samples, 24.40%)</title><rect x="444.4" y="213" width="288.0" height="15.0" fill="rgb(253,84,10)" rx="2" ry="2" />
<text  x="447.44" y="223.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="1189.5" y="229" width="0.5" height="15.0" fill="rgb(221,104,8)" rx="2" ry="2" />
<text  x="1192.54" y="239.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="17.4" y="181" width="0.5" height="15.0" fill="rgb(230,112,36)" rx="2" ry="2" />
<text  x="20.42" y="191.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.04%)</title><rect x="50.3" y="197" width="0.5" height="15.0" fill="rgb(216,101,3)" rx="2" ry="2" />
<text  x="53.34" y="207.5" ></text>
</g>
<g >
<title>runtime.nanotime (90 samples, 3.54%)</title><rect x="216.3" y="213" width="41.8" height="15.0" fill="rgb(228,221,10)" rx="2" ry="2" />
<text  x="219.33" y="223.5" >run..</text>
</g>
<g >
<title>syscall.Write (193 samples, 7.58%)</title><rect x="112.5" y="213" width="89.5" height="15.0" fill="rgb(225,94,33)" rx="2" ry="2" />
<text  x="115.47" y="223.5" >syscall.Wr..</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.04%)</title><rect x="13.7" y="37" width="0.5" height="15.0" fill="rgb(216,221,7)" rx="2" ry="2" />
<text  x="16.71" y="47.5" ></text>
</g>
<g >
<title>net.(*conn).Read (123 samples, 4.83%)</title><rect x="49.9" y="261" width="57.0" height="15.0" fill="rgb(246,52,18)" rx="2" ry="2" />
<text  x="52.87" y="271.5" >net.(*..</text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.08%)</title><rect x="50.8" y="213" width="0.9" height="15.0" fill="rgb(224,75,52)" rx="2" ry="2" />
<text  x="53.80" y="223.5" ></text>
</g>
<g >
<title>sync.(*entry).load (1 samples, 0.04%)</title><rect x="16.5" y="117" width="0.5" height="15.0" fill="rgb(234,213,32)" rx="2" ry="2" />
<text  x="19.49" y="127.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.04%)</title><rect x="17.4" y="165" width="0.5" height="15.0" fill="rgb(217,89,20)" rx="2" ry="2" />
<text  x="20.42" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUTF8StringValue (3 samples, 0.12%)</title><rect x="13.2" y="133" width="1.4" height="15.0" fill="rgb(209,188,25)" rx="2" ry="2" />
<text  x="16.25" y="143.5" ></text>
</g>
<g >
<title>runtime.runqempty (1 samples, 0.04%)</title><rect x="427.8" y="213" width="0.4" height="15.0" fill="rgb(248,220,43)" rx="2" ry="2" />
<text  x="430.75" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (345 samples, 13.56%)</title><rect x="1029.1" y="181" width="160.0" height="15.0" fill="rgb(231,68,17)" rx="2" ry="2" />
<text  x="1032.11" y="191.5" >runtime.notewakeup</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ArgsDecode (1 samples, 0.04%)</title><rect x="22.5" y="197" width="0.5" height="15.0" fill="rgb(254,87,43)" rx="2" ry="2" />
<text  x="25.52" y="207.5" ></text>
</g>
<g >
<title>reflect.funcLayout (2 samples, 0.08%)</title><rect x="16.0" y="149" width="1.0" height="15.0" fill="rgb(216,47,16)" rx="2" ry="2" />
<text  x="19.03" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.04%)</title><rect x="11.9" y="181" width="0.4" height="15.0" fill="rgb(248,111,17)" rx="2" ry="2" />
<text  x="14.85" y="191.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (53 samples, 2.08%)</title><rect x="177.4" y="149" width="24.6" height="15.0" fill="rgb(236,180,9)" rx="2" ry="2" />
<text  x="180.38" y="159.5" >r..</text>
</g>
<g >
<title>runtime.resetspinning (37 samples, 1.45%)</title><rect x="733.3" y="229" width="17.2" height="15.0" fill="rgb(245,93,21)" rx="2" ry="2" />
<text  x="736.30" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="13.7" y="101" width="0.5" height="15.0" fill="rgb(236,20,3)" rx="2" ry="2" />
<text  x="16.71" y="111.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="11.4" y="229" width="0.5" height="15.0" fill="rgb(219,75,33)" rx="2" ry="2" />
<text  x="14.39" y="239.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.04%)</title><rect x="107.4" y="117" width="0.4" height="15.0" fill="rgb(232,113,0)" rx="2" ry="2" />
<text  x="110.37" y="127.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (1 samples, 0.04%)</title><rect x="19.7" y="165" width="0.5" height="15.0" fill="rgb(217,145,26)" rx="2" ry="2" />
<text  x="22.74" y="175.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (56 samples, 2.20%)</title><rect x="176.0" y="165" width="26.0" height="15.0" fill="rgb(248,43,1)" rx="2" ry="2" />
<text  x="178.99" y="175.5" >r..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (19 samples, 0.75%)</title><rect x="15.6" y="213" width="8.8" height="15.0" fill="rgb(253,153,6)" rx="2" ry="2" />
<text  x="18.56" y="223.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.04%)</title><rect x="206.6" y="261" width="0.5" height="15.0" fill="rgb(229,158,28)" rx="2" ry="2" />
<text  x="209.59" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.04%)</title><rect x="23.0" y="149" width="0.4" height="15.0" fill="rgb(221,61,42)" rx="2" ry="2" />
<text  x="25.98" y="159.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (203 samples, 7.98%)</title><rect x="107.8" y="245" width="94.2" height="15.0" fill="rgb(249,85,17)" rx="2" ry="2" />
<text  x="110.83" y="255.5" >net.(*netFD..</text>
</g>
<g >
<title>reflect.Value.Type (4 samples, 0.16%)</title><rect x="20.7" y="181" width="1.8" height="15.0" fill="rgb(210,193,0)" rx="2" ry="2" />
<text  x="23.66" y="191.5" ></text>
</g>
<g >
<title>syscall.read (119 samples, 4.68%)</title><rect x="51.7" y="197" width="55.2" height="15.0" fill="rgb(211,41,42)" rx="2" ry="2" />
<text  x="54.73" y="207.5" >sysca..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (614 samples, 24.13%)</title><rect x="446.8" y="165" width="284.6" height="15.0" fill="rgb(238,196,48)" rx="2" ry="2" />
<text  x="449.76" y="175.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (2 samples, 0.08%)</title><rect x="10.5" y="229" width="0.9" height="15.0" fill="rgb(238,41,34)" rx="2" ry="2" />
<text  x="13.46" y="239.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (134 samples, 5.27%)</title><rect x="927.1" y="245" width="62.1" height="15.0" fill="rgb(209,20,31)" rx="2" ry="2" />
<text  x="930.11" y="255.5" >runtim..</text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.04%)</title><rect x="207.5" y="245" width="0.5" height="15.0" fill="rgb(216,175,29)" rx="2" ry="2" />
<text  x="210.52" y="255.5" ></text>
</g>
<g >
<title>runtime.kevent_trampoline (2 samples, 0.08%)</title><rect x="205.2" y="261" width="0.9" height="15.0" fill="rgb(239,31,8)" rx="2" ry="2" />
<text  x="208.20" y="271.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (345 samples, 13.56%)</title><rect x="1029.1" y="245" width="160.0" height="15.0" fill="rgb(228,75,20)" rx="2" ry="2" />
<text  x="1032.11" y="255.5" >runtime.goready.func1</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeTCPConn (77 samples, 3.03%)</title><rect x="10.0" y="277" width="35.7" height="15.0" fill="rgb(244,119,0)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >hsl..</text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (86 samples, 3.38%)</title><rect x="989.2" y="229" width="39.9" height="15.0" fill="rgb(231,189,2)" rx="2" ry="2" />
<text  x="992.24" y="239.5" >run..</text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1187.7" y="149" width="0.4" height="15.0" fill="rgb(240,227,12)" rx="2" ry="2" />
<text  x="1190.68" y="159.5" ></text>
</g>
<g >
<title>runtime.handoffp (134 samples, 5.27%)</title><rect x="927.1" y="229" width="62.1" height="15.0" fill="rgb(209,122,4)" rx="2" ry="2" />
<text  x="930.11" y="239.5" >runtim..</text>
</g>
<g >
<title>runtime.resolveTypeOff (3 samples, 0.12%)</title><rect x="21.1" y="117" width="1.4" height="15.0" fill="rgb(206,114,51)" rx="2" ry="2" />
<text  x="24.13" y="127.5" ></text>
</g>
<g >
<title>syscall.Read (119 samples, 4.68%)</title><rect x="51.7" y="213" width="55.2" height="15.0" fill="rgb(240,41,30)" rx="2" ry="2" />
<text  x="54.73" y="223.5" >sysca..</text>
</g>
<g >
<title>reflect.New (2 samples, 0.08%)</title><rect x="19.3" y="181" width="0.9" height="15.0" fill="rgb(206,190,4)" rx="2" ry="2" />
<text  x="22.27" y="191.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (40 samples, 1.57%)</title><rect x="27.2" y="245" width="18.5" height="15.0" fill="rgb(241,134,19)" rx="2" ry="2" />
<text  x="30.16" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (1 samples, 0.04%)</title><rect x="17.4" y="197" width="0.5" height="15.0" fill="rgb(212,218,1)" rx="2" ry="2" />
<text  x="20.42" y="207.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (1 samples, 0.04%)</title><rect x="175.5" y="165" width="0.5" height="15.0" fill="rgb(226,62,52)" rx="2" ry="2" />
<text  x="178.52" y="175.5" ></text>
</g>
<g >
<title>runtime.kevent (256 samples, 10.06%)</title><rect x="308.6" y="197" width="118.7" height="15.0" fill="rgb(252,213,50)" rx="2" ry="2" />
<text  x="311.59" y="207.5" >runtime.kevent</text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.04%)</title><rect x="25.3" y="229" width="0.5" height="15.0" fill="rgb(249,146,34)" rx="2" ry="2" />
<text  x="28.30" y="239.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollReset (1 samples, 0.04%)</title><rect x="108.3" y="181" width="0.5" height="15.0" fill="rgb(250,2,13)" rx="2" ry="2" />
<text  x="111.29" y="191.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="17.0" y="133" width="0.4" height="15.0" fill="rgb(236,225,43)" rx="2" ry="2" />
<text  x="19.95" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (1 samples, 0.04%)</title><rect x="17.9" y="181" width="0.4" height="15.0" fill="rgb(231,195,14)" rx="2" ry="2" />
<text  x="20.88" y="191.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="19.7" y="149" width="0.5" height="15.0" fill="rgb(220,124,50)" rx="2" ry="2" />
<text  x="22.74" y="159.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1,126 samples, 44.24%)</title><rect x="211.2" y="229" width="522.1" height="15.0" fill="rgb(245,118,14)" rx="2" ry="2" />
<text  x="214.23" y="239.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.netpoll (366 samples, 14.38%)</title><rect x="258.1" y="213" width="169.7" height="15.0" fill="rgb(235,126,3)" rx="2" ry="2" />
<text  x="261.06" y="223.5" >runtime.netpoll</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WriteStream (206 samples, 8.09%)</title><rect x="107.4" y="277" width="95.5" height="15.0" fill="rgb(231,117,22)" rx="2" ry="2" />
<text  x="110.37" y="287.5" >hslam.com/m..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (4 samples, 0.16%)</title><rect x="12.8" y="165" width="1.8" height="15.0" fill="rgb(225,189,24)" rx="2" ry="2" />
<text  x="15.78" y="175.5" ></text>
</g>
<g >
<title>runtime.notewakeup (86 samples, 3.38%)</title><rect x="989.2" y="213" width="39.9" height="15.0" fill="rgb(234,43,54)" rx="2" ry="2" />
<text  x="992.24" y="223.5" >run..</text>
</g>
<g >
<title>reflect.(*rtype).typeOff (3 samples, 0.12%)</title><rect x="21.1" y="165" width="1.4" height="15.0" fill="rgb(222,188,14)" rx="2" ry="2" />
<text  x="24.13" y="175.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.04%)</title><rect x="17.0" y="53" width="0.4" height="15.0" fill="rgb(206,163,45)" rx="2" ry="2" />
<text  x="19.95" y="63.5" ></text>
</g>
<g >
<title>runtime.startm (345 samples, 13.56%)</title><rect x="1029.1" y="197" width="160.0" height="15.0" fill="rgb(237,137,40)" rx="2" ry="2" />
<text  x="1032.11" y="207.5" >runtime.startm</text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.04%)</title><rect x="17.0" y="149" width="0.4" height="15.0" fill="rgb(231,123,8)" rx="2" ry="2" />
<text  x="19.95" y="159.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (1 samples, 0.04%)</title><rect x="207.1" y="245" width="0.4" height="15.0" fill="rgb(214,121,31)" rx="2" ry="2" />
<text  x="210.05" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (1 samples, 0.04%)</title><rect x="11.9" y="245" width="0.4" height="15.0" fill="rgb(229,164,21)" rx="2" ry="2" />
<text  x="14.85" y="255.5" ></text>
</g>
<g >
<title>runtime.chansend.func1 (1 samples, 0.04%)</title><rect x="48.9" y="197" width="0.5" height="15.0" fill="rgb(250,174,7)" rx="2" ry="2" />
<text  x="51.95" y="207.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Elem (1 samples, 0.04%)</title><rect x="18.3" y="181" width="0.5" height="15.0" fill="rgb(235,225,39)" rx="2" ry="2" />
<text  x="21.35" y="191.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (11 samples, 0.43%)</title><rect x="101.8" y="149" width="5.1" height="15.0" fill="rgb(233,104,15)" rx="2" ry="2" />
<text  x="104.80" y="159.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.04%)</title><rect x="48.9" y="181" width="0.5" height="15.0" fill="rgb(212,33,43)" rx="2" ry="2" />
<text  x="51.95" y="191.5" ></text>
</g>
<g >
<title>runtime.assertE2I (1 samples, 0.04%)</title><rect x="23.9" y="181" width="0.5" height="15.0" fill="rgb(229,19,22)" rx="2" ry="2" />
<text  x="26.91" y="191.5" ></text>
</g>
<g >
<title>runtime.sysmon (380 samples, 14.93%)</title><rect x="750.9" y="245" width="176.2" height="15.0" fill="rgb(224,37,31)" rx="2" ry="2" />
<text  x="753.92" y="255.5" >runtime.sysmon</text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.04%)</title><rect x="750.5" y="229" width="0.4" height="15.0" fill="rgb(239,6,48)" rx="2" ry="2" />
<text  x="753.46" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrain (1 samples, 0.04%)</title><rect x="207.1" y="229" width="0.4" height="15.0" fill="rgb(245,41,49)" rx="2" ry="2" />
<text  x="210.05" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="881.2" y="181" width="0.5" height="15.0" fill="rgb(210,133,30)" rx="2" ry="2" />
<text  x="884.21" y="191.5" ></text>
</g>
<g >
<title>runtime.procyield (3 samples, 0.12%)</title><rect x="753.2" y="213" width="1.4" height="15.0" fill="rgb(210,174,32)" rx="2" ry="2" />
<text  x="756.24" y="223.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.04%)</title><rect x="107.4" y="133" width="0.4" height="15.0" fill="rgb(226,42,13)" rx="2" ry="2" />
<text  x="110.37" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="13.7" y="69" width="0.5" height="15.0" fill="rgb(207,6,0)" rx="2" ry="2" />
<text  x="16.71" y="79.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (1 samples, 0.04%)</title><rect x="10.5" y="181" width="0.4" height="15.0" fill="rgb(236,5,43)" rx="2" ry="2" />
<text  x="13.46" y="191.5" ></text>
</g>
<g >
<title>runtime.send (2 samples, 0.08%)</title><rect x="48.9" y="213" width="1.0" height="15.0" fill="rgb(247,151,50)" rx="2" ry="2" />
<text  x="51.95" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (1 samples, 0.04%)</title><rect x="23.4" y="133" width="0.5" height="15.0" fill="rgb(238,123,54)" rx="2" ry="2" />
<text  x="26.45" y="143.5" ></text>
</g>
<g >
<title>reflect.Value.Call (4 samples, 0.16%)</title><rect x="15.6" y="181" width="1.8" height="15.0" fill="rgb(218,221,40)" rx="2" ry="2" />
<text  x="18.56" y="191.5" ></text>
</g>
</g>
</svg>

