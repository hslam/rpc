<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>runtime.aeshash (1 samples, 0.02%)</title><rect x="180.1" y="309" width="0.2" height="15.0" fill="rgb(212,11,46)" rx="2" ry="2" />
<text  x="183.05" y="319.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="340.8" y="325" width="0.2" height="15.0" fill="rgb(212,176,29)" rx="2" ry="2" />
<text  x="343.78" y="335.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.02%)</title><rect x="340.8" y="341" width="0.2" height="15.0" fill="rgb(243,159,20)" rx="2" ry="2" />
<text  x="343.78" y="351.5" ></text>
</g>
<g >
<title>runtime.gcStart.func2 (1 samples, 0.02%)</title><rect x="1185.6" y="421" width="0.3" height="15.0" fill="rgb(250,136,22)" rx="2" ry="2" />
<text  x="1188.60" y="431.5" ></text>
</g>
<g >
<title>runtime.freedefer (97 samples, 2.13%)</title><rect x="78.3" y="325" width="25.1" height="15.0" fill="rgb(208,63,15)" rx="2" ry="2" />
<text  x="81.33" y="335.5" >r..</text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.02%)</title><rect x="741.7" y="405" width="0.3" height="15.0" fill="rgb(221,126,22)" rx="2" ry="2" />
<text  x="744.71" y="415.5" ></text>
</g>
<g >
<title>runtime.injectglist (3 samples, 0.07%)</title><rect x="344.7" y="389" width="0.7" height="15.0" fill="rgb(213,36,33)" rx="2" ry="2" />
<text  x="347.67" y="399.5" ></text>
</g>
<g >
<title>net/rpc.(*gobServerCodec).ReadRequestBody (15 samples, 0.33%)</title><rect x="333.8" y="389" width="3.9" height="15.0" fill="rgb(217,171,53)" rx="2" ry="2" />
<text  x="336.79" y="399.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="742.2" y="341" width="0.3" height="15.0" fill="rgb(207,114,26)" rx="2" ry="2" />
<text  x="745.23" y="351.5" ></text>
</g>
<g >
<title>memeqbody (1 samples, 0.02%)</title><rect x="333.3" y="293" width="0.2" height="15.0" fill="rgb(219,99,17)" rx="2" ry="2" />
<text  x="336.28" y="303.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (1 samples, 0.02%)</title><rect x="344.1" y="405" width="0.3" height="15.0" fill="rgb(237,116,35)" rx="2" ry="2" />
<text  x="347.15" y="415.5" ></text>
</g>
<g >
<title>encoding/gob.decodeUintReader (561 samples, 12.31%)</title><rect x="184.7" y="293" width="145.2" height="15.0" fill="rgb(223,95,22)" rx="2" ry="2" />
<text  x="187.71" y="303.5" >encoding/gob.decod..</text>
</g>
<g >
<title>encoding/gob.(*Decoder).getDecEnginePtr (1 samples, 0.02%)</title><rect x="336.4" y="325" width="0.2" height="15.0" fill="rgb(252,147,0)" rx="2" ry="2" />
<text  x="339.38" y="335.5" ></text>
</g>
<g >
<title>runtime.findrunnable (116 samples, 2.54%)</title><rect x="711.7" y="405" width="30.0" height="15.0" fill="rgb(249,186,45)" rx="2" ry="2" />
<text  x="714.68" y="415.5" >ru..</text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.02%)</title><rect x="741.7" y="373" width="0.3" height="15.0" fill="rgb(219,68,28)" rx="2" ry="2" />
<text  x="744.71" y="383.5" ></text>
</g>
<g >
<title>io.ReadAtLeast (2 samples, 0.04%)</title><rect x="334.6" y="277" width="0.5" height="15.0" fill="rgb(210,4,47)" rx="2" ry="2" />
<text  x="337.57" y="287.5" ></text>
</g>
<g >
<title>reflect.packEface (2 samples, 0.04%)</title><rect x="337.9" y="357" width="0.6" height="15.0" fill="rgb(205,107,31)" rx="2" ry="2" />
<text  x="340.94" y="367.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (5 samples, 0.11%)</title><rect x="179.3" y="389" width="1.3" height="15.0" fill="rgb(237,113,49)" rx="2" ry="2" />
<text  x="182.27" y="399.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.02%)</title><rect x="758.8" y="405" width="0.3" height="15.0" fill="rgb(237,50,5)" rx="2" ry="2" />
<text  x="761.79" y="415.5" ></text>
</g>
<g >
<title>runtime.goexit0 (118 samples, 2.59%)</title><rect x="711.2" y="437" width="30.5" height="15.0" fill="rgb(246,41,42)" rx="2" ry="2" />
<text  x="714.17" y="447.5" >ru..</text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (2 samples, 0.04%)</title><rect x="1185.1" y="421" width="0.5" height="15.0" fill="rgb(249,7,50)" rx="2" ry="2" />
<text  x="1188.08" y="431.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).DecodeValue (574 samples, 12.59%)</title><rect x="184.2" y="341" width="148.6" height="15.0" fill="rgb(221,202,10)" rx="2" ry="2" />
<text  x="187.19" y="351.5" >encoding/gob.(*Dec..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="330.7" y="229" width="0.2" height="15.0" fill="rgb(211,43,46)" rx="2" ry="2" />
<text  x="333.69" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (2 samples, 0.04%)</title><rect x="710.4" y="373" width="0.5" height="15.0" fill="rgb(208,50,35)" rx="2" ry="2" />
<text  x="713.39" y="383.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="757.2" y="405" width="0.3" height="15.0" fill="rgb(253,76,25)" rx="2" ry="2" />
<text  x="760.24" y="415.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).sendTypeId (3 samples, 0.07%)</title><rect x="171.5" y="373" width="0.8" height="15.0" fill="rgb(223,220,9)" rx="2" ry="2" />
<text  x="174.51" y="383.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.02%)</title><rect x="343.1" y="405" width="0.3" height="15.0" fill="rgb(229,53,40)" rx="2" ry="2" />
<text  x="346.11" y="415.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="170.5" y="357" width="0.2" height="15.0" fill="rgb(207,37,51)" rx="2" ry="2" />
<text  x="173.47" y="367.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (2 samples, 0.04%)</title><rect x="1185.1" y="373" width="0.5" height="15.0" fill="rgb(251,119,40)" rx="2" ry="2" />
<text  x="1188.08" y="383.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).Decode (574 samples, 12.59%)</title><rect x="184.2" y="357" width="148.6" height="15.0" fill="rgb(216,107,21)" rx="2" ry="2" />
<text  x="187.19" y="367.5" >encoding/gob.(*Dec..</text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="1184.8" y="373" width="0.3" height="15.0" fill="rgb(241,98,51)" rx="2" ry="2" />
<text  x="1187.82" y="383.5" ></text>
</g>
<g >
<title>runtime.mstart1 (14 samples, 0.31%)</title><rect x="757.2" y="437" width="3.7" height="15.0" fill="rgb(245,211,15)" rx="2" ry="2" />
<text  x="760.24" y="447.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (3 samples, 0.07%)</title><rect x="181.3" y="405" width="0.8" height="15.0" fill="rgb(238,22,8)" rx="2" ry="2" />
<text  x="184.34" y="415.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="167.9" y="309" width="0.2" height="15.0" fill="rgb(241,155,27)" rx="2" ry="2" />
<text  x="170.89" y="319.5" ></text>
</g>
<g >
<title>runtime.nilinterequal (1 samples, 0.02%)</title><rect x="333.3" y="341" width="0.2" height="15.0" fill="rgb(212,146,0)" rx="2" ry="2" />
<text  x="336.28" y="351.5" ></text>
</g>
<g >
<title>runtime.startm (4 samples, 0.09%)</title><rect x="711.7" y="373" width="1.0" height="15.0" fill="rgb(207,100,49)" rx="2" ry="2" />
<text  x="714.68" y="383.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.09%)</title><rect x="345.4" y="389" width="1.1" height="15.0" fill="rgb(206,147,30)" rx="2" ry="2" />
<text  x="348.44" y="399.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (559 samples, 12.26%)</title><rect x="185.2" y="197" width="144.7" height="15.0" fill="rgb(247,110,28)" rx="2" ry="2" />
<text  x="188.23" y="207.5" >internal/poll.(*FD..</text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeStruct (6 samples, 0.13%)</title><rect x="329.9" y="309" width="1.6" height="15.0" fill="rgb(238,30,6)" rx="2" ry="2" />
<text  x="332.91" y="319.5" ></text>
</g>
<g >
<title>io.ReadFull (561 samples, 12.31%)</title><rect x="184.7" y="277" width="145.2" height="15.0" fill="rgb(245,206,25)" rx="2" ry="2" />
<text  x="187.71" y="287.5" >io.ReadFull</text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.02%)</title><rect x="182.9" y="437" width="0.3" height="15.0" fill="rgb(208,14,20)" rx="2" ry="2" />
<text  x="185.90" y="447.5" ></text>
</g>
<g >
<title>runtime.kevent (6 samples, 0.13%)</title><rect x="347.3" y="373" width="1.5" height="15.0" fill="rgb(242,83,46)" rx="2" ry="2" />
<text  x="350.25" y="383.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="330.7" y="165" width="0.2" height="15.0" fill="rgb(225,37,49)" rx="2" ry="2" />
<text  x="333.69" y="175.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (5 samples, 0.11%)</title><rect x="165.6" y="277" width="1.3" height="15.0" fill="rgb(217,103,23)" rx="2" ry="2" />
<text  x="168.56" y="287.5" ></text>
</g>
<g >
<title>runtime.semacreate (3 samples, 0.07%)</title><rect x="355.8" y="389" width="0.8" height="15.0" fill="rgb(234,152,46)" rx="2" ry="2" />
<text  x="358.80" y="399.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).ServeCodec (606 samples, 13.29%)</title><rect x="183.2" y="421" width="156.8" height="15.0" fill="rgb(239,62,39)" rx="2" ry="2" />
<text  x="186.16" y="431.5" >net/rpc.(*Server).Se..</text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="339.5" y="341" width="0.2" height="15.0" fill="rgb(250,113,32)" rx="2" ry="2" />
<text  x="342.49" y="351.5" ></text>
</g>
<g >
<title>runtime.getStackMap (10 samples, 0.22%)</title><rect x="176.4" y="325" width="2.6" height="15.0" fill="rgb(218,106,14)" rx="2" ry="2" />
<text  x="179.43" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.decodeUintReader (2 samples, 0.04%)</title><rect x="334.1" y="309" width="0.5" height="15.0" fill="rgb(205,36,12)" rx="2" ry="2" />
<text  x="337.05" y="319.5" ></text>
</g>
<g >
<title>syscall.Read (356 samples, 7.81%)</title><rect x="237.8" y="181" width="92.1" height="15.0" fill="rgb(242,55,8)" rx="2" ry="2" />
<text  x="240.77" y="191.5" >syscall.Read</text>
</g>
<g >
<title>encoding/gob.(*encoderState).encodeUint (1 samples, 0.02%)</title><rect x="171.5" y="341" width="0.3" height="15.0" fill="rgb(254,192,35)" rx="2" ry="2" />
<text  x="174.51" y="351.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="181.9" y="373" width="0.2" height="15.0" fill="rgb(221,134,15)" rx="2" ry="2" />
<text  x="184.86" y="383.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).getRequest (2 samples, 0.04%)</title><rect x="183.7" y="373" width="0.5" height="15.0" fill="rgb(239,29,26)" rx="2" ry="2" />
<text  x="186.67" y="383.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (4 samples, 0.09%)</title><rect x="329.9" y="277" width="1.0" height="15.0" fill="rgb(250,93,33)" rx="2" ry="2" />
<text  x="332.91" y="287.5" ></text>
</g>
<g >
<title>runtime.gentraceback (11 samples, 0.24%)</title><rect x="176.2" y="357" width="2.8" height="15.0" fill="rgb(211,226,47)" rx="2" ry="2" />
<text  x="179.17" y="367.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decOpFor.func4 (4 samples, 0.09%)</title><rect x="335.1" y="309" width="1.0" height="15.0" fill="rgb(206,144,26)" rx="2" ry="2" />
<text  x="338.09" y="319.5" ></text>
</g>
<g >
<title>runtime.wakep (16 samples, 0.35%)</title><rect x="1185.9" y="389" width="4.1" height="15.0" fill="rgb(219,145,1)" rx="2" ry="2" />
<text  x="1188.86" y="399.5" ></text>
</g>
<g >
<title>runtime.semasleep (11 samples, 0.24%)</title><rect x="754.1" y="357" width="2.9" height="15.0" fill="rgb(231,197,29)" rx="2" ry="2" />
<text  x="757.13" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.02%)</title><rect x="181.6" y="325" width="0.3" height="15.0" fill="rgb(212,147,19)" rx="2" ry="2" />
<text  x="184.60" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="741.7" y="325" width="0.3" height="15.0" fill="rgb(224,68,50)" rx="2" ry="2" />
<text  x="744.71" y="335.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.02%)</title><rect x="340.8" y="389" width="0.2" height="15.0" fill="rgb(217,50,48)" rx="2" ry="2" />
<text  x="343.78" y="399.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.02%)</title><rect x="165.3" y="165" width="0.3" height="15.0" fill="rgb(218,154,21)" rx="2" ry="2" />
<text  x="168.30" y="175.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (18 samples, 0.39%)</title><rect x="349.6" y="341" width="4.6" height="15.0" fill="rgb(232,202,43)" rx="2" ry="2" />
<text  x="352.58" y="351.5" ></text>
</g>
<g >
<title>reflect.ValueOf (1 samples, 0.02%)</title><rect x="337.4" y="357" width="0.3" height="15.0" fill="rgb(212,46,26)" rx="2" ry="2" />
<text  x="340.42" y="367.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).EncodeValue (28 samples, 0.61%)</title><rect x="166.9" y="389" width="7.2" height="15.0" fill="rgb(216,99,23)" rx="2" ry="2" />
<text  x="169.85" y="399.5" ></text>
</g>
<g >
<title>runtime.findnull (2 samples, 0.04%)</title><rect x="339.0" y="293" width="0.5" height="15.0" fill="rgb(208,2,8)" rx="2" ry="2" />
<text  x="341.97" y="303.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.04%)</title><rect x="170.7" y="357" width="0.6" height="15.0" fill="rgb(228,175,33)" rx="2" ry="2" />
<text  x="173.73" y="367.5" ></text>
</g>
<g >
<title>runtime.netpoll (43 samples, 0.94%)</title><rect x="743.0" y="389" width="11.1" height="15.0" fill="rgb(233,102,40)" rx="2" ry="2" />
<text  x="746.00" y="399.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (23 samples, 0.50%)</title><rect x="1178.9" y="341" width="5.9" height="15.0" fill="rgb(216,203,37)" rx="2" ry="2" />
<text  x="1181.87" y="351.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="760.9" y="373" width="0.2" height="15.0" fill="rgb(209,158,43)" rx="2" ry="2" />
<text  x="763.86" y="383.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (1 samples, 0.02%)</title><rect x="1184.8" y="405" width="0.3" height="15.0" fill="rgb(220,183,0)" rx="2" ry="2" />
<text  x="1187.82" y="415.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).ServeConn (606 samples, 13.29%)</title><rect x="183.2" y="437" width="156.8" height="15.0" fill="rgb(208,41,23)" rx="2" ry="2" />
<text  x="186.16" y="447.5" >net/rpc.(*Server).Se..</text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.02%)</title><rect x="336.4" y="309" width="0.2" height="15.0" fill="rgb(214,197,34)" rx="2" ry="2" />
<text  x="339.38" y="319.5" ></text>
</g>
<g >
<title>io.ReadAtLeast (1 samples, 0.02%)</title><rect x="184.5" y="261" width="0.2" height="15.0" fill="rgb(235,73,2)" rx="2" ry="2" />
<text  x="187.45" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="181.3" y="389" width="0.8" height="15.0" fill="rgb(240,206,36)" rx="2" ry="2" />
<text  x="184.34" y="399.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.04%)</title><rect x="165.0" y="197" width="0.6" height="15.0" fill="rgb(229,99,5)" rx="2" ry="2" />
<text  x="168.04" y="207.5" ></text>
</g>
<g >
<title>runtime.tracebackdefers (3 samples, 0.07%)</title><rect x="175.4" y="341" width="0.8" height="15.0" fill="rgb(235,115,45)" rx="2" ry="2" />
<text  x="178.39" y="351.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).encodeStruct (9 samples, 0.20%)</title><rect x="167.1" y="357" width="2.3" height="15.0" fill="rgb(244,100,39)" rx="2" ry="2" />
<text  x="170.11" y="367.5" ></text>
</g>
<g >
<title>runtime.newproc1 (16 samples, 0.35%)</title><rect x="1185.9" y="405" width="4.1" height="15.0" fill="rgb(242,193,41)" rx="2" ry="2" />
<text  x="1188.86" y="415.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.02%)</title><rect x="331.2" y="277" width="0.3" height="15.0" fill="rgb(246,194,51)" rx="2" ry="2" />
<text  x="334.21" y="287.5" ></text>
</g>
<g >
<title>encoding/gob.encString (1 samples, 0.02%)</title><rect x="167.9" y="341" width="0.2" height="15.0" fill="rgb(229,21,53)" rx="2" ry="2" />
<text  x="170.89" y="351.5" ></text>
</g>
<g >
<title>runtime.kevent (63 samples, 1.38%)</title><rect x="714.8" y="373" width="16.3" height="15.0" fill="rgb(208,43,28)" rx="2" ry="2" />
<text  x="717.79" y="383.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.04%)</title><rect x="1185.1" y="357" width="0.5" height="15.0" fill="rgb(211,100,14)" rx="2" ry="2" />
<text  x="1188.08" y="367.5" ></text>
</g>
<g >
<title>runtime.copystack (15 samples, 0.33%)</title><rect x="175.4" y="373" width="3.9" height="15.0" fill="rgb(209,170,39)" rx="2" ry="2" />
<text  x="178.39" y="383.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (4 samples, 0.09%)</title><rect x="164.5" y="261" width="1.1" height="15.0" fill="rgb(216,164,33)" rx="2" ry="2" />
<text  x="167.52" y="271.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.02%)</title><rect x="175.9" y="309" width="0.3" height="15.0" fill="rgb(217,0,13)" rx="2" ry="2" />
<text  x="178.91" y="319.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.04%)</title><rect x="165.0" y="229" width="0.6" height="15.0" fill="rgb(221,2,40)" rx="2" ry="2" />
<text  x="168.04" y="239.5" ></text>
</g>
<g >
<title>io.ReadFull (1 samples, 0.02%)</title><rect x="184.5" y="277" width="0.2" height="15.0" fill="rgb(251,217,45)" rx="2" ry="2" />
<text  x="187.45" y="287.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeValue (9 samples, 0.20%)</title><rect x="335.1" y="341" width="2.3" height="15.0" fill="rgb(214,188,26)" rx="2" ry="2" />
<text  x="338.09" y="351.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (3 samples, 0.07%)</title><rect x="333.0" y="357" width="0.8" height="15.0" fill="rgb(233,13,47)" rx="2" ry="2" />
<text  x="336.02" y="367.5" ></text>
</g>
<g >
<title>runtime.freedefer.func1 (1 samples, 0.02%)</title><rect x="103.2" y="293" width="0.2" height="15.0" fill="rgb(243,21,43)" rx="2" ry="2" />
<text  x="106.18" y="303.5" ></text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.04%)</title><rect x="742.5" y="389" width="0.5" height="15.0" fill="rgb(224,8,1)" rx="2" ry="2" />
<text  x="745.49" y="399.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.04%)</title><rect x="344.9" y="357" width="0.5" height="15.0" fill="rgb(220,105,42)" rx="2" ry="2" />
<text  x="347.92" y="367.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="343.4" y="405" width="0.2" height="15.0" fill="rgb(207,204,20)" rx="2" ry="2" />
<text  x="346.37" y="415.5" ></text>
</g>
<g >
<title>runtime.aeshash64 (1 samples, 0.02%)</title><rect x="332.2" y="229" width="0.3" height="15.0" fill="rgb(205,55,32)" rx="2" ry="2" />
<text  x="335.24" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (2 samples, 0.04%)</title><rect x="1185.1" y="341" width="0.5" height="15.0" fill="rgb(242,221,24)" rx="2" ry="2" />
<text  x="1188.08" y="351.5" ></text>
</g>
<g >
<title>runtime.aeshashbody (1 samples, 0.02%)</title><rect x="333.5" y="325" width="0.3" height="15.0" fill="rgb(238,166,38)" rx="2" ry="2" />
<text  x="336.54" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.decodeUintReader (2 samples, 0.04%)</title><rect x="334.6" y="309" width="0.5" height="15.0" fill="rgb(247,10,32)" rx="2" ry="2" />
<text  x="337.57" y="319.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (4 samples, 0.09%)</title><rect x="164.5" y="293" width="1.1" height="15.0" fill="rgb(225,203,30)" rx="2" ry="2" />
<text  x="167.52" y="303.5" ></text>
</g>
<g >
<title>runtime.spanOfUnchecked (1 samples, 0.02%)</title><rect x="341.3" y="373" width="0.3" height="15.0" fill="rgb(246,155,53)" rx="2" ry="2" />
<text  x="344.30" y="383.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (1 samples, 0.02%)</title><rect x="334.8" y="261" width="0.3" height="15.0" fill="rgb(253,82,9)" rx="2" ry="2" />
<text  x="337.83" y="271.5" ></text>
</g>
<g >
<title>runtime.notetsleep (2 samples, 0.04%)</title><rect x="1185.1" y="389" width="0.5" height="15.0" fill="rgb(214,97,44)" rx="2" ry="2" />
<text  x="1188.08" y="399.5" ></text>
</g>
<g >
<title>runtime.memhash (1 samples, 0.02%)</title><rect x="180.1" y="325" width="0.2" height="15.0" fill="rgb(248,131,10)" rx="2" ry="2" />
<text  x="183.05" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeStruct (5 samples, 0.11%)</title><rect x="335.1" y="325" width="1.3" height="15.0" fill="rgb(220,52,0)" rx="2" ry="2" />
<text  x="338.09" y="335.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="758.8" y="373" width="0.3" height="15.0" fill="rgb(221,147,26)" rx="2" ry="2" />
<text  x="761.79" y="383.5" ></text>
</g>
<g >
<title>encoding/gob.userType (3 samples, 0.07%)</title><rect x="336.6" y="325" width="0.8" height="15.0" fill="rgb(209,83,22)" rx="2" ry="2" />
<text  x="339.64" y="335.5" ></text>
</g>
<g >
<title>runtime.stopm (11 samples, 0.24%)</title><rect x="754.1" y="389" width="2.9" height="15.0" fill="rgb(230,226,41)" rx="2" ry="2" />
<text  x="757.13" y="399.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="337.7" y="357" width="0.2" height="15.0" fill="rgb(252,163,38)" rx="2" ry="2" />
<text  x="340.68" y="367.5" ></text>
</g>
<g >
<title>runtime.mstart (1,672 samples, 36.67%)</title><rect x="757.2" y="453" width="432.8" height="15.0" fill="rgb(225,141,22)" rx="2" ry="2" />
<text  x="760.24" y="463.5" >runtime.mstart</text>
</g>
<g >
<title>syscall.syscall (354 samples, 7.76%)</title><rect x="238.3" y="149" width="91.6" height="15.0" fill="rgb(233,222,37)" rx="2" ry="2" />
<text  x="241.29" y="159.5" >syscall.sy..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (1,603 samples, 35.16%)</title><rect x="761.9" y="341" width="414.9" height="15.0" fill="rgb(214,106,45)" rx="2" ry="2" />
<text  x="764.90" y="351.5" >runtime.pthread_cond_signal</text>
</g>
<g >
<title>runtime.newproc.func1 (16 samples, 0.35%)</title><rect x="1185.9" y="421" width="4.1" height="15.0" fill="rgb(235,211,21)" rx="2" ry="2" />
<text  x="1188.86" y="431.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.04%)</title><rect x="344.9" y="341" width="0.5" height="15.0" fill="rgb(215,36,12)" rx="2" ry="2" />
<text  x="347.92" y="351.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.02%)</title><rect x="178.8" y="277" width="0.2" height="15.0" fill="rgb(225,122,36)" rx="2" ry="2" />
<text  x="181.76" y="287.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.02%)</title><rect x="741.7" y="421" width="0.3" height="15.0" fill="rgb(208,64,11)" rx="2" ry="2" />
<text  x="744.71" y="431.5" ></text>
</g>
<g >
<title>runtime.gcDrain (3 samples, 0.07%)</title><rect x="340.8" y="405" width="0.8" height="15.0" fill="rgb(232,193,18)" rx="2" ry="2" />
<text  x="343.78" y="415.5" ></text>
</g>
<g >
<title>sync.(*entry).load (1 samples, 0.02%)</title><rect x="173.8" y="341" width="0.3" height="15.0" fill="rgb(247,221,50)" rx="2" ry="2" />
<text  x="176.84" y="351.5" ></text>
</g>
<g >
<title>runtime.park_m (59 samples, 1.29%)</title><rect x="742.0" y="437" width="15.2" height="15.0" fill="rgb(212,46,41)" rx="2" ry="2" />
<text  x="744.97" y="447.5" ></text>
</g>
<g >
<title>runtime.forEachP (2 samples, 0.04%)</title><rect x="1185.1" y="405" width="0.5" height="15.0" fill="rgb(213,99,28)" rx="2" ry="2" />
<text  x="1188.08" y="415.5" ></text>
</g>
<g >
<title>runtime.usleep (7 samples, 0.15%)</title><rect x="759.1" y="405" width="1.8" height="15.0" fill="rgb(217,104,2)" rx="2" ry="2" />
<text  x="762.05" y="415.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.02%)</title><rect x="344.4" y="405" width="0.3" height="15.0" fill="rgb(217,207,2)" rx="2" ry="2" />
<text  x="347.41" y="415.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.02%)</title><rect x="340.8" y="357" width="0.2" height="15.0" fill="rgb(247,145,32)" rx="2" ry="2" />
<text  x="343.78" y="367.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="761.6" y="357" width="0.3" height="15.0" fill="rgb(242,22,9)" rx="2" ry="2" />
<text  x="764.64" y="367.5" ></text>
</g>
<g >
<title>encoding/gob.validUserType (3 samples, 0.07%)</title><rect x="336.6" y="309" width="0.8" height="15.0" fill="rgb(206,179,30)" rx="2" ry="2" />
<text  x="339.64" y="319.5" ></text>
</g>
<g >
<title>runtime.interhash (2 samples, 0.04%)</title><rect x="171.8" y="341" width="0.5" height="15.0" fill="rgb(249,178,8)" rx="2" ry="2" />
<text  x="174.77" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.04%)</title><rect x="344.9" y="325" width="0.5" height="15.0" fill="rgb(252,209,4)" rx="2" ry="2" />
<text  x="347.92" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).readMessage (1 samples, 0.02%)</title><rect x="184.5" y="293" width="0.2" height="15.0" fill="rgb(225,151,30)" rx="2" ry="2" />
<text  x="187.45" y="303.5" ></text>
</g>
<g >
<title>runtime.nanotime (4 samples, 0.09%)</title><rect x="713.0" y="389" width="1.0" height="15.0" fill="rgb(214,143,49)" rx="2" ry="2" />
<text  x="715.98" y="399.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.02%)</title><rect x="171.3" y="357" width="0.2" height="15.0" fill="rgb(238,30,40)" rx="2" ry="2" />
<text  x="174.25" y="367.5" ></text>
</g>
<g >
<title>runtime.injectglist (4 samples, 0.09%)</title><rect x="711.7" y="389" width="1.0" height="15.0" fill="rgb(210,172,33)" rx="2" ry="2" />
<text  x="714.68" y="399.5" ></text>
</g>
<g >
<title>reflect.escapes (1 samples, 0.02%)</title><rect x="337.4" y="341" width="0.3" height="15.0" fill="rgb(206,151,10)" rx="2" ry="2" />
<text  x="340.42" y="351.5" ></text>
</g>
<g >
<title>runtime.systemstack (4 samples, 0.09%)</title><rect x="164.5" y="277" width="1.1" height="15.0" fill="rgb(234,100,8)" rx="2" ry="2" />
<text  x="167.52" y="287.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.04%)</title><rect x="346.0" y="373" width="0.5" height="15.0" fill="rgb(225,66,34)" rx="2" ry="2" />
<text  x="348.96" y="383.5" ></text>
</g>
<g >
<title>runtime.schedule (59 samples, 1.29%)</title><rect x="742.0" y="421" width="15.2" height="15.0" fill="rgb(209,110,37)" rx="2" ry="2" />
<text  x="744.97" y="431.5" ></text>
</g>
<g >
<title>net/rpc.ServeConn (606 samples, 13.29%)</title><rect x="183.2" y="453" width="156.8" height="15.0" fill="rgb(217,37,47)" rx="2" ry="2" />
<text  x="186.16" y="463.5" >net/rpc.ServeConn</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="330.7" y="197" width="0.2" height="15.0" fill="rgb(233,39,37)" rx="2" ry="2" />
<text  x="333.69" y="207.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (5 samples, 0.11%)</title><rect x="165.6" y="293" width="1.3" height="15.0" fill="rgb(240,69,6)" rx="2" ry="2" />
<text  x="168.56" y="303.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1 samples, 0.02%)</title><rect x="741.7" y="389" width="0.3" height="15.0" fill="rgb(241,59,6)" rx="2" ry="2" />
<text  x="744.71" y="399.5" ></text>
</g>
<g >
<title>runtime.handoffp (2 samples, 0.04%)</title><rect x="165.0" y="245" width="0.6" height="15.0" fill="rgb(254,111,38)" rx="2" ry="2" />
<text  x="168.04" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (1,374 samples, 30.14%)</title><rect x="355.3" y="405" width="355.6" height="15.0" fill="rgb(205,18,33)" rx="2" ry="2" />
<text  x="358.28" y="415.5" >runtime.notesleep</text>
</g>
<g >
<title>syscall.syscall (245 samples, 5.37%)</title><rect x="103.4" y="309" width="63.5" height="15.0" fill="rgb(249,167,40)" rx="2" ry="2" />
<text  x="106.44" y="319.5" >syscal..</text>
</g>
<g >
<title>encoding/gob.(*Decoder).recvMessage (2 samples, 0.04%)</title><rect x="334.6" y="325" width="0.5" height="15.0" fill="rgb(241,193,28)" rx="2" ry="2" />
<text  x="337.57" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.validUserType (2 samples, 0.04%)</title><rect x="332.0" y="293" width="0.5" height="15.0" fill="rgb(253,172,36)" rx="2" ry="2" />
<text  x="334.98" y="303.5" ></text>
</g>
<g >
<title>net/rpc.(*gobServerCodec).ReadRequestHeader (574 samples, 12.59%)</title><rect x="184.2" y="373" width="148.6" height="15.0" fill="rgb(246,214,31)" rx="2" ry="2" />
<text  x="187.19" y="383.5" >net/rpc.(*gobServe..</text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (4 samples, 0.09%)</title><rect x="328.4" y="101" width="1.0" height="15.0" fill="rgb(239,202,34)" rx="2" ry="2" />
<text  x="331.36" y="111.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeTypeSequence (562 samples, 12.33%)</title><rect x="184.5" y="325" width="145.4" height="15.0" fill="rgb(251,128,17)" rx="2" ry="2" />
<text  x="187.45" y="335.5" >encoding/gob.(*Dec..</text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="760.9" y="357" width="0.2" height="15.0" fill="rgb(236,9,10)" rx="2" ry="2" />
<text  x="763.86" y="367.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (5 samples, 0.11%)</title><rect x="177.7" y="309" width="1.3" height="15.0" fill="rgb(234,63,53)" rx="2" ry="2" />
<text  x="180.72" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="742.2" y="357" width="0.3" height="15.0" fill="rgb(210,142,2)" rx="2" ry="2" />
<text  x="745.23" y="367.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc_example/arith/proto.(*Arith).Multiply (1 samples, 0.02%)</title><rect x="174.1" y="405" width="0.3" height="15.0" fill="rgb(249,68,9)" rx="2" ry="2" />
<text  x="177.10" y="415.5" ></text>
</g>
<g >
<title>runtime.newproc (6 samples, 0.13%)</title><rect x="338.5" y="405" width="1.5" height="15.0" fill="rgb(231,164,29)" rx="2" ry="2" />
<text  x="341.45" y="415.5" ></text>
</g>
<g >
<title>reflect.Value.FieldByIndex (3 samples, 0.07%)</title><rect x="168.1" y="341" width="0.8" height="15.0" fill="rgb(249,145,7)" rx="2" ry="2" />
<text  x="171.14" y="351.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (1 samples, 0.02%)</title><rect x="337.7" y="373" width="0.2" height="15.0" fill="rgb(239,74,44)" rx="2" ry="2" />
<text  x="340.68" y="383.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.07%)</title><rect x="340.8" y="437" width="0.8" height="15.0" fill="rgb(254,139,19)" rx="2" ry="2" />
<text  x="343.78" y="447.5" ></text>
</g>
<g >
<title>runtime.isSystemGoroutine (2 samples, 0.04%)</title><rect x="339.0" y="341" width="0.5" height="15.0" fill="rgb(245,92,25)" rx="2" ry="2" />
<text  x="341.97" y="351.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="103.2" y="309" width="0.2" height="15.0" fill="rgb(229,188,52)" rx="2" ry="2" />
<text  x="106.18" y="319.5" ></text>
</g>
<g >
<title>runtime.netpollready (1 samples, 0.02%)</title><rect x="731.1" y="373" width="0.3" height="15.0" fill="rgb(213,154,26)" rx="2" ry="2" />
<text  x="734.10" y="383.5" ></text>
</g>
<g >
<title>runtime.usleep (3 samples, 0.07%)</title><rect x="348.8" y="357" width="0.8" height="15.0" fill="rgb(223,137,53)" rx="2" ry="2" />
<text  x="351.81" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="330.4" y="261" width="0.5" height="15.0" fill="rgb(254,182,31)" rx="2" ry="2" />
<text  x="333.43" y="271.5" ></text>
</g>
<g >
<title>sync.(*entry).load (1 samples, 0.02%)</title><rect x="180.3" y="373" width="0.3" height="15.0" fill="rgb(251,171,36)" rx="2" ry="2" />
<text  x="183.31" y="383.5" ></text>
</g>
<g >
<title>runtime.gosched_m (1 samples, 0.02%)</title><rect x="741.7" y="437" width="0.3" height="15.0" fill="rgb(239,34,16)" rx="2" ry="2" />
<text  x="744.71" y="447.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (2 samples, 0.04%)</title><rect x="332.0" y="277" width="0.5" height="15.0" fill="rgb(224,186,39)" rx="2" ry="2" />
<text  x="334.98" y="287.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.02%)</title><rect x="710.6" y="357" width="0.3" height="15.0" fill="rgb(247,187,22)" rx="2" ry="2" />
<text  x="713.65" y="367.5" ></text>
</g>
<g >
<title>runtime.kevent (35 samples, 0.77%)</title><rect x="745.1" y="373" width="9.0" height="15.0" fill="rgb(213,44,32)" rx="2" ry="2" />
<text  x="748.07" y="383.5" ></text>
</g>
<g >
<title>encoding/gob.getEncEngine (4 samples, 0.09%)</title><rect x="169.4" y="357" width="1.1" height="15.0" fill="rgb(232,146,32)" rx="2" ry="2" />
<text  x="172.44" y="367.5" ></text>
</g>
<g >
<title>runtime.stopm (18 samples, 0.39%)</title><rect x="349.6" y="389" width="4.6" height="15.0" fill="rgb(220,97,32)" rx="2" ry="2" />
<text  x="352.58" y="399.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).encode (17 samples, 0.37%)</title><rect x="166.9" y="373" width="4.4" height="15.0" fill="rgb(236,148,16)" rx="2" ry="2" />
<text  x="169.85" y="383.5" ></text>
</g>
<g >
<title>runtime.deferreturn (4 samples, 0.09%)</title><rect x="335.1" y="277" width="1.0" height="15.0" fill="rgb(206,56,44)" rx="2" ry="2" />
<text  x="338.09" y="287.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.02%)</title><rect x="331.2" y="293" width="0.3" height="15.0" fill="rgb(220,1,31)" rx="2" ry="2" />
<text  x="334.21" y="303.5" ></text>
</g>
<g >
<title>runtime.pcvalue (5 samples, 0.11%)</title><rect x="177.7" y="293" width="1.3" height="15.0" fill="rgb(232,149,41)" rx="2" ry="2" />
<text  x="180.72" y="303.5" ></text>
</g>
<g >
<title>reflect.funcLayout (24 samples, 0.53%)</title><rect x="174.4" y="405" width="6.2" height="15.0" fill="rgb(252,107,28)" rx="2" ry="2" />
<text  x="177.36" y="415.5" ></text>
</g>
<g >
<title>reflect.Value.FieldByIndex (1 samples, 0.02%)</title><rect x="336.1" y="309" width="0.3" height="15.0" fill="rgb(216,58,24)" rx="2" ry="2" />
<text  x="339.12" y="319.5" ></text>
</g>
<g >
<title>runtime.deferreturn (97 samples, 2.13%)</title><rect x="78.3" y="341" width="25.1" height="15.0" fill="rgb(207,29,52)" rx="2" ry="2" />
<text  x="81.33" y="351.5" >r..</text>
</g>
<g >
<title>sync.(*Map).Load (4 samples, 0.09%)</title><rect x="332.8" y="373" width="1.0" height="15.0" fill="rgb(243,121,18)" rx="2" ry="2" />
<text  x="335.76" y="383.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="330.7" y="213" width="0.2" height="15.0" fill="rgb(225,148,33)" rx="2" ry="2" />
<text  x="333.69" y="223.5" ></text>
</g>
<g >
<title>runtime.runqgrab (3 samples, 0.07%)</title><rect x="348.8" y="373" width="0.8" height="15.0" fill="rgb(205,45,10)" rx="2" ry="2" />
<text  x="351.81" y="383.5" ></text>
</g>
<g >
<title>runtime.osyield (5 samples, 0.11%)</title><rect x="341.8" y="405" width="1.3" height="15.0" fill="rgb(206,68,22)" rx="2" ry="2" />
<text  x="344.82" y="415.5" ></text>
</g>
<g >
<title>runtime.adjustdefers (3 samples, 0.07%)</title><rect x="175.4" y="357" width="0.8" height="15.0" fill="rgb(240,202,34)" rx="2" ry="2" />
<text  x="178.39" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.02%)</title><rect x="181.6" y="373" width="0.3" height="15.0" fill="rgb(241,154,50)" rx="2" ry="2" />
<text  x="184.60" y="383.5" ></text>
</g>
<g >
<title>encoding/gob.encOpFor.func4 (2 samples, 0.04%)</title><rect x="167.4" y="341" width="0.5" height="15.0" fill="rgb(236,171,7)" rx="2" ry="2" />
<text  x="170.37" y="351.5" ></text>
</g>
<g >
<title>io.ReadFull (2 samples, 0.04%)</title><rect x="334.6" y="293" width="0.5" height="15.0" fill="rgb(205,161,52)" rx="2" ry="2" />
<text  x="337.57" y="303.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="1184.8" y="357" width="0.3" height="15.0" fill="rgb(212,192,13)" rx="2" ry="2" />
<text  x="1187.82" y="367.5" ></text>
</g>
<g >
<title>runtime.schedule (116 samples, 2.54%)</title><rect x="711.7" y="421" width="30.0" height="15.0" fill="rgb(250,62,29)" rx="2" ry="2" />
<text  x="714.68" y="431.5" >ru..</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="741.7" y="341" width="0.3" height="15.0" fill="rgb(218,78,34)" rx="2" ry="2" />
<text  x="744.71" y="351.5" ></text>
</g>
<g >
<title>runtime.newproc1 (4 samples, 0.09%)</title><rect x="339.0" y="357" width="1.0" height="15.0" fill="rgb(249,23,0)" rx="2" ry="2" />
<text  x="341.97" y="367.5" ></text>
</g>
<g >
<title>net.(*conn).Write (342 samples, 7.50%)</title><rect x="78.3" y="389" width="88.6" height="15.0" fill="rgb(239,35,54)" rx="2" ry="2" />
<text  x="81.33" y="399.5" >net.(*conn..</text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.02%)</title><rect x="332.2" y="245" width="0.3" height="15.0" fill="rgb(238,54,2)" rx="2" ry="2" />
<text  x="335.24" y="255.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeStruct (4 samples, 0.09%)</title><rect x="335.1" y="293" width="1.0" height="15.0" fill="rgb(222,44,13)" rx="2" ry="2" />
<text  x="338.09" y="303.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="1184.8" y="389" width="0.3" height="15.0" fill="rgb(228,139,4)" rx="2" ry="2" />
<text  x="1187.82" y="399.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (5 samples, 0.11%)</title><rect x="328.1" y="133" width="1.3" height="15.0" fill="rgb(230,24,3)" rx="2" ry="2" />
<text  x="331.10" y="143.5" ></text>
</g>
<g >
<title>runtime.newstack (17 samples, 0.37%)</title><rect x="174.9" y="389" width="4.4" height="15.0" fill="rgb(215,20,41)" rx="2" ry="2" />
<text  x="177.87" y="399.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1,634 samples, 35.84%)</title><rect x="761.9" y="373" width="422.9" height="15.0" fill="rgb(253,90,29)" rx="2" ry="2" />
<text  x="764.90" y="383.5" >runtime.notewakeup</text>
</g>
<g >
<title>runtime.pthread_cond_signal_trampoline (1 samples, 0.02%)</title><rect x="340.5" y="437" width="0.3" height="15.0" fill="rgb(245,95,23)" rx="2" ry="2" />
<text  x="343.52" y="447.5" ></text>
</g>
<g >
<title>reflect.(*structField).offset (1 samples, 0.02%)</title><rect x="168.4" y="309" width="0.3" height="15.0" fill="rgb(211,121,37)" rx="2" ry="2" />
<text  x="171.40" y="319.5" ></text>
</g>
<g >
<title>runtime.lock (8 samples, 0.18%)</title><rect x="341.6" y="421" width="2.0" height="15.0" fill="rgb(214,118,22)" rx="2" ry="2" />
<text  x="344.56" y="431.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="712.7" y="373" width="0.3" height="15.0" fill="rgb(249,69,9)" rx="2" ry="2" />
<text  x="715.72" y="383.5" ></text>
</g>
<g >
<title>runtime.adjustframe (11 samples, 0.24%)</title><rect x="176.2" y="341" width="2.8" height="15.0" fill="rgb(252,95,1)" rx="2" ry="2" />
<text  x="179.17" y="351.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.02%)</title><rect x="182.9" y="421" width="0.3" height="15.0" fill="rgb(238,187,45)" rx="2" ry="2" />
<text  x="185.90" y="431.5" ></text>
</g>
<g >
<title>runtime.semawakeup (4 samples, 0.09%)</title><rect x="711.7" y="341" width="1.0" height="15.0" fill="rgb(231,132,39)" rx="2" ry="2" />
<text  x="714.68" y="351.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="182.1" y="405" width="0.3" height="15.0" fill="rgb(222,207,29)" rx="2" ry="2" />
<text  x="185.12" y="415.5" ></text>
</g>
<g >
<title>runtime.findrunnable (37 samples, 0.81%)</title><rect x="344.7" y="405" width="9.5" height="15.0" fill="rgb(242,46,44)" rx="2" ry="2" />
<text  x="347.67" y="415.5" ></text>
</g>
<g >
<title>runtime.systemstack (1,658 samples, 36.37%)</title><rect x="760.9" y="437" width="429.1" height="15.0" fill="rgb(243,123,27)" rx="2" ry="2" />
<text  x="763.86" y="447.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.newproc.func1 (4 samples, 0.09%)</title><rect x="339.0" y="373" width="1.0" height="15.0" fill="rgb(235,32,5)" rx="2" ry="2" />
<text  x="341.97" y="383.5" ></text>
</g>
<g >
<title>reflect.valueInterface (2 samples, 0.04%)</title><rect x="182.4" y="421" width="0.5" height="15.0" fill="rgb(235,127,18)" rx="2" ry="2" />
<text  x="185.38" y="431.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (2 samples, 0.04%)</title><rect x="329.4" y="133" width="0.5" height="15.0" fill="rgb(229,50,29)" rx="2" ry="2" />
<text  x="332.39" y="143.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.02%)</title><rect x="332.5" y="309" width="0.3" height="15.0" fill="rgb(234,144,47)" rx="2" ry="2" />
<text  x="335.50" y="319.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="710.9" y="389" width="0.3" height="15.0" fill="rgb(231,177,30)" rx="2" ry="2" />
<text  x="713.91" y="399.5" ></text>
</g>
<g >
<title>io.ReadAtLeast (561 samples, 12.31%)</title><rect x="184.7" y="261" width="145.2" height="15.0" fill="rgb(243,146,15)" rx="2" ry="2" />
<text  x="187.71" y="271.5" >io.ReadAtLeast</text>
</g>
<g >
<title>runtime.nanotime (5 samples, 0.11%)</title><rect x="757.5" y="405" width="1.3" height="15.0" fill="rgb(226,144,33)" rx="2" ry="2" />
<text  x="760.50" y="415.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).readRequestHeader (580 samples, 12.72%)</title><rect x="183.7" y="389" width="150.1" height="15.0" fill="rgb(232,73,0)" rx="2" ry="2" />
<text  x="186.67" y="399.5" >net/rpc.(*Server).r..</text>
</g>
<g >
<title>encoding/gob.(*Decoder).nextInt (2 samples, 0.04%)</title><rect x="334.1" y="325" width="0.5" height="15.0" fill="rgb(250,21,11)" rx="2" ry="2" />
<text  x="337.05" y="335.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (2 samples, 0.04%)</title><rect x="179.8" y="357" width="0.5" height="15.0" fill="rgb(234,0,3)" rx="2" ry="2" />
<text  x="182.79" y="367.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Kind (1 samples, 0.02%)</title><rect x="330.9" y="261" width="0.3" height="15.0" fill="rgb(249,65,39)" rx="2" ry="2" />
<text  x="333.95" y="271.5" ></text>
</g>
<g >
<title>runtime.mcall (1 samples, 0.02%)</title><rect x="340.0" y="437" width="0.3" height="15.0" fill="rgb(246,3,44)" rx="2" ry="2" />
<text  x="343.01" y="447.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (5 samples, 0.11%)</title><rect x="172.8" y="357" width="1.3" height="15.0" fill="rgb(224,203,30)" rx="2" ry="2" />
<text  x="175.80" y="367.5" ></text>
</g>
<g >
<title>reflect.Value.call (32 samples, 0.70%)</title><rect x="174.1" y="421" width="8.3" height="15.0" fill="rgb(228,64,18)" rx="2" ry="2" />
<text  x="177.10" y="431.5" ></text>
</g>
<g >
<title>runtime.jmpdefer (1 samples, 0.02%)</title><rect x="169.2" y="325" width="0.2" height="15.0" fill="rgb(240,136,11)" rx="2" ry="2" />
<text  x="172.18" y="335.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="712.7" y="389" width="0.3" height="15.0" fill="rgb(244,161,48)" rx="2" ry="2" />
<text  x="715.72" y="399.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="328.9" y="53" width="0.2" height="15.0" fill="rgb(250,62,52)" rx="2" ry="2" />
<text  x="331.88" y="63.5" ></text>
</g>
<g >
<title>runtime.notesleep (18 samples, 0.39%)</title><rect x="349.6" y="373" width="4.6" height="15.0" fill="rgb(209,131,8)" rx="2" ry="2" />
<text  x="352.58" y="383.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (342 samples, 7.50%)</title><rect x="78.3" y="405" width="88.6" height="15.0" fill="rgb(209,8,41)" rx="2" ry="2" />
<text  x="81.33" y="415.5" >bufio.(*Wr..</text>
</g>
<g >
<title>reflect.valueInterface (2 samples, 0.04%)</title><rect x="337.9" y="373" width="0.6" height="15.0" fill="rgb(223,68,38)" rx="2" ry="2" />
<text  x="340.94" y="383.5" ></text>
</g>
<g >
<title>reflect.Value.Call (32 samples, 0.70%)</title><rect x="174.1" y="437" width="8.3" height="15.0" fill="rgb(232,155,15)" rx="2" ry="2" />
<text  x="177.10" y="447.5" ></text>
</g>
<g >
<title>encoding/gob.getTypeInfo (3 samples, 0.07%)</title><rect x="169.7" y="341" width="0.8" height="15.0" fill="rgb(243,35,22)" rx="2" ry="2" />
<text  x="172.70" y="351.5" ></text>
</g>
<g >
<title>reflect.New (1 samples, 0.02%)</title><rect x="337.7" y="389" width="0.2" height="15.0" fill="rgb(236,15,32)" rx="2" ry="2" />
<text  x="340.68" y="399.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="760.9" y="389" width="0.2" height="15.0" fill="rgb(206,13,28)" rx="2" ry="2" />
<text  x="763.86" y="399.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.02%)</title><rect x="758.8" y="389" width="0.3" height="15.0" fill="rgb(248,63,38)" rx="2" ry="2" />
<text  x="761.79" y="399.5" ></text>
</g>
<g >
<title>runtime.runqput (1 samples, 0.02%)</title><rect x="339.7" y="341" width="0.3" height="15.0" fill="rgb(246,21,40)" rx="2" ry="2" />
<text  x="342.75" y="351.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="710.9" y="405" width="0.3" height="15.0" fill="rgb(229,208,28)" rx="2" ry="2" />
<text  x="713.91" y="415.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="172.5" y="341" width="0.3" height="15.0" fill="rgb(224,10,17)" rx="2" ry="2" />
<text  x="175.54" y="351.5" ></text>
</g>
<g >
<title>runtime.stopm (1,378 samples, 30.23%)</title><rect x="354.5" y="421" width="356.7" height="15.0" fill="rgb(238,133,35)" rx="2" ry="2" />
<text  x="357.50" y="431.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="179.0" y="357" width="0.3" height="15.0" fill="rgb(246,2,35)" rx="2" ry="2" />
<text  x="182.02" y="367.5" ></text>
</g>
<g >
<title>runtime.semasleep (40 samples, 0.88%)</title><rect x="731.4" y="357" width="10.3" height="15.0" fill="rgb(228,226,15)" rx="2" ry="2" />
<text  x="734.36" y="367.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (2 samples, 0.04%)</title><rect x="180.8" y="389" width="0.5" height="15.0" fill="rgb(244,114,30)" rx="2" ry="2" />
<text  x="183.83" y="399.5" ></text>
</g>
<g >
<title>runtime.netpollunblock (1 samples, 0.02%)</title><rect x="731.1" y="357" width="0.3" height="15.0" fill="rgb(229,113,9)" rx="2" ry="2" />
<text  x="734.10" y="367.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.04%)</title><rect x="761.1" y="341" width="0.5" height="15.0" fill="rgb(238,70,1)" rx="2" ry="2" />
<text  x="764.12" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (4 samples, 0.09%)</title><rect x="711.7" y="325" width="1.0" height="15.0" fill="rgb(246,210,38)" rx="2" ry="2" />
<text  x="714.68" y="335.5" ></text>
</g>
<g >
<title>runtime.stopm (40 samples, 0.88%)</title><rect x="731.4" y="389" width="10.3" height="15.0" fill="rgb(210,106,23)" rx="2" ry="2" />
<text  x="734.36" y="399.5" ></text>
</g>
<g >
<title>encoding/gob.validUserType (5 samples, 0.11%)</title><rect x="172.8" y="373" width="1.3" height="15.0" fill="rgb(232,225,47)" rx="2" ry="2" />
<text  x="175.80" y="383.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="337.7" y="341" width="0.2" height="15.0" fill="rgb(221,152,23)" rx="2" ry="2" />
<text  x="340.68" y="351.5" ></text>
</g>
<g >
<title>runtime.notewakeup (4 samples, 0.09%)</title><rect x="711.7" y="357" width="1.0" height="15.0" fill="rgb(232,31,53)" rx="2" ry="2" />
<text  x="714.68" y="367.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (561 samples, 12.31%)</title><rect x="184.7" y="245" width="145.2" height="15.0" fill="rgb(252,218,0)" rx="2" ry="2" />
<text  x="187.71" y="255.5" >bufio.(*Reader).Read</text>
</g>
<g >
<title>encoding/gob.(*Encoder).Encode (28 samples, 0.61%)</title><rect x="166.9" y="405" width="7.2" height="15.0" fill="rgb(253,52,27)" rx="2" ry="2" />
<text  x="169.85" y="415.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.02%)</title><rect x="355.0" y="405" width="0.3" height="15.0" fill="rgb(252,154,39)" rx="2" ry="2" />
<text  x="358.02" y="415.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.04%)</title><rect x="346.0" y="357" width="0.5" height="15.0" fill="rgb(210,5,42)" rx="2" ry="2" />
<text  x="348.96" y="367.5" ></text>
</g>
<g >
<title>reflect.Value.Field (3 samples, 0.07%)</title><rect x="168.1" y="325" width="0.8" height="15.0" fill="rgb(208,72,28)" rx="2" ry="2" />
<text  x="171.14" y="335.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (342 samples, 7.50%)</title><rect x="78.3" y="357" width="88.6" height="15.0" fill="rgb(252,88,20)" rx="2" ry="2" />
<text  x="81.33" y="367.5" >internal/p..</text>
</g>
<g >
<title>runtime.(*guintptr).cas (1 samples, 0.02%)</title><rect x="339.7" y="325" width="0.3" height="15.0" fill="rgb(246,60,0)" rx="2" ry="2" />
<text  x="342.75" y="335.5" ></text>
</g>
<g >
<title>runtime.injectglist (2 samples, 0.04%)</title><rect x="742.0" y="389" width="0.5" height="15.0" fill="rgb(219,74,38)" rx="2" ry="2" />
<text  x="744.97" y="399.5" ></text>
</g>
<g >
<title>runtime.gorecover (1 samples, 0.02%)</title><rect x="331.7" y="293" width="0.3" height="15.0" fill="rgb(226,144,21)" rx="2" ry="2" />
<text  x="334.72" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.02%)</title><rect x="181.6" y="341" width="0.3" height="15.0" fill="rgb(238,178,6)" rx="2" ry="2" />
<text  x="184.60" y="351.5" ></text>
</g>
<g >
<title>runtime.funcname (2 samples, 0.04%)</title><rect x="339.0" y="325" width="0.5" height="15.0" fill="rgb(211,133,54)" rx="2" ry="2" />
<text  x="341.97" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="330.7" y="245" width="0.2" height="15.0" fill="rgb(217,2,29)" rx="2" ry="2" />
<text  x="333.69" y="255.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (3 samples, 0.07%)</title><rect x="336.6" y="293" width="0.8" height="15.0" fill="rgb(214,196,33)" rx="2" ry="2" />
<text  x="339.64" y="303.5" ></text>
</g>
<g >
<title>reflect.Value.Field (1 samples, 0.02%)</title><rect x="336.1" y="293" width="0.3" height="15.0" fill="rgb(234,101,48)" rx="2" ry="2" />
<text  x="339.12" y="303.5" ></text>
</g>
<g >
<title>runtime.mcall (1,606 samples, 35.23%)</title><rect x="341.6" y="453" width="415.6" height="15.0" fill="rgb(209,78,30)" rx="2" ry="2" />
<text  x="344.56" y="463.5" >runtime.mcall</text>
</g>
<g >
<title>encoding/gob.(*Decoder).recvMessage (562 samples, 12.33%)</title><rect x="184.5" y="309" width="145.4" height="15.0" fill="rgb(210,9,48)" rx="2" ry="2" />
<text  x="187.45" y="319.5" >encoding/gob.(*Dec..</text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (3 samples, 0.07%)</title><rect x="340.8" y="421" width="0.8" height="15.0" fill="rgb(224,131,11)" rx="2" ry="2" />
<text  x="343.78" y="431.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="711.2" y="421" width="0.2" height="15.0" fill="rgb(229,219,12)" rx="2" ry="2" />
<text  x="714.17" y="431.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1,367 samples, 29.98%)</title><rect x="356.6" y="373" width="353.8" height="15.0" fill="rgb(237,188,12)" rx="2" ry="2" />
<text  x="359.57" y="383.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>reflect.typedmemclrpartial (3 samples, 0.07%)</title><rect x="180.6" y="405" width="0.7" height="15.0" fill="rgb(252,71,3)" rx="2" ry="2" />
<text  x="183.57" y="415.5" ></text>
</g>
<g >
<title>runtime.startm (3 samples, 0.07%)</title><rect x="328.6" y="69" width="0.8" height="15.0" fill="rgb(223,53,30)" rx="2" ry="2" />
<text  x="331.62" y="79.5" ></text>
</g>
<g >
<title>syscall.read (356 samples, 7.81%)</title><rect x="237.8" y="165" width="92.1" height="15.0" fill="rgb(236,1,36)" rx="2" ry="2" />
<text  x="240.77" y="175.5" >syscall.read</text>
</g>
<g >
<title>runtime.exitsyscall0 (1,428 samples, 31.32%)</title><rect x="341.6" y="437" width="369.6" height="15.0" fill="rgb(246,127,26)" rx="2" ry="2" />
<text  x="344.56" y="447.5" >runtime.exitsyscall0</text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.04%)</title><rect x="761.1" y="357" width="0.5" height="15.0" fill="rgb(228,74,41)" rx="2" ry="2" />
<text  x="764.12" y="367.5" ></text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.02%)</title><rect x="1185.6" y="373" width="0.3" height="15.0" fill="rgb(236,34,19)" rx="2" ry="2" />
<text  x="1188.60" y="383.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.02%)</title><rect x="173.6" y="341" width="0.2" height="15.0" fill="rgb(236,194,39)" rx="2" ry="2" />
<text  x="176.58" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="343.4" y="389" width="0.2" height="15.0" fill="rgb(244,112,15)" rx="2" ry="2" />
<text  x="346.37" y="399.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (10 samples, 0.22%)</title><rect x="754.4" y="341" width="2.6" height="15.0" fill="rgb(240,71,38)" rx="2" ry="2" />
<text  x="757.39" y="351.5" ></text>
</g>
<g >
<title>encoding/gob.decString (4 samples, 0.09%)</title><rect x="329.9" y="293" width="1.0" height="15.0" fill="rgb(207,14,6)" rx="2" ry="2" />
<text  x="332.91" y="303.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (2 samples, 0.04%)</title><rect x="340.3" y="453" width="0.5" height="15.0" fill="rgb(224,182,47)" rx="2" ry="2" />
<text  x="343.27" y="463.5" ></text>
</g>
<g >
<title>io.ReadAtLeast (2 samples, 0.04%)</title><rect x="334.1" y="277" width="0.5" height="15.0" fill="rgb(246,8,15)" rx="2" ry="2" />
<text  x="337.05" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1,634 samples, 35.84%)</title><rect x="761.9" y="357" width="422.9" height="15.0" fill="rgb(235,174,24)" rx="2" ry="2" />
<text  x="764.90" y="367.5" >runtime.semawakeup</text>
</g>
<g >
<title>net.(*conn).Read (559 samples, 12.26%)</title><rect x="185.2" y="229" width="144.7" height="15.0" fill="rgb(229,164,45)" rx="2" ry="2" />
<text  x="188.23" y="239.5" >net.(*conn).Read</text>
</g>
<g >
<title>runtime.gcBgMarkWorker (3 samples, 0.07%)</title><rect x="340.8" y="453" width="0.8" height="15.0" fill="rgb(239,197,40)" rx="2" ry="2" />
<text  x="343.78" y="463.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).sendResponse (371 samples, 8.14%)</title><rect x="78.1" y="437" width="96.0" height="15.0" fill="rgb(241,153,36)" rx="2" ry="2" />
<text  x="81.07" y="447.5" >net/rpc.(*S..</text>
</g>
<g >
<title>reflect.Value.Interface (2 samples, 0.04%)</title><rect x="337.9" y="389" width="0.6" height="15.0" fill="rgb(226,186,18)" rx="2" ry="2" />
<text  x="340.94" y="399.5" ></text>
</g>
<g >
<title>runtime.runqget (1 samples, 0.02%)</title><rect x="354.2" y="405" width="0.3" height="15.0" fill="rgb(247,2,39)" rx="2" ry="2" />
<text  x="357.24" y="415.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="742.2" y="325" width="0.3" height="15.0" fill="rgb(236,30,36)" rx="2" ry="2" />
<text  x="745.23" y="335.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (1 samples, 0.02%)</title><rect x="1185.6" y="405" width="0.3" height="15.0" fill="rgb(224,168,41)" rx="2" ry="2" />
<text  x="1188.60" y="415.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.02%)</title><rect x="332.2" y="261" width="0.3" height="15.0" fill="rgb(239,111,53)" rx="2" ry="2" />
<text  x="335.24" y="271.5" ></text>
</g>
<g >
<title>runtime.mapaccess1 (2 samples, 0.04%)</title><rect x="171.8" y="357" width="0.5" height="15.0" fill="rgb(224,205,29)" rx="2" ry="2" />
<text  x="174.77" y="367.5" ></text>
</g>
<g >
<title>runtime.fastrand (1 samples, 0.02%)</title><rect x="178.5" y="277" width="0.3" height="15.0" fill="rgb(224,105,17)" rx="2" ry="2" />
<text  x="181.50" y="287.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (2 samples, 0.04%)</title><rect x="182.4" y="437" width="0.5" height="15.0" fill="rgb(253,24,25)" rx="2" ry="2" />
<text  x="185.38" y="447.5" ></text>
</g>
<g >
<title>runtime.aeshash64 (1 samples, 0.02%)</title><rect x="172.0" y="325" width="0.3" height="15.0" fill="rgb(212,184,50)" rx="2" ry="2" />
<text  x="175.03" y="335.5" ></text>
</g>
<g >
<title>reflect.name.isExported (1 samples, 0.02%)</title><rect x="168.7" y="309" width="0.2" height="15.0" fill="rgb(212,131,54)" rx="2" ry="2" />
<text  x="171.66" y="319.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).getDecEnginePtr (1 samples, 0.02%)</title><rect x="331.5" y="309" width="0.2" height="15.0" fill="rgb(243,161,36)" rx="2" ry="2" />
<text  x="334.47" y="319.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (1 samples, 0.02%)</title><rect x="184.5" y="245" width="0.2" height="15.0" fill="rgb(205,186,3)" rx="2" ry="2" />
<text  x="187.45" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.02%)</title><rect x="181.6" y="357" width="0.3" height="15.0" fill="rgb(236,199,13)" rx="2" ry="2" />
<text  x="184.60" y="367.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.02%)</title><rect x="341.0" y="373" width="0.3" height="15.0" fill="rgb(234,176,43)" rx="2" ry="2" />
<text  x="344.04" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.02%)</title><rect x="181.6" y="309" width="0.3" height="15.0" fill="rgb(235,84,42)" rx="2" ry="2" />
<text  x="184.60" y="319.5" ></text>
</g>
<g >
<title>runtime.semasleep (18 samples, 0.39%)</title><rect x="349.6" y="357" width="4.6" height="15.0" fill="rgb(252,210,26)" rx="2" ry="2" />
<text  x="352.58" y="367.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.04%)</title><rect x="168.9" y="341" width="0.5" height="15.0" fill="rgb(245,73,27)" rx="2" ry="2" />
<text  x="171.92" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="165.3" y="181" width="0.3" height="15.0" fill="rgb(240,153,9)" rx="2" ry="2" />
<text  x="168.30" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (4 samples, 0.09%)</title><rect x="328.4" y="117" width="1.0" height="15.0" fill="rgb(217,21,28)" rx="2" ry="2" />
<text  x="331.36" y="127.5" ></text>
</g>
<g >
<title>runtime.startm (16 samples, 0.35%)</title><rect x="1185.9" y="373" width="4.1" height="15.0" fill="rgb(240,85,0)" rx="2" ry="2" />
<text  x="1188.86" y="383.5" ></text>
</g>
<g >
<title>runtime.scanobject (2 samples, 0.04%)</title><rect x="341.0" y="389" width="0.6" height="15.0" fill="rgb(218,152,28)" rx="2" ry="2" />
<text  x="344.04" y="399.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.02%)</title><rect x="742.2" y="373" width="0.3" height="15.0" fill="rgb(244,90,40)" rx="2" ry="2" />
<text  x="745.23" y="383.5" ></text>
</g>
<g >
<title>all (4,559 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(254,207,10)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>reflect.Value.FieldByIndex (1 samples, 0.02%)</title><rect x="330.9" y="293" width="0.3" height="15.0" fill="rgb(236,15,1)" rx="2" ry="2" />
<text  x="333.95" y="303.5" ></text>
</g>
<g >
<title>io.ReadFull (2 samples, 0.04%)</title><rect x="334.1" y="293" width="0.5" height="15.0" fill="rgb(252,37,20)" rx="2" ry="2" />
<text  x="337.05" y="303.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Kind (1 samples, 0.02%)</title><rect x="168.1" y="309" width="0.3" height="15.0" fill="rgb(243,33,21)" rx="2" ry="2" />
<text  x="171.14" y="319.5" ></text>
</g>
<g >
<title>encoding/gob.lookupTypeInfo (3 samples, 0.07%)</title><rect x="169.7" y="325" width="0.8" height="15.0" fill="rgb(229,55,23)" rx="2" ry="2" />
<text  x="172.70" y="335.5" ></text>
</g>
<g >
<title>runtime.usleep (5 samples, 0.11%)</title><rect x="341.8" y="389" width="1.3" height="15.0" fill="rgb(240,17,36)" rx="2" ry="2" />
<text  x="344.82" y="399.5" ></text>
</g>
<g >
<title>runtime.adjustframe (2 samples, 0.04%)</title><rect x="175.7" y="325" width="0.5" height="15.0" fill="rgb(219,217,37)" rx="2" ry="2" />
<text  x="178.65" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.userType (2 samples, 0.04%)</title><rect x="332.0" y="309" width="0.5" height="15.0" fill="rgb(232,47,41)" rx="2" ry="2" />
<text  x="334.98" y="319.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.02%)</title><rect x="170.5" y="341" width="0.2" height="15.0" fill="rgb(237,185,44)" rx="2" ry="2" />
<text  x="173.47" y="351.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="330.7" y="181" width="0.2" height="15.0" fill="rgb(229,167,40)" rx="2" ry="2" />
<text  x="333.69" y="191.5" ></text>
</g>
<g >
<title>runtime.strequal (1 samples, 0.02%)</title><rect x="333.3" y="309" width="0.2" height="15.0" fill="rgb(254,34,31)" rx="2" ry="2" />
<text  x="336.28" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="761.6" y="341" width="0.3" height="15.0" fill="rgb(207,220,37)" rx="2" ry="2" />
<text  x="764.64" y="351.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.02%)</title><rect x="741.7" y="357" width="0.3" height="15.0" fill="rgb(250,165,37)" rx="2" ry="2" />
<text  x="744.71" y="367.5" ></text>
</g>
<g >
<title>encoding/gob.(*decBuffer).Read (1 samples, 0.02%)</title><rect x="334.3" y="261" width="0.3" height="15.0" fill="rgb(244,22,10)" rx="2" ry="2" />
<text  x="337.31" y="271.5" ></text>
</g>
<g >
<title>runtime.sysmon (14 samples, 0.31%)</title><rect x="757.2" y="421" width="3.7" height="15.0" fill="rgb(252,119,13)" rx="2" ry="2" />
<text  x="760.24" y="431.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).DecodeValue (14 samples, 0.31%)</title><rect x="333.8" y="357" width="3.6" height="15.0" fill="rgb(233,54,40)" rx="2" ry="2" />
<text  x="336.79" y="367.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="184.5" y="229" width="0.2" height="15.0" fill="rgb(231,132,52)" rx="2" ry="2" />
<text  x="187.45" y="239.5" ></text>
</g>
<g >
<title>runtime.gostringnocopy (2 samples, 0.04%)</title><rect x="339.0" y="309" width="0.5" height="15.0" fill="rgb(211,17,53)" rx="2" ry="2" />
<text  x="341.97" y="319.5" ></text>
</g>
<g >
<title>runtime.runqget (1 samples, 0.02%)</title><rect x="757.0" y="405" width="0.2" height="15.0" fill="rgb(252,23,2)" rx="2" ry="2" />
<text  x="759.98" y="415.5" ></text>
</g>
<g >
<title>runtime.lock (3 samples, 0.07%)</title><rect x="761.1" y="373" width="0.8" height="15.0" fill="rgb(229,80,38)" rx="2" ry="2" />
<text  x="764.12" y="383.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="182.1" y="373" width="0.3" height="15.0" fill="rgb(220,14,40)" rx="2" ry="2" />
<text  x="185.12" y="383.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).getResponse (1 samples, 0.02%)</title><rect x="78.1" y="421" width="0.2" height="15.0" fill="rgb(247,227,37)" rx="2" ry="2" />
<text  x="81.07" y="431.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.02%)</title><rect x="340.8" y="373" width="0.2" height="15.0" fill="rgb(241,105,26)" rx="2" ry="2" />
<text  x="343.78" y="383.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.02%)</title><rect x="332.5" y="293" width="0.3" height="15.0" fill="rgb(231,65,6)" rx="2" ry="2" />
<text  x="335.50" y="303.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (342 samples, 7.50%)</title><rect x="78.3" y="373" width="88.6" height="15.0" fill="rgb(251,215,24)" rx="2" ry="2" />
<text  x="81.33" y="383.5" >net.(*netF..</text>
</g>
<g >
<title>runtime.gfput (1 samples, 0.02%)</title><rect x="711.4" y="421" width="0.3" height="15.0" fill="rgb(236,37,27)" rx="2" ry="2" />
<text  x="714.43" y="431.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (8 samples, 0.18%)</title><rect x="1176.8" y="341" width="2.1" height="15.0" fill="rgb(240,28,40)" rx="2" ry="2" />
<text  x="1179.80" y="351.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (559 samples, 12.26%)</title><rect x="185.2" y="213" width="144.7" height="15.0" fill="rgb(224,78,46)" rx="2" ry="2" />
<text  x="188.23" y="223.5" >net.(*netFD).Read</text>
</g>
<g >
<title>runtime.mapaccess1 (2 samples, 0.04%)</title><rect x="170.0" y="309" width="0.5" height="15.0" fill="rgb(252,28,31)" rx="2" ry="2" />
<text  x="172.96" y="319.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.04%)</title><rect x="344.9" y="373" width="0.5" height="15.0" fill="rgb(210,104,52)" rx="2" ry="2" />
<text  x="347.92" y="383.5" ></text>
</g>
<g >
<title>syscall.Write (245 samples, 5.37%)</title><rect x="103.4" y="341" width="63.5" height="15.0" fill="rgb(224,87,49)" rx="2" ry="2" />
<text  x="106.44" y="351.5" >syscal..</text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="181.6" y="293" width="0.3" height="15.0" fill="rgb(235,201,53)" rx="2" ry="2" />
<text  x="184.60" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (1,637 samples, 35.91%)</title><rect x="761.1" y="389" width="423.7" height="15.0" fill="rgb(210,165,54)" rx="2" ry="2" />
<text  x="764.12" y="399.5" >runtime.startm</text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.02%)</title><rect x="1184.8" y="421" width="0.3" height="15.0" fill="rgb(244,135,37)" rx="2" ry="2" />
<text  x="1187.82" y="431.5" ></text>
</g>
<g >
<title>runtime.systemstack (4 samples, 0.09%)</title><rect x="339.0" y="389" width="1.0" height="15.0" fill="rgb(215,154,30)" rx="2" ry="2" />
<text  x="341.97" y="399.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (2 samples, 0.04%)</title><rect x="329.4" y="117" width="0.5" height="15.0" fill="rgb(219,116,0)" rx="2" ry="2" />
<text  x="332.39" y="127.5" ></text>
</g>
<g >
<title>runtime.notewakeup (16 samples, 0.35%)</title><rect x="1185.9" y="357" width="4.1" height="15.0" fill="rgb(240,132,46)" rx="2" ry="2" />
<text  x="1188.86" y="367.5" ></text>
</g>
<g >
<title>runtime.netpoll (6 samples, 0.13%)</title><rect x="347.3" y="389" width="1.5" height="15.0" fill="rgb(227,191,1)" rx="2" ry="2" />
<text  x="350.25" y="399.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).Decode (15 samples, 0.33%)</title><rect x="333.8" y="373" width="3.9" height="15.0" fill="rgb(218,66,50)" rx="2" ry="2" />
<text  x="336.79" y="383.5" ></text>
</g>
<g >
<title>runtime.freedefer (3 samples, 0.07%)</title><rect x="335.3" y="261" width="0.8" height="15.0" fill="rgb(206,20,16)" rx="2" ry="2" />
<text  x="338.35" y="271.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="710.1" y="357" width="0.3" height="15.0" fill="rgb(216,223,22)" rx="2" ry="2" />
<text  x="713.13" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.02%)</title><rect x="758.8" y="357" width="0.3" height="15.0" fill="rgb(223,116,46)" rx="2" ry="2" />
<text  x="761.79" y="367.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).readRequest (599 samples, 13.14%)</title><rect x="183.4" y="405" width="155.1" height="15.0" fill="rgb(210,151,48)" rx="2" ry="2" />
<text  x="186.42" y="415.5" >net/rpc.(*Server).r..</text>
</g>
<g >
<title>runtime.handoffp (4 samples, 0.09%)</title><rect x="328.4" y="85" width="1.0" height="15.0" fill="rgb(254,50,53)" rx="2" ry="2" />
<text  x="331.36" y="95.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1,638 samples, 35.93%)</title><rect x="760.9" y="421" width="423.9" height="15.0" fill="rgb(250,113,35)" rx="2" ry="2" />
<text  x="763.86" y="431.5" >runtime.entersyscallblock_handoff</text>
</g>
<g >
<title>runtime.mapaccess2 (3 samples, 0.07%)</title><rect x="179.5" y="373" width="0.8" height="15.0" fill="rgb(219,80,43)" rx="2" ry="2" />
<text  x="182.53" y="383.5" ></text>
</g>
<g >
<title>runtime.runqsteal (3 samples, 0.07%)</title><rect x="348.8" y="389" width="0.8" height="15.0" fill="rgb(251,74,6)" rx="2" ry="2" />
<text  x="351.81" y="399.5" ></text>
</g>
<g >
<title>runtime.funcdata (1 samples, 0.02%)</title><rect x="175.9" y="293" width="0.3" height="15.0" fill="rgb(239,72,53)" rx="2" ry="2" />
<text  x="178.91" y="303.5" ></text>
</g>
<g >
<title>runtime.runqempty (1 samples, 0.02%)</title><rect x="328.4" y="69" width="0.2" height="15.0" fill="rgb(224,154,37)" rx="2" ry="2" />
<text  x="331.36" y="79.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).writeMessage (2 samples, 0.04%)</title><rect x="172.3" y="373" width="0.5" height="15.0" fill="rgb(251,47,0)" rx="2" ry="2" />
<text  x="175.29" y="383.5" ></text>
</g>
<g >
<title>runtime.semawakeup (16 samples, 0.35%)</title><rect x="1185.9" y="341" width="4.1" height="15.0" fill="rgb(208,61,34)" rx="2" ry="2" />
<text  x="1188.86" y="351.5" ></text>
</g>
<g >
<title>runtime.netpoll (67 samples, 1.47%)</title><rect x="714.0" y="389" width="17.4" height="15.0" fill="rgb(253,87,33)" rx="2" ry="2" />
<text  x="717.01" y="399.5" ></text>
</g>
<g >
<title>encoding/gob.catchError (1 samples, 0.02%)</title><rect x="331.7" y="309" width="0.3" height="15.0" fill="rgb(240,208,51)" rx="2" ry="2" />
<text  x="334.72" y="319.5" ></text>
</g>
<g >
<title>runtime.semasleep (1,369 samples, 30.03%)</title><rect x="356.6" y="389" width="354.3" height="15.0" fill="rgb(227,124,33)" rx="2" ry="2" />
<text  x="359.57" y="399.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="329.1" y="53" width="0.3" height="15.0" fill="rgb(221,92,25)" rx="2" ry="2" />
<text  x="332.14" y="63.5" ></text>
</g>
<g >
<title>runtime.handoffp (1,638 samples, 35.93%)</title><rect x="760.9" y="405" width="423.9" height="15.0" fill="rgb(210,108,6)" rx="2" ry="2" />
<text  x="763.86" y="415.5" >runtime.handoffp</text>
</g>
<g >
<title>runtime.notesleep (11 samples, 0.24%)</title><rect x="754.1" y="373" width="2.9" height="15.0" fill="rgb(212,216,23)" rx="2" ry="2" />
<text  x="757.13" y="383.5" ></text>
</g>
<g >
<title>runtime.findrunnable (58 samples, 1.27%)</title><rect x="742.0" y="405" width="15.0" height="15.0" fill="rgb(235,30,30)" rx="2" ry="2" />
<text  x="744.97" y="415.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.04%)</title><rect x="165.0" y="213" width="0.6" height="15.0" fill="rgb(209,77,26)" rx="2" ry="2" />
<text  x="168.04" y="223.5" ></text>
</g>
<g >
<title>runtime.notesleep (40 samples, 0.88%)</title><rect x="731.4" y="373" width="10.3" height="15.0" fill="rgb(219,7,43)" rx="2" ry="2" />
<text  x="734.36" y="383.5" ></text>
</g>
<g >
<title>runtime.nanotime (3 samples, 0.07%)</title><rect x="346.5" y="389" width="0.8" height="15.0" fill="rgb(241,30,40)" rx="2" ry="2" />
<text  x="349.48" y="399.5" ></text>
</g>
<g >
<title>runtime.deferreturn (202 samples, 4.43%)</title><rect x="185.5" y="181" width="52.3" height="15.0" fill="rgb(245,54,53)" rx="2" ry="2" />
<text  x="188.49" y="191.5" >runti..</text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.02%)</title><rect x="333.5" y="341" width="0.3" height="15.0" fill="rgb(210,136,9)" rx="2" ry="2" />
<text  x="336.54" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (16 samples, 0.35%)</title><rect x="1185.9" y="325" width="4.1" height="15.0" fill="rgb(243,52,53)" rx="2" ry="2" />
<text  x="1188.86" y="335.5" ></text>
</g>
<g >
<title>reflect.Value.Field (1 samples, 0.02%)</title><rect x="330.9" y="277" width="0.3" height="15.0" fill="rgb(254,36,45)" rx="2" ry="2" />
<text  x="333.95" y="287.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="757.2" y="389" width="0.3" height="15.0" fill="rgb(220,110,24)" rx="2" ry="2" />
<text  x="760.24" y="399.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="757.2" y="373" width="0.3" height="15.0" fill="rgb(242,14,34)" rx="2" ry="2" />
<text  x="760.24" y="383.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeTypeSequence (4 samples, 0.09%)</title><rect x="334.1" y="341" width="1.0" height="15.0" fill="rgb(215,83,22)" rx="2" ry="2" />
<text  x="337.05" y="351.5" ></text>
</g>
<g >
<title>reflect.packEface (1 samples, 0.02%)</title><rect x="182.6" y="405" width="0.3" height="15.0" fill="rgb(227,93,51)" rx="2" ry="2" />
<text  x="185.64" y="415.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="329.1" y="37" width="0.3" height="15.0" fill="rgb(235,145,23)" rx="2" ry="2" />
<text  x="332.14" y="47.5" ></text>
</g>
<g >
<title>syscall.write (245 samples, 5.37%)</title><rect x="103.4" y="325" width="63.5" height="15.0" fill="rgb(242,70,47)" rx="2" ry="2" />
<text  x="106.44" y="335.5" >syscal..</text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.02%)</title><rect x="171.0" y="341" width="0.3" height="15.0" fill="rgb(245,136,15)" rx="2" ry="2" />
<text  x="173.99" y="351.5" ></text>
</g>
<g >
<title>math/bits.LeadingZeros64 (1 samples, 0.02%)</title><rect x="171.5" y="325" width="0.3" height="15.0" fill="rgb(234,157,8)" rx="2" ry="2" />
<text  x="174.51" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.(*encBuffer).WriteString (1 samples, 0.02%)</title><rect x="167.9" y="325" width="0.2" height="15.0" fill="rgb(213,186,15)" rx="2" ry="2" />
<text  x="170.89" y="335.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeValue (11 samples, 0.24%)</title><rect x="329.9" y="325" width="2.9" height="15.0" fill="rgb(246,67,43)" rx="2" ry="2" />
<text  x="332.91" y="335.5" ></text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.02%)</title><rect x="1185.6" y="389" width="0.3" height="15.0" fill="rgb(223,228,6)" rx="2" ry="2" />
<text  x="1188.60" y="399.5" ></text>
</g>
<g >
<title>runtime.memhash128 (1 samples, 0.02%)</title><rect x="180.1" y="341" width="0.2" height="15.0" fill="rgb(252,68,38)" rx="2" ry="2" />
<text  x="183.05" y="351.5" ></text>
</g>
<g >
<title>net/rpc.(*service).call (669 samples, 14.67%)</title><rect x="10.0" y="453" width="173.2" height="15.0" fill="rgb(250,102,28)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >net/rpc.(*service).call</text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="712.7" y="357" width="0.3" height="15.0" fill="rgb(249,127,19)" rx="2" ry="2" />
<text  x="715.72" y="367.5" ></text>
</g>
<g >
<title>runtime.efaceeq (1 samples, 0.02%)</title><rect x="333.3" y="325" width="0.2" height="15.0" fill="rgb(207,90,38)" rx="2" ry="2" />
<text  x="336.28" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="710.9" y="373" width="0.3" height="15.0" fill="rgb(234,134,44)" rx="2" ry="2" />
<text  x="713.91" y="383.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="182.1" y="389" width="0.3" height="15.0" fill="rgb(215,53,52)" rx="2" ry="2" />
<text  x="185.12" y="399.5" ></text>
</g>
<g >
<title>runtime.freedefer (201 samples, 4.41%)</title><rect x="185.7" y="165" width="52.1" height="15.0" fill="rgb(220,26,39)" rx="2" ry="2" />
<text  x="188.74" y="175.5" >runti..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (40 samples, 0.88%)</title><rect x="731.4" y="341" width="10.3" height="15.0" fill="rgb(234,1,2)" rx="2" ry="2" />
<text  x="734.36" y="351.5" ></text>
</g>
<g >
<title>encoding/gob.(*encoderState).encodeInt (1 samples, 0.02%)</title><rect x="171.5" y="357" width="0.3" height="15.0" fill="rgb(236,3,23)" rx="2" ry="2" />
<text  x="174.51" y="367.5" ></text>
</g>
<g >
<title>net/rpc.(*gobServerCodec).WriteResponse (370 samples, 8.12%)</title><rect x="78.3" y="421" width="95.8" height="15.0" fill="rgb(212,38,38)" rx="2" ry="2" />
<text  x="81.33" y="431.5" >net/rpc.(*g..</text>
</g>
<g >
<title>runtime._System (1 samples, 0.02%)</title><rect x="340.0" y="453" width="0.3" height="15.0" fill="rgb(226,47,4)" rx="2" ry="2" />
<text  x="343.01" y="463.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).sendTypeDescriptor (1 samples, 0.02%)</title><rect x="171.3" y="373" width="0.2" height="15.0" fill="rgb(243,9,36)" rx="2" ry="2" />
<text  x="174.25" y="383.5" ></text>
</g>
<g >
<title>runtime.schedule (42 samples, 0.92%)</title><rect x="343.6" y="421" width="10.9" height="15.0" fill="rgb(245,200,50)" rx="2" ry="2" />
<text  x="346.63" y="431.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Write (2 samples, 0.04%)</title><rect x="172.3" y="357" width="0.5" height="15.0" fill="rgb(247,125,48)" rx="2" ry="2" />
<text  x="175.29" y="367.5" ></text>
</g>
</g>
</svg>

