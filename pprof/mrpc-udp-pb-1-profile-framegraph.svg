<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="342.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="325" > </text>
<g id="frames">
<g >
<title>runtime.newobject (2 samples, 0.08%)</title><rect x="36.4" y="133" width="0.9" height="15.0" fill="rgb(223,147,26)" rx="2" ry="2" />
<text  x="39.36" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.04%)</title><rect x="27.4" y="85" width="0.5" height="15.0" fill="rgb(226,93,44)" rx="2" ry="2" />
<text  x="30.43" y="95.5" ></text>
</g>
<g >
<title>runtime.mcall (1,020 samples, 38.62%)</title><rect x="236.1" y="277" width="455.7" height="15.0" fill="rgb(232,163,41)" rx="2" ry="2" />
<text  x="239.08" y="287.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="23.9" y="149" width="0.4" height="15.0" fill="rgb(215,154,23)" rx="2" ry="2" />
<text  x="26.85" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (31 samples, 1.17%)</title><rect x="10.0" y="245" width="13.9" height="15.0" fill="rgb(225,4,4)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.notewakeup (141 samples, 5.34%)</title><rect x="903.2" y="213" width="63.0" height="15.0" fill="rgb(242,219,26)" rx="2" ry="2" />
<text  x="906.15" y="223.5" >runtim..</text>
</g>
<g >
<title>runtime.send (1 samples, 0.04%)</title><rect x="52.9" y="229" width="0.4" height="15.0" fill="rgb(218,210,22)" rx="2" ry="2" />
<text  x="55.89" y="239.5" ></text>
</g>
<g >
<title>reflect.Value.IsNil (1 samples, 0.04%)</title><rect x="39.5" y="181" width="0.4" height="15.0" fill="rgb(246,194,29)" rx="2" ry="2" />
<text  x="42.49" y="191.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.04%)</title><rect x="49.8" y="229" width="0.4" height="15.0" fill="rgb(220,95,25)" rx="2" ry="2" />
<text  x="52.77" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (30 samples, 1.14%)</title><rect x="10.0" y="229" width="13.4" height="15.0" fill="rgb(252,4,11)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="35.9" y="133" width="0.5" height="15.0" fill="rgb(236,74,16)" rx="2" ry="2" />
<text  x="38.91" y="143.5" ></text>
</g>
<g >
<title>syscall.syscall6 (101 samples, 3.82%)</title><rect x="56.0" y="165" width="45.1" height="15.0" fill="rgb(253,144,13)" rx="2" ry="2" />
<text  x="59.02" y="175.5" >sysc..</text>
</g>
<g >
<title>runtime.stopm (619 samples, 23.44%)</title><rect x="396.5" y="213" width="276.6" height="15.0" fill="rgb(205,109,46)" rx="2" ry="2" />
<text  x="399.48" y="223.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.chansend1 (3 samples, 0.11%)</title><rect x="52.0" y="261" width="1.3" height="15.0" fill="rgb(225,48,30)" rx="2" ry="2" />
<text  x="55.00" y="271.5" ></text>
</g>
<g >
<title>runtime.goready (1 samples, 0.04%)</title><rect x="52.9" y="213" width="0.4" height="15.0" fill="rgb(214,98,18)" rx="2" ry="2" />
<text  x="55.89" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.ReadUDPConn (107 samples, 4.05%)</title><rect x="53.3" y="277" width="47.8" height="15.0" fill="rgb(215,87,39)" rx="2" ry="2" />
<text  x="56.34" y="287.5" >hsla..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUTF8StringValue (2 samples, 0.08%)</title><rect x="27.4" y="133" width="0.9" height="15.0" fill="rgb(226,199,3)" rx="2" ry="2" />
<text  x="30.43" y="143.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).WriteTo (216 samples, 8.18%)</title><rect x="104.7" y="213" width="96.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="107.72" y="223.5" >internal/po..</text>
</g>
<g >
<title>runtime.startm (1 samples, 0.04%)</title><rect x="52.9" y="133" width="0.4" height="15.0" fill="rgb(210,167,30)" rx="2" ry="2" />
<text  x="55.89" y="143.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="23.4" y="213" width="0.5" height="15.0" fill="rgb(251,218,18)" rx="2" ry="2" />
<text  x="26.40" y="223.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.04%)</title><rect x="54.2" y="197" width="0.5" height="15.0" fill="rgb(224,13,4)" rx="2" ry="2" />
<text  x="57.23" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np_trampoline (1 samples, 0.04%)</title><rect x="203.0" y="261" width="0.5" height="15.0" fill="rgb(235,222,43)" rx="2" ry="2" />
<text  x="206.02" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (2 samples, 0.08%)</title><rect x="29.2" y="165" width="0.9" height="15.0" fill="rgb(254,105,34)" rx="2" ry="2" />
<text  x="32.21" y="175.5" ></text>
</g>
<g >
<title>runtime.heapBits.bits (1 samples, 0.04%)</title><rect x="206.6" y="197" width="0.4" height="15.0" fill="rgb(224,226,21)" rx="2" ry="2" />
<text  x="209.59" y="207.5" ></text>
</g>
<g >
<title>runtime.adjustdefers (1 samples, 0.04%)</title><rect x="11.8" y="117" width="0.4" height="15.0" fill="rgb(206,138,31)" rx="2" ry="2" />
<text  x="14.79" y="127.5" ></text>
</g>
<g >
<title>runtime.(*workbuf).checkempty (1 samples, 0.04%)</title><rect x="204.4" y="165" width="0.4" height="15.0" fill="rgb(223,172,29)" rx="2" ry="2" />
<text  x="207.36" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (1 samples, 0.04%)</title><rect x="32.8" y="181" width="0.4" height="15.0" fill="rgb(207,97,24)" rx="2" ry="2" />
<text  x="35.79" y="191.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (2 samples, 0.08%)</title><rect x="208.8" y="165" width="0.9" height="15.0" fill="rgb(221,195,27)" rx="2" ry="2" />
<text  x="211.83" y="175.5" ></text>
</g>
<g >
<title>reflect.New (3 samples, 0.11%)</title><rect x="44.4" y="181" width="1.3" height="15.0" fill="rgb(242,164,54)" rx="2" ry="2" />
<text  x="47.40" y="191.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (8 samples, 0.30%)</title><rect x="16.7" y="69" width="3.6" height="15.0" fill="rgb(253,86,9)" rx="2" ry="2" />
<text  x="19.70" y="79.5" ></text>
</g>
<g >
<title>runtime.semasleep (89 samples, 3.37%)</title><rect x="775.4" y="197" width="39.7" height="15.0" fill="rgb(206,178,54)" rx="2" ry="2" />
<text  x="778.37" y="207.5" >run..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (51 samples, 1.93%)</title><rect x="27.0" y="229" width="22.8" height="15.0" fill="rgb(252,227,39)" rx="2" ry="2" />
<text  x="29.98" y="239.5" >h..</text>
</g>
<g >
<title>net.(*netFD).readFrom (107 samples, 4.05%)</title><rect x="53.3" y="229" width="47.8" height="15.0" fill="rgb(205,114,31)" rx="2" ry="2" />
<text  x="56.34" y="239.5" >net...</text>
</g>
<g >
<title>runtime.selectgo (59 samples, 2.23%)</title><rect x="209.7" y="197" width="26.4" height="15.0" fill="rgb(251,86,0)" rx="2" ry="2" />
<text  x="212.72" y="207.5" >r..</text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.04%)</title><rect x="239.2" y="229" width="0.5" height="15.0" fill="rgb(239,44,4)" rx="2" ry="2" />
<text  x="242.21" y="239.5" ></text>
</g>
<g >
<title>runtime.pcvalue (4 samples, 0.15%)</title><rect x="21.2" y="85" width="1.8" height="15.0" fill="rgb(223,154,30)" rx="2" ry="2" />
<text  x="24.17" y="95.5" ></text>
</g>
<g >
<title>runtime.handoffp (1 samples, 0.04%)</title><rect x="169.5" y="101" width="0.5" height="15.0" fill="rgb(216,147,42)" rx="2" ry="2" />
<text  x="172.51" y="111.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="49.3" y="149" width="0.5" height="15.0" fill="rgb(210,172,24)" rx="2" ry="2" />
<text  x="52.32" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WriteUDPConn (224 samples, 8.48%)</title><rect x="101.1" y="277" width="100.1" height="15.0" fill="rgb(226,23,41)" rx="2" ry="2" />
<text  x="104.15" y="287.5" >hslam.com/mg..</text>
</g>
<g >
<title>runtime.usleep_trampoline (1 samples, 0.04%)</title><rect x="203.5" y="261" width="0.4" height="15.0" fill="rgb(248,76,22)" rx="2" ry="2" />
<text  x="206.46" y="271.5" ></text>
</g>
<g >
<title>syscall.anyToSockaddr (2 samples, 0.08%)</title><rect x="55.1" y="181" width="0.9" height="15.0" fill="rgb(227,126,19)" rx="2" ry="2" />
<text  x="58.13" y="191.5" ></text>
</g>
<g >
<title>runtime.copystack (28 samples, 1.06%)</title><rect x="10.9" y="133" width="12.5" height="15.0" fill="rgb(219,28,46)" rx="2" ry="2" />
<text  x="13.89" y="143.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (30 samples, 1.14%)</title><rect x="10.0" y="197" width="13.4" height="15.0" fill="rgb(233,147,53)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (30 samples, 1.14%)</title><rect x="10.0" y="213" width="13.4" height="15.0" fill="rgb(230,9,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (4 samples, 0.15%)</title><rect x="202.1" y="277" width="1.8" height="15.0" fill="rgb(224,120,28)" rx="2" ry="2" />
<text  x="205.12" y="287.5" ></text>
</g>
<g >
<title>syscall.Sendto (206 samples, 7.80%)</title><rect x="109.2" y="197" width="92.0" height="15.0" fill="rgb(225,61,15)" rx="2" ry="2" />
<text  x="112.19" y="207.5" >syscall.Sen..</text>
</g>
<g >
<title>runtime.gogo (1 samples, 0.04%)</title><rect x="201.2" y="261" width="0.5" height="15.0" fill="rgb(230,8,25)" rx="2" ry="2" />
<text  x="204.23" y="271.5" ></text>
</g>
<g >
<title>runtime.mstart (1,114 samples, 42.18%)</title><rect x="691.8" y="277" width="497.8" height="15.0" fill="rgb(227,72,53)" rx="2" ry="2" />
<text  x="694.82" y="287.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.gfput (1 samples, 0.04%)</title><rect x="236.5" y="245" width="0.5" height="15.0" fill="rgb(219,216,5)" rx="2" ry="2" />
<text  x="239.53" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (5 samples, 0.19%)</title><rect x="98.9" y="149" width="2.2" height="15.0" fill="rgb(249,217,27)" rx="2" ry="2" />
<text  x="101.91" y="159.5" ></text>
</g>
<g >
<title>runtime.aeshashbody (1 samples, 0.04%)</title><rect x="42.6" y="133" width="0.5" height="15.0" fill="rgb(207,213,2)" rx="2" ry="2" />
<text  x="45.62" y="143.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.04%)</title><rect x="24.3" y="181" width="0.4" height="15.0" fill="rgb(215,138,30)" rx="2" ry="2" />
<text  x="27.30" y="191.5" ></text>
</g>
<g >
<title>runtime.resetspinning (41 samples, 1.55%)</title><rect x="673.5" y="229" width="18.3" height="15.0" fill="rgb(207,115,33)" rx="2" ry="2" />
<text  x="676.50" y="239.5" ></text>
</g>
<g >
<title>runtime.newproc1 (48 samples, 1.82%)</title><rect x="1168.1" y="229" width="21.5" height="15.0" fill="rgb(206,189,12)" rx="2" ry="2" />
<text  x="1171.11" y="239.5" >r..</text>
</g>
<g >
<title>runtime.lock (6 samples, 0.23%)</title><rect x="242.8" y="213" width="2.7" height="15.0" fill="rgb(251,13,30)" rx="2" ry="2" />
<text  x="245.78" y="223.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.04%)</title><rect x="238.8" y="245" width="0.4" height="15.0" fill="rgb(243,149,6)" rx="2" ry="2" />
<text  x="241.76" y="255.5" ></text>
</g>
<g >
<title>runtime.concatstrings (1 samples, 0.04%)</title><rect x="50.7" y="213" width="0.4" height="15.0" fill="rgb(234,200,42)" rx="2" ry="2" />
<text  x="53.66" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (86 samples, 3.26%)</title><rect x="864.7" y="181" width="38.5" height="15.0" fill="rgb(237,36,17)" rx="2" ry="2" />
<text  x="867.73" y="191.5" >run..</text>
</g>
<g >
<title>runtime.findmoduledatap (1 samples, 0.04%)</title><rect x="11.8" y="69" width="0.4" height="15.0" fill="rgb(222,0,31)" rx="2" ry="2" />
<text  x="14.79" y="79.5" ></text>
</g>
<g >
<title>runtime.step (3 samples, 0.11%)</title><rect x="21.6" y="69" width="1.4" height="15.0" fill="rgb(220,183,51)" rx="2" ry="2" />
<text  x="24.62" y="79.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="31.4" y="181" width="0.5" height="15.0" fill="rgb(237,123,44)" rx="2" ry="2" />
<text  x="34.45" y="191.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profMap).lookup (1 samples, 0.04%)</title><rect x="1189.6" y="245" width="0.4" height="15.0" fill="rgb(253,116,10)" rx="2" ry="2" />
<text  x="1192.55" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (615 samples, 23.29%)</title><rect x="397.8" y="165" width="274.8" height="15.0" fill="rgb(207,90,12)" rx="2" ry="2" />
<text  x="400.82" y="175.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.tracebackdefers (1 samples, 0.04%)</title><rect x="11.8" y="101" width="0.4" height="15.0" fill="rgb(221,214,8)" rx="2" ry="2" />
<text  x="14.79" y="111.5" ></text>
</g>
<g >
<title>runtime.chansend (3 samples, 0.11%)</title><rect x="52.0" y="245" width="1.3" height="15.0" fill="rgb(207,165,7)" rx="2" ry="2" />
<text  x="55.00" y="255.5" ></text>
</g>
<g >
<title>runtime.kevent (106 samples, 4.01%)</title><rect x="327.2" y="197" width="47.4" height="15.0" fill="rgb(233,150,15)" rx="2" ry="2" />
<text  x="330.23" y="207.5" >runt..</text>
</g>
<g >
<title>runtime.systemstack (727 samples, 27.53%)</title><rect x="864.7" y="261" width="324.9" height="15.0" fill="rgb(247,213,54)" rx="2" ry="2" />
<text  x="867.73" y="271.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.systemstack (7 samples, 0.27%)</title><rect x="204.4" y="261" width="3.1" height="15.0" fill="rgb(225,72,6)" rx="2" ry="2" />
<text  x="207.36" y="271.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (1 samples, 0.04%)</title><rect x="98.5" y="149" width="0.4" height="15.0" fill="rgb(251,215,16)" rx="2" ry="2" />
<text  x="101.47" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (41 samples, 1.55%)</title><rect x="673.5" y="181" width="18.3" height="15.0" fill="rgb(238,52,1)" rx="2" ry="2" />
<text  x="676.50" y="191.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1 samples, 0.04%)</title><rect x="238.3" y="229" width="0.5" height="15.0" fill="rgb(216,82,7)" rx="2" ry="2" />
<text  x="241.32" y="239.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.08%)</title><rect x="692.7" y="229" width="0.9" height="15.0" fill="rgb(236,219,17)" rx="2" ry="2" />
<text  x="695.71" y="239.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.04%)</title><rect x="240.5" y="213" width="0.5" height="15.0" fill="rgb(238,192,46)" rx="2" ry="2" />
<text  x="243.55" y="223.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.04%)</title><rect x="49.8" y="245" width="0.4" height="15.0" fill="rgb(217,44,18)" rx="2" ry="2" />
<text  x="52.77" y="255.5" ></text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.08%)</title><rect x="38.6" y="149" width="0.9" height="15.0" fill="rgb(222,179,19)" rx="2" ry="2" />
<text  x="41.60" y="159.5" ></text>
</g>
<g >
<title>runtime.step (4 samples, 0.15%)</title><rect x="18.5" y="37" width="1.8" height="15.0" fill="rgb(235,206,19)" rx="2" ry="2" />
<text  x="21.49" y="47.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Size (3 samples, 0.11%)</title><rect x="30.1" y="181" width="1.3" height="15.0" fill="rgb(252,1,32)" rx="2" ry="2" />
<text  x="33.11" y="191.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.04%)</title><rect x="203.9" y="261" width="0.5" height="15.0" fill="rgb(244,183,17)" rx="2" ry="2" />
<text  x="206.91" y="271.5" ></text>
</g>
<g >
<title>reflect.funcLayout (3 samples, 0.11%)</title><rect x="35.0" y="149" width="1.4" height="15.0" fill="rgb(234,200,48)" rx="2" ry="2" />
<text  x="38.02" y="159.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="31.4" y="165" width="0.5" height="15.0" fill="rgb(229,37,3)" rx="2" ry="2" />
<text  x="34.45" y="175.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Name (1 samples, 0.04%)</title><rect x="33.2" y="181" width="0.5" height="15.0" fill="rgb(239,186,45)" rx="2" ry="2" />
<text  x="36.23" y="191.5" ></text>
</g>
<g >
<title>runtime.scanobject (6 samples, 0.23%)</title><rect x="204.8" y="213" width="2.7" height="15.0" fill="rgb(206,156,41)" rx="2" ry="2" />
<text  x="207.80" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithRequest).XXX_Unmarshal (1 samples, 0.04%)</title><rect x="45.7" y="165" width="0.5" height="15.0" fill="rgb(244,203,26)" rx="2" ry="2" />
<text  x="48.74" y="175.5" ></text>
</g>
<g >
<title>reflect.(*rtype).AssignableTo (1 samples, 0.04%)</title><rect x="34.6" y="149" width="0.4" height="15.0" fill="rgb(208,227,5)" rx="2" ry="2" />
<text  x="37.57" y="159.5" ></text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.04%)</title><rect x="11.8" y="85" width="0.4" height="15.0" fill="rgb(234,73,4)" rx="2" ry="2" />
<text  x="14.79" y="95.5" ></text>
</g>
<g >
<title>runtime.gostringnocopy (1 samples, 0.04%)</title><rect x="209.3" y="101" width="0.4" height="15.0" fill="rgb(207,150,10)" rx="2" ry="2" />
<text  x="212.27" y="111.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwlock (1 samples, 0.04%)</title><rect x="107.4" y="181" width="0.4" height="15.0" fill="rgb(245,149,15)" rx="2" ry="2" />
<text  x="110.40" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (2 samples, 0.08%)</title><rect x="814.2" y="181" width="0.9" height="15.0" fill="rgb(224,171,43)" rx="2" ry="2" />
<text  x="817.24" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (91 samples, 3.45%)</title><rect x="10.0" y="261" width="40.7" height="15.0" fill="rgb(237,65,49)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >hsl..</text>
</g>
<g >
<title>runtime.jmpdefer (1 samples, 0.04%)</title><rect x="50.2" y="245" width="0.5" height="15.0" fill="rgb(212,33,12)" rx="2" ry="2" />
<text  x="53.21" y="255.5" ></text>
</g>
<g >
<title>reflect.methodReceiver (2 samples, 0.08%)</title><rect x="36.4" y="149" width="0.9" height="15.0" fill="rgb(213,11,16)" rx="2" ry="2" />
<text  x="39.36" y="159.5" ></text>
</g>
<g >
<title>runtime.strequal (2 samples, 0.08%)</title><rect x="41.7" y="117" width="0.9" height="15.0" fill="rgb(205,118,7)" rx="2" ry="2" />
<text  x="44.72" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.08%)</title><rect x="1187.3" y="149" width="0.9" height="15.0" fill="rgb(211,165,52)" rx="2" ry="2" />
<text  x="1190.32" y="159.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.04%)</title><rect x="240.5" y="229" width="0.5" height="15.0" fill="rgb(245,161,9)" rx="2" ry="2" />
<text  x="243.55" y="239.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.04%)</title><rect x="32.8" y="149" width="0.4" height="15.0" fill="rgb(212,139,27)" rx="2" ry="2" />
<text  x="35.79" y="159.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeLock (1 samples, 0.04%)</title><rect x="107.4" y="197" width="0.4" height="15.0" fill="rgb(250,63,42)" rx="2" ry="2" />
<text  x="110.40" y="207.5" ></text>
</g>
<g >
<title>runtime.newstack (29 samples, 1.10%)</title><rect x="10.4" y="149" width="13.0" height="15.0" fill="rgb(241,34,16)" rx="2" ry="2" />
<text  x="13.45" y="159.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.04%)</title><rect x="10.0" y="149" width="0.4" height="15.0" fill="rgb(246,153,6)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>runtime.isSystemGoroutine (3 samples, 0.11%)</title><rect x="237.0" y="245" width="1.3" height="15.0" fill="rgb(243,140,24)" rx="2" ry="2" />
<text  x="239.97" y="255.5" ></text>
</g>
<g >
<title>net.(*UDPAddr).String (1 samples, 0.04%)</title><rect x="208.4" y="197" width="0.4" height="15.0" fill="rgb(252,115,39)" rx="2" ry="2" />
<text  x="211.38" y="207.5" ></text>
</g>
<g >
<title>runtime.concatstring4 (1 samples, 0.04%)</title><rect x="50.7" y="229" width="0.4" height="15.0" fill="rgb(220,34,15)" rx="2" ry="2" />
<text  x="53.66" y="239.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="43.5" y="165" width="0.5" height="15.0" fill="rgb(212,167,41)" rx="2" ry="2" />
<text  x="46.51" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeUDPConn (97 samples, 3.67%)</title><rect x="10.0" y="277" width="43.3" height="15.0" fill="rgb(241,191,35)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >hsla..</text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.04%)</title><rect x="38.6" y="117" width="0.4" height="15.0" fill="rgb(205,170,34)" rx="2" ry="2" />
<text  x="41.60" y="127.5" ></text>
</g>
<g >
<title>runtime.handoffp (1 samples, 0.04%)</title><rect x="98.5" y="101" width="0.4" height="15.0" fill="rgb(242,208,31)" rx="2" ry="2" />
<text  x="101.47" y="111.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="104.3" y="197" width="0.4" height="15.0" fill="rgb(237,128,48)" rx="2" ry="2" />
<text  x="107.27" y="207.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="32.8" y="165" width="0.4" height="15.0" fill="rgb(237,195,24)" rx="2" ry="2" />
<text  x="35.79" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalInt32Value (29 samples, 1.10%)</title><rect x="10.4" y="165" width="13.0" height="15.0" fill="rgb(229,167,7)" rx="2" ry="2" />
<text  x="13.45" y="175.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.04%)</title><rect x="52.9" y="165" width="0.4" height="15.0" fill="rgb(236,114,26)" rx="2" ry="2" />
<text  x="55.89" y="175.5" ></text>
</g>
<g >
<title>net.IP.Equal (1 samples, 0.04%)</title><rect x="103.8" y="197" width="0.5" height="15.0" fill="rgb(246,33,14)" rx="2" ry="2" />
<text  x="106.83" y="207.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Elem (1 samples, 0.04%)</title><rect x="44.0" y="181" width="0.4" height="15.0" fill="rgb(221,56,40)" rx="2" ry="2" />
<text  x="46.96" y="191.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.04%)</title><rect x="38.1" y="133" width="0.5" height="15.0" fill="rgb(223,211,37)" rx="2" ry="2" />
<text  x="41.15" y="143.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.08%)</title><rect x="40.4" y="165" width="0.9" height="15.0" fill="rgb(244,224,25)" rx="2" ry="2" />
<text  x="43.38" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (8 samples, 0.30%)</title><rect x="28.3" y="213" width="3.6" height="15.0" fill="rgb(245,191,23)" rx="2" ry="2" />
<text  x="31.32" y="223.5" ></text>
</g>
<g >
<title>runtime.findrunnable (968 samples, 36.65%)</title><rect x="241.0" y="229" width="432.5" height="15.0" fill="rgb(246,154,46)" rx="2" ry="2" />
<text  x="244.00" y="239.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.main (64 samples, 2.42%)</title><rect x="207.5" y="277" width="28.6" height="15.0" fill="rgb(221,190,39)" rx="2" ry="2" />
<text  x="210.49" y="287.5" >ru..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Marshal (5 samples, 0.19%)</title><rect x="46.2" y="165" width="2.2" height="15.0" fill="rgb(246,1,49)" rx="2" ry="2" />
<text  x="49.19" y="175.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.04%)</title><rect x="238.3" y="213" width="0.5" height="15.0" fill="rgb(246,62,41)" rx="2" ry="2" />
<text  x="241.32" y="223.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.04%)</title><rect x="204.4" y="197" width="0.4" height="15.0" fill="rgb(249,13,14)" rx="2" ry="2" />
<text  x="207.36" y="207.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profileBuilder).addCPUData (1 samples, 0.04%)</title><rect x="1189.6" y="261" width="0.4" height="15.0" fill="rgb(231,147,49)" rx="2" ry="2" />
<text  x="1192.55" y="271.5" ></text>
</g>
<g >
<title>runtime.adjustctxt (1 samples, 0.04%)</title><rect x="11.3" y="117" width="0.5" height="15.0" fill="rgb(237,35,11)" rx="2" ry="2" />
<text  x="14.34" y="127.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Size (1 samples, 0.04%)</title><rect x="24.3" y="213" width="0.4" height="15.0" fill="rgb(234,52,47)" rx="2" ry="2" />
<text  x="27.30" y="223.5" ></text>
</g>
<g >
<title>runtime.acquirep (2 samples, 0.08%)</title><rect x="396.9" y="197" width="0.9" height="15.0" fill="rgb(211,196,1)" rx="2" ry="2" />
<text  x="399.93" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (8 samples, 0.30%)</title><rect x="46.2" y="181" width="3.6" height="15.0" fill="rgb(250,64,21)" rx="2" ry="2" />
<text  x="49.19" y="191.5" ></text>
</g>
<g >
<title>runtime.deferreturn (3 samples, 0.11%)</title><rect x="107.8" y="197" width="1.4" height="15.0" fill="rgb(223,80,42)" rx="2" ry="2" />
<text  x="110.85" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.PacketMessage (1 samples, 0.04%)</title><rect x="101.1" y="261" width="0.5" height="15.0" fill="rgb(231,146,53)" rx="2" ry="2" />
<text  x="104.15" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.04%)</title><rect x="238.3" y="181" width="0.5" height="15.0" fill="rgb(235,161,27)" rx="2" ry="2" />
<text  x="241.32" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (85 samples, 3.22%)</title><rect x="776.3" y="181" width="37.9" height="15.0" fill="rgb(239,83,21)" rx="2" ry="2" />
<text  x="779.26" y="191.5" >run..</text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.04%)</title><rect x="673.1" y="213" width="0.4" height="15.0" fill="rgb(205,225,11)" rx="2" ry="2" />
<text  x="676.05" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*UDPListener).Serve (64 samples, 2.42%)</title><rect x="207.5" y="213" width="28.6" height="15.0" fill="rgb(252,215,40)" rx="2" ry="2" />
<text  x="210.49" y="223.5" >hs..</text>
</g>
<g >
<title>runtime.startm (452 samples, 17.11%)</title><rect x="966.2" y="197" width="201.9" height="15.0" fill="rgb(228,144,37)" rx="2" ry="2" />
<text  x="969.15" y="207.5" >runtime.startm</text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.08%)</title><rect x="25.2" y="197" width="0.9" height="15.0" fill="rgb(217,174,21)" rx="2" ry="2" />
<text  x="28.19" y="207.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="48.0" y="117" width="0.4" height="15.0" fill="rgb(250,63,43)" rx="2" ry="2" />
<text  x="50.98" y="127.5" ></text>
</g>
<g >
<title>runtime.newobject (2 samples, 0.08%)</title><rect x="26.1" y="229" width="0.9" height="15.0" fill="rgb(231,117,32)" rx="2" ry="2" />
<text  x="29.08" y="239.5" ></text>
</g>
<g >
<title>net.isZeros (1 samples, 0.04%)</title><rect x="51.6" y="197" width="0.4" height="15.0" fill="rgb(206,192,5)" rx="2" ry="2" />
<text  x="54.55" y="207.5" ></text>
</g>
<g >
<title>runtime.pcdatastart (1 samples, 0.04%)</title><rect x="16.7" y="53" width="0.4" height="15.0" fill="rgb(207,136,47)" rx="2" ry="2" />
<text  x="19.70" y="63.5" ></text>
</g>
<g >
<title>syscall.syscall6 (203 samples, 7.69%)</title><rect x="110.5" y="165" width="90.7" height="15.0" fill="rgb(239,93,25)" rx="2" ry="2" />
<text  x="113.53" y="175.5" >syscall.sy..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (2 samples, 0.08%)</title><rect x="27.4" y="165" width="0.9" height="15.0" fill="rgb(210,140,13)" rx="2" ry="2" />
<text  x="30.43" y="175.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.04%)</title><rect x="49.3" y="133" width="0.5" height="15.0" fill="rgb(221,145,16)" rx="2" ry="2" />
<text  x="52.32" y="143.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="55.6" y="165" width="0.4" height="15.0" fill="rgb(210,206,43)" rx="2" ry="2" />
<text  x="58.57" y="175.5" ></text>
</g>
<g >
<title>net.(*UDPConn).WriteToUDP (223 samples, 8.44%)</title><rect x="101.6" y="261" width="99.6" height="15.0" fill="rgb(237,164,35)" rx="2" ry="2" />
<text  x="104.59" y="271.5" >net.(*UDPCon..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenAndServe (64 samples, 2.42%)</title><rect x="207.5" y="245" width="28.6" height="15.0" fill="rgb(236,78,30)" rx="2" ry="2" />
<text  x="210.49" y="255.5" >hs..</text>
</g>
<g >
<title>runtime.notetsleep_internal (89 samples, 3.37%)</title><rect x="775.4" y="213" width="39.7" height="15.0" fill="rgb(248,146,32)" rx="2" ry="2" />
<text  x="778.37" y="223.5" >run..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (4 samples, 0.15%)</title><rect x="46.6" y="149" width="1.8" height="15.0" fill="rgb(247,98,43)" rx="2" ry="2" />
<text  x="49.64" y="159.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (7 samples, 0.27%)</title><rect x="204.4" y="277" width="3.1" height="15.0" fill="rgb(220,96,39)" rx="2" ry="2" />
<text  x="207.36" y="287.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.04%)</title><rect x="104.3" y="165" width="0.4" height="15.0" fill="rgb(217,93,3)" rx="2" ry="2" />
<text  x="107.27" y="175.5" ></text>
</g>
<g >
<title>net.IP.String (2 samples, 0.08%)</title><rect x="51.1" y="229" width="0.9" height="15.0" fill="rgb(225,147,52)" rx="2" ry="2" />
<text  x="54.11" y="239.5" ></text>
</g>
<g >
<title>runtime.schedule (1,012 samples, 38.32%)</title><rect x="239.7" y="245" width="452.1" height="15.0" fill="rgb(236,94,37)" rx="2" ry="2" />
<text  x="242.66" y="255.5" >runtime.schedule</text>
</g>
<g >
<title>reflect.typedmemclrpartial (3 samples, 0.11%)</title><rect x="37.3" y="149" width="1.3" height="15.0" fill="rgb(237,121,46)" rx="2" ry="2" />
<text  x="40.25" y="159.5" ></text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.04%)</title><rect x="238.8" y="197" width="0.4" height="15.0" fill="rgb(217,139,13)" rx="2" ry="2" />
<text  x="241.76" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (3 samples, 0.11%)</title><rect x="690.5" y="149" width="1.3" height="15.0" fill="rgb(237,68,35)" rx="2" ry="2" />
<text  x="693.48" y="159.5" ></text>
</g>
<g >
<title>runtime.notesleep (615 samples, 23.29%)</title><rect x="397.8" y="197" width="274.8" height="15.0" fill="rgb(217,62,24)" rx="2" ry="2" />
<text  x="400.82" y="207.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="23.4" y="229" width="0.5" height="15.0" fill="rgb(227,29,15)" rx="2" ry="2" />
<text  x="26.40" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.08%)</title><rect x="36.4" y="117" width="0.9" height="15.0" fill="rgb(221,60,49)" rx="2" ry="2" />
<text  x="39.36" y="127.5" ></text>
</g>
<g >
<title>runtime.adjustframe (15 samples, 0.57%)</title><rect x="13.6" y="101" width="6.7" height="15.0" fill="rgb(206,187,27)" rx="2" ry="2" />
<text  x="16.57" y="111.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.04%)</title><rect x="10.0" y="165" width="0.4" height="15.0" fill="rgb(205,146,0)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>runtime.wakep (452 samples, 17.11%)</title><rect x="966.2" y="213" width="201.9" height="15.0" fill="rgb(251,81,42)" rx="2" ry="2" />
<text  x="969.15" y="223.5" >runtime.wakep</text>
</g>
<g >
<title>runtime.exitsyscall (70 samples, 2.65%)</title><rect x="170.0" y="149" width="31.2" height="15.0" fill="rgb(233,94,2)" rx="2" ry="2" />
<text  x="172.95" y="159.5" >ru..</text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.04%)</title><rect x="900.9" y="165" width="0.5" height="15.0" fill="rgb(229,79,1)" rx="2" ry="2" />
<text  x="903.92" y="175.5" ></text>
</g>
<g >
<title>runtime.gostringnocopy (3 samples, 0.11%)</title><rect x="237.0" y="213" width="1.3" height="15.0" fill="rgb(250,12,44)" rx="2" ry="2" />
<text  x="239.97" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (5 samples, 0.19%)</title><rect x="23.9" y="229" width="2.2" height="15.0" fill="rgb(233,139,28)" rx="2" ry="2" />
<text  x="26.85" y="239.5" ></text>
</g>
<g >
<title>runtime.parkunlock_c (1 samples, 0.04%)</title><rect x="239.2" y="245" width="0.5" height="15.0" fill="rgb(207,13,47)" rx="2" ry="2" />
<text  x="242.21" y="255.5" ></text>
</g>
<g >
<title>runtime.nanotime (87 samples, 3.29%)</title><rect x="245.5" y="213" width="38.8" height="15.0" fill="rgb(218,79,50)" rx="2" ry="2" />
<text  x="248.46" y="223.5" >run..</text>
</g>
<g >
<title>runtime.notewakeup (452 samples, 17.11%)</title><rect x="966.2" y="181" width="201.9" height="15.0" fill="rgb(235,32,42)" rx="2" ry="2" />
<text  x="969.15" y="191.5" >runtime.notewakeup</text>
</g>
<g >
<title>net.JoinHostPort (1 samples, 0.04%)</title><rect x="50.7" y="245" width="0.4" height="15.0" fill="rgb(208,212,13)" rx="2" ry="2" />
<text  x="53.66" y="255.5" ></text>
</g>
<g >
<title>runtime.mstart1 (387 samples, 14.65%)</title><rect x="691.8" y="261" width="172.9" height="15.0" fill="rgb(240,223,25)" rx="2" ry="2" />
<text  x="694.82" y="271.5" >runtime.mstart1</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (4 samples, 0.15%)</title><rect x="46.6" y="133" width="1.8" height="15.0" fill="rgb(222,213,42)" rx="2" ry="2" />
<text  x="49.64" y="143.5" ></text>
</g>
<g >
<title>runtime.aeshash64 (1 samples, 0.04%)</title><rect x="1189.6" y="213" width="0.4" height="15.0" fill="rgb(219,200,16)" rx="2" ry="2" />
<text  x="1192.55" y="223.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.08%)</title><rect x="52.0" y="229" width="0.9" height="15.0" fill="rgb(210,31,40)" rx="2" ry="2" />
<text  x="55.00" y="239.5" ></text>
</g>
<g >
<title>syscall.(*SockaddrInet6).sockaddr (1 samples, 0.04%)</title><rect x="109.2" y="181" width="0.4" height="15.0" fill="rgb(209,1,26)" rx="2" ry="2" />
<text  x="112.19" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (2 samples, 0.08%)</title><rect x="29.2" y="149" width="0.9" height="15.0" fill="rgb(242,179,45)" rx="2" ry="2" />
<text  x="32.21" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.04%)</title><rect x="23.9" y="197" width="0.4" height="15.0" fill="rgb(210,13,41)" rx="2" ry="2" />
<text  x="26.85" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.04%)</title><rect x="238.8" y="229" width="0.4" height="15.0" fill="rgb(220,185,51)" rx="2" ry="2" />
<text  x="241.76" y="239.5" ></text>
</g>
<g >
<title>runtime.mget (1 samples, 0.04%)</title><rect x="98.5" y="69" width="0.4" height="15.0" fill="rgb(224,64,41)" rx="2" ry="2" />
<text  x="101.47" y="79.5" ></text>
</g>
<g >
<title>reflect.Value.Call (13 samples, 0.49%)</title><rect x="33.7" y="181" width="5.8" height="15.0" fill="rgb(245,213,47)" rx="2" ry="2" />
<text  x="36.68" y="191.5" ></text>
</g>
<g >
<title>runtime.semawakeup (41 samples, 1.55%)</title><rect x="673.5" y="165" width="18.3" height="15.0" fill="rgb(229,229,0)" rx="2" ry="2" />
<text  x="676.50" y="175.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.04%)</title><rect x="236.1" y="197" width="0.4" height="15.0" fill="rgb(227,123,20)" rx="2" ry="2" />
<text  x="239.08" y="207.5" ></text>
</g>
<g >
<title>reflect.(*rtype).String (1 samples, 0.04%)</title><rect x="33.2" y="165" width="0.5" height="15.0" fill="rgb(242,27,26)" rx="2" ry="2" />
<text  x="36.23" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (8 samples, 0.30%)</title><rect x="46.2" y="197" width="3.6" height="15.0" fill="rgb(236,70,0)" rx="2" ry="2" />
<text  x="49.19" y="207.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (2 samples, 0.08%)</title><rect x="169.1" y="149" width="0.9" height="15.0" fill="rgb(232,167,37)" rx="2" ry="2" />
<text  x="172.06" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ListenAndServe (64 samples, 2.42%)</title><rect x="207.5" y="229" width="28.6" height="15.0" fill="rgb(219,225,26)" rx="2" ry="2" />
<text  x="210.49" y="239.5" >hs..</text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1165.4" y="149" width="0.5" height="15.0" fill="rgb(211,55,31)" rx="2" ry="2" />
<text  x="1168.43" y="159.5" ></text>
</g>
<g >
<title>runtime.fastrand (1 samples, 0.04%)</title><rect x="18.0" y="37" width="0.5" height="15.0" fill="rgb(206,46,17)" rx="2" ry="2" />
<text  x="21.04" y="47.5" ></text>
</g>
<g >
<title>runtime.bgsweep (1 samples, 0.04%)</title><rect x="203.9" y="277" width="0.5" height="15.0" fill="rgb(231,74,44)" rx="2" ry="2" />
<text  x="206.91" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.08%)</title><rect x="208.8" y="181" width="0.9" height="15.0" fill="rgb(207,65,11)" rx="2" ry="2" />
<text  x="211.83" y="191.5" ></text>
</g>
<g >
<title>net.(*ipv6ZoneCache).index (1 samples, 0.04%)</title><rect x="103.4" y="197" width="0.4" height="15.0" fill="rgb(213,139,2)" rx="2" ry="2" />
<text  x="106.38" y="207.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.04%)</title><rect x="23.4" y="197" width="0.5" height="15.0" fill="rgb(234,158,7)" rx="2" ry="2" />
<text  x="26.40" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (5 samples, 0.19%)</title><rect x="1165.9" y="149" width="2.2" height="15.0" fill="rgb(213,56,41)" rx="2" ry="2" />
<text  x="1168.87" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (86 samples, 3.26%)</title><rect x="864.7" y="197" width="38.5" height="15.0" fill="rgb(216,115,35)" rx="2" ry="2" />
<text  x="867.73" y="207.5" >run..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (1 samples, 0.04%)</title><rect x="47.5" y="117" width="0.5" height="15.0" fill="rgb(232,183,17)" rx="2" ry="2" />
<text  x="50.53" y="127.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (19 samples, 0.72%)</title><rect x="32.8" y="197" width="8.5" height="15.0" fill="rgb(253,201,25)" rx="2" ry="2" />
<text  x="35.79" y="207.5" ></text>
</g>
<g >
<title>runtime.round (1 samples, 0.04%)</title><rect x="27.9" y="85" width="0.4" height="15.0" fill="rgb(239,18,36)" rx="2" ry="2" />
<text  x="30.87" y="95.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).ReadFrom (107 samples, 4.05%)</title><rect x="53.3" y="213" width="47.8" height="15.0" fill="rgb(230,107,20)" rx="2" ry="2" />
<text  x="56.34" y="223.5" >inte..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (5 samples, 0.19%)</title><rect x="29.2" y="197" width="2.2" height="15.0" fill="rgb(232,142,22)" rx="2" ry="2" />
<text  x="32.21" y="207.5" ></text>
</g>
<g >
<title>runtime.netpoll (202 samples, 7.65%)</title><rect x="284.3" y="213" width="90.3" height="15.0" fill="rgb(214,95,2)" rx="2" ry="2" />
<text  x="287.34" y="223.5" >runtime.ne..</text>
</g>
<g >
<title>runtime.semawakeup (141 samples, 5.34%)</title><rect x="903.2" y="197" width="63.0" height="15.0" fill="rgb(238,226,49)" rx="2" ry="2" />
<text  x="906.15" y="207.5" >runtim..</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (4 samples, 0.15%)</title><rect x="901.4" y="165" width="1.8" height="15.0" fill="rgb(227,144,46)" rx="2" ry="2" />
<text  x="904.37" y="175.5" ></text>
</g>
<g >
<title>runtime.park_m (1,013 samples, 38.36%)</title><rect x="239.2" y="261" width="452.6" height="15.0" fill="rgb(215,203,13)" rx="2" ry="2" />
<text  x="242.21" y="271.5" >runtime.park_m</text>
</g>
<g >
<title>net.JoinHostPort (1 samples, 0.04%)</title><rect x="208.4" y="181" width="0.4" height="15.0" fill="rgb(212,3,10)" rx="2" ry="2" />
<text  x="211.38" y="191.5" ></text>
</g>
<g >
<title>reflect.Value.Type (1 samples, 0.04%)</title><rect x="39.9" y="181" width="0.5" height="15.0" fill="rgb(211,129,52)" rx="2" ry="2" />
<text  x="42.94" y="191.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.04%)</title><rect x="52.9" y="117" width="0.4" height="15.0" fill="rgb(212,11,48)" rx="2" ry="2" />
<text  x="55.89" y="127.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (4 samples, 0.15%)</title><rect x="41.3" y="197" width="1.8" height="15.0" fill="rgb(234,28,4)" rx="2" ry="2" />
<text  x="44.28" y="207.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="39.0" y="117" width="0.5" height="15.0" fill="rgb(232,223,10)" rx="2" ry="2" />
<text  x="42.04" y="127.5" ></text>
</g>
<g >
<title>runtime.goexit0 (5 samples, 0.19%)</title><rect x="236.5" y="261" width="2.3" height="15.0" fill="rgb(251,194,44)" rx="2" ry="2" />
<text  x="239.53" y="271.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (70 samples, 2.65%)</title><rect x="170.0" y="133" width="31.2" height="15.0" fill="rgb(220,212,51)" rx="2" ry="2" />
<text  x="172.95" y="143.5" >ru..</text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (57 samples, 2.16%)</title><rect x="210.6" y="181" width="25.5" height="15.0" fill="rgb(210,88,49)" rx="2" ry="2" />
<text  x="213.61" y="191.5" >r..</text>
</g>
<g >
<title>runtime.pidleput (1 samples, 0.04%)</title><rect x="374.6" y="213" width="0.4" height="15.0" fill="rgb(220,130,48)" rx="2" ry="2" />
<text  x="377.59" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.08%)</title><rect x="38.6" y="133" width="0.9" height="15.0" fill="rgb(213,208,6)" rx="2" ry="2" />
<text  x="41.60" y="143.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (5 samples, 0.19%)</title><rect x="98.9" y="133" width="2.2" height="15.0" fill="rgb(225,177,18)" rx="2" ry="2" />
<text  x="101.91" y="143.5" ></text>
</g>
<g >
<title>runtime.notewakeup (48 samples, 1.82%)</title><rect x="1168.1" y="181" width="21.5" height="15.0" fill="rgb(239,64,34)" rx="2" ry="2" />
<text  x="1171.11" y="191.5" >r..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="55.6" y="149" width="0.4" height="15.0" fill="rgb(216,5,40)" rx="2" ry="2" />
<text  x="58.57" y="159.5" ></text>
</g>
<g >
<title>runtime.pcvalue (7 samples, 0.27%)</title><rect x="17.1" y="53" width="3.2" height="15.0" fill="rgb(229,43,8)" rx="2" ry="2" />
<text  x="20.15" y="63.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (1 samples, 0.04%)</title><rect x="23.9" y="165" width="0.4" height="15.0" fill="rgb(212,90,41)" rx="2" ry="2" />
<text  x="26.85" y="175.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.04%)</title><rect x="40.8" y="149" width="0.5" height="15.0" fill="rgb(244,176,32)" rx="2" ry="2" />
<text  x="43.83" y="159.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (48 samples, 1.82%)</title><rect x="1168.1" y="245" width="21.5" height="15.0" fill="rgb(229,193,47)" rx="2" ry="2" />
<text  x="1171.11" y="255.5" >r..</text>
</g>
<g >
<title>runtime.getempty (1 samples, 0.04%)</title><rect x="204.4" y="181" width="0.4" height="15.0" fill="rgb(226,162,33)" rx="2" ry="2" />
<text  x="207.36" y="191.5" ></text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.08%)</title><rect x="40.4" y="181" width="0.9" height="15.0" fill="rgb(241,211,40)" rx="2" ry="2" />
<text  x="43.38" y="191.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.08%)</title><rect x="27.4" y="101" width="0.9" height="15.0" fill="rgb(228,60,25)" rx="2" ry="2" />
<text  x="30.43" y="111.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.04%)</title><rect x="42.6" y="149" width="0.5" height="15.0" fill="rgb(215,128,26)" rx="2" ry="2" />
<text  x="45.62" y="159.5" ></text>
</g>
<g >
<title>runtime.fastrand (1 samples, 0.04%)</title><rect x="242.3" y="213" width="0.5" height="15.0" fill="rgb(225,179,51)" rx="2" ry="2" />
<text  x="245.34" y="223.5" ></text>
</g>
<g >
<title>net.(*UDPConn).readFrom (107 samples, 4.05%)</title><rect x="53.3" y="245" width="47.8" height="15.0" fill="rgb(239,97,52)" rx="2" ry="2" />
<text  x="56.34" y="255.5" >net...</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ArgsDecode (1 samples, 0.04%)</title><rect x="45.7" y="197" width="0.5" height="15.0" fill="rgb(217,150,45)" rx="2" ry="2" />
<text  x="48.74" y="207.5" ></text>
</g>
<g >
<title>runtime.gentraceback (24 samples, 0.91%)</title><rect x="12.2" y="117" width="10.8" height="15.0" fill="rgb(208,43,32)" rx="2" ry="2" />
<text  x="15.23" y="127.5" ></text>
</g>
<g >
<title>runtime.funcname (3 samples, 0.11%)</title><rect x="237.0" y="229" width="1.3" height="15.0" fill="rgb(207,20,29)" rx="2" ry="2" />
<text  x="239.97" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (2 samples, 0.08%)</title><rect x="29.2" y="133" width="0.9" height="15.0" fill="rgb(222,82,47)" rx="2" ry="2" />
<text  x="32.21" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (51 samples, 1.93%)</title><rect x="27.0" y="245" width="22.8" height="15.0" fill="rgb(226,103,18)" rx="2" ry="2" />
<text  x="29.98" y="255.5" >h..</text>
</g>
<g >
<title>runtime.semawakeup (48 samples, 1.82%)</title><rect x="1168.1" y="165" width="21.5" height="15.0" fill="rgb(236,167,33)" rx="2" ry="2" />
<text  x="1171.11" y="175.5" >r..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (38 samples, 1.44%)</title><rect x="673.5" y="149" width="17.0" height="15.0" fill="rgb(214,220,40)" rx="2" ry="2" />
<text  x="676.50" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="45.3" y="149" width="0.4" height="15.0" fill="rgb(253,14,43)" rx="2" ry="2" />
<text  x="48.30" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.04%)</title><rect x="23.9" y="181" width="0.4" height="15.0" fill="rgb(226,52,19)" rx="2" ry="2" />
<text  x="26.85" y="191.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (4 samples, 0.15%)</title><rect x="41.3" y="181" width="1.8" height="15.0" fill="rgb(251,220,35)" rx="2" ry="2" />
<text  x="44.28" y="191.5" ></text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.04%)</title><rect x="238.8" y="181" width="0.4" height="15.0" fill="rgb(205,95,11)" rx="2" ry="2" />
<text  x="241.76" y="191.5" ></text>
</g>
<g >
<title>runtime.jmpdefer (1 samples, 0.04%)</title><rect x="108.7" y="181" width="0.5" height="15.0" fill="rgb(235,140,15)" rx="2" ry="2" />
<text  x="111.74" y="191.5" ></text>
</g>
<g >
<title>runtime.semawakeup (452 samples, 17.11%)</title><rect x="966.2" y="165" width="201.9" height="15.0" fill="rgb(212,70,26)" rx="2" ry="2" />
<text  x="969.15" y="175.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="26.5" y="213" width="0.5" height="15.0" fill="rgb(229,122,42)" rx="2" ry="2" />
<text  x="29.53" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.04%)</title><rect x="245.0" y="181" width="0.5" height="15.0" fill="rgb(245,62,14)" rx="2" ry="2" />
<text  x="248.02" y="191.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.04%)</title><rect x="208.4" y="165" width="0.4" height="15.0" fill="rgb(218,134,14)" rx="2" ry="2" />
<text  x="211.38" y="175.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.04%)</title><rect x="32.8" y="133" width="0.4" height="15.0" fill="rgb(213,31,30)" rx="2" ry="2" />
<text  x="35.79" y="143.5" ></text>
</g>
<g >
<title>runtime.runqsteal (47 samples, 1.78%)</title><rect x="375.5" y="213" width="21.0" height="15.0" fill="rgb(236,26,44)" rx="2" ry="2" />
<text  x="378.48" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="169.5" y="133" width="0.5" height="15.0" fill="rgb(248,70,22)" rx="2" ry="2" />
<text  x="172.51" y="143.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (2 samples, 0.08%)</title><rect x="27.4" y="149" width="0.9" height="15.0" fill="rgb(240,110,31)" rx="2" ry="2" />
<text  x="30.43" y="159.5" ></text>
</g>
<g >
<title>runtime.nanotime (118 samples, 4.47%)</title><rect x="693.6" y="229" width="52.7" height="15.0" fill="rgb(236,183,28)" rx="2" ry="2" />
<text  x="696.60" y="239.5" >runti..</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (5 samples, 0.19%)</title><rect x="963.9" y="181" width="2.3" height="15.0" fill="rgb(254,7,40)" rx="2" ry="2" />
<text  x="966.92" y="191.5" ></text>
</g>
<g >
<title>runtime.findnull (1 samples, 0.04%)</title><rect x="209.3" y="85" width="0.4" height="15.0" fill="rgb(246,102,2)" rx="2" ry="2" />
<text  x="212.27" y="95.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="98.5" y="133" width="0.4" height="15.0" fill="rgb(234,59,23)" rx="2" ry="2" />
<text  x="101.47" y="143.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="23.0" y="117" width="0.4" height="15.0" fill="rgb(212,101,49)" rx="2" ry="2" />
<text  x="25.96" y="127.5" ></text>
</g>
<g >
<title>main.main (64 samples, 2.42%)</title><rect x="207.5" y="261" width="28.6" height="15.0" fill="rgb(218,51,54)" rx="2" ry="2" />
<text  x="210.49" y="271.5" >ma..</text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (1 samples, 0.04%)</title><rect x="27.4" y="69" width="0.5" height="15.0" fill="rgb(231,184,9)" rx="2" ry="2" />
<text  x="30.43" y="79.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (1 samples, 0.04%)</title><rect x="43.5" y="181" width="0.5" height="15.0" fill="rgb(206,87,43)" rx="2" ry="2" />
<text  x="46.51" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Marshal (2 samples, 0.08%)</title><rect x="29.2" y="181" width="0.9" height="15.0" fill="rgb(214,128,7)" rx="2" ry="2" />
<text  x="32.21" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (7 samples, 0.27%)</title><rect x="23.9" y="245" width="3.1" height="15.0" fill="rgb(243,220,13)" rx="2" ry="2" />
<text  x="26.85" y="255.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.04%)</title><rect x="238.3" y="245" width="0.5" height="15.0" fill="rgb(213,55,20)" rx="2" ry="2" />
<text  x="241.32" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (3 samples, 0.11%)</title><rect x="1188.2" y="149" width="1.4" height="15.0" fill="rgb(228,48,49)" rx="2" ry="2" />
<text  x="1191.21" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.04%)</title><rect x="45.7" y="149" width="0.5" height="15.0" fill="rgb(207,6,0)" rx="2" ry="2" />
<text  x="48.74" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="201.7" y="261" width="0.4" height="15.0" fill="rgb(249,183,8)" rx="2" ry="2" />
<text  x="204.68" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="104.3" y="181" width="0.4" height="15.0" fill="rgb(235,183,17)" rx="2" ry="2" />
<text  x="107.27" y="191.5" ></text>
</g>
<g >
<title>runtime.findnull (3 samples, 0.11%)</title><rect x="237.0" y="197" width="1.3" height="15.0" fill="rgb(246,171,0)" rx="2" ry="2" />
<text  x="239.97" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.04%)</title><rect x="245.0" y="197" width="0.5" height="15.0" fill="rgb(241,172,28)" rx="2" ry="2" />
<text  x="248.02" y="207.5" ></text>
</g>
<g >
<title>runtime.newproc (2 samples, 0.08%)</title><rect x="208.8" y="197" width="0.9" height="15.0" fill="rgb(235,89,54)" rx="2" ry="2" />
<text  x="211.83" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (81 samples, 3.07%)</title><rect x="864.7" y="165" width="36.2" height="15.0" fill="rgb(251,7,10)" rx="2" ry="2" />
<text  x="867.73" y="175.5" >run..</text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.04%)</title><rect x="238.3" y="197" width="0.5" height="15.0" fill="rgb(221,161,2)" rx="2" ry="2" />
<text  x="241.32" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (6 samples, 0.23%)</title><rect x="43.1" y="197" width="2.6" height="15.0" fill="rgb(241,19,33)" rx="2" ry="2" />
<text  x="46.06" y="207.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (4 samples, 0.15%)</title><rect x="21.2" y="101" width="1.8" height="15.0" fill="rgb(253,49,44)" rx="2" ry="2" />
<text  x="24.17" y="111.5" ></text>
</g>
<g >
<title>runtime.sysmon (387 samples, 14.65%)</title><rect x="691.8" y="245" width="172.9" height="15.0" fill="rgb(243,156,1)" rx="2" ry="2" />
<text  x="694.82" y="255.5" >runtime.sysmon</text>
</g>
<g >
<title>reflect.unsafe_New (3 samples, 0.11%)</title><rect x="44.4" y="165" width="1.3" height="15.0" fill="rgb(244,12,51)" rx="2" ry="2" />
<text  x="47.40" y="175.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (452 samples, 17.11%)</title><rect x="966.2" y="245" width="201.9" height="15.0" fill="rgb(225,70,9)" rx="2" ry="2" />
<text  x="969.15" y="255.5" >runtime.goready.func1</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (2 samples, 0.08%)</title><rect x="27.4" y="181" width="0.9" height="15.0" fill="rgb(245,2,32)" rx="2" ry="2" />
<text  x="30.43" y="191.5" ></text>
</g>
<g >
<title>syscall.Recvfrom (104 samples, 3.94%)</title><rect x="54.7" y="197" width="46.4" height="15.0" fill="rgb(223,85,16)" rx="2" ry="2" />
<text  x="57.68" y="207.5" >sysc..</text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.04%)</title><rect x="204.4" y="213" width="0.4" height="15.0" fill="rgb(239,86,1)" rx="2" ry="2" />
<text  x="207.36" y="223.5" ></text>
</g>
<g >
<title>internal/bytealg.Equal (1 samples, 0.04%)</title><rect x="103.8" y="181" width="0.5" height="15.0" fill="rgb(212,31,44)" rx="2" ry="2" />
<text  x="106.83" y="191.5" ></text>
</g>
<g >
<title>net.(*UDPAddr).sockaddr (3 samples, 0.11%)</title><rect x="103.4" y="229" width="1.3" height="15.0" fill="rgb(232,152,12)" rx="2" ry="2" />
<text  x="106.38" y="239.5" ></text>
</g>
<g >
<title>runtime.handoffp (86 samples, 3.26%)</title><rect x="864.7" y="229" width="38.5" height="15.0" fill="rgb(245,14,0)" rx="2" ry="2" />
<text  x="867.73" y="239.5" >run..</text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.04%)</title><rect x="24.7" y="213" width="0.5" height="15.0" fill="rgb(219,133,37)" rx="2" ry="2" />
<text  x="27.74" y="223.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (86 samples, 3.26%)</title><rect x="864.7" y="245" width="38.5" height="15.0" fill="rgb(231,196,33)" rx="2" ry="2" />
<text  x="867.73" y="255.5" >run..</text>
</g>
<g >
<title>runtime.memequal (1 samples, 0.04%)</title><rect x="42.2" y="101" width="0.4" height="15.0" fill="rgb(233,65,36)" rx="2" ry="2" />
<text  x="45.17" y="111.5" ></text>
</g>
<g >
<title>runtime.getStackMap (9 samples, 0.34%)</title><rect x="16.3" y="85" width="4.0" height="15.0" fill="rgb(245,190,46)" rx="2" ry="2" />
<text  x="19.26" y="95.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (2 samples, 0.08%)</title><rect x="48.4" y="165" width="0.9" height="15.0" fill="rgb(213,40,21)" rx="2" ry="2" />
<text  x="51.42" y="175.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.08%)</title><rect x="27.4" y="117" width="0.9" height="15.0" fill="rgb(227,157,32)" rx="2" ry="2" />
<text  x="30.43" y="127.5" ></text>
</g>
<g >
<title>net.(*UDPConn).writeTo (219 samples, 8.29%)</title><rect x="103.4" y="245" width="97.8" height="15.0" fill="rgb(230,171,35)" rx="2" ry="2" />
<text  x="106.38" y="255.5" >net.(*UDPCo..</text>
</g>
<g >
<title>runtime.findrunnable (1 samples, 0.04%)</title><rect x="238.8" y="213" width="0.4" height="15.0" fill="rgb(233,3,4)" rx="2" ry="2" />
<text  x="241.76" y="223.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="31.4" y="197" width="0.5" height="15.0" fill="rgb(209,127,44)" rx="2" ry="2" />
<text  x="34.45" y="207.5" ></text>
</g>
<g >
<title>runtime.procyield (3 samples, 0.11%)</title><rect x="243.7" y="197" width="1.3" height="15.0" fill="rgb(223,178,34)" rx="2" ry="2" />
<text  x="246.68" y="207.5" ></text>
</g>
<g >
<title>runtime.startm (48 samples, 1.82%)</title><rect x="1168.1" y="197" width="21.5" height="15.0" fill="rgb(219,175,26)" rx="2" ry="2" />
<text  x="1171.11" y="207.5" >r..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (1 samples, 0.04%)</title><rect x="45.7" y="181" width="0.5" height="15.0" fill="rgb(220,62,5)" rx="2" ry="2" />
<text  x="48.74" y="191.5" ></text>
</g>
<g >
<title>net.(*netFD).writeTo (216 samples, 8.18%)</title><rect x="104.7" y="229" width="96.5" height="15.0" fill="rgb(231,16,25)" rx="2" ry="2" />
<text  x="107.72" y="239.5" >net.(*netFD..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (446 samples, 16.89%)</title><rect x="966.2" y="149" width="199.2" height="15.0" fill="rgb(237,106,28)" rx="2" ry="2" />
<text  x="969.15" y="159.5" >runtime.pthread_cond_signal</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (3 samples, 0.11%)</title><rect x="27.0" y="197" width="1.3" height="15.0" fill="rgb(213,124,36)" rx="2" ry="2" />
<text  x="29.98" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (615 samples, 23.29%)</title><rect x="397.8" y="181" width="274.8" height="15.0" fill="rgb(242,201,31)" rx="2" ry="2" />
<text  x="400.82" y="191.5" >runtime.semasleep</text>
</g>
<g >
<title>net.ipEmptyString (2 samples, 0.08%)</title><rect x="51.1" y="245" width="0.9" height="15.0" fill="rgb(205,131,3)" rx="2" ry="2" />
<text  x="54.11" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.08%)</title><rect x="963.0" y="181" width="0.9" height="15.0" fill="rgb(250,148,39)" rx="2" ry="2" />
<text  x="966.03" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.04%)</title><rect x="236.1" y="213" width="0.4" height="15.0" fill="rgb(205,77,43)" rx="2" ry="2" />
<text  x="239.08" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (2 samples, 0.08%)</title><rect x="30.6" y="165" width="0.8" height="15.0" fill="rgb(250,170,47)" rx="2" ry="2" />
<text  x="33.55" y="175.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.04%)</title><rect x="49.3" y="165" width="0.5" height="15.0" fill="rgb(244,87,45)" rx="2" ry="2" />
<text  x="52.32" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (2 samples, 0.08%)</title><rect x="30.6" y="149" width="0.8" height="15.0" fill="rgb(211,17,48)" rx="2" ry="2" />
<text  x="33.55" y="159.5" ></text>
</g>
<g >
<title>runtime.heapBits.next (1 samples, 0.04%)</title><rect x="207.0" y="197" width="0.5" height="15.0" fill="rgb(237,0,50)" rx="2" ry="2" />
<text  x="210.04" y="207.5" ></text>
</g>
<g >
<title>runtime.nilinterequal (2 samples, 0.08%)</title><rect x="41.7" y="149" width="0.9" height="15.0" fill="rgb(236,194,42)" rx="2" ry="2" />
<text  x="44.72" y="159.5" ></text>
</g>
<g >
<title>all (2,641 samples, 100%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(220,219,46)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (141 samples, 5.34%)</title><rect x="903.2" y="245" width="63.0" height="15.0" fill="rgb(242,121,52)" rx="2" ry="2" />
<text  x="906.15" y="255.5" >runtim..</text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.04%)</title><rect x="52.9" y="149" width="0.4" height="15.0" fill="rgb(229,43,26)" rx="2" ry="2" />
<text  x="55.89" y="159.5" ></text>
</g>
<g >
<title>runtime.runqgrab (47 samples, 1.78%)</title><rect x="375.5" y="197" width="21.0" height="15.0" fill="rgb(244,130,5)" rx="2" ry="2" />
<text  x="378.48" y="207.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.04%)</title><rect x="55.6" y="133" width="0.4" height="15.0" fill="rgb(212,97,16)" rx="2" ry="2" />
<text  x="58.57" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (134 samples, 5.07%)</title><rect x="903.2" y="181" width="59.8" height="15.0" fill="rgb(236,6,6)" rx="2" ry="2" />
<text  x="906.15" y="191.5" >runtim..</text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1 samples, 0.04%)</title><rect x="169.5" y="117" width="0.5" height="15.0" fill="rgb(221,158,28)" rx="2" ry="2" />
<text  x="172.51" y="127.5" ></text>
</g>
<g >
<title>runtime.(*randomOrder).start (1 samples, 0.04%)</title><rect x="241.9" y="213" width="0.4" height="15.0" fill="rgb(248,225,11)" rx="2" ry="2" />
<text  x="244.89" y="223.5" ></text>
</g>
<g >
<title>net.(*UDPConn).ReadFromUDP (107 samples, 4.05%)</title><rect x="53.3" y="261" width="47.8" height="15.0" fill="rgb(225,84,17)" rx="2" ry="2" />
<text  x="56.34" y="271.5" >net...</text>
</g>
<g >
<title>runtime.ready (452 samples, 17.11%)</title><rect x="966.2" y="229" width="201.9" height="15.0" fill="rgb(231,148,22)" rx="2" ry="2" />
<text  x="969.15" y="239.5" >runtime.ready</text>
</g>
<g >
<title>reflect.name.name (1 samples, 0.04%)</title><rect x="33.2" y="149" width="0.5" height="15.0" fill="rgb(219,154,20)" rx="2" ry="2" />
<text  x="36.23" y="159.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.04%)</title><rect x="693.2" y="213" width="0.4" height="15.0" fill="rgb(239,195,6)" rx="2" ry="2" />
<text  x="696.16" y="223.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.04%)</title><rect x="672.6" y="197" width="0.5" height="15.0" fill="rgb(244,53,47)" rx="2" ry="2" />
<text  x="675.61" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (1 samples, 0.04%)</title><rect x="45.7" y="133" width="0.5" height="15.0" fill="rgb(207,202,34)" rx="2" ry="2" />
<text  x="48.74" y="143.5" ></text>
</g>
<g >
<title>runtime.startm (86 samples, 3.26%)</title><rect x="864.7" y="213" width="38.5" height="15.0" fill="rgb(239,212,41)" rx="2" ry="2" />
<text  x="867.73" y="223.5" >run..</text>
</g>
<g >
<title>runtime.notetsleep (154 samples, 5.83%)</title><rect x="746.3" y="229" width="68.8" height="15.0" fill="rgb(218,19,21)" rx="2" ry="2" />
<text  x="749.33" y="239.5" >runtime..</text>
</g>
<g >
<title>runtime.runqget (1 samples, 0.04%)</title><rect x="375.0" y="213" width="0.5" height="15.0" fill="rgb(210,103,20)" rx="2" ry="2" />
<text  x="378.04" y="223.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.04%)</title><rect x="236.1" y="245" width="0.4" height="15.0" fill="rgb(230,78,42)" rx="2" ry="2" />
<text  x="239.08" y="255.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1 samples, 0.04%)</title><rect x="98.5" y="117" width="0.4" height="15.0" fill="rgb(242,56,6)" rx="2" ry="2" />
<text  x="101.47" y="127.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.04%)</title><rect x="10.4" y="133" width="0.5" height="15.0" fill="rgb(205,211,42)" rx="2" ry="2" />
<text  x="13.45" y="143.5" ></text>
</g>
<g >
<title>runtime.isSystemGoroutine (2 samples, 0.08%)</title><rect x="208.8" y="133" width="0.9" height="15.0" fill="rgb(242,115,39)" rx="2" ry="2" />
<text  x="211.83" y="143.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_fast64 (1 samples, 0.04%)</title><rect x="1189.6" y="229" width="0.4" height="15.0" fill="rgb(217,222,33)" rx="2" ry="2" />
<text  x="1192.55" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (1 samples, 0.04%)</title><rect x="236.1" y="261" width="0.4" height="15.0" fill="rgb(221,94,52)" rx="2" ry="2" />
<text  x="239.08" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (40 samples, 1.51%)</title><rect x="31.9" y="213" width="17.9" height="15.0" fill="rgb(227,212,20)" rx="2" ry="2" />
<text  x="34.89" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (43 samples, 1.63%)</title><rect x="1168.1" y="149" width="19.2" height="15.0" fill="rgb(205,9,27)" rx="2" ry="2" />
<text  x="1171.11" y="159.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.08%)</title><rect x="242.8" y="197" width="0.9" height="15.0" fill="rgb(220,127,23)" rx="2" ry="2" />
<text  x="245.78" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (30 samples, 1.14%)</title><rect x="10.0" y="181" width="13.4" height="15.0" fill="rgb(241,226,15)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.04%)</title><rect x="47.5" y="101" width="0.5" height="15.0" fill="rgb(248,77,26)" rx="2" ry="2" />
<text  x="50.53" y="111.5" ></text>
</g>
<g >
<title>runtime.newproc1 (2 samples, 0.08%)</title><rect x="208.8" y="149" width="0.9" height="15.0" fill="rgb(235,72,42)" rx="2" ry="2" />
<text  x="211.83" y="159.5" ></text>
</g>
<g >
<title>runtime.readvarint (1 samples, 0.04%)</title><rect x="22.5" y="53" width="0.5" height="15.0" fill="rgb(246,210,50)" rx="2" ry="2" />
<text  x="25.51" y="63.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (141 samples, 5.34%)</title><rect x="903.2" y="229" width="63.0" height="15.0" fill="rgb(246,106,9)" rx="2" ry="2" />
<text  x="906.15" y="239.5" >runtim..</text>
</g>
<g >
<title>runtime.usleep (44 samples, 1.67%)</title><rect x="376.8" y="181" width="19.7" height="15.0" fill="rgb(229,209,29)" rx="2" ry="2" />
<text  x="379.82" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="52.9" y="197" width="0.4" height="15.0" fill="rgb(241,158,18)" rx="2" ry="2" />
<text  x="55.89" y="207.5" ></text>
</g>
<g >
<title>syscall.recvfrom (101 samples, 3.82%)</title><rect x="56.0" y="181" width="45.1" height="15.0" fill="rgb(245,115,53)" rx="2" ry="2" />
<text  x="59.02" y="191.5" >sysc..</text>
</g>
<g >
<title>runtime.findfunc (2 samples, 0.08%)</title><rect x="20.3" y="101" width="0.9" height="15.0" fill="rgb(254,21,34)" rx="2" ry="2" />
<text  x="23.28" y="111.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.04%)</title><rect x="24.3" y="197" width="0.4" height="15.0" fill="rgb(232,47,15)" rx="2" ry="2" />
<text  x="27.30" y="207.5" ></text>
</g>
<g >
<title>runtime._System (2 samples, 0.08%)</title><rect x="201.2" y="277" width="0.9" height="15.0" fill="rgb(250,37,24)" rx="2" ry="2" />
<text  x="204.23" y="287.5" ></text>
</g>
<g >
<title>sync/atomic.(*Value).Load (1 samples, 0.04%)</title><rect x="43.5" y="149" width="0.5" height="15.0" fill="rgb(215,210,1)" rx="2" ry="2" />
<text  x="46.51" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.04%)</title><rect x="238.3" y="165" width="0.5" height="15.0" fill="rgb(225,178,52)" rx="2" ry="2" />
<text  x="241.32" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Marshal (1 samples, 0.04%)</title><rect x="23.9" y="213" width="0.4" height="15.0" fill="rgb(223,224,36)" rx="2" ry="2" />
<text  x="26.85" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrain (7 samples, 0.27%)</title><rect x="204.4" y="229" width="3.1" height="15.0" fill="rgb(218,35,4)" rx="2" ry="2" />
<text  x="207.36" y="239.5" ></text>
</g>
<g >
<title>runtime.funcname (1 samples, 0.04%)</title><rect x="209.3" y="117" width="0.4" height="15.0" fill="rgb(240,184,25)" rx="2" ry="2" />
<text  x="212.27" y="127.5" ></text>
</g>
<g >
<title>runtime.usleep (111 samples, 4.20%)</title><rect x="815.1" y="229" width="49.6" height="15.0" fill="rgb(213,7,47)" rx="2" ry="2" />
<text  x="818.13" y="239.5" >runti..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (3 samples, 0.11%)</title><rect x="27.0" y="213" width="1.3" height="15.0" fill="rgb(233,74,21)" rx="2" ry="2" />
<text  x="29.98" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (2 samples, 0.08%)</title><rect x="48.4" y="149" width="0.9" height="15.0" fill="rgb(222,116,34)" rx="2" ry="2" />
<text  x="51.42" y="159.5" ></text>
</g>
<g >
<title>runtime.gosched_m (1 samples, 0.04%)</title><rect x="238.8" y="261" width="0.4" height="15.0" fill="rgb(218,227,4)" rx="2" ry="2" />
<text  x="241.76" y="271.5" ></text>
</g>
<g >
<title>runtime.wakep (48 samples, 1.82%)</title><rect x="1168.1" y="213" width="21.5" height="15.0" fill="rgb(244,205,31)" rx="2" ry="2" />
<text  x="1171.11" y="223.5" >r..</text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="864.3" y="213" width="0.4" height="15.0" fill="rgb(218,161,41)" rx="2" ry="2" />
<text  x="867.28" y="223.5" ></text>
</g>
<g >
<title>net.ipToSockaddr (3 samples, 0.11%)</title><rect x="103.4" y="213" width="1.3" height="15.0" fill="rgb(250,91,42)" rx="2" ry="2" />
<text  x="106.38" y="223.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="814.7" y="165" width="0.4" height="15.0" fill="rgb(220,228,42)" rx="2" ry="2" />
<text  x="817.69" y="175.5" ></text>
</g>
<g >
<title>net.IP.To4 (2 samples, 0.08%)</title><rect x="51.1" y="213" width="0.9" height="15.0" fill="rgb(241,197,44)" rx="2" ry="2" />
<text  x="54.11" y="223.5" ></text>
</g>
<g >
<title>reflect.Value.call (13 samples, 0.49%)</title><rect x="33.7" y="165" width="5.8" height="15.0" fill="rgb(244,92,53)" rx="2" ry="2" />
<text  x="36.68" y="175.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.04%)</title><rect x="45.3" y="133" width="0.4" height="15.0" fill="rgb(209,121,33)" rx="2" ry="2" />
<text  x="48.30" y="143.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.04%)</title><rect x="48.9" y="133" width="0.4" height="15.0" fill="rgb(246,54,21)" rx="2" ry="2" />
<text  x="51.87" y="143.5" ></text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.08%)</title><rect x="25.2" y="213" width="0.9" height="15.0" fill="rgb(253,11,1)" rx="2" ry="2" />
<text  x="28.19" y="223.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (7 samples, 0.27%)</title><rect x="204.4" y="245" width="3.1" height="15.0" fill="rgb(232,32,6)" rx="2" ry="2" />
<text  x="207.36" y="255.5" ></text>
</g>
<g >
<title>syscall.sendto (205 samples, 7.76%)</title><rect x="109.6" y="181" width="91.6" height="15.0" fill="rgb(209,206,14)" rx="2" ry="2" />
<text  x="112.64" y="191.5" >syscall.se..</text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.08%)</title><rect x="775.4" y="181" width="0.9" height="15.0" fill="rgb(236,228,2)" rx="2" ry="2" />
<text  x="778.37" y="191.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="672.2" y="149" width="0.4" height="15.0" fill="rgb(232,114,11)" rx="2" ry="2" />
<text  x="675.16" y="159.5" ></text>
</g>
<g >
<title>runtime.efaceeq (2 samples, 0.08%)</title><rect x="41.7" y="133" width="0.9" height="15.0" fill="rgb(251,53,51)" rx="2" ry="2" />
<text  x="44.72" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (1 samples, 0.04%)</title><rect x="27.4" y="53" width="0.5" height="15.0" fill="rgb(244,1,38)" rx="2" ry="2" />
<text  x="30.43" y="63.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="36.8" y="101" width="0.5" height="15.0" fill="rgb(221,106,51)" rx="2" ry="2" />
<text  x="39.81" y="111.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.04%)</title><rect x="26.5" y="197" width="0.5" height="15.0" fill="rgb(242,81,37)" rx="2" ry="2" />
<text  x="29.53" y="207.5" ></text>
</g>
<g >
<title>runtime.wakep (41 samples, 1.55%)</title><rect x="673.5" y="213" width="18.3" height="15.0" fill="rgb(242,162,4)" rx="2" ry="2" />
<text  x="676.50" y="223.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (4 samples, 0.15%)</title><rect x="41.3" y="165" width="1.8" height="15.0" fill="rgb(214,59,5)" rx="2" ry="2" />
<text  x="44.28" y="175.5" ></text>
</g>
<g >
<title>runtime/pprof.profileWriter (1 samples, 0.04%)</title><rect x="1189.6" y="277" width="0.4" height="15.0" fill="rgb(252,27,43)" rx="2" ry="2" />
<text  x="1192.55" y="287.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (1 samples, 0.04%)</title><rect x="52.9" y="181" width="0.4" height="15.0" fill="rgb(208,98,48)" rx="2" ry="2" />
<text  x="55.89" y="191.5" ></text>
</g>
<g >
<title>runtime.startm (41 samples, 1.55%)</title><rect x="673.5" y="197" width="18.3" height="15.0" fill="rgb(205,207,4)" rx="2" ry="2" />
<text  x="676.50" y="207.5" ></text>
</g>
<g >
<title>net.(*UDPAddr).String (3 samples, 0.11%)</title><rect x="50.7" y="261" width="1.3" height="15.0" fill="rgb(243,214,45)" rx="2" ry="2" />
<text  x="53.66" y="271.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.04%)</title><rect x="236.1" y="229" width="0.4" height="15.0" fill="rgb(228,158,36)" rx="2" ry="2" />
<text  x="239.08" y="239.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.08%)</title><rect x="242.8" y="181" width="0.9" height="15.0" fill="rgb(242,168,36)" rx="2" ry="2" />
<text  x="245.78" y="191.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.04%)</title><rect x="98.5" y="85" width="0.4" height="15.0" fill="rgb(210,138,34)" rx="2" ry="2" />
<text  x="101.47" y="95.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.04%)</title><rect x="29.7" y="117" width="0.4" height="15.0" fill="rgb(226,14,24)" rx="2" ry="2" />
<text  x="32.66" y="127.5" ></text>
</g>
</g>
</svg>

