<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="272.6" y="309" width="0.5" height="15.0" fill="rgb(227,213,1)" rx="2" ry="2" />
<text  x="275.61" y="319.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.04%)</title><rect x="270.6" y="277" width="0.5" height="15.0" fill="rgb(242,21,54)" rx="2" ry="2" />
<text  x="273.63" y="287.5" ></text>
</g>
<g >
<title>runtime.interequal (1 samples, 0.04%)</title><rect x="188.5" y="261" width="0.5" height="15.0" fill="rgb(225,26,24)" rx="2" ry="2" />
<text  x="191.53" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.08%)</title><rect x="273.1" y="357" width="1.0" height="15.0" fill="rgb(228,23,34)" rx="2" ry="2" />
<text  x="276.10" y="367.5" ></text>
</g>
<g >
<title>all (2,386 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(237,159,27)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>runtime.checkdead (1 samples, 0.04%)</title><rect x="454.1" y="277" width="0.5" height="15.0" fill="rgb(215,170,49)" rx="2" ry="2" />
<text  x="457.11" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.04%)</title><rect x="197.9" y="277" width="0.5" height="15.0" fill="rgb(254,86,23)" rx="2" ry="2" />
<text  x="200.93" y="287.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (35 samples, 1.47%)</title><rect x="168.8" y="213" width="17.3" height="15.0" fill="rgb(235,0,24)" rx="2" ry="2" />
<text  x="171.75" y="223.5" ></text>
</g>
<g >
<title>runtime.newproc1 (1 samples, 0.04%)</title><rect x="272.6" y="277" width="0.5" height="15.0" fill="rgb(206,87,44)" rx="2" ry="2" />
<text  x="275.61" y="287.5" ></text>
</g>
<g >
<title>runtime.isSystemGoroutine (2 samples, 0.08%)</title><rect x="278.0" y="341" width="1.0" height="15.0" fill="rgb(246,152,48)" rx="2" ry="2" />
<text  x="281.05" y="351.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="769.1" y="245" width="0.5" height="15.0" fill="rgb(237,103,8)" rx="2" ry="2" />
<text  x="772.14" y="255.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.04%)</title><rect x="802.8" y="309" width="0.5" height="15.0" fill="rgb(216,71,39)" rx="2" ry="2" />
<text  x="805.77" y="319.5" ></text>
</g>
<g >
<title>runtime.funcname (1 samples, 0.04%)</title><rect x="278.5" y="325" width="0.5" height="15.0" fill="rgb(233,147,40)" rx="2" ry="2" />
<text  x="281.54" y="335.5" ></text>
</g>
<g >
<title>runtime.gfget.func1 (1 samples, 0.04%)</title><rect x="272.6" y="245" width="0.5" height="15.0" fill="rgb(210,4,5)" rx="2" ry="2" />
<text  x="275.61" y="255.5" ></text>
</g>
<g >
<title>runtime.notewakeup (139 samples, 5.83%)</title><rect x="987.2" y="293" width="68.8" height="15.0" fill="rgb(243,209,38)" rx="2" ry="2" />
<text  x="990.23" y="303.5" >runtime..</text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.04%)</title><rect x="197.9" y="229" width="0.5" height="15.0" fill="rgb(221,175,22)" rx="2" ry="2" />
<text  x="200.93" y="239.5" ></text>
</g>
<g >
<title>runtime.semawakeup (93 samples, 3.90%)</title><rect x="1056.0" y="293" width="46.0" height="15.0" fill="rgb(225,79,26)" rx="2" ry="2" />
<text  x="1058.98" y="303.5" >runt..</text>
</g>
<g >
<title>runtime.checkdead (1 samples, 0.04%)</title><rect x="610.4" y="277" width="0.5" height="15.0" fill="rgb(205,15,41)" rx="2" ry="2" />
<text  x="613.39" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="276.1" y="357" width="0.5" height="15.0" fill="rgb(246,189,2)" rx="2" ry="2" />
<text  x="279.07" y="367.5" ></text>
</g>
<g >
<title>runtime.getStackMap (5 samples, 0.21%)</title><rect x="193.0" y="245" width="2.5" height="15.0" fill="rgb(240,90,31)" rx="2" ry="2" />
<text  x="195.98" y="255.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (127 samples, 5.32%)</title><rect x="202.4" y="117" width="62.8" height="15.0" fill="rgb(250,225,26)" rx="2" ry="2" />
<text  x="205.38" y="127.5" >intern..</text>
</g>
<g >
<title>runtime.mput (1 samples, 0.04%)</title><rect x="610.4" y="293" width="0.5" height="15.0" fill="rgb(238,203,28)" rx="2" ry="2" />
<text  x="613.39" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (408 samples, 17.10%)</title><rect x="987.2" y="357" width="201.8" height="15.0" fill="rgb(214,46,38)" rx="2" ry="2" />
<text  x="990.23" y="367.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.exitsyscallfast (35 samples, 1.47%)</title><rect x="168.8" y="197" width="17.3" height="15.0" fill="rgb(241,102,30)" rx="2" ry="2" />
<text  x="171.75" y="207.5" ></text>
</g>
<g >
<title>runtime.gostringnocopy (1 samples, 0.04%)</title><rect x="278.5" y="309" width="0.5" height="15.0" fill="rgb(249,3,32)" rx="2" ry="2" />
<text  x="281.54" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (4 samples, 0.17%)</title><rect x="1100.0" y="277" width="2.0" height="15.0" fill="rgb(247,140,36)" rx="2" ry="2" />
<text  x="1102.99" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.04%)</title><rect x="1102.0" y="245" width="0.5" height="15.0" fill="rgb(245,220,4)" rx="2" ry="2" />
<text  x="1104.97" y="255.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.04%)</title><rect x="283.0" y="293" width="0.5" height="15.0" fill="rgb(225,120,23)" rx="2" ry="2" />
<text  x="285.99" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (57 samples, 2.39%)</title><rect x="769.6" y="245" width="28.2" height="15.0" fill="rgb(240,121,53)" rx="2" ry="2" />
<text  x="772.63" y="255.5" >r..</text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.04%)</title><rect x="272.1" y="245" width="0.5" height="15.0" fill="rgb(240,143,54)" rx="2" ry="2" />
<text  x="275.11" y="255.5" ></text>
</g>
<g >
<title>runtime.resetspinning (2 samples, 0.08%)</title><rect x="581.2" y="325" width="1.0" height="15.0" fill="rgb(211,152,21)" rx="2" ry="2" />
<text  x="584.21" y="335.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (1 samples, 0.04%)</title><rect x="276.1" y="373" width="0.5" height="15.0" fill="rgb(215,145,3)" rx="2" ry="2" />
<text  x="279.07" y="383.5" ></text>
</g>
<g >
<title>runtime.startm (176 samples, 7.38%)</title><rect x="1102.0" y="293" width="87.0" height="15.0" fill="rgb(231,156,1)" rx="2" ry="2" />
<text  x="1104.97" y="303.5" >runtime.st..</text>
</g>
<g >
<title>net.(*conn).Read (127 samples, 5.32%)</title><rect x="202.4" y="149" width="62.8" height="15.0" fill="rgb(238,24,19)" rx="2" ry="2" />
<text  x="205.38" y="159.5" >net.(*..</text>
</g>
<g >
<title>runtime.usleep (6 samples, 0.25%)</title><rect x="450.6" y="277" width="3.0" height="15.0" fill="rgb(240,202,1)" rx="2" ry="2" />
<text  x="453.65" y="287.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.04%)</title><rect x="1102.0" y="261" width="0.5" height="15.0" fill="rgb(212,1,29)" rx="2" ry="2" />
<text  x="1104.97" y="271.5" ></text>
</g>
<g >
<title>runtime.wakep (176 samples, 7.38%)</title><rect x="1102.0" y="309" width="87.0" height="15.0" fill="rgb(209,68,44)" rx="2" ry="2" />
<text  x="1104.97" y="319.5" >runtime.wa..</text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (1 samples, 0.04%)</title><rect x="276.1" y="341" width="0.5" height="15.0" fill="rgb(225,145,3)" rx="2" ry="2" />
<text  x="279.07" y="351.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.04%)</title><rect x="448.7" y="277" width="0.5" height="15.0" fill="rgb(213,19,19)" rx="2" ry="2" />
<text  x="451.67" y="287.5" ></text>
</g>
<g >
<title>encoding/gob.encOpFor.func4 (1 samples, 0.04%)</title><rect x="186.6" y="261" width="0.4" height="15.0" fill="rgb(224,151,25)" rx="2" ry="2" />
<text  x="189.55" y="271.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="449.2" y="277" width="0.5" height="15.0" fill="rgb(248,212,44)" rx="2" ry="2" />
<text  x="452.16" y="287.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="189.5" y="277" width="0.5" height="15.0" fill="rgb(234,95,51)" rx="2" ry="2" />
<text  x="192.52" y="287.5" ></text>
</g>
<g >
<title>sync.(*entry).load (1 samples, 0.04%)</title><rect x="196.9" y="293" width="0.5" height="15.0" fill="rgb(248,81,10)" rx="2" ry="2" />
<text  x="199.94" y="303.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).Encode (9 samples, 0.38%)</title><rect x="186.6" y="325" width="4.4" height="15.0" fill="rgb(250,66,40)" rx="2" ry="2" />
<text  x="189.55" y="335.5" ></text>
</g>
<g >
<title>io.ReadFull (128 samples, 5.36%)</title><rect x="201.9" y="197" width="63.3" height="15.0" fill="rgb(214,60,32)" rx="2" ry="2" />
<text  x="204.89" y="207.5" >io.Rea..</text>
</g>
<g >
<title>runtime.semacreate (1 samples, 0.04%)</title><rect x="935.8" y="309" width="0.5" height="15.0" fill="rgb(234,41,19)" rx="2" ry="2" />
<text  x="938.80" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.08%)</title><rect x="581.2" y="245" width="1.0" height="15.0" fill="rgb(210,159,10)" rx="2" ry="2" />
<text  x="584.21" y="255.5" ></text>
</g>
<g >
<title>runtime.lock (6 samples, 0.25%)</title><rect x="281.5" y="309" width="3.0" height="15.0" fill="rgb(231,95,43)" rx="2" ry="2" />
<text  x="284.51" y="319.5" ></text>
</g>
<g >
<title>runtime.newstack (10 samples, 0.42%)</title><rect x="191.5" y="309" width="4.9" height="15.0" fill="rgb(219,102,5)" rx="2" ry="2" />
<text  x="194.50" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.08%)</title><rect x="267.2" y="181" width="1.0" height="15.0" fill="rgb(231,131,38)" rx="2" ry="2" />
<text  x="270.17" y="191.5" ></text>
</g>
<g >
<title>runtime.runqgrab (5 samples, 0.21%)</title><rect x="607.4" y="293" width="2.5" height="15.0" fill="rgb(238,14,25)" rx="2" ry="2" />
<text  x="610.42" y="303.5" ></text>
</g>
<g >
<title>reflect.New (2 samples, 0.08%)</title><rect x="271.6" y="309" width="1.0" height="15.0" fill="rgb(208,14,14)" rx="2" ry="2" />
<text  x="274.62" y="319.5" ></text>
</g>
<g >
<title>runtime.sysmon (376 samples, 15.76%)</title><rect x="801.3" y="341" width="185.9" height="15.0" fill="rgb(250,93,15)" rx="2" ry="2" />
<text  x="804.28" y="351.5" >runtime.sysmon</text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (100 samples, 4.19%)</title><rect x="886.3" y="277" width="49.5" height="15.0" fill="rgb(229,153,18)" rx="2" ry="2" />
<text  x="889.35" y="287.5" >runt..</text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.04%)</title><rect x="609.9" y="293" width="0.5" height="15.0" fill="rgb(237,195,27)" rx="2" ry="2" />
<text  x="612.89" y="303.5" ></text>
</g>
<g >
<title>runtime.stopm (323 samples, 13.54%)</title><rect x="609.9" y="309" width="159.7" height="15.0" fill="rgb(251,16,22)" rx="2" ry="2" />
<text  x="612.89" y="319.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.newproc (1 samples, 0.04%)</title><rect x="272.6" y="325" width="0.5" height="15.0" fill="rgb(223,53,27)" rx="2" ry="2" />
<text  x="275.61" y="335.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="267.7" y="165" width="0.5" height="15.0" fill="rgb(250,24,48)" rx="2" ry="2" />
<text  x="270.66" y="175.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="885.9" y="277" width="0.4" height="15.0" fill="rgb(223,172,33)" rx="2" ry="2" />
<text  x="888.85" y="287.5" ></text>
</g>
<g >
<title>net/rpc.(*service).call (384 samples, 16.09%)</title><rect x="10.0" y="373" width="189.9" height="15.0" fill="rgb(211,208,45)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >net/rpc.(*service).call</text>
</g>
<g >
<title>runtime.findrunnable (610 samples, 25.57%)</title><rect x="279.5" y="325" width="301.7" height="15.0" fill="rgb(238,136,54)" rx="2" ry="2" />
<text  x="282.53" y="335.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.pcvalue (3 samples, 0.13%)</title><rect x="194.0" y="213" width="1.5" height="15.0" fill="rgb(214,32,7)" rx="2" ry="2" />
<text  x="196.97" y="223.5" ></text>
</g>
<g >
<title>runtime.netpollready (1 samples, 0.04%)</title><rect x="449.7" y="293" width="0.5" height="15.0" fill="rgb(241,19,23)" rx="2" ry="2" />
<text  x="452.66" y="303.5" ></text>
</g>
<g >
<title>runtime.usleep (4 samples, 0.17%)</title><rect x="607.9" y="277" width="2.0" height="15.0" fill="rgb(207,142,17)" rx="2" ry="2" />
<text  x="610.91" y="287.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).readRequestHeader (142 samples, 5.95%)</title><rect x="200.9" y="309" width="70.2" height="15.0" fill="rgb(214,109,45)" rx="2" ry="2" />
<text  x="203.90" y="319.5" >net/rpc..</text>
</g>
<g >
<title>encoding/gob.decString (4 samples, 0.17%)</title><rect x="266.2" y="213" width="2.0" height="15.0" fill="rgb(252,110,53)" rx="2" ry="2" />
<text  x="269.18" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (64 samples, 2.68%)</title><rect x="769.6" y="261" width="31.7" height="15.0" fill="rgb(239,223,10)" rx="2" ry="2" />
<text  x="772.63" y="271.5" >ru..</text>
</g>
<g >
<title>runtime.mcall (1,059 samples, 44.38%)</title><rect x="277.6" y="373" width="523.7" height="15.0" fill="rgb(240,14,28)" rx="2" ry="2" />
<text  x="280.55" y="383.5" >runtime.mcall</text>
</g>
<g >
<title>encoding/gob.userType (1 samples, 0.04%)</title><rect x="269.6" y="229" width="0.5" height="15.0" fill="rgb(254,43,4)" rx="2" ry="2" />
<text  x="272.64" y="239.5" ></text>
</g>
<g >
<title>encoding/gob.userType (1 samples, 0.04%)</title><rect x="271.1" y="245" width="0.5" height="15.0" fill="rgb(216,91,49)" rx="2" ry="2" />
<text  x="274.12" y="255.5" ></text>
</g>
<g >
<title>net/rpc.(*gobServerCodec).ReadRequestBody (1 samples, 0.04%)</title><rect x="271.1" y="309" width="0.5" height="15.0" fill="rgb(230,29,28)" rx="2" ry="2" />
<text  x="274.12" y="319.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (128 samples, 5.36%)</title><rect x="201.9" y="165" width="63.3" height="15.0" fill="rgb(214,184,53)" rx="2" ry="2" />
<text  x="204.89" y="175.5" >bufio...</text>
</g>
<g >
<title>runtime.copystack (10 samples, 0.42%)</title><rect x="191.5" y="293" width="4.9" height="15.0" fill="rgb(213,157,40)" rx="2" ry="2" />
<text  x="194.50" y="303.5" ></text>
</g>
<g >
<title>runtime.findnull (1 samples, 0.04%)</title><rect x="278.5" y="293" width="0.5" height="15.0" fill="rgb(213,29,3)" rx="2" ry="2" />
<text  x="281.54" y="303.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).ServeCodec (148 samples, 6.20%)</title><rect x="199.9" y="341" width="73.2" height="15.0" fill="rgb(249,207,27)" rx="2" ry="2" />
<text  x="202.91" y="351.5" >net/rpc...</text>
</g>
<g >
<title>syscall.Read (125 samples, 5.24%)</title><rect x="203.4" y="101" width="61.8" height="15.0" fill="rgb(240,32,10)" rx="2" ry="2" />
<text  x="206.37" y="111.5" >syscal..</text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.08%)</title><rect x="202.4" y="85" width="1.0" height="15.0" fill="rgb(206,48,41)" rx="2" ry="2" />
<text  x="205.38" y="95.5" ></text>
</g>
<g >
<title>runtime.notewakeup (64 samples, 2.68%)</title><rect x="769.6" y="277" width="31.7" height="15.0" fill="rgb(228,4,49)" rx="2" ry="2" />
<text  x="772.63" y="287.5" >ru..</text>
</g>
<g >
<title>runtime.nilinterequal (1 samples, 0.04%)</title><rect x="270.6" y="261" width="0.5" height="15.0" fill="rgb(207,128,7)" rx="2" ry="2" />
<text  x="273.63" y="271.5" ></text>
</g>
<g >
<title>runtime.notesleep (256 samples, 10.73%)</title><rect x="454.6" y="293" width="126.6" height="15.0" fill="rgb(208,158,21)" rx="2" ry="2" />
<text  x="457.60" y="303.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="189.0" y="277" width="0.5" height="15.0" fill="rgb(229,172,41)" rx="2" ry="2" />
<text  x="192.03" y="287.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.08%)</title><rect x="267.2" y="197" width="1.0" height="15.0" fill="rgb(216,222,41)" rx="2" ry="2" />
<text  x="270.17" y="207.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).freeResponse (2 samples, 0.08%)</title><rect x="34.2" y="341" width="1.0" height="15.0" fill="rgb(242,4,33)" rx="2" ry="2" />
<text  x="37.23" y="351.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (18 samples, 0.75%)</title><rect x="256.3" y="37" width="8.9" height="15.0" fill="rgb(228,27,23)" rx="2" ry="2" />
<text  x="259.29" y="47.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeValue (11 samples, 0.46%)</title><rect x="265.2" y="245" width="5.4" height="15.0" fill="rgb(251,158,34)" rx="2" ry="2" />
<text  x="268.19" y="255.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).getRequest (2 samples, 0.08%)</title><rect x="200.9" y="293" width="1.0" height="15.0" fill="rgb(207,142,3)" rx="2" ry="2" />
<text  x="203.90" y="303.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).recvMessage (128 samples, 5.36%)</title><rect x="201.9" y="229" width="63.3" height="15.0" fill="rgb(242,160,42)" rx="2" ry="2" />
<text  x="204.89" y="239.5" >encodi..</text>
</g>
<g >
<title>runtime.gentraceback (9 samples, 0.38%)</title><rect x="192.0" y="277" width="4.4" height="15.0" fill="rgb(224,81,20)" rx="2" ry="2" />
<text  x="194.99" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait_trampoline (1 samples, 0.04%)</title><rect x="275.6" y="357" width="0.5" height="15.0" fill="rgb(233,8,26)" rx="2" ry="2" />
<text  x="278.57" y="367.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.04%)</title><rect x="198.4" y="325" width="0.5" height="15.0" fill="rgb(212,25,22)" rx="2" ry="2" />
<text  x="201.42" y="335.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.04%)</title><rect x="270.1" y="229" width="0.5" height="15.0" fill="rgb(221,54,12)" rx="2" ry="2" />
<text  x="273.13" y="239.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (4 samples, 0.17%)</title><rect x="274.1" y="373" width="2.0" height="15.0" fill="rgb(206,220,24)" rx="2" ry="2" />
<text  x="277.09" y="383.5" ></text>
</g>
<g >
<title>runtime.semawakeup (139 samples, 5.83%)</title><rect x="987.2" y="277" width="68.8" height="15.0" fill="rgb(245,37,17)" rx="2" ry="2" />
<text  x="990.23" y="287.5" >runtime..</text>
</g>
<g >
<title>encoding/gob.decAlloc (1 samples, 0.04%)</title><rect x="269.1" y="229" width="0.5" height="15.0" fill="rgb(212,150,10)" rx="2" ry="2" />
<text  x="272.15" y="239.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).Decode (139 samples, 5.83%)</title><rect x="201.9" y="277" width="68.7" height="15.0" fill="rgb(220,41,0)" rx="2" ry="2" />
<text  x="204.89" y="287.5" >encodin..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="272.1" y="277" width="0.5" height="15.0" fill="rgb(235,152,18)" rx="2" ry="2" />
<text  x="275.11" y="287.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.04%)</title><rect x="277.6" y="309" width="0.4" height="15.0" fill="rgb(251,92,41)" rx="2" ry="2" />
<text  x="280.55" y="319.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.04%)</title><rect x="189.5" y="261" width="0.5" height="15.0" fill="rgb(205,2,43)" rx="2" ry="2" />
<text  x="192.52" y="271.5" ></text>
</g>
<g >
<title>runtime.notetsleep (176 samples, 7.38%)</title><rect x="849.3" y="325" width="87.0" height="15.0" fill="rgb(227,87,21)" rx="2" ry="2" />
<text  x="852.25" y="335.5" >runtime.no..</text>
</g>
<g >
<title>reflect.unsafe_New (1 samples, 0.04%)</title><rect x="272.1" y="293" width="0.5" height="15.0" fill="rgb(209,140,13)" rx="2" ry="2" />
<text  x="275.11" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="168.3" y="197" width="0.5" height="15.0" fill="rgb(244,144,31)" rx="2" ry="2" />
<text  x="171.26" y="207.5" ></text>
</g>
<g >
<title>syscall.Write (299 samples, 12.53%)</title><rect x="38.7" y="261" width="147.9" height="15.0" fill="rgb(207,69,21)" rx="2" ry="2" />
<text  x="41.68" y="271.5" >syscall.Write</text>
</g>
<g >
<title>runtime.pthread_cond_signal (174 samples, 7.29%)</title><rect x="1102.5" y="245" width="86.0" height="15.0" fill="rgb(239,134,19)" rx="2" ry="2" />
<text  x="1105.46" y="255.5" >runtime.pt..</text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeValue (1 samples, 0.04%)</title><rect x="271.1" y="261" width="0.5" height="15.0" fill="rgb(218,199,14)" rx="2" ry="2" />
<text  x="274.12" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (132 samples, 5.53%)</title><rect x="987.2" y="261" width="65.3" height="15.0" fill="rgb(226,191,3)" rx="2" ry="2" />
<text  x="990.23" y="271.5" >runtime..</text>
</g>
<g >
<title>runtime.adjustdefers (1 samples, 0.04%)</title><rect x="191.5" y="277" width="0.5" height="15.0" fill="rgb(230,92,34)" rx="2" ry="2" />
<text  x="194.50" y="287.5" ></text>
</g>
<g >
<title>encoding/gob.validUserType (1 samples, 0.04%)</title><rect x="271.1" y="229" width="0.5" height="15.0" fill="rgb(205,122,51)" rx="2" ry="2" />
<text  x="274.12" y="239.5" ></text>
</g>
<g >
<title>runtime.pcvalue (2 samples, 0.08%)</title><rect x="195.5" y="245" width="0.9" height="15.0" fill="rgb(208,115,52)" rx="2" ry="2" />
<text  x="198.46" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (321 samples, 13.45%)</title><rect x="610.9" y="261" width="158.7" height="15.0" fill="rgb(240,195,26)" rx="2" ry="2" />
<text  x="613.88" y="271.5" >runtime.pthread_cond..</text>
</g>
<g >
<title>runtime.kevent_trampoline (1 samples, 0.04%)</title><rect x="275.1" y="357" width="0.5" height="15.0" fill="rgb(224,53,3)" rx="2" ry="2" />
<text  x="278.08" y="367.5" ></text>
</g>
<g >
<title>runtime.stackcacherefill (1 samples, 0.04%)</title><rect x="272.6" y="213" width="0.5" height="15.0" fill="rgb(248,66,49)" rx="2" ry="2" />
<text  x="275.61" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.04%)</title><rect x="272.1" y="213" width="0.5" height="15.0" fill="rgb(244,28,46)" rx="2" ry="2" />
<text  x="275.11" y="223.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).encode (4 samples, 0.17%)</title><rect x="186.6" y="293" width="1.9" height="15.0" fill="rgb(229,130,11)" rx="2" ry="2" />
<text  x="189.55" y="303.5" ></text>
</g>
<g >
<title>reflect.Value.Elem (1 samples, 0.04%)</title><rect x="269.1" y="213" width="0.5" height="15.0" fill="rgb(239,228,26)" rx="2" ry="2" />
<text  x="272.15" y="223.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (18 samples, 0.75%)</title><rect x="256.3" y="53" width="8.9" height="15.0" fill="rgb(229,25,41)" rx="2" ry="2" />
<text  x="259.29" y="63.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.04%)</title><rect x="196.4" y="293" width="0.5" height="15.0" fill="rgb(249,6,54)" rx="2" ry="2" />
<text  x="199.45" y="303.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.04%)</title><rect x="268.2" y="213" width="0.5" height="15.0" fill="rgb(229,205,51)" rx="2" ry="2" />
<text  x="271.16" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="197.9" y="309" width="0.5" height="15.0" fill="rgb(230,73,41)" rx="2" ry="2" />
<text  x="200.93" y="319.5" ></text>
</g>
<g >
<title>runtime.netpoll (31 samples, 1.30%)</title><rect x="592.1" y="309" width="15.3" height="15.0" fill="rgb(250,131,5)" rx="2" ry="2" />
<text  x="595.09" y="319.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (3 samples, 0.13%)</title><rect x="194.0" y="229" width="1.5" height="15.0" fill="rgb(235,85,51)" rx="2" ry="2" />
<text  x="196.97" y="239.5" ></text>
</g>
<g >
<title>runtime.findrunnable (378 samples, 15.84%)</title><rect x="582.7" y="325" width="186.9" height="15.0" fill="rgb(243,192,1)" rx="2" ry="2" />
<text  x="585.69" y="335.5" >runtime.findrunnable</text>
</g>
<g >
<title>io.ReadAtLeast (128 samples, 5.36%)</title><rect x="201.9" y="181" width="63.3" height="15.0" fill="rgb(238,50,32)" rx="2" ry="2" />
<text  x="204.89" y="191.5" >io.Rea..</text>
</g>
<g >
<title>runtime.resetspinning (64 samples, 2.68%)</title><rect x="769.6" y="325" width="31.7" height="15.0" fill="rgb(230,18,4)" rx="2" ry="2" />
<text  x="772.63" y="335.5" >ru..</text>
</g>
<g >
<title>runtime.startm (139 samples, 5.83%)</title><rect x="987.2" y="309" width="68.8" height="15.0" fill="rgb(237,86,11)" rx="2" ry="2" />
<text  x="990.23" y="319.5" >runtime..</text>
</g>
<g >
<title>encoding/gob.validUserType (1 samples, 0.04%)</title><rect x="189.5" y="293" width="0.5" height="15.0" fill="rgb(208,156,25)" rx="2" ry="2" />
<text  x="192.52" y="303.5" ></text>
</g>
<g >
<title>net/rpc.(*gobServerCodec).WriteResponse (315 samples, 13.20%)</title><rect x="35.2" y="341" width="155.8" height="15.0" fill="rgb(215,228,17)" rx="2" ry="2" />
<text  x="38.22" y="351.5" >net/rpc.(*gobServerC..</text>
</g>
<g >
<title>reflect.unsafe_New (2 samples, 0.08%)</title><rect x="197.4" y="325" width="1.0" height="15.0" fill="rgb(208,171,50)" rx="2" ry="2" />
<text  x="200.44" y="335.5" ></text>
</g>
<g >
<title>runtime.kevent (185 samples, 7.75%)</title><rect x="358.2" y="293" width="91.5" height="15.0" fill="rgb(229,221,1)" rx="2" ry="2" />
<text  x="361.16" y="303.5" >runtime.ke..</text>
</g>
<g >
<title>syscall.syscall (125 samples, 5.24%)</title><rect x="203.4" y="69" width="61.8" height="15.0" fill="rgb(207,5,45)" rx="2" ry="2" />
<text  x="206.37" y="79.5" >syscal..</text>
</g>
<g >
<title>sync.(*Mutex).Lock (1 samples, 0.04%)</title><rect x="34.7" y="325" width="0.5" height="15.0" fill="rgb(239,46,30)" rx="2" ry="2" />
<text  x="37.73" y="335.5" ></text>
</g>
<g >
<title>reflect.funcLayout (13 samples, 0.54%)</title><rect x="191.0" y="325" width="6.4" height="15.0" fill="rgb(228,207,51)" rx="2" ry="2" />
<text  x="194.01" y="335.5" ></text>
</g>
<g >
<title>runtime.netpoll (259 samples, 10.85%)</title><rect x="322.1" y="309" width="128.1" height="15.0" fill="rgb(230,54,52)" rx="2" ry="2" />
<text  x="325.06" y="319.5" >runtime.netpoll</text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.04%)</title><rect x="188.5" y="277" width="0.5" height="15.0" fill="rgb(245,169,37)" rx="2" ry="2" />
<text  x="191.53" y="287.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (93 samples, 3.90%)</title><rect x="1056.0" y="341" width="46.0" height="15.0" fill="rgb(211,44,1)" rx="2" ry="2" />
<text  x="1058.98" y="351.5" >runt..</text>
</g>
<g >
<title>runtime._System (2 samples, 0.08%)</title><rect x="273.1" y="373" width="1.0" height="15.0" fill="rgb(232,186,32)" rx="2" ry="2" />
<text  x="276.10" y="383.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).getDecEnginePtr (1 samples, 0.04%)</title><rect x="268.7" y="229" width="0.4" height="15.0" fill="rgb(243,174,53)" rx="2" ry="2" />
<text  x="271.65" y="239.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (103 samples, 4.32%)</title><rect x="884.9" y="309" width="50.9" height="15.0" fill="rgb(233,152,14)" rx="2" ry="2" />
<text  x="887.86" y="319.5" >runti..</text>
</g>
<g >
<title>runtime.semasleep (321 samples, 13.45%)</title><rect x="610.9" y="277" width="158.7" height="15.0" fill="rgb(253,120,41)" rx="2" ry="2" />
<text  x="613.88" y="287.5" >runtime.semasleep</text>
</g>
<g >
<title>encoding/gob.(*Encoder).encodeStruct (3 samples, 0.13%)</title><rect x="186.6" y="277" width="1.4" height="15.0" fill="rgb(248,105,1)" rx="2" ry="2" />
<text  x="189.55" y="287.5" ></text>
</g>
<g >
<title>encoding/gob.(*decoderState).decodeUint (1 samples, 0.04%)</title><rect x="265.7" y="213" width="0.5" height="15.0" fill="rgb(247,103,5)" rx="2" ry="2" />
<text  x="268.68" y="223.5" ></text>
</g>
<g >
<title>runtime.releasep (1 samples, 0.04%)</title><rect x="168.3" y="165" width="0.5" height="15.0" fill="rgb(216,186,35)" rx="2" ry="2" />
<text  x="171.26" y="175.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).encodeStruct (1 samples, 0.04%)</title><rect x="186.6" y="245" width="0.4" height="15.0" fill="rgb(221,188,7)" rx="2" ry="2" />
<text  x="189.55" y="255.5" ></text>
</g>
<g >
<title>encoding/gob.validUserType (1 samples, 0.04%)</title><rect x="269.6" y="213" width="0.5" height="15.0" fill="rgb(215,213,44)" rx="2" ry="2" />
<text  x="272.64" y="223.5" ></text>
</g>
<g >
<title>runtime.gfget (1 samples, 0.04%)</title><rect x="272.6" y="261" width="0.5" height="15.0" fill="rgb(252,171,14)" rx="2" ry="2" />
<text  x="275.61" y="271.5" ></text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.08%)</title><rect x="198.9" y="341" width="1.0" height="15.0" fill="rgb(224,186,18)" rx="2" ry="2" />
<text  x="201.92" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.08%)</title><rect x="1099.0" y="277" width="1.0" height="15.0" fill="rgb(247,104,29)" rx="2" ry="2" />
<text  x="1102.00" y="287.5" ></text>
</g>
<g >
<title>reflect.Value.Call (16 samples, 0.67%)</title><rect x="191.0" y="357" width="7.9" height="15.0" fill="rgb(212,38,35)" rx="2" ry="2" />
<text  x="194.01" y="367.5" ></text>
</g>
<g >
<title>net.(*conn).Write (303 samples, 12.70%)</title><rect x="36.7" y="309" width="149.9" height="15.0" fill="rgb(239,105,23)" rx="2" ry="2" />
<text  x="39.71" y="319.5" >net.(*conn).Write</text>
</g>
<g >
<title>net/rpc.(*Server).readRequest (146 samples, 6.12%)</title><rect x="200.4" y="325" width="72.2" height="15.0" fill="rgb(218,156,32)" rx="2" ry="2" />
<text  x="203.40" y="335.5" >net/rpc...</text>
</g>
<g >
<title>runtime.newproc.func1 (176 samples, 7.38%)</title><rect x="1102.0" y="341" width="87.0" height="15.0" fill="rgb(224,18,48)" rx="2" ry="2" />
<text  x="1104.97" y="351.5" >runtime.ne..</text>
</g>
<g >
<title>runtime.lock (1 samples, 0.04%)</title><rect x="1102.0" y="277" width="0.5" height="15.0" fill="rgb(249,136,18)" rx="2" ry="2" />
<text  x="1104.97" y="287.5" ></text>
</g>
<g >
<title>runtime.efaceeq (1 samples, 0.04%)</title><rect x="189.5" y="229" width="0.5" height="15.0" fill="rgb(232,86,15)" rx="2" ry="2" />
<text  x="192.52" y="239.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (2 samples, 0.08%)</title><rect x="195.5" y="261" width="0.9" height="15.0" fill="rgb(244,109,28)" rx="2" ry="2" />
<text  x="198.46" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="198.4" y="309" width="0.5" height="15.0" fill="rgb(249,229,53)" rx="2" ry="2" />
<text  x="201.42" y="319.5" ></text>
</g>
<g >
<title>runtime.nanotime (76 samples, 3.19%)</title><rect x="284.5" y="309" width="37.6" height="15.0" fill="rgb(254,41,12)" rx="2" ry="2" />
<text  x="287.48" y="319.5" >run..</text>
</g>
<g >
<title>runtime.mstart1 (376 samples, 15.76%)</title><rect x="801.3" y="357" width="185.9" height="15.0" fill="rgb(239,166,14)" rx="2" ry="2" />
<text  x="804.28" y="367.5" >runtime.mstart1</text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.04%)</title><rect x="276.1" y="309" width="0.5" height="15.0" fill="rgb(246,126,37)" rx="2" ry="2" />
<text  x="279.07" y="319.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.04%)</title><rect x="268.2" y="197" width="0.5" height="15.0" fill="rgb(209,11,20)" rx="2" ry="2" />
<text  x="271.16" y="207.5" ></text>
</g>
<g >
<title>runtime.goexit1 (2 samples, 0.08%)</title><rect x="276.6" y="373" width="1.0" height="15.0" fill="rgb(212,23,31)" rx="2" ry="2" />
<text  x="279.56" y="383.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="272.1" y="181" width="0.5" height="15.0" fill="rgb(214,198,17)" rx="2" ry="2" />
<text  x="275.11" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (93 samples, 3.90%)</title><rect x="1056.0" y="309" width="46.0" height="15.0" fill="rgb(241,52,7)" rx="2" ry="2" />
<text  x="1058.98" y="319.5" >runt..</text>
</g>
<g >
<title>encoding/gob.(*Encoder).writeMessage (1 samples, 0.04%)</title><rect x="189.0" y="293" width="0.5" height="15.0" fill="rgb(219,64,37)" rx="2" ry="2" />
<text  x="192.03" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (256 samples, 10.73%)</title><rect x="454.6" y="261" width="126.6" height="15.0" fill="rgb(237,100,44)" rx="2" ry="2" />
<text  x="457.60" y="271.5" >runtime.pthread..</text>
</g>
<g >
<title>runtime.osyield (3 samples, 0.13%)</title><rect x="281.5" y="293" width="1.5" height="15.0" fill="rgb(249,159,34)" rx="2" ry="2" />
<text  x="284.51" y="303.5" ></text>
</g>
<g >
<title>runtime.stopm (258 samples, 10.81%)</title><rect x="453.6" y="309" width="127.6" height="15.0" fill="rgb(216,90,41)" rx="2" ry="2" />
<text  x="456.61" y="319.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.freedefer (3 samples, 0.13%)</title><rect x="37.2" y="245" width="1.5" height="15.0" fill="rgb(219,148,24)" rx="2" ry="2" />
<text  x="40.20" y="255.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.04%)</title><rect x="277.6" y="341" width="0.4" height="15.0" fill="rgb(211,126,2)" rx="2" ry="2" />
<text  x="280.55" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.04%)</title><rect x="197.9" y="245" width="0.5" height="15.0" fill="rgb(246,111,34)" rx="2" ry="2" />
<text  x="200.93" y="255.5" ></text>
</g>
<g >
<title>reflect.Value.call (16 samples, 0.67%)</title><rect x="191.0" y="341" width="7.9" height="15.0" fill="rgb(216,171,37)" rx="2" ry="2" />
<text  x="194.01" y="351.5" ></text>
</g>
<g >
<title>runtime.newproc1 (176 samples, 7.38%)</title><rect x="1102.0" y="325" width="87.0" height="15.0" fill="rgb(221,155,50)" rx="2" ry="2" />
<text  x="1104.97" y="335.5" >runtime.ne..</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (7 samples, 0.29%)</title><rect x="1052.5" y="261" width="3.5" height="15.0" fill="rgb(237,207,47)" rx="2" ry="2" />
<text  x="1055.51" y="271.5" ></text>
</g>
<g >
<title>runtime.nilinterequal (1 samples, 0.04%)</title><rect x="189.5" y="245" width="0.5" height="15.0" fill="rgb(212,225,49)" rx="2" ry="2" />
<text  x="192.52" y="255.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.04%)</title><rect x="190.0" y="277" width="0.5" height="15.0" fill="rgb(244,65,12)" rx="2" ry="2" />
<text  x="193.02" y="287.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (139 samples, 5.83%)</title><rect x="987.2" y="341" width="68.8" height="15.0" fill="rgb(208,65,33)" rx="2" ry="2" />
<text  x="990.23" y="351.5" >runtime..</text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (93 samples, 3.90%)</title><rect x="1056.0" y="325" width="46.0" height="15.0" fill="rgb(220,18,45)" rx="2" ry="2" />
<text  x="1058.98" y="335.5" >runt..</text>
</g>
<g >
<title>net.(*netFD).Write (303 samples, 12.70%)</title><rect x="36.7" y="293" width="149.9" height="15.0" fill="rgb(210,150,28)" rx="2" ry="2" />
<text  x="39.71" y="303.5" >net.(*netFD).Write</text>
</g>
<g >
<title>runtime.nanotime (93 samples, 3.90%)</title><rect x="803.3" y="325" width="46.0" height="15.0" fill="rgb(205,215,37)" rx="2" ry="2" />
<text  x="806.26" y="335.5" >runt..</text>
</g>
<g >
<title>runtime.semawakeup (175 samples, 7.33%)</title><rect x="1102.5" y="261" width="86.5" height="15.0" fill="rgb(235,114,52)" rx="2" ry="2" />
<text  x="1105.46" y="271.5" >runtime.se..</text>
</g>
<g >
<title>reflect.Value.FieldByIndex (2 samples, 0.08%)</title><rect x="187.0" y="261" width="1.0" height="15.0" fill="rgb(254,67,0)" rx="2" ry="2" />
<text  x="190.05" y="271.5" ></text>
</g>
<g >
<title>runtime.kevent (21 samples, 0.88%)</title><rect x="597.0" y="293" width="10.4" height="15.0" fill="rgb(250,91,48)" rx="2" ry="2" />
<text  x="600.03" y="303.5" ></text>
</g>
<g >
<title>runtime.runqsteal (5 samples, 0.21%)</title><rect x="607.4" y="309" width="2.5" height="15.0" fill="rgb(228,224,19)" rx="2" ry="2" />
<text  x="610.42" y="319.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="884.9" y="293" width="0.5" height="15.0" fill="rgb(237,112,32)" rx="2" ry="2" />
<text  x="887.86" y="303.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.08%)</title><rect x="198.9" y="357" width="1.0" height="15.0" fill="rgb(208,190,42)" rx="2" ry="2" />
<text  x="201.92" y="367.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (304 samples, 12.74%)</title><rect x="36.2" y="325" width="150.4" height="15.0" fill="rgb(236,1,5)" rx="2" ry="2" />
<text  x="39.21" y="335.5" >bufio.(*Writer).Flush</text>
</g>
<g >
<title>encoding/gob.(*decoderState).decodeUint (1 samples, 0.04%)</title><rect x="266.2" y="181" width="0.5" height="15.0" fill="rgb(239,90,25)" rx="2" ry="2" />
<text  x="269.18" y="191.5" ></text>
</g>
<g >
<title>net/rpc.ServeConn (148 samples, 6.20%)</title><rect x="199.9" y="373" width="73.2" height="15.0" fill="rgb(219,32,15)" rx="2" ry="2" />
<text  x="202.91" y="383.5" >net/rpc...</text>
</g>
<g >
<title>runtime.runqsteal (6 samples, 0.25%)</title><rect x="450.6" y="309" width="3.0" height="15.0" fill="rgb(251,214,0)" rx="2" ry="2" />
<text  x="453.65" y="319.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="797.3" y="229" width="0.5" height="15.0" fill="rgb(218,73,12)" rx="2" ry="2" />
<text  x="800.33" y="239.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.04%)</title><rect x="277.6" y="325" width="0.4" height="15.0" fill="rgb(229,31,3)" rx="2" ry="2" />
<text  x="280.55" y="335.5" ></text>
</g>
<g >
<title>runtime.nanotime (15 samples, 0.63%)</title><rect x="584.7" y="309" width="7.4" height="15.0" fill="rgb(217,2,41)" rx="2" ry="2" />
<text  x="587.67" y="319.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (1 samples, 0.04%)</title><rect x="168.3" y="213" width="0.5" height="15.0" fill="rgb(251,80,33)" rx="2" ry="2" />
<text  x="171.26" y="223.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Unlock (1 samples, 0.04%)</title><rect x="190.5" y="293" width="0.5" height="15.0" fill="rgb(240,47,12)" rx="2" ry="2" />
<text  x="193.51" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (175 samples, 7.33%)</title><rect x="1102.5" y="277" width="86.5" height="15.0" fill="rgb(237,17,52)" rx="2" ry="2" />
<text  x="1105.46" y="287.5" >runtime.no..</text>
</g>
<g >
<title>runtime.semasleep (256 samples, 10.73%)</title><rect x="454.6" y="277" width="126.6" height="15.0" fill="rgb(208,15,45)" rx="2" ry="2" />
<text  x="457.60" y="287.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.mapaccess2_fast32 (1 samples, 0.04%)</title><rect x="268.7" y="213" width="0.4" height="15.0" fill="rgb(241,67,10)" rx="2" ry="2" />
<text  x="271.65" y="223.5" ></text>
</g>
<g >
<title>runtime.startm (64 samples, 2.68%)</title><rect x="769.6" y="293" width="31.7" height="15.0" fill="rgb(206,140,41)" rx="2" ry="2" />
<text  x="772.63" y="303.5" >ru..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.04%)</title><rect x="277.6" y="293" width="0.4" height="15.0" fill="rgb(241,117,27)" rx="2" ry="2" />
<text  x="280.55" y="303.5" ></text>
</g>
<g >
<title>encoding/gob.encStructTerminator (1 samples, 0.04%)</title><rect x="186.6" y="229" width="0.4" height="15.0" fill="rgb(232,60,16)" rx="2" ry="2" />
<text  x="189.55" y="239.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.04%)</title><rect x="197.9" y="213" width="0.5" height="15.0" fill="rgb(250,229,24)" rx="2" ry="2" />
<text  x="200.93" y="223.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="276.1" y="277" width="0.5" height="15.0" fill="rgb(214,65,29)" rx="2" ry="2" />
<text  x="279.07" y="287.5" ></text>
</g>
<g >
<title>runtime.deferreturn (4 samples, 0.17%)</title><rect x="36.7" y="261" width="2.0" height="15.0" fill="rgb(239,214,27)" rx="2" ry="2" />
<text  x="39.71" y="271.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).DecodeValue (1 samples, 0.04%)</title><rect x="271.1" y="277" width="0.5" height="15.0" fill="rgb(236,88,11)" rx="2" ry="2" />
<text  x="274.12" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.04%)</title><rect x="272.1" y="165" width="0.5" height="15.0" fill="rgb(205,53,19)" rx="2" ry="2" />
<text  x="275.11" y="175.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (2 samples, 0.08%)</title><rect x="283.5" y="277" width="1.0" height="15.0" fill="rgb(230,159,6)" rx="2" ry="2" />
<text  x="286.49" y="287.5" ></text>
</g>
<g >
<title>runtime.gcDrain (1 samples, 0.04%)</title><rect x="276.1" y="325" width="0.5" height="15.0" fill="rgb(211,135,25)" rx="2" ry="2" />
<text  x="279.07" y="335.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.04%)</title><rect x="276.1" y="293" width="0.5" height="15.0" fill="rgb(244,61,36)" rx="2" ry="2" />
<text  x="279.07" y="303.5" ></text>
</g>
<g >
<title>runtime.(*randomEnum).next (1 samples, 0.04%)</title><rect x="584.2" y="309" width="0.5" height="15.0" fill="rgb(209,4,16)" rx="2" ry="2" />
<text  x="587.17" y="319.5" ></text>
</g>
<g >
<title>reflect.(*rtype).ptrTo (1 samples, 0.04%)</title><rect x="271.6" y="293" width="0.5" height="15.0" fill="rgb(249,125,43)" rx="2" ry="2" />
<text  x="274.62" y="303.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.08%)</title><rect x="202.4" y="101" width="1.0" height="15.0" fill="rgb(212,131,29)" rx="2" ry="2" />
<text  x="205.38" y="111.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).EncodeValue (9 samples, 0.38%)</title><rect x="186.6" y="309" width="4.4" height="15.0" fill="rgb(228,112,2)" rx="2" ry="2" />
<text  x="189.55" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.04%)</title><rect x="197.9" y="293" width="0.5" height="15.0" fill="rgb(205,131,39)" rx="2" ry="2" />
<text  x="200.93" y="303.5" ></text>
</g>
<g >
<title>runtime.syscall (2 samples, 0.08%)</title><rect x="1189.0" y="373" width="1.0" height="15.0" fill="rgb(251,201,15)" rx="2" ry="2" />
<text  x="1192.01" y="383.5" ></text>
</g>
<g >
<title>runtime.step (2 samples, 0.08%)</title><rect x="194.5" y="197" width="1.0" height="15.0" fill="rgb(231,173,5)" rx="2" ry="2" />
<text  x="197.47" y="207.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1 samples, 0.04%)</title><rect x="168.3" y="181" width="0.5" height="15.0" fill="rgb(230,175,5)" rx="2" ry="2" />
<text  x="171.26" y="191.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.04%)</title><rect x="188.0" y="261" width="0.5" height="15.0" fill="rgb(226,164,53)" rx="2" ry="2" />
<text  x="191.04" y="271.5" ></text>
</g>
<g >
<title>encoding/gob.(*decBuffer).ReadByte (1 samples, 0.04%)</title><rect x="265.7" y="197" width="0.5" height="15.0" fill="rgb(253,173,19)" rx="2" ry="2" />
<text  x="268.68" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (87 samples, 3.65%)</title><rect x="1056.0" y="277" width="43.0" height="15.0" fill="rgb(253,76,38)" rx="2" ry="2" />
<text  x="1058.98" y="287.5" >runt..</text>
</g>
<g >
<title>runtime.wakep (64 samples, 2.68%)</title><rect x="769.6" y="309" width="31.7" height="15.0" fill="rgb(231,142,44)" rx="2" ry="2" />
<text  x="772.63" y="319.5" >ru..</text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.04%)</title><rect x="272.1" y="197" width="0.5" height="15.0" fill="rgb(221,36,29)" rx="2" ry="2" />
<text  x="275.11" y="207.5" ></text>
</g>
<g >
<title>runtime.goexit0 (615 samples, 25.78%)</title><rect x="278.0" y="357" width="304.2" height="15.0" fill="rgb(225,27,29)" rx="2" ry="2" />
<text  x="281.05" y="367.5" >runtime.goexit0</text>
</g>
<g >
<title>sync.(*Map).Load (2 samples, 0.08%)</title><rect x="196.4" y="309" width="1.0" height="15.0" fill="rgb(233,186,11)" rx="2" ry="2" />
<text  x="199.45" y="319.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="270.6" y="293" width="0.5" height="15.0" fill="rgb(253,176,12)" rx="2" ry="2" />
<text  x="273.63" y="303.5" ></text>
</g>
<g >
<title>runtime.runqgrab (6 samples, 0.25%)</title><rect x="450.6" y="293" width="3.0" height="15.0" fill="rgb(243,64,41)" rx="2" ry="2" />
<text  x="453.65" y="303.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (127 samples, 5.32%)</title><rect x="202.4" y="133" width="62.8" height="15.0" fill="rgb(235,84,40)" rx="2" ry="2" />
<text  x="205.38" y="143.5" >net.(*..</text>
</g>
<g >
<title>reflect.Value.Field (1 samples, 0.04%)</title><rect x="187.5" y="245" width="0.5" height="15.0" fill="rgb(209,24,3)" rx="2" ry="2" />
<text  x="190.54" y="255.5" ></text>
</g>
<g >
<title>runtime.schedule (613 samples, 25.69%)</title><rect x="279.0" y="341" width="303.2" height="15.0" fill="rgb(228,58,49)" rx="2" ry="2" />
<text  x="282.04" y="351.5" >runtime.schedule</text>
</g>
<g >
<title>encoding/gob.(*Decoder).DecodeValue (139 samples, 5.83%)</title><rect x="201.9" y="261" width="68.7" height="15.0" fill="rgb(253,33,37)" rx="2" ry="2" />
<text  x="204.89" y="271.5" >encodin..</text>
</g>
<g >
<title>net/rpc.(*gobServerCodec).ReadRequestHeader (139 samples, 5.83%)</title><rect x="201.9" y="293" width="68.7" height="15.0" fill="rgb(233,139,47)" rx="2" ry="2" />
<text  x="204.89" y="303.5" >net/rpc..</text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="271.1" y="213" width="0.5" height="15.0" fill="rgb(222,65,17)" rx="2" ry="2" />
<text  x="274.12" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.08%)</title><rect x="581.2" y="277" width="1.0" height="15.0" fill="rgb(230,107,51)" rx="2" ry="2" />
<text  x="584.21" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (103 samples, 4.32%)</title><rect x="936.3" y="325" width="50.9" height="15.0" fill="rgb(227,102,48)" rx="2" ry="2" />
<text  x="939.30" y="335.5" >runti..</text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeTypeSequence (128 samples, 5.36%)</title><rect x="201.9" y="245" width="63.3" height="15.0" fill="rgb(213,186,32)" rx="2" ry="2" />
<text  x="204.89" y="255.5" >encodi..</text>
</g>
<g >
<title>runtime.mput (1 samples, 0.04%)</title><rect x="454.1" y="293" width="0.5" height="15.0" fill="rgb(205,167,29)" rx="2" ry="2" />
<text  x="457.11" y="303.5" ></text>
</g>
<g >
<title>runtime.stackalloc (1 samples, 0.04%)</title><rect x="272.6" y="229" width="0.5" height="15.0" fill="rgb(254,175,40)" rx="2" ry="2" />
<text  x="275.61" y="239.5" ></text>
</g>
<g >
<title>encoding/gob.(*decoderState).getLength (1 samples, 0.04%)</title><rect x="266.2" y="197" width="0.5" height="15.0" fill="rgb(247,136,13)" rx="2" ry="2" />
<text  x="269.18" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.04%)</title><rect x="272.1" y="229" width="0.5" height="15.0" fill="rgb(254,45,9)" rx="2" ry="2" />
<text  x="275.11" y="239.5" ></text>
</g>
<g >
<title>reflect.name.isExported (1 samples, 0.04%)</title><rect x="187.5" y="229" width="0.5" height="15.0" fill="rgb(206,122,18)" rx="2" ry="2" />
<text  x="190.54" y="239.5" ></text>
</g>
<g >
<title>runtime.runqempty (1 samples, 0.04%)</title><rect x="450.2" y="309" width="0.4" height="15.0" fill="rgb(240,25,0)" rx="2" ry="2" />
<text  x="453.15" y="319.5" ></text>
</g>
<g >
<title>net/rpc.(*Server).ServeConn (148 samples, 6.20%)</title><rect x="199.9" y="357" width="73.2" height="15.0" fill="rgb(239,59,9)" rx="2" ry="2" />
<text  x="202.91" y="367.5" >net/rpc...</text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.04%)</title><rect x="197.9" y="261" width="0.5" height="15.0" fill="rgb(233,141,46)" rx="2" ry="2" />
<text  x="200.93" y="271.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).decodeStruct (7 samples, 0.29%)</title><rect x="265.2" y="229" width="3.5" height="15.0" fill="rgb(214,87,51)" rx="2" ry="2" />
<text  x="268.19" y="239.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.04%)</title><rect x="188.0" y="277" width="0.5" height="15.0" fill="rgb(243,4,16)" rx="2" ry="2" />
<text  x="191.04" y="287.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.08%)</title><rect x="802.3" y="325" width="1.0" height="15.0" fill="rgb(225,18,11)" rx="2" ry="2" />
<text  x="805.27" y="335.5" ></text>
</g>
<g >
<title>syscall.read (125 samples, 5.24%)</title><rect x="203.4" y="85" width="61.8" height="15.0" fill="rgb(246,183,12)" rx="2" ry="2" />
<text  x="206.37" y="95.5" >syscal..</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (7 samples, 0.29%)</title><rect x="797.8" y="245" width="3.5" height="15.0" fill="rgb(207,134,0)" rx="2" ry="2" />
<text  x="800.82" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (321 samples, 13.45%)</title><rect x="610.9" y="293" width="158.7" height="15.0" fill="rgb(221,97,27)" rx="2" ry="2" />
<text  x="613.88" y="303.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="186.1" y="213" width="0.5" height="15.0" fill="rgb(250,171,13)" rx="2" ry="2" />
<text  x="189.06" y="223.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (1 samples, 0.04%)</title><rect x="277.6" y="357" width="0.4" height="15.0" fill="rgb(252,47,51)" rx="2" ry="2" />
<text  x="280.55" y="367.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.08%)</title><rect x="581.2" y="261" width="1.0" height="15.0" fill="rgb(229,54,44)" rx="2" ry="2" />
<text  x="584.21" y="271.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="198.4" y="293" width="0.5" height="15.0" fill="rgb(228,76,46)" rx="2" ry="2" />
<text  x="201.42" y="303.5" ></text>
</g>
<g >
<title>runtime.pageIndexOf (1 samples, 0.04%)</title><rect x="272.1" y="133" width="0.5" height="15.0" fill="rgb(239,64,40)" rx="2" ry="2" />
<text  x="275.11" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1188.5" y="245" width="0.5" height="15.0" fill="rgb(205,6,7)" rx="2" ry="2" />
<text  x="1191.52" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (3 samples, 0.13%)</title><rect x="281.5" y="277" width="1.5" height="15.0" fill="rgb(225,120,50)" rx="2" ry="2" />
<text  x="284.51" y="287.5" ></text>
</g>
<g >
<title>encoding/gob.decodeUintReader (128 samples, 5.36%)</title><rect x="201.9" y="213" width="63.3" height="15.0" fill="rgb(244,8,52)" rx="2" ry="2" />
<text  x="204.89" y="223.5" >encodi..</text>
</g>
<g >
<title>runtime.schedule (442 samples, 18.52%)</title><rect x="582.7" y="341" width="218.6" height="15.0" fill="rgb(213,98,12)" rx="2" ry="2" />
<text  x="585.69" y="351.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.08%)</title><rect x="283.5" y="293" width="1.0" height="15.0" fill="rgb(234,100,17)" rx="2" ry="2" />
<text  x="286.49" y="303.5" ></text>
</g>
<g >
<title>runtime.park_m (443 samples, 18.57%)</title><rect x="582.2" y="357" width="219.1" height="15.0" fill="rgb(238,150,45)" rx="2" ry="2" />
<text  x="585.20" y="367.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.startm (2 samples, 0.08%)</title><rect x="581.2" y="293" width="1.0" height="15.0" fill="rgb(234,124,45)" rx="2" ry="2" />
<text  x="584.21" y="303.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (1 samples, 0.04%)</title><rect x="272.6" y="293" width="0.5" height="15.0" fill="rgb(220,3,11)" rx="2" ry="2" />
<text  x="275.61" y="303.5" ></text>
</g>
<g >
<title>syscall.write (299 samples, 12.53%)</title><rect x="38.7" y="245" width="147.9" height="15.0" fill="rgb(239,47,31)" rx="2" ry="2" />
<text  x="41.68" y="255.5" >syscall.write</text>
</g>
<g >
<title>runtime.wakep (2 samples, 0.08%)</title><rect x="581.2" y="309" width="1.0" height="15.0" fill="rgb(207,187,52)" rx="2" ry="2" />
<text  x="584.21" y="319.5" ></text>
</g>
<g >
<title>syscall.syscall (299 samples, 12.53%)</title><rect x="38.7" y="229" width="147.9" height="15.0" fill="rgb(218,93,13)" rx="2" ry="2" />
<text  x="41.68" y="239.5" >syscall.syscall</text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.04%)</title><rect x="272.1" y="149" width="0.5" height="15.0" fill="rgb(219,207,24)" rx="2" ry="2" />
<text  x="275.11" y="159.5" ></text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.04%)</title><rect x="278.0" y="325" width="0.5" height="15.0" fill="rgb(212,188,18)" rx="2" ry="2" />
<text  x="281.05" y="335.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.04%)</title><rect x="190.0" y="293" width="0.5" height="15.0" fill="rgb(250,116,42)" rx="2" ry="2" />
<text  x="193.02" y="303.5" ></text>
</g>
<g >
<title>runtime.mstart (784 samples, 32.86%)</title><rect x="801.3" y="373" width="387.7" height="15.0" fill="rgb(218,221,45)" rx="2" ry="2" />
<text  x="804.28" y="383.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.tracebackdefers (1 samples, 0.04%)</title><rect x="191.5" y="261" width="0.5" height="15.0" fill="rgb(235,107,31)" rx="2" ry="2" />
<text  x="194.50" y="271.5" ></text>
</g>
<g >
<title>reflect.Value.SetString (1 samples, 0.04%)</title><rect x="266.7" y="197" width="0.5" height="15.0" fill="rgb(229,172,27)" rx="2" ry="2" />
<text  x="269.67" y="207.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.04%)</title><rect x="196.0" y="229" width="0.4" height="15.0" fill="rgb(218,29,49)" rx="2" ry="2" />
<text  x="198.95" y="239.5" ></text>
</g>
<g >
<title>runtime.adjustframe (7 samples, 0.29%)</title><rect x="192.0" y="261" width="3.5" height="15.0" fill="rgb(245,202,7)" rx="2" ry="2" />
<text  x="194.99" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (102 samples, 4.27%)</title><rect x="885.4" y="293" width="50.4" height="15.0" fill="rgb(250,223,15)" rx="2" ry="2" />
<text  x="888.36" y="303.5" >runti..</text>
</g>
<g >
<title>net/rpc.(*Server).sendResponse (317 samples, 13.29%)</title><rect x="34.2" y="357" width="156.8" height="15.0" fill="rgb(220,93,25)" rx="2" ry="2" />
<text  x="37.23" y="367.5" >net/rpc.(*Server).se..</text>
</g>
<g >
<title>runtime.efaceeq (1 samples, 0.04%)</title><rect x="270.6" y="245" width="0.5" height="15.0" fill="rgb(252,162,6)" rx="2" ry="2" />
<text  x="273.63" y="255.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (303 samples, 12.70%)</title><rect x="36.7" y="277" width="149.9" height="15.0" fill="rgb(248,129,43)" rx="2" ry="2" />
<text  x="39.71" y="287.5" >internal/poll.(*FD)..</text>
</g>
<g >
<title>runtime.handoffp (139 samples, 5.83%)</title><rect x="987.2" y="325" width="68.8" height="15.0" fill="rgb(223,172,27)" rx="2" ry="2" />
<text  x="990.23" y="335.5" >runtime..</text>
</g>
<g >
<title>runtime.stackpoolalloc (1 samples, 0.04%)</title><rect x="272.6" y="197" width="0.5" height="15.0" fill="rgb(208,84,52)" rx="2" ry="2" />
<text  x="275.61" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.04%)</title><rect x="272.1" y="261" width="0.5" height="15.0" fill="rgb(247,60,5)" rx="2" ry="2" />
<text  x="275.11" y="271.5" ></text>
</g>
<g >
<title>runtime.getArgInfoFast (1 samples, 0.04%)</title><rect x="191.5" y="245" width="0.5" height="15.0" fill="rgb(226,177,28)" rx="2" ry="2" />
<text  x="194.50" y="255.5" ></text>
</g>
<g >
<title>encoding/gob.(*Encoder).sendTypeDescriptor (1 samples, 0.04%)</title><rect x="188.5" y="293" width="0.5" height="15.0" fill="rgb(225,214,44)" rx="2" ry="2" />
<text  x="191.53" y="303.5" ></text>
</g>
<g >
<title>encoding/gob.(*Decoder).Decode (1 samples, 0.04%)</title><rect x="271.1" y="293" width="0.5" height="15.0" fill="rgb(236,135,6)" rx="2" ry="2" />
<text  x="274.12" y="303.5" ></text>
</g>
</g>
</svg>

