<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>github.com/valyala/fasthttp.(*workerPool).workerFunc (758 samples, 41.72%)</title><rect x="10.0" y="405" width="492.3" height="15.0" fill="rgb(214,178,29)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >github.com/valyala/fasthttp.(*workerPool).workerFunc</text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.06%)</title><rect x="308.7" y="245" width="0.7" height="15.0" fill="rgb(228,135,22)" rx="2" ry="2" />
<text  x="311.73" y="255.5" ></text>
</g>
<g >
<title>runtime.netpoll (338 samples, 18.60%)</title><rect x="589.9" y="357" width="219.5" height="15.0" fill="rgb(244,57,49)" rx="2" ry="2" />
<text  x="592.93" y="367.5" >runtime.netpoll</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).resetSkipNormalize (1 samples, 0.06%)</title><rect x="495.8" y="325" width="0.6" height="15.0" fill="rgb(224,52,29)" rx="2" ry="2" />
<text  x="498.77" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).peek (2 samples, 0.11%)</title><rect x="318.5" y="341" width="1.3" height="15.0" fill="rgb(211,36,35)" rx="2" ry="2" />
<text  x="321.48" y="351.5" ></text>
</g>
<g >
<title>syscall.syscall (251 samples, 13.81%)</title><rect x="324.3" y="213" width="163.0" height="15.0" fill="rgb(233,185,8)" rx="2" ry="2" />
<text  x="327.32" y="223.5" >syscall.syscall</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (2 samples, 0.11%)</title><rect x="305.5" y="245" width="1.3" height="15.0" fill="rgb(227,156,40)" rx="2" ry="2" />
<text  x="308.49" y="255.5" ></text>
</g>
<g >
<title>indexbytebody (2 samples, 0.11%)</title><rect x="493.8" y="261" width="1.3" height="15.0" fill="rgb(214,147,54)" rx="2" ry="2" />
<text  x="496.82" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (4 samples, 0.22%)</title><rect x="304.2" y="293" width="2.6" height="15.0" fill="rgb(235,173,25)" rx="2" ry="2" />
<text  x="307.19" y="303.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.06%)</title><rect x="508.8" y="373" width="0.6" height="15.0" fill="rgb(250,185,27)" rx="2" ry="2" />
<text  x="511.76" y="383.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (1 samples, 0.06%)</title><rect x="312.6" y="245" width="0.7" height="15.0" fill="rgb(224,105,17)" rx="2" ry="2" />
<text  x="315.63" y="255.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (88 samples, 4.84%)</title><rect x="997.8" y="357" width="57.1" height="15.0" fill="rgb(237,166,27)" rx="2" ry="2" />
<text  x="1000.77" y="367.5" >runtim..</text>
</g>
<g >
<title>runtime.deferreturn (3 samples, 0.17%)</title><rect x="321.1" y="245" width="1.9" height="15.0" fill="rgb(206,159,40)" rx="2" ry="2" />
<text  x="324.07" y="255.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.06%)</title><rect x="306.8" y="261" width="0.6" height="15.0" fill="rgb(212,37,25)" rx="2" ry="2" />
<text  x="309.79" y="271.5" ></text>
</g>
<g >
<title>time.Time.Equal (1 samples, 0.06%)</title><rect x="501.6" y="357" width="0.7" height="15.0" fill="rgb(221,91,50)" rx="2" ry="2" />
<text  x="504.61" y="367.5" ></text>
</g>
<g >
<title>runtime.retake (1 samples, 0.06%)</title><rect x="1054.9" y="373" width="0.7" height="15.0" fill="rgb(223,196,51)" rx="2" ry="2" />
<text  x="1057.92" y="383.5" ></text>
</g>
<g >
<title>net.uitoa (1 samples, 0.06%)</title><rect x="315.2" y="309" width="0.7" height="15.0" fill="rgb(210,101,22)" rx="2" ry="2" />
<text  x="318.23" y="319.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.06%)</title><rect x="497.7" y="325" width="0.7" height="15.0" fill="rgb(227,19,1)" rx="2" ry="2" />
<text  x="500.72" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.06%)</title><rect x="897.1" y="293" width="0.7" height="15.0" fill="rgb(252,115,12)" rx="2" ry="2" />
<text  x="900.11" y="303.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.06%)</title><rect x="498.4" y="229" width="0.6" height="15.0" fill="rgb(230,101,8)" rx="2" ry="2" />
<text  x="501.37" y="239.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (6 samples, 0.33%)</title><rect x="309.4" y="277" width="3.9" height="15.0" fill="rgb(237,10,5)" rx="2" ry="2" />
<text  x="312.38" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.parseUintBuf (1 samples, 0.06%)</title><rect x="495.1" y="277" width="0.7" height="15.0" fill="rgb(206,42,34)" rx="2" ry="2" />
<text  x="498.12" y="287.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.06%)</title><rect x="509.4" y="389" width="0.7" height="15.0" fill="rgb(244,18,31)" rx="2" ry="2" />
<text  x="512.41" y="399.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (447 samples, 24.60%)</title><rect x="11.3" y="373" width="290.3" height="15.0" fill="rgb(220,195,43)" rx="2" ry="2" />
<text  x="14.30" y="383.5" >bufio.(*Writer).Flush</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*workerPool).getCh.func1 (758 samples, 41.72%)</title><rect x="10.0" y="421" width="492.3" height="15.0" fill="rgb(251,73,29)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >github.com/valyala/fasthttp.(*workerPool).getCh.func1</text>
</g>
<g >
<title>runtime.notesleep (134 samples, 7.37%)</title><rect x="810.1" y="341" width="87.0" height="15.0" fill="rgb(213,26,48)" rx="2" ry="2" />
<text  x="813.09" y="351.5" >runtime.no..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenFASTHTTP.func1 (20 samples, 1.10%)</title><rect x="302.9" y="357" width="13.0" height="15.0" fill="rgb(207,94,47)" rx="2" ry="2" />
<text  x="305.89" y="367.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.releaseWriter (1 samples, 0.06%)</title><rect x="501.0" y="373" width="0.6" height="15.0" fill="rgb(234,120,33)" rx="2" ry="2" />
<text  x="503.96" y="383.5" ></text>
</g>
<g >
<title>syscall.write (446 samples, 24.55%)</title><rect x="11.9" y="293" width="289.7" height="15.0" fill="rgb(249,30,50)" rx="2" ry="2" />
<text  x="14.95" y="303.5" >syscall.write</text>
</g>
<g >
<title>runtime.semasleep (87 samples, 4.79%)</title><rect x="998.4" y="341" width="56.5" height="15.0" fill="rgb(207,103,9)" rx="2" ry="2" />
<text  x="1001.42" y="351.5" >runti..</text>
</g>
<g >
<title>bytes.IndexByte (2 samples, 0.11%)</title><rect x="493.8" y="277" width="1.3" height="15.0" fill="rgb(216,117,8)" rx="2" ry="2" />
<text  x="496.82" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.06%)</title><rect x="308.1" y="197" width="0.6" height="15.0" fill="rgb(230,118,23)" rx="2" ry="2" />
<text  x="311.08" y="207.5" ></text>
</g>
<g >
<title>runtime.runqempty (1 samples, 0.06%)</title><rect x="473.7" y="133" width="0.6" height="15.0" fill="rgb(246,23,51)" rx="2" ry="2" />
<text  x="476.69" y="143.5" ></text>
</g>
<g >
<title>runtime.netpollunblock (2 samples, 0.11%)</title><rect x="808.1" y="325" width="1.3" height="15.0" fill="rgb(215,86,10)" rx="2" ry="2" />
<text  x="811.14" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parse (13 samples, 0.72%)</title><rect x="487.3" y="325" width="8.5" height="15.0" fill="rgb(254,41,38)" rx="2" ry="2" />
<text  x="490.33" y="335.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.06%)</title><rect x="508.8" y="389" width="0.6" height="15.0" fill="rgb(237,195,18)" rx="2" ry="2" />
<text  x="511.76" y="399.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.06%)</title><rect x="507.5" y="357" width="0.6" height="15.0" fill="rgb(248,209,25)" rx="2" ry="2" />
<text  x="510.46" y="367.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.06%)</title><rect x="489.9" y="261" width="0.7" height="15.0" fill="rgb(249,209,49)" rx="2" ry="2" />
<text  x="492.92" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (3 samples, 0.17%)</title><rect x="310.7" y="261" width="1.9" height="15.0" fill="rgb(237,130,37)" rx="2" ry="2" />
<text  x="313.68" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.normalizePath (1 samples, 0.06%)</title><rect x="302.2" y="261" width="0.7" height="15.0" fill="rgb(223,67,18)" rx="2" ry="2" />
<text  x="305.24" y="271.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.06%)</title><rect x="498.4" y="245" width="0.6" height="15.0" fill="rgb(252,59,38)" rx="2" ry="2" />
<text  x="501.37" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.06%)</title><rect x="896.5" y="309" width="0.6" height="15.0" fill="rgb(209,67,3)" rx="2" ry="2" />
<text  x="899.46" y="319.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).tryRead (273 samples, 15.02%)</title><rect x="319.8" y="341" width="177.3" height="15.0" fill="rgb(227,176,47)" rx="2" ry="2" />
<text  x="322.77" y="351.5" >github.com/valyala/fast..</text>
</g>
<g >
<title>github.com/buaazp/fasthttprouter.(*Router).Handler (22 samples, 1.21%)</title><rect x="301.6" y="373" width="14.3" height="15.0" fill="rgb(211,144,0)" rx="2" ry="2" />
<text  x="304.59" y="383.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).Reset (1 samples, 0.06%)</title><rect x="304.2" y="277" width="0.6" height="15.0" fill="rgb(234,77,14)" rx="2" ry="2" />
<text  x="307.19" y="287.5" ></text>
</g>
<g >
<title>internal/bytealg.Equal (3 samples, 0.17%)</title><rect x="488.0" y="261" width="1.9" height="15.0" fill="rgb(205,144,8)" rx="2" ry="2" />
<text  x="490.97" y="271.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.06%)</title><rect x="486.7" y="149" width="0.6" height="15.0" fill="rgb(229,159,16)" rx="2" ry="2" />
<text  x="489.68" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (3 samples, 0.17%)</title><rect x="304.8" y="261" width="2.0" height="15.0" fill="rgb(212,215,46)" rx="2" ry="2" />
<text  x="307.84" y="271.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (258 samples, 14.20%)</title><rect x="319.8" y="325" width="167.5" height="15.0" fill="rgb(233,217,4)" rx="2" ry="2" />
<text  x="322.77" y="335.5" >bufio.(*Reader).Peek</text>
</g>
<g >
<title>runtime.exitsyscall (20 samples, 1.10%)</title><rect x="474.3" y="197" width="13.0" height="15.0" fill="rgb(212,171,3)" rx="2" ry="2" />
<text  x="477.34" y="207.5" ></text>
</g>
<g >
<title>reflect.Value.Call (2 samples, 0.11%)</title><rect x="309.4" y="245" width="1.3" height="15.0" fill="rgb(229,120,43)" rx="2" ry="2" />
<text  x="312.38" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (74 samples, 4.07%)</title><rect x="1140.0" y="341" width="48.1" height="15.0" fill="rgb(215,183,9)" rx="2" ry="2" />
<text  x="1142.99" y="351.5" >runt..</text>
</g>
<g >
<title>runtime.syscall (1 samples, 0.06%)</title><rect x="1189.4" y="421" width="0.6" height="15.0" fill="rgb(218,96,4)" rx="2" ry="2" />
<text  x="1192.35" y="431.5" ></text>
</g>
<g >
<title>syscall.Write (446 samples, 24.55%)</title><rect x="11.9" y="309" width="289.7" height="15.0" fill="rgb(210,189,12)" rx="2" ry="2" />
<text  x="14.95" y="319.5" >syscall.Write</text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.06%)</title><rect x="308.1" y="37" width="0.6" height="15.0" fill="rgb(236,179,2)" rx="2" ry="2" />
<text  x="311.08" y="47.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parseFirstLine (1 samples, 0.06%)</title><rect x="489.9" y="309" width="0.7" height="15.0" fill="rgb(211,208,38)" rx="2" ry="2" />
<text  x="492.92" y="319.5" ></text>
</g>
<g >
<title>runtime.freedefer (3 samples, 0.17%)</title><rect x="321.1" y="229" width="1.9" height="15.0" fill="rgb(212,7,32)" rx="2" ry="2" />
<text  x="324.07" y="239.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (3 samples, 0.17%)</title><rect x="472.4" y="165" width="1.9" height="15.0" fill="rgb(205,123,23)" rx="2" ry="2" />
<text  x="475.39" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.06%)</title><rect x="506.8" y="357" width="0.7" height="15.0" fill="rgb(237,94,38)" rx="2" ry="2" />
<text  x="509.81" y="367.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Server).serveConn (758 samples, 41.72%)</title><rect x="10.0" y="389" width="492.3" height="15.0" fill="rgb(240,173,1)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >github.com/valyala/fasthttp.(*Server).serveConn</text>
</g>
<g >
<title>runtime.copystack (1 samples, 0.06%)</title><rect x="498.4" y="149" width="0.6" height="15.0" fill="rgb(220,181,40)" rx="2" ry="2" />
<text  x="501.37" y="159.5" ></text>
</g>
<g >
<title>runtime.handoffp (3 samples, 0.17%)</title><rect x="472.4" y="149" width="1.9" height="15.0" fill="rgb(245,198,23)" rx="2" ry="2" />
<text  x="475.39" y="159.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.releaseReader (2 samples, 0.11%)</title><rect x="499.7" y="373" width="1.3" height="15.0" fill="rgb(241,19,7)" rx="2" ry="2" />
<text  x="502.66" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.acquireWriter (2 samples, 0.11%)</title><rect x="498.4" y="373" width="1.3" height="15.0" fill="rgb(240,86,51)" rx="2" ry="2" />
<text  x="501.37" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.readBody (1 samples, 0.06%)</title><rect x="317.8" y="341" width="0.7" height="15.0" fill="rgb(233,141,14)" rx="2" ry="2" />
<text  x="320.83" y="351.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="498.4" y="325" width="0.6" height="15.0" fill="rgb(236,159,36)" rx="2" ry="2" />
<text  x="501.37" y="335.5" ></text>
</g>
<g >
<title>runtime.netpollready (2 samples, 0.11%)</title><rect x="808.1" y="341" width="1.3" height="15.0" fill="rgb(221,120,31)" rx="2" ry="2" />
<text  x="811.14" y="351.5" ></text>
</g>
<g >
<title>runtime.lock (16 samples, 0.88%)</title><rect x="512.0" y="357" width="10.4" height="15.0" fill="rgb(228,221,38)" rx="2" ry="2" />
<text  x="515.00" y="367.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.06%)</title><rect x="507.5" y="341" width="0.6" height="15.0" fill="rgb(205,187,17)" rx="2" ry="2" />
<text  x="510.46" y="351.5" ></text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.06%)</title><rect x="1188.7" y="357" width="0.7" height="15.0" fill="rgb(218,146,31)" rx="2" ry="2" />
<text  x="1191.70" y="367.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.06%)</title><rect x="498.4" y="277" width="0.6" height="15.0" fill="rgb(245,214,11)" rx="2" ry="2" />
<text  x="501.37" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.06%)</title><rect x="1188.1" y="325" width="0.6" height="15.0" fill="rgb(224,78,54)" rx="2" ry="2" />
<text  x="1191.05" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (9 samples, 0.50%)</title><rect x="307.4" y="309" width="5.9" height="15.0" fill="rgb(206,114,35)" rx="2" ry="2" />
<text  x="310.44" y="319.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (446 samples, 24.55%)</title><rect x="11.9" y="341" width="289.7" height="15.0" fill="rgb(217,37,45)" rx="2" ry="2" />
<text  x="14.95" y="351.5" >net.(*netFD).Write</text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.06%)</title><rect x="497.7" y="341" width="0.7" height="15.0" fill="rgb(225,99,40)" rx="2" ry="2" />
<text  x="500.72" y="351.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.06%)</title><rect x="300.9" y="229" width="0.7" height="15.0" fill="rgb(211,45,45)" rx="2" ry="2" />
<text  x="303.94" y="239.5" ></text>
</g>
<g >
<title>runtime.sysmon (308 samples, 16.95%)</title><rect x="897.8" y="389" width="200.0" height="15.0" fill="rgb(246,226,18)" rx="2" ry="2" />
<text  x="900.76" y="399.5" >runtime.sysmon</text>
</g>
<g >
<title>runtime.scang (1 samples, 0.06%)</title><rect x="498.4" y="197" width="0.6" height="15.0" fill="rgb(209,142,0)" rx="2" ry="2" />
<text  x="501.37" y="207.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.06%)</title><rect x="486.7" y="117" width="0.6" height="15.0" fill="rgb(234,185,39)" rx="2" ry="2" />
<text  x="489.68" y="127.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="314.6" y="277" width="0.6" height="15.0" fill="rgb(244,37,44)" rx="2" ry="2" />
<text  x="317.58" y="287.5" ></text>
</g>
<g >
<title>runtime.gosched_m (1 samples, 0.06%)</title><rect x="508.8" y="405" width="0.6" height="15.0" fill="rgb(209,74,0)" rx="2" ry="2" />
<text  x="511.76" y="415.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.06%)</title><rect x="308.1" y="117" width="0.6" height="15.0" fill="rgb(225,157,13)" rx="2" ry="2" />
<text  x="311.08" y="127.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.06%)</title><rect x="300.9" y="165" width="0.7" height="15.0" fill="rgb(239,38,34)" rx="2" ry="2" />
<text  x="303.94" y="175.5" ></text>
</g>
<g >
<title>sync.(*Pool).pin (1 samples, 0.06%)</title><rect x="500.3" y="341" width="0.7" height="15.0" fill="rgb(210,203,22)" rx="2" ry="2" />
<text  x="503.31" y="351.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.06%)</title><rect x="301.6" y="261" width="0.6" height="15.0" fill="rgb(220,50,42)" rx="2" ry="2" />
<text  x="304.59" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (16 samples, 0.88%)</title><rect x="304.2" y="325" width="10.4" height="15.0" fill="rgb(235,192,39)" rx="2" ry="2" />
<text  x="307.19" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.peekArgBytes (2 samples, 0.11%)</title><rect x="318.5" y="325" width="1.3" height="15.0" fill="rgb(254,84,15)" rx="2" ry="2" />
<text  x="321.48" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).IsGet (3 samples, 0.17%)</title><rect x="488.0" y="293" width="1.9" height="15.0" fill="rgb(209,212,50)" rx="2" ry="2" />
<text  x="490.97" y="303.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.parseContentLength (1 samples, 0.06%)</title><rect x="495.1" y="293" width="0.7" height="15.0" fill="rgb(229,126,8)" rx="2" ry="2" />
<text  x="498.12" y="303.5" ></text>
</g>
<g >
<title>syscall.syscall (446 samples, 24.55%)</title><rect x="11.9" y="277" width="289.7" height="15.0" fill="rgb(212,145,3)" rx="2" ry="2" />
<text  x="14.95" y="287.5" >syscall.syscall</text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.06%)</title><rect x="308.1" y="181" width="0.6" height="15.0" fill="rgb(239,89,36)" rx="2" ry="2" />
<text  x="311.08" y="191.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (1 samples, 0.06%)</title><rect x="486.7" y="133" width="0.6" height="15.0" fill="rgb(213,182,23)" rx="2" ry="2" />
<text  x="489.68" y="143.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (446 samples, 24.55%)</title><rect x="11.9" y="325" width="289.7" height="15.0" fill="rgb(221,30,48)" rx="2" ry="2" />
<text  x="14.95" y="335.5" >internal/poll.(*FD).Write</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).MultipartFormBoundary (1 samples, 0.06%)</title><rect x="317.2" y="341" width="0.6" height="15.0" fill="rgb(209,48,46)" rx="2" ry="2" />
<text  x="320.18" y="351.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (6 samples, 0.33%)</title><rect x="502.9" y="421" width="3.9" height="15.0" fill="rgb(212,222,15)" rx="2" ry="2" />
<text  x="505.91" y="431.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.06%)</title><rect x="486.7" y="101" width="0.6" height="15.0" fill="rgb(237,152,40)" rx="2" ry="2" />
<text  x="489.68" y="111.5" ></text>
</g>
<g >
<title>runtime.usleep (14 samples, 0.77%)</title><rect x="512.0" y="325" width="9.1" height="15.0" fill="rgb(220,14,21)" rx="2" ry="2" />
<text  x="515.00" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeFASTHTTP (16 samples, 0.88%)</title><rect x="304.2" y="341" width="10.4" height="15.0" fill="rgb(225,15,17)" rx="2" ry="2" />
<text  x="307.19" y="351.5" ></text>
</g>
<g >
<title>runtime.resetspinning (1 samples, 0.06%)</title><rect x="897.1" y="373" width="0.7" height="15.0" fill="rgb(252,147,5)" rx="2" ry="2" />
<text  x="900.11" y="383.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.06%)</title><rect x="502.3" y="405" width="0.6" height="15.0" fill="rgb(232,193,17)" rx="2" ry="2" />
<text  x="505.26" y="415.5" ></text>
</g>
<g >
<title>runtime.usleep (65 samples, 3.58%)</title><rect x="1055.6" y="373" width="42.2" height="15.0" fill="rgb(213,93,18)" rx="2" ry="2" />
<text  x="1058.57" y="383.5" >run..</text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.06%)</title><rect x="506.8" y="341" width="0.7" height="15.0" fill="rgb(250,160,11)" rx="2" ry="2" />
<text  x="509.81" y="351.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.06%)</title><rect x="897.1" y="309" width="0.7" height="15.0" fill="rgb(210,212,53)" rx="2" ry="2" />
<text  x="900.11" y="319.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (3 samples, 0.17%)</title><rect x="310.7" y="245" width="1.9" height="15.0" fill="rgb(240,38,44)" rx="2" ry="2" />
<text  x="313.68" y="255.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.06%)</title><rect x="521.7" y="341" width="0.7" height="15.0" fill="rgb(207,36,1)" rx="2" ry="2" />
<text  x="524.74" y="351.5" ></text>
</g>
<g >
<title>sync.(*Pool).Put (2 samples, 0.11%)</title><rect x="499.7" y="357" width="1.3" height="15.0" fill="rgb(251,69,18)" rx="2" ry="2" />
<text  x="502.66" y="367.5" ></text>
</g>
<g >
<title>runtime.kevent (223 samples, 12.27%)</title><rect x="663.3" y="341" width="144.8" height="15.0" fill="rgb(207,59,15)" rx="2" ry="2" />
<text  x="666.32" y="351.5" >runtime.kevent</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.06%)</title><rect x="308.1" y="101" width="0.6" height="15.0" fill="rgb(248,40,30)" rx="2" ry="2" />
<text  x="311.08" y="111.5" ></text>
</g>
<g >
<title>reflect.funcLayout (1 samples, 0.06%)</title><rect x="310.0" y="213" width="0.7" height="15.0" fill="rgb(206,87,51)" rx="2" ry="2" />
<text  x="313.03" y="223.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.06%)</title><rect x="508.1" y="357" width="0.7" height="15.0" fill="rgb(228,12,14)" rx="2" ry="2" />
<text  x="511.11" y="367.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.06%)</title><rect x="1188.1" y="341" width="0.6" height="15.0" fill="rgb(206,186,17)" rx="2" ry="2" />
<text  x="1191.05" y="351.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.06%)</title><rect x="301.6" y="245" width="0.6" height="15.0" fill="rgb(239,102,3)" rx="2" ry="2" />
<text  x="304.59" y="255.5" ></text>
</g>
<g >
<title>syscall.Read (253 samples, 13.92%)</title><rect x="323.0" y="245" width="164.3" height="15.0" fill="rgb(229,173,16)" rx="2" ry="2" />
<text  x="326.02" y="255.5" >syscall.Read</text>
</g>
<g >
<title>runtime.deferproc (2 samples, 0.11%)</title><rect x="313.3" y="309" width="1.3" height="15.0" fill="rgb(221,219,22)" rx="2" ry="2" />
<text  x="316.28" y="319.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).wait (2 samples, 0.11%)</title><rect x="319.8" y="229" width="1.3" height="15.0" fill="rgb(220,162,13)" rx="2" ry="2" />
<text  x="322.77" y="239.5" ></text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.11%)</title><rect x="999.1" y="325" width="1.3" height="15.0" fill="rgb(230,219,41)" rx="2" ry="2" />
<text  x="1002.07" y="335.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.06%)</title><rect x="521.1" y="341" width="0.6" height="15.0" fill="rgb(253,118,41)" rx="2" ry="2" />
<text  x="524.10" y="351.5" ></text>
</g>
<g >
<title>runtime.semawakeup (65 samples, 3.58%)</title><rect x="1097.8" y="325" width="42.2" height="15.0" fill="rgb(220,73,25)" rx="2" ry="2" />
<text  x="1100.78" y="335.5" >run..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (2 samples, 0.11%)</title><rect x="308.1" y="261" width="1.3" height="15.0" fill="rgb(228,161,40)" rx="2" ry="2" />
<text  x="311.08" y="271.5" ></text>
</g>
<g >
<title>runtime.aeshashbody (1 samples, 0.06%)</title><rect x="312.0" y="197" width="0.6" height="15.0" fill="rgb(206,62,54)" rx="2" ry="2" />
<text  x="314.98" y="207.5" ></text>
</g>
<g >
<title>net.(*TCPAddr).String (2 samples, 0.11%)</title><rect x="314.6" y="341" width="1.3" height="15.0" fill="rgb(246,4,44)" rx="2" ry="2" />
<text  x="317.58" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (3 samples, 0.17%)</title><rect x="304.8" y="277" width="2.0" height="15.0" fill="rgb(236,198,1)" rx="2" ry="2" />
<text  x="307.84" y="287.5" ></text>
</g>
<g >
<title>reflect.Value.call (2 samples, 0.11%)</title><rect x="309.4" y="229" width="1.3" height="15.0" fill="rgb(237,193,23)" rx="2" ry="2" />
<text  x="312.38" y="239.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).readLimitBody (279 samples, 15.35%)</title><rect x="315.9" y="373" width="181.2" height="15.0" fill="rgb(248,65,21)" rx="2" ry="2" />
<text  x="318.88" y="383.5" >github.com/valyala/fast..</text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.06%)</title><rect x="306.8" y="293" width="0.6" height="15.0" fill="rgb(207,165,53)" rx="2" ry="2" />
<text  x="309.79" y="303.5" ></text>
</g>
<g >
<title>runtime.shrinkstack (1 samples, 0.06%)</title><rect x="498.4" y="165" width="0.6" height="15.0" fill="rgb(252,148,40)" rx="2" ry="2" />
<text  x="501.37" y="175.5" ></text>
</g>
<g >
<title>net.IP.String (1 samples, 0.06%)</title><rect x="314.6" y="309" width="0.6" height="15.0" fill="rgb(231,53,40)" rx="2" ry="2" />
<text  x="317.58" y="319.5" ></text>
</g>
<g >
<title>bytes.Equal (1 samples, 0.06%)</title><rect x="317.2" y="309" width="0.6" height="15.0" fill="rgb(230,70,39)" rx="2" ry="2" />
<text  x="320.18" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (9 samples, 0.50%)</title><rect x="307.4" y="293" width="5.9" height="15.0" fill="rgb(241,23,31)" rx="2" ry="2" />
<text  x="310.44" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (1 samples, 0.06%)</title><rect x="312.6" y="229" width="0.7" height="15.0" fill="rgb(215,210,51)" rx="2" ry="2" />
<text  x="315.63" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.06%)</title><rect x="521.7" y="325" width="0.7" height="15.0" fill="rgb(250,154,0)" rx="2" ry="2" />
<text  x="524.74" y="335.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (26 samples, 1.43%)</title><rect x="284.7" y="245" width="16.9" height="15.0" fill="rgb(206,161,17)" rx="2" ry="2" />
<text  x="287.71" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (75 samples, 4.13%)</title><rect x="1140.0" y="389" width="48.7" height="15.0" fill="rgb(245,121,21)" rx="2" ry="2" />
<text  x="1142.99" y="399.5" >runt..</text>
</g>
<g >
<title>github.com/valyala/fasthttp.decodeArgAppendNoPlus (1 samples, 0.06%)</title><rect x="302.2" y="245" width="0.7" height="15.0" fill="rgb(235,126,45)" rx="2" ry="2" />
<text  x="305.24" y="255.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.06%)</title><rect x="308.1" y="53" width="0.6" height="15.0" fill="rgb(219,208,8)" rx="2" ry="2" />
<text  x="311.08" y="63.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.06%)</title><rect x="308.1" y="133" width="0.6" height="15.0" fill="rgb(248,77,49)" rx="2" ry="2" />
<text  x="311.08" y="143.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.acquireReader (1 samples, 0.06%)</title><rect x="497.7" y="373" width="0.7" height="15.0" fill="rgb(229,112,9)" rx="2" ry="2" />
<text  x="500.72" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).Path (2 samples, 0.11%)</title><rect x="301.6" y="357" width="1.3" height="15.0" fill="rgb(243,102,17)" rx="2" ry="2" />
<text  x="304.59" y="367.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.06%)</title><rect x="897.1" y="325" width="0.7" height="15.0" fill="rgb(248,178,35)" rx="2" ry="2" />
<text  x="900.11" y="335.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.06%)</title><rect x="897.1" y="357" width="0.7" height="15.0" fill="rgb(213,99,52)" rx="2" ry="2" />
<text  x="900.11" y="367.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.06%)</title><rect x="308.7" y="229" width="0.7" height="15.0" fill="rgb(247,226,21)" rx="2" ry="2" />
<text  x="311.73" y="239.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (3 samples, 0.17%)</title><rect x="310.7" y="229" width="1.9" height="15.0" fill="rgb(223,83,30)" rx="2" ry="2" />
<text  x="313.68" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (26 samples, 1.43%)</title><rect x="284.7" y="261" width="16.9" height="15.0" fill="rgb(251,0,26)" rx="2" ry="2" />
<text  x="287.71" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*URI).parse (2 samples, 0.11%)</title><rect x="301.6" y="277" width="1.3" height="15.0" fill="rgb(240,203,7)" rx="2" ry="2" />
<text  x="304.59" y="287.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (65 samples, 3.58%)</title><rect x="1097.8" y="389" width="42.2" height="15.0" fill="rgb(216,110,49)" rx="2" ry="2" />
<text  x="1100.78" y="399.5" >run..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.06%)</title><rect x="498.4" y="293" width="0.6" height="15.0" fill="rgb(206,200,52)" rx="2" ry="2" />
<text  x="501.37" y="303.5" ></text>
</g>
<g >
<title>runtime.stopm (134 samples, 7.37%)</title><rect x="810.1" y="357" width="87.0" height="15.0" fill="rgb(222,175,47)" rx="2" ry="2" />
<text  x="813.09" y="367.5" >runtime.st..</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (5 samples, 0.28%)</title><rect x="1136.7" y="309" width="3.3" height="15.0" fill="rgb(223,32,33)" rx="2" ry="2" />
<text  x="1139.75" y="319.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.06%)</title><rect x="302.2" y="213" width="0.7" height="15.0" fill="rgb(233,92,14)" rx="2" ry="2" />
<text  x="305.24" y="223.5" ></text>
</g>
<g >
<title>runtime.mstart1 (308 samples, 16.95%)</title><rect x="897.8" y="405" width="200.0" height="15.0" fill="rgb(208,69,32)" rx="2" ry="2" />
<text  x="900.76" y="415.5" >runtime.mstart1</text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.06%)</title><rect x="315.2" y="293" width="0.7" height="15.0" fill="rgb(228,202,15)" rx="2" ry="2" />
<text  x="318.23" y="303.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.06%)</title><rect x="498.4" y="133" width="0.6" height="15.0" fill="rgb(221,47,3)" rx="2" ry="2" />
<text  x="501.37" y="143.5" ></text>
</g>
<g >
<title>runtime.nanotime (90 samples, 4.95%)</title><rect x="897.8" y="373" width="58.4" height="15.0" fill="rgb(232,108,35)" rx="2" ry="2" />
<text  x="900.76" y="383.5" >runtim..</text>
</g>
<g >
<title>bytes.Equal (3 samples, 0.17%)</title><rect x="488.0" y="277" width="1.9" height="15.0" fill="rgb(231,195,12)" rx="2" ry="2" />
<text  x="490.97" y="287.5" ></text>
</g>
<g >
<title>runtime.convI2I (1 samples, 0.06%)</title><rect x="497.7" y="357" width="0.7" height="15.0" fill="rgb(243,105,44)" rx="2" ry="2" />
<text  x="500.72" y="367.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.06%)</title><rect x="498.4" y="213" width="0.6" height="15.0" fill="rgb(207,97,40)" rx="2" ry="2" />
<text  x="501.37" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).noBody (3 samples, 0.17%)</title><rect x="488.0" y="309" width="1.9" height="15.0" fill="rgb(252,112,0)" rx="2" ry="2" />
<text  x="490.97" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (1 samples, 0.06%)</title><rect x="312.6" y="261" width="0.7" height="15.0" fill="rgb(207,131,29)" rx="2" ry="2" />
<text  x="315.63" y="271.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (2 samples, 0.11%)</title><rect x="311.3" y="213" width="1.3" height="15.0" fill="rgb(218,93,26)" rx="2" ry="2" />
<text  x="314.33" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).URI (2 samples, 0.11%)</title><rect x="301.6" y="325" width="1.3" height="15.0" fill="rgb(233,13,41)" rx="2" ry="2" />
<text  x="304.59" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).MayContinue (2 samples, 0.11%)</title><rect x="318.5" y="357" width="1.3" height="15.0" fill="rgb(216,37,44)" rx="2" ry="2" />
<text  x="321.48" y="367.5" ></text>
</g>
<g >
<title>runtime.park_m (598 samples, 32.91%)</title><rect x="509.4" y="405" width="388.4" height="15.0" fill="rgb(249,126,19)" rx="2" ry="2" />
<text  x="512.41" y="415.5" >runtime.park_m</text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.06%)</title><rect x="489.9" y="277" width="0.7" height="15.0" fill="rgb(210,175,42)" rx="2" ry="2" />
<text  x="492.92" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.CoarseTimeNow (1 samples, 0.06%)</title><rect x="497.1" y="373" width="0.6" height="15.0" fill="rgb(252,138,31)" rx="2" ry="2" />
<text  x="500.07" y="383.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (2 samples, 0.11%)</title><rect x="305.5" y="229" width="1.3" height="15.0" fill="rgb(216,46,0)" rx="2" ry="2" />
<text  x="308.49" y="239.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.06%)</title><rect x="308.1" y="69" width="0.6" height="15.0" fill="rgb(221,135,52)" rx="2" ry="2" />
<text  x="311.08" y="79.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="306.8" y="277" width="0.6" height="15.0" fill="rgb(241,129,11)" rx="2" ry="2" />
<text  x="309.79" y="287.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.06%)</title><rect x="314.6" y="293" width="0.6" height="15.0" fill="rgb(234,42,10)" rx="2" ry="2" />
<text  x="317.58" y="303.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.06%)</title><rect x="498.4" y="341" width="0.6" height="15.0" fill="rgb(230,105,2)" rx="2" ry="2" />
<text  x="501.37" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.06%)</title><rect x="486.7" y="85" width="0.6" height="15.0" fill="rgb(232,96,17)" rx="2" ry="2" />
<text  x="489.68" y="95.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (5 samples, 0.28%)</title><rect x="304.2" y="309" width="3.2" height="15.0" fill="rgb(227,105,43)" rx="2" ry="2" />
<text  x="307.19" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="315.2" y="277" width="0.7" height="15.0" fill="rgb(220,104,46)" rx="2" ry="2" />
<text  x="318.23" y="287.5" ></text>
</g>
<g >
<title>net.itoa (1 samples, 0.06%)</title><rect x="315.2" y="325" width="0.7" height="15.0" fill="rgb(207,56,44)" rx="2" ry="2" />
<text  x="318.23" y="335.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.06%)</title><rect x="300.9" y="213" width="0.7" height="15.0" fill="rgb(226,149,10)" rx="2" ry="2" />
<text  x="303.94" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (1 samples, 0.06%)</title><rect x="1188.7" y="389" width="0.7" height="15.0" fill="rgb(232,35,15)" rx="2" ry="2" />
<text  x="1191.70" y="399.5" ></text>
</g>
<g >
<title>runtime._System (1 samples, 0.06%)</title><rect x="502.3" y="421" width="0.6" height="15.0" fill="rgb(223,77,18)" rx="2" ry="2" />
<text  x="505.26" y="431.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (84 samples, 4.62%)</title><rect x="1000.4" y="325" width="54.5" height="15.0" fill="rgb(223,160,9)" rx="2" ry="2" />
<text  x="1003.37" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (1 samples, 0.06%)</title><rect x="300.9" y="197" width="0.7" height="15.0" fill="rgb(221,62,4)" rx="2" ry="2" />
<text  x="303.94" y="207.5" ></text>
</g>
<g >
<title>bufio.NewWriterSize (1 samples, 0.06%)</title><rect x="498.4" y="357" width="0.6" height="15.0" fill="rgb(220,42,45)" rx="2" ry="2" />
<text  x="501.37" y="367.5" ></text>
</g>
<g >
<title>runtime.semasleep (134 samples, 7.37%)</title><rect x="810.1" y="325" width="87.0" height="15.0" fill="rgb(220,135,49)" rx="2" ry="2" />
<text  x="813.09" y="335.5" >runtime.se..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (3 samples, 0.17%)</title><rect x="307.4" y="277" width="2.0" height="15.0" fill="rgb(246,151,34)" rx="2" ry="2" />
<text  x="310.44" y="287.5" ></text>
</g>
<g >
<title>runtime.osyield (14 samples, 0.77%)</title><rect x="512.0" y="341" width="9.1" height="15.0" fill="rgb(252,63,25)" rx="2" ry="2" />
<text  x="515.00" y="351.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).Read (273 samples, 15.02%)</title><rect x="319.8" y="357" width="177.3" height="15.0" fill="rgb(226,204,23)" rx="2" ry="2" />
<text  x="322.77" y="367.5" >github.com/valyala/fast..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (133 samples, 7.32%)</title><rect x="810.1" y="309" width="86.4" height="15.0" fill="rgb(212,9,37)" rx="2" ry="2" />
<text  x="813.09" y="319.5" >runtime.pt..</text>
</g>
<g >
<title>sync.(*Pool).Get (1 samples, 0.06%)</title><rect x="499.0" y="357" width="0.7" height="15.0" fill="rgb(215,215,34)" rx="2" ry="2" />
<text  x="502.01" y="367.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (3 samples, 0.17%)</title><rect x="506.8" y="421" width="2.0" height="15.0" fill="rgb(236,119,7)" rx="2" ry="2" />
<text  x="509.81" y="431.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.06%)</title><rect x="507.5" y="309" width="0.6" height="15.0" fill="rgb(241,78,4)" rx="2" ry="2" />
<text  x="510.46" y="319.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.06%)</title><rect x="507.5" y="293" width="0.6" height="15.0" fill="rgb(236,201,35)" rx="2" ry="2" />
<text  x="510.46" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (74 samples, 4.07%)</title><rect x="1140.0" y="357" width="48.1" height="15.0" fill="rgb(230,183,29)" rx="2" ry="2" />
<text  x="1142.99" y="367.5" >runt..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (60 samples, 3.30%)</title><rect x="1097.8" y="309" width="38.9" height="15.0" fill="rgb(237,200,37)" rx="2" ry="2" />
<text  x="1100.78" y="319.5" >run..</text>
</g>
<g >
<title>bytes.HasPrefix (1 samples, 0.06%)</title><rect x="317.2" y="325" width="0.6" height="15.0" fill="rgb(224,170,53)" rx="2" ry="2" />
<text  x="320.18" y="335.5" ></text>
</g>
<g >
<title>runtime.handoffp (65 samples, 3.58%)</title><rect x="1097.8" y="373" width="42.2" height="15.0" fill="rgb(247,200,40)" rx="2" ry="2" />
<text  x="1100.78" y="383.5" >run..</text>
</g>
<g >
<title>runtime.mstart (449 samples, 24.71%)</title><rect x="897.8" y="421" width="291.6" height="15.0" fill="rgb(244,60,0)" rx="2" ry="2" />
<text  x="900.76" y="431.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.adjustframe (1 samples, 0.06%)</title><rect x="498.4" y="117" width="0.6" height="15.0" fill="rgb(252,19,7)" rx="2" ry="2" />
<text  x="501.37" y="127.5" ></text>
</g>
<g >
<title>net.(*conn).Read (258 samples, 14.20%)</title><rect x="319.8" y="293" width="167.5" height="15.0" fill="rgb(240,101,17)" rx="2" ry="2" />
<text  x="322.77" y="303.5" >net.(*conn).Read</text>
</g>
<g >
<title>sync.(*Pool).Put (1 samples, 0.06%)</title><rect x="501.0" y="357" width="0.6" height="15.0" fill="rgb(225,41,20)" rx="2" ry="2" />
<text  x="503.96" y="367.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (75 samples, 4.13%)</title><rect x="1140.0" y="373" width="48.7" height="15.0" fill="rgb(211,215,44)" rx="2" ry="2" />
<text  x="1142.99" y="383.5" >runt..</text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.06%)</title><rect x="310.0" y="197" width="0.7" height="15.0" fill="rgb(208,93,36)" rx="2" ry="2" />
<text  x="313.03" y="207.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.06%)</title><rect x="498.4" y="181" width="0.6" height="15.0" fill="rgb(241,223,36)" rx="2" ry="2" />
<text  x="501.37" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).RemoteAddr (2 samples, 0.11%)</title><rect x="302.9" y="341" width="1.3" height="15.0" fill="rgb(221,226,20)" rx="2" ry="2" />
<text  x="305.89" y="351.5" ></text>
</g>
<g >
<title>runtime.runqget (1 samples, 0.06%)</title><rect x="809.4" y="357" width="0.7" height="15.0" fill="rgb(247,172,8)" rx="2" ry="2" />
<text  x="812.44" y="367.5" ></text>
</g>
<g >
<title>runtime.deferArgs (1 samples, 0.06%)</title><rect x="313.9" y="293" width="0.7" height="15.0" fill="rgb(251,136,50)" rx="2" ry="2" />
<text  x="316.93" y="303.5" ></text>
</g>
<g >
<title>syscall.read (251 samples, 13.81%)</title><rect x="324.3" y="229" width="163.0" height="15.0" fill="rgb(215,197,34)" rx="2" ry="2" />
<text  x="327.32" y="239.5" >syscall.read</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.06%)</title><rect x="308.1" y="229" width="0.6" height="15.0" fill="rgb(213,3,32)" rx="2" ry="2" />
<text  x="311.08" y="239.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.06%)</title><rect x="284.1" y="245" width="0.6" height="15.0" fill="rgb(250,39,10)" rx="2" ry="2" />
<text  x="287.06" y="255.5" ></text>
</g>
<g >
<title>runtime.notetsleep (152 samples, 8.37%)</title><rect x="956.2" y="373" width="98.7" height="15.0" fill="rgb(225,79,31)" rx="2" ry="2" />
<text  x="959.21" y="383.5" >runtime.not..</text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.06%)</title><rect x="807.5" y="325" width="0.6" height="15.0" fill="rgb(214,151,25)" rx="2" ry="2" />
<text  x="810.49" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (1 samples, 0.06%)</title><rect x="308.1" y="213" width="0.6" height="15.0" fill="rgb(219,216,8)" rx="2" ry="2" />
<text  x="311.08" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (2 samples, 0.11%)</title><rect x="309.4" y="261" width="1.3" height="15.0" fill="rgb(251,52,44)" rx="2" ry="2" />
<text  x="312.38" y="271.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (3 samples, 0.17%)</title><rect x="472.4" y="197" width="1.9" height="15.0" fill="rgb(221,91,38)" rx="2" ry="2" />
<text  x="475.39" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.06%)</title><rect x="300.9" y="149" width="0.7" height="15.0" fill="rgb(246,164,47)" rx="2" ry="2" />
<text  x="303.94" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.06%)</title><rect x="312.6" y="197" width="0.7" height="15.0" fill="rgb(241,40,20)" rx="2" ry="2" />
<text  x="315.63" y="207.5" ></text>
</g>
<g >
<title>time.Time.Sub (1 samples, 0.06%)</title><rect x="501.6" y="373" width="0.7" height="15.0" fill="rgb(242,134,50)" rx="2" ry="2" />
<text  x="504.61" y="383.5" ></text>
</g>
<g >
<title>runtime.systemstack (141 samples, 7.76%)</title><rect x="1097.8" y="405" width="91.6" height="15.0" fill="rgb(248,126,48)" rx="2" ry="2" />
<text  x="1100.78" y="415.5" >runtime.sy..</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parseHeaders (8 samples, 0.44%)</title><rect x="490.6" y="309" width="5.2" height="15.0" fill="rgb(249,1,9)" rx="2" ry="2" />
<text  x="493.57" y="319.5" ></text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.06%)</title><rect x="1188.7" y="341" width="0.7" height="15.0" fill="rgb(226,145,35)" rx="2" ry="2" />
<text  x="1191.70" y="351.5" ></text>
</g>
<g >
<title>runtime.kevent_trampoline (4 samples, 0.22%)</title><rect x="503.6" y="405" width="2.6" height="15.0" fill="rgb(242,51,39)" rx="2" ry="2" />
<text  x="506.56" y="415.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollWait (2 samples, 0.11%)</title><rect x="319.8" y="213" width="1.3" height="15.0" fill="rgb(234,62,16)" rx="2" ry="2" />
<text  x="322.77" y="223.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (258 samples, 14.20%)</title><rect x="319.8" y="261" width="167.5" height="15.0" fill="rgb(233,223,27)" rx="2" ry="2" />
<text  x="322.77" y="271.5" >internal/poll.(*FD).R..</text>
</g>
<g >
<title>bufio.(*Reader).fill (258 samples, 14.20%)</title><rect x="319.8" y="309" width="167.5" height="15.0" fill="rgb(231,138,2)" rx="2" ry="2" />
<text  x="322.77" y="319.5" >bufio.(*Reader).fill</text>
</g>
<g >
<title>github.com/valyala/fasthttp.mustPeekBuffered (1 samples, 0.06%)</title><rect x="496.4" y="325" width="0.7" height="15.0" fill="rgb(215,96,17)" rx="2" ry="2" />
<text  x="499.42" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (5 samples, 0.28%)</title><rect x="1184.8" y="325" width="3.3" height="15.0" fill="rgb(223,77,19)" rx="2" ry="2" />
<text  x="1187.80" y="335.5" ></text>
</g>
<g >
<title>runtime.usleep_trampoline (1 samples, 0.06%)</title><rect x="506.2" y="405" width="0.6" height="15.0" fill="rgb(225,24,46)" rx="2" ry="2" />
<text  x="509.16" y="415.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).ContinueReadBody (2 samples, 0.11%)</title><rect x="317.2" y="357" width="1.3" height="15.0" fill="rgb(253,208,26)" rx="2" ry="2" />
<text  x="320.18" y="367.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.06%)</title><rect x="300.9" y="133" width="0.7" height="15.0" fill="rgb(245,83,13)" rx="2" ry="2" />
<text  x="303.94" y="143.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.06%)</title><rect x="897.1" y="341" width="0.7" height="15.0" fill="rgb(243,157,28)" rx="2" ry="2" />
<text  x="900.11" y="351.5" ></text>
</g>
<g >
<title>runtime.startm (65 samples, 3.58%)</title><rect x="1097.8" y="357" width="42.2" height="15.0" fill="rgb(244,116,9)" rx="2" ry="2" />
<text  x="1100.78" y="367.5" >run..</text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.06%)</title><rect x="306.1" y="213" width="0.7" height="15.0" fill="rgb(230,169,0)" rx="2" ry="2" />
<text  x="309.14" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*URI).parseQuick (2 samples, 0.11%)</title><rect x="301.6" y="293" width="1.3" height="15.0" fill="rgb(231,216,42)" rx="2" ry="2" />
<text  x="304.59" y="303.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).waitRead (2 samples, 0.11%)</title><rect x="319.8" y="245" width="1.3" height="15.0" fill="rgb(251,139,6)" rx="2" ry="2" />
<text  x="322.77" y="255.5" ></text>
</g>
<g >
<title>net.ipEmptyString (1 samples, 0.06%)</title><rect x="314.6" y="325" width="0.6" height="15.0" fill="rgb(208,55,34)" rx="2" ry="2" />
<text  x="317.58" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.06%)</title><rect x="498.4" y="309" width="0.6" height="15.0" fill="rgb(225,20,35)" rx="2" ry="2" />
<text  x="501.37" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (1 samples, 0.06%)</title><rect x="308.1" y="245" width="0.6" height="15.0" fill="rgb(254,29,11)" rx="2" ry="2" />
<text  x="311.08" y="255.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.06%)</title><rect x="308.1" y="85" width="0.6" height="15.0" fill="rgb(227,19,8)" rx="2" ry="2" />
<text  x="311.08" y="95.5" ></text>
</g>
<g >
<title>runtime.gcDrain (3 samples, 0.17%)</title><rect x="506.8" y="373" width="2.0" height="15.0" fill="rgb(217,54,7)" rx="2" ry="2" />
<text  x="509.81" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).URI (2 samples, 0.11%)</title><rect x="301.6" y="341" width="1.3" height="15.0" fill="rgb(221,132,3)" rx="2" ry="2" />
<text  x="304.59" y="351.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.06%)</title><rect x="498.4" y="101" width="0.6" height="15.0" fill="rgb(237,166,2)" rx="2" ry="2" />
<text  x="501.37" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.17%)</title><rect x="506.8" y="405" width="2.0" height="15.0" fill="rgb(242,178,5)" rx="2" ry="2" />
<text  x="509.81" y="415.5" ></text>
</g>
<g >
<title>runtime.netpollblock (1 samples, 0.06%)</title><rect x="320.4" y="197" width="0.7" height="15.0" fill="rgb(245,19,27)" rx="2" ry="2" />
<text  x="323.42" y="207.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.06%)</title><rect x="498.4" y="261" width="0.6" height="15.0" fill="rgb(254,8,36)" rx="2" ry="2" />
<text  x="501.37" y="271.5" ></text>
</g>
<g >
<title>runtime.mcall (599 samples, 32.97%)</title><rect x="508.8" y="421" width="389.0" height="15.0" fill="rgb(224,84,1)" rx="2" ry="2" />
<text  x="511.76" y="431.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.06%)</title><rect x="1188.1" y="357" width="0.6" height="15.0" fill="rgb(236,208,18)" rx="2" ry="2" />
<text  x="1191.05" y="367.5" ></text>
</g>
<g >
<title>runtime.notewakeup (65 samples, 3.58%)</title><rect x="1097.8" y="341" width="42.2" height="15.0" fill="rgb(212,9,22)" rx="2" ry="2" />
<text  x="1100.78" y="351.5" >run..</text>
</g>
<g >
<title>net.(*netFD).Read (258 samples, 14.20%)</title><rect x="319.8" y="277" width="167.5" height="15.0" fill="rgb(239,77,17)" rx="2" ry="2" />
<text  x="322.77" y="287.5" >net.(*netFD).Read</text>
</g>
<g >
<title>memeqbody (1 samples, 0.06%)</title><rect x="317.2" y="293" width="0.6" height="15.0" fill="rgb(219,109,13)" rx="2" ry="2" />
<text  x="320.18" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (69 samples, 3.80%)</title><rect x="1140.0" y="325" width="44.8" height="15.0" fill="rgb(237,212,51)" rx="2" ry="2" />
<text  x="1142.99" y="335.5" >runt..</text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.06%)</title><rect x="300.9" y="181" width="0.7" height="15.0" fill="rgb(238,119,21)" rx="2" ry="2" />
<text  x="303.94" y="191.5" ></text>
</g>
<g >
<title>net.(*conn).Write (446 samples, 24.55%)</title><rect x="11.9" y="357" width="289.7" height="15.0" fill="rgb(233,143,34)" rx="2" ry="2" />
<text  x="14.95" y="367.5" >net.(*conn).Write</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*headerScanner).next (3 samples, 0.17%)</title><rect x="493.2" y="293" width="1.9" height="15.0" fill="rgb(222,174,17)" rx="2" ry="2" />
<text  x="496.17" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.06%)</title><rect x="312.6" y="213" width="0.7" height="15.0" fill="rgb(253,143,32)" rx="2" ry="2" />
<text  x="315.63" y="223.5" ></text>
</g>
<g >
<title>runtime.nanotime (104 samples, 5.72%)</title><rect x="522.4" y="357" width="67.5" height="15.0" fill="rgb(216,84,15)" rx="2" ry="2" />
<text  x="525.39" y="367.5" >runtime..</text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.06%)</title><rect x="486.7" y="69" width="0.6" height="15.0" fill="rgb(245,49,18)" rx="2" ry="2" />
<text  x="489.68" y="79.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.06%)</title><rect x="506.8" y="325" width="0.7" height="15.0" fill="rgb(222,37,0)" rx="2" ry="2" />
<text  x="509.81" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.nextLine (1 samples, 0.06%)</title><rect x="489.9" y="293" width="0.7" height="15.0" fill="rgb(249,170,35)" rx="2" ry="2" />
<text  x="492.92" y="303.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (1 samples, 0.06%)</title><rect x="1188.7" y="373" width="0.7" height="15.0" fill="rgb(223,14,27)" rx="2" ry="2" />
<text  x="1191.70" y="383.5" ></text>
</g>
<g >
<title>all (1,817 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(206,167,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.06%)</title><rect x="486.7" y="165" width="0.6" height="15.0" fill="rgb(206,147,46)" rx="2" ry="2" />
<text  x="489.68" y="175.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="308.1" y="165" width="0.6" height="15.0" fill="rgb(209,163,9)" rx="2" ry="2" />
<text  x="311.08" y="175.5" ></text>
</g>
<g >
<title>runtime.schedule (597 samples, 32.86%)</title><rect x="510.1" y="389" width="387.7" height="15.0" fill="rgb(237,14,19)" rx="2" ry="2" />
<text  x="513.06" y="399.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.exitsyscallfast (20 samples, 1.10%)</title><rect x="474.3" y="181" width="13.0" height="15.0" fill="rgb(212,41,39)" rx="2" ry="2" />
<text  x="477.34" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).parseURI (2 samples, 0.11%)</title><rect x="301.6" y="309" width="1.3" height="15.0" fill="rgb(218,181,47)" rx="2" ry="2" />
<text  x="304.59" y="319.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (1 samples, 0.06%)</title><rect x="284.1" y="261" width="0.6" height="15.0" fill="rgb(221,164,25)" rx="2" ry="2" />
<text  x="287.06" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.06%)</title><rect x="308.1" y="149" width="0.6" height="15.0" fill="rgb(252,32,21)" rx="2" ry="2" />
<text  x="311.08" y="159.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.06%)</title><rect x="302.2" y="229" width="0.7" height="15.0" fill="rgb(220,152,42)" rx="2" ry="2" />
<text  x="305.24" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.decodeVarint (1 samples, 0.06%)</title><rect x="305.5" y="213" width="0.6" height="15.0" fill="rgb(252,157,49)" rx="2" ry="2" />
<text  x="308.49" y="223.5" ></text>
</g>
<g >
<title>runtime.findrunnable (596 samples, 32.80%)</title><rect x="510.1" y="373" width="387.0" height="15.0" fill="rgb(252,61,40)" rx="2" ry="2" />
<text  x="513.06" y="383.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.scang (1 samples, 0.06%)</title><rect x="507.5" y="325" width="0.6" height="15.0" fill="rgb(241,32,41)" rx="2" ry="2" />
<text  x="510.46" y="335.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (3 samples, 0.17%)</title><rect x="506.8" y="389" width="2.0" height="15.0" fill="rgb(227,217,4)" rx="2" ry="2" />
<text  x="509.81" y="399.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.appendBodyFixedSize (1 samples, 0.06%)</title><rect x="317.8" y="325" width="0.7" height="15.0" fill="rgb(227,108,32)" rx="2" ry="2" />
<text  x="320.83" y="335.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.17%)</title><rect x="472.4" y="181" width="1.9" height="15.0" fill="rgb(224,40,20)" rx="2" ry="2" />
<text  x="475.39" y="191.5" ></text>
</g>
</g>
</svg>

