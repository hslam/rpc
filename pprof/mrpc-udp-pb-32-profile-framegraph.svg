<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>runtime.handoffp (956 samples, 22.52%)</title><rect x="899.3" y="389" width="265.7" height="15.0" fill="rgb(236,119,34)" rx="2" ry="2" />
<text  x="902.31" y="399.5" >runtime.handoffp</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*Arith).Multiply (1 samples, 0.02%)</title><rect x="47.8" y="309" width="0.3" height="15.0" fill="rgb(244,21,6)" rx="2" ry="2" />
<text  x="50.80" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.pointer.offset (1 samples, 0.02%)</title><rect x="37.8" y="325" width="0.3" height="15.0" fill="rgb(254,10,5)" rx="2" ry="2" />
<text  x="40.79" y="335.5" ></text>
</g>
<g >
<title>runtime.tracebackdefers (2 samples, 0.05%)</title><rect x="13.9" y="261" width="0.5" height="15.0" fill="rgb(207,5,36)" rx="2" ry="2" />
<text  x="16.89" y="271.5" ></text>
</g>
<g >
<title>runtime.wakep (2 samples, 0.05%)</title><rect x="887.9" y="373" width="0.6" height="15.0" fill="rgb(225,162,8)" rx="2" ry="2" />
<text  x="890.91" y="383.5" ></text>
</g>
<g >
<title>runtime.sysmon (37 samples, 0.87%)</title><rect x="888.7" y="405" width="10.3" height="15.0" fill="rgb(233,91,3)" rx="2" ry="2" />
<text  x="891.75" y="415.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="450.5" y="389" width="0.3" height="15.0" fill="rgb(207,16,25)" rx="2" ry="2" />
<text  x="453.49" y="399.5" ></text>
</g>
<g >
<title>runtime.kevent (205 samples, 4.83%)</title><rect x="711.7" y="357" width="57.0" height="15.0" fill="rgb(227,143,42)" rx="2" ry="2" />
<text  x="714.72" y="367.5" >runtim..</text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.02%)</title><rect x="45.0" y="341" width="0.3" height="15.0" fill="rgb(208,80,48)" rx="2" ry="2" />
<text  x="48.02" y="351.5" ></text>
</g>
<g >
<title>net.appendHex (2 samples, 0.05%)</title><rect x="71.7" y="373" width="0.6" height="15.0" fill="rgb(210,218,17)" rx="2" ry="2" />
<text  x="74.70" y="383.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareWrite (1 samples, 0.02%)</title><rect x="245.9" y="357" width="0.3" height="15.0" fill="rgb(250,135,19)" rx="2" ry="2" />
<text  x="248.94" y="367.5" ></text>
</g>
<g >
<title>runtime.resetspinning (5 samples, 0.12%)</title><rect x="518.3" y="389" width="1.4" height="15.0" fill="rgb(229,199,41)" rx="2" ry="2" />
<text  x="521.29" y="399.5" ></text>
</g>
<g >
<title>runtime.newstack (80 samples, 1.88%)</title><rect x="13.1" y="309" width="22.2" height="15.0" fill="rgb(226,187,0)" rx="2" ry="2" />
<text  x="16.06" y="319.5" >r..</text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.02%)</title><rect x="54.7" y="293" width="0.3" height="15.0" fill="rgb(218,182,15)" rx="2" ry="2" />
<text  x="57.74" y="303.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (2 samples, 0.05%)</title><rect x="35.3" y="373" width="0.5" height="15.0" fill="rgb(248,2,46)" rx="2" ry="2" />
<text  x="38.29" y="383.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="52.2" y="277" width="0.3" height="15.0" fill="rgb(228,4,33)" rx="2" ry="2" />
<text  x="55.24" y="287.5" ></text>
</g>
<g >
<title>runtime.deferproc (2 samples, 0.05%)</title><rect x="63.9" y="405" width="0.6" height="15.0" fill="rgb(209,165,20)" rx="2" ry="2" />
<text  x="66.91" y="415.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="41.4" y="245" width="0.3" height="15.0" fill="rgb(237,0,37)" rx="2" ry="2" />
<text  x="44.40" y="255.5" ></text>
</g>
<g >
<title>runtime.sweepone (4 samples, 0.09%)</title><rect x="451.9" y="421" width="1.1" height="15.0" fill="rgb(231,226,6)" rx="2" ry="2" />
<text  x="454.87" y="431.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="1169.2" y="341" width="0.2" height="15.0" fill="rgb(206,162,39)" rx="2" ry="2" />
<text  x="1172.16" y="351.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="899.0" y="357" width="0.3" height="15.0" fill="rgb(229,186,20)" rx="2" ry="2" />
<text  x="902.03" y="367.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (2 samples, 0.05%)</title><rect x="453.5" y="373" width="0.6" height="15.0" fill="rgb(233,98,46)" rx="2" ry="2" />
<text  x="456.54" y="383.5" ></text>
</g>
<g >
<title>net.itoa (1 samples, 0.02%)</title><rect x="460.2" y="341" width="0.3" height="15.0" fill="rgb(209,228,22)" rx="2" ry="2" />
<text  x="463.21" y="351.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func4 (1 samples, 0.02%)</title><rect x="1169.4" y="405" width="0.3" height="15.0" fill="rgb(233,38,15)" rx="2" ry="2" />
<text  x="1172.43" y="415.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.decodeVarint (1 samples, 0.02%)</title><rect x="12.8" y="309" width="0.3" height="15.0" fill="rgb(214,222,3)" rx="2" ry="2" />
<text  x="15.78" y="319.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="34.5" y="277" width="0.2" height="15.0" fill="rgb(242,32,50)" rx="2" ry="2" />
<text  x="37.46" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (2 samples, 0.05%)</title><rect x="52.8" y="357" width="0.6" height="15.0" fill="rgb(218,92,11)" rx="2" ry="2" />
<text  x="55.80" y="367.5" ></text>
</g>
<g >
<title>runtime.gfput (2 samples, 0.05%)</title><rect x="705.3" y="405" width="0.6" height="15.0" fill="rgb(220,134,37)" rx="2" ry="2" />
<text  x="708.33" y="415.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (2 samples, 0.05%)</title><rect x="38.1" y="373" width="0.5" height="15.0" fill="rgb(251,129,2)" rx="2" ry="2" />
<text  x="41.07" y="383.5" ></text>
</g>
<g >
<title>runtime.notesleep (40 samples, 0.94%)</title><rect x="507.2" y="357" width="11.1" height="15.0" fill="rgb(230,145,29)" rx="2" ry="2" />
<text  x="510.18" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (39 samples, 0.92%)</title><rect x="507.2" y="325" width="10.8" height="15.0" fill="rgb(208,174,39)" rx="2" ry="2" />
<text  x="510.18" y="335.5" ></text>
</g>
<g >
<title>runtime.deductSweepCredit (1 samples, 0.02%)</title><rect x="51.7" y="229" width="0.3" height="15.0" fill="rgb(242,102,44)" rx="2" ry="2" />
<text  x="54.69" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="461.3" y="293" width="0.3" height="15.0" fill="rgb(236,136,15)" rx="2" ry="2" />
<text  x="464.32" y="303.5" ></text>
</g>
<g >
<title>runtime.adjustdefers (2 samples, 0.05%)</title><rect x="13.9" y="277" width="0.5" height="15.0" fill="rgb(245,219,11)" rx="2" ry="2" />
<text  x="16.89" y="287.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="38.6" y="373" width="0.3" height="15.0" fill="rgb(214,123,24)" rx="2" ry="2" />
<text  x="41.62" y="383.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="73.4" y="389" width="0.2" height="15.0" fill="rgb(228,196,20)" rx="2" ry="2" />
<text  x="76.36" y="399.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.02%)</title><rect x="222.6" y="229" width="0.3" height="15.0" fill="rgb(231,7,47)" rx="2" ry="2" />
<text  x="225.60" y="239.5" ></text>
</g>
<g >
<title>runtime.runqgrab (18 samples, 0.42%)</title><rect x="768.7" y="357" width="5.0" height="15.0" fill="rgb(214,18,54)" rx="2" ry="2" />
<text  x="771.69" y="367.5" ></text>
</g>
<g >
<title>runtime.convTstring (2 samples, 0.05%)</title><rect x="63.1" y="373" width="0.5" height="15.0" fill="rgb(253,175,20)" rx="2" ry="2" />
<text  x="66.08" y="383.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (5 samples, 0.12%)</title><rect x="1165.0" y="405" width="1.4" height="15.0" fill="rgb(234,21,11)" rx="2" ry="2" />
<text  x="1167.99" y="415.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.02%)</title><rect x="51.7" y="213" width="0.3" height="15.0" fill="rgb(235,91,36)" rx="2" ry="2" />
<text  x="54.69" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (62 samples, 1.46%)</title><rect x="1169.7" y="325" width="17.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1172.71" y="335.5" ></text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.05%)</title><rect x="52.2" y="341" width="0.6" height="15.0" fill="rgb(247,28,9)" rx="2" ry="2" />
<text  x="55.24" y="351.5" ></text>
</g>
<g >
<title>runtime.systemstack (1,045 samples, 24.61%)</title><rect x="899.0" y="421" width="290.4" height="15.0" fill="rgb(218,23,35)" rx="2" ry="2" />
<text  x="902.03" y="431.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="899.0" y="373" width="0.3" height="15.0" fill="rgb(217,148,24)" rx="2" ry="2" />
<text  x="902.03" y="383.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (7 samples, 0.16%)</title><rect x="43.3" y="357" width="2.0" height="15.0" fill="rgb(229,45,27)" rx="2" ry="2" />
<text  x="46.35" y="367.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="41.4" y="213" width="0.3" height="15.0" fill="rgb(240,214,20)" rx="2" ry="2" />
<text  x="44.40" y="223.5" ></text>
</g>
<g >
<title>runtime.nanotime (6 samples, 0.14%)</title><rect x="826.2" y="373" width="1.7" height="15.0" fill="rgb(226,7,13)" rx="2" ry="2" />
<text  x="829.22" y="383.5" ></text>
</g>
<g >
<title>net.IP.Equal (2 samples, 0.05%)</title><rect x="229.8" y="357" width="0.6" height="15.0" fill="rgb(246,134,34)" rx="2" ry="2" />
<text  x="232.83" y="367.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Marshal (3 samples, 0.07%)</title><rect x="36.4" y="373" width="0.8" height="15.0" fill="rgb(224,9,11)" rx="2" ry="2" />
<text  x="39.40" y="383.5" ></text>
</g>
<g >
<title>runtime.mallocgc (26 samples, 0.61%)</title><rect x="109.8" y="309" width="7.2" height="15.0" fill="rgb(253,89,39)" rx="2" ry="2" />
<text  x="112.77" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (3 samples, 0.07%)</title><rect x="42.0" y="309" width="0.8" height="15.0" fill="rgb(250,87,28)" rx="2" ry="2" />
<text  x="44.96" y="319.5" ></text>
</g>
<g >
<title>runtime.profilealloc (1 samples, 0.02%)</title><rect x="116.7" y="293" width="0.3" height="15.0" fill="rgb(251,41,14)" rx="2" ry="2" />
<text  x="119.72" y="303.5" ></text>
</g>
<g >
<title>runtime.nanotime (8 samples, 0.19%)</title><rect x="708.4" y="373" width="2.2" height="15.0" fill="rgb(247,100,33)" rx="2" ry="2" />
<text  x="711.38" y="383.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (2 samples, 0.05%)</title><rect x="43.6" y="293" width="0.6" height="15.0" fill="rgb(219,69,23)" rx="2" ry="2" />
<text  x="46.63" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.ReadUDPConn (555 samples, 13.07%)</title><rect x="74.5" y="437" width="154.2" height="15.0" fill="rgb(216,198,4)" rx="2" ry="2" />
<text  x="77.47" y="447.5" >hslam.com/mgit/Mort..</text>
</g>
<g >
<title>reflect.(*rtype).exportedMethods (2 samples, 0.05%)</title><rect x="57.8" y="325" width="0.6" height="15.0" fill="rgb(241,93,15)" rx="2" ry="2" />
<text  x="60.80" y="335.5" ></text>
</g>
<g >
<title>net.(*netFD).readFrom (524 samples, 12.34%)</title><rect x="77.8" y="389" width="145.6" height="15.0" fill="rgb(210,204,33)" rx="2" ry="2" />
<text  x="80.81" y="399.5" >net.(*netFD).readF..</text>
</g>
<g >
<title>runtime.markroot (3 samples, 0.07%)</title><rect x="454.1" y="373" width="0.8" height="15.0" fill="rgb(236,178,53)" rx="2" ry="2" />
<text  x="457.10" y="383.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="1169.2" y="373" width="0.2" height="15.0" fill="rgb(233,60,33)" rx="2" ry="2" />
<text  x="1172.16" y="383.5" ></text>
</g>
<g >
<title>runtime.fastrand (1 samples, 0.02%)</title><rect x="25.8" y="197" width="0.3" height="15.0" fill="rgb(230,182,1)" rx="2" ry="2" />
<text  x="28.84" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (183 samples, 4.31%)</title><rect x="773.7" y="341" width="50.9" height="15.0" fill="rgb(247,222,43)" rx="2" ry="2" />
<text  x="776.69" y="351.5" >runti..</text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.05%)</title><rect x="72.3" y="277" width="0.5" height="15.0" fill="rgb(253,46,8)" rx="2" ry="2" />
<text  x="75.25" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (7 samples, 0.16%)</title><rect x="1166.7" y="325" width="1.9" height="15.0" fill="rgb(248,212,31)" rx="2" ry="2" />
<text  x="1169.66" y="335.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="55.6" y="293" width="0.3" height="15.0" fill="rgb(230,187,4)" rx="2" ry="2" />
<text  x="58.58" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeUDPConn (232 samples, 5.46%)</title><rect x="10.0" y="437" width="64.5" height="15.0" fill="rgb(222,173,32)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >hslam.c..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="41.4" y="229" width="0.3" height="15.0" fill="rgb(217,113,9)" rx="2" ry="2" />
<text  x="44.40" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.02%)</title><rect x="51.7" y="133" width="0.3" height="15.0" fill="rgb(236,63,45)" rx="2" ry="2" />
<text  x="54.69" y="143.5" ></text>
</g>
<g >
<title>runtime.scanobject (8 samples, 0.19%)</title><rect x="454.9" y="373" width="2.3" height="15.0" fill="rgb(206,223,51)" rx="2" ry="2" />
<text  x="457.93" y="383.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.02%)</title><rect x="52.2" y="181" width="0.3" height="15.0" fill="rgb(210,60,8)" rx="2" ry="2" />
<text  x="55.24" y="191.5" ></text>
</g>
<g >
<title>net.IP.To4 (2 samples, 0.05%)</title><rect x="459.1" y="309" width="0.6" height="15.0" fill="rgb(219,171,43)" rx="2" ry="2" />
<text  x="462.10" y="319.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.02%)</title><rect x="454.4" y="325" width="0.3" height="15.0" fill="rgb(247,2,25)" rx="2" ry="2" />
<text  x="457.38" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (9 samples, 0.21%)</title><rect x="36.4" y="389" width="2.5" height="15.0" fill="rgb(220,138,33)" rx="2" ry="2" />
<text  x="39.40" y="399.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).removeNode (1 samples, 0.02%)</title><rect x="51.7" y="53" width="0.3" height="15.0" fill="rgb(218,131,51)" rx="2" ry="2" />
<text  x="54.69" y="63.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (956 samples, 22.52%)</title><rect x="899.3" y="405" width="265.7" height="15.0" fill="rgb(228,84,34)" rx="2" ry="2" />
<text  x="902.31" y="415.5" >runtime.entersyscallblock_handoff</text>
</g>
<g >
<title>runtime.(*_type).typeOff (2 samples, 0.05%)</title><rect x="50.0" y="261" width="0.6" height="15.0" fill="rgb(253,110,30)" rx="2" ry="2" />
<text  x="53.02" y="271.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="41.4" y="165" width="0.3" height="15.0" fill="rgb(205,77,24)" rx="2" ry="2" />
<text  x="44.40" y="175.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="223.2" y="309" width="0.2" height="15.0" fill="rgb(252,188,2)" rx="2" ry="2" />
<text  x="226.16" y="319.5" ></text>
</g>
<g >
<title>reflect.resolveTypeOff (2 samples, 0.05%)</title><rect x="50.0" y="277" width="0.6" height="15.0" fill="rgb(221,32,31)" rx="2" ry="2" />
<text  x="53.02" y="287.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.02%)</title><rect x="454.7" y="341" width="0.2" height="15.0" fill="rgb(227,222,2)" rx="2" ry="2" />
<text  x="457.65" y="351.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (2 samples, 0.05%)</title><rect x="38.1" y="341" width="0.5" height="15.0" fill="rgb(208,151,1)" rx="2" ry="2" />
<text  x="41.07" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (4 samples, 0.09%)</title><rect x="43.3" y="325" width="1.2" height="15.0" fill="rgb(224,51,39)" rx="2" ry="2" />
<text  x="46.35" y="335.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareRead (2 samples, 0.05%)</title><rect x="79.8" y="357" width="0.5" height="15.0" fill="rgb(209,193,8)" rx="2" ry="2" />
<text  x="82.76" y="367.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (2 samples, 0.05%)</title><rect x="52.8" y="341" width="0.6" height="15.0" fill="rgb(245,146,49)" rx="2" ry="2" />
<text  x="55.80" y="351.5" ></text>
</g>
<g >
<title>runtime.stopm (93 samples, 2.19%)</title><rect x="862.1" y="373" width="25.8" height="15.0" fill="rgb(251,192,24)" rx="2" ry="2" />
<text  x="865.07" y="383.5" >r..</text>
</g>
<g >
<title>runtime.concatstring4 (1 samples, 0.02%)</title><rect x="65.6" y="389" width="0.3" height="15.0" fill="rgb(212,90,12)" rx="2" ry="2" />
<text  x="68.58" y="399.5" ></text>
</g>
<g >
<title>net.JoinHostPort (3 samples, 0.07%)</title><rect x="458.3" y="341" width="0.8" height="15.0" fill="rgb(229,118,27)" rx="2" ry="2" />
<text  x="461.27" y="351.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="63.4" y="341" width="0.2" height="15.0" fill="rgb(253,145,5)" rx="2" ry="2" />
<text  x="66.36" y="351.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (7 samples, 0.16%)</title><rect x="1166.7" y="405" width="1.9" height="15.0" fill="rgb(230,139,48)" rx="2" ry="2" />
<text  x="1169.66" y="415.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="227.3" y="421" width="0.3" height="15.0" fill="rgb(246,70,49)" rx="2" ry="2" />
<text  x="230.32" y="431.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.02%)</title><rect x="51.1" y="277" width="0.3" height="15.0" fill="rgb(212,150,15)" rx="2" ry="2" />
<text  x="54.13" y="287.5" ></text>
</g>
<g >
<title>runtime.growslice (3 samples, 0.07%)</title><rect x="11.9" y="309" width="0.9" height="15.0" fill="rgb(247,49,53)" rx="2" ry="2" />
<text  x="14.95" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.02%)</title><rect x="55.3" y="293" width="0.3" height="15.0" fill="rgb(226,91,32)" rx="2" ry="2" />
<text  x="58.30" y="303.5" ></text>
</g>
<g >
<title>net.(*UDPAddr).sockaddr (5 samples, 0.12%)</title><rect x="229.3" y="389" width="1.4" height="15.0" fill="rgb(248,0,10)" rx="2" ry="2" />
<text  x="232.27" y="399.5" ></text>
</g>
<g >
<title>runtime.kevent_trampoline (1 samples, 0.02%)</title><rect x="451.3" y="421" width="0.3" height="15.0" fill="rgb(232,156,47)" rx="2" ry="2" />
<text  x="454.32" y="431.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (3 samples, 0.07%)</title><rect x="37.2" y="357" width="0.9" height="15.0" fill="rgb(228,34,48)" rx="2" ry="2" />
<text  x="40.24" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="73.1" y="357" width="0.3" height="15.0" fill="rgb(209,118,15)" rx="2" ry="2" />
<text  x="76.09" y="367.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (18 samples, 0.42%)</title><rect x="23.9" y="229" width="5.0" height="15.0" fill="rgb(220,151,36)" rx="2" ry="2" />
<text  x="26.90" y="239.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="454.4" y="309" width="0.3" height="15.0" fill="rgb(241,28,34)" rx="2" ry="2" />
<text  x="457.38" y="319.5" ></text>
</g>
<g >
<title>runtime.nanotime (8 samples, 0.19%)</title><rect x="494.1" y="373" width="2.2" height="15.0" fill="rgb(218,8,38)" rx="2" ry="2" />
<text  x="497.12" y="383.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ListenAndServe (123 samples, 2.90%)</title><rect x="457.7" y="389" width="34.2" height="15.0" fill="rgb(249,44,24)" rx="2" ry="2" />
<text  x="460.71" y="399.5" >hs..</text>
</g>
<g >
<title>net.JoinHostPort (1 samples, 0.02%)</title><rect x="65.6" y="405" width="0.3" height="15.0" fill="rgb(214,64,42)" rx="2" ry="2" />
<text  x="68.58" y="415.5" ></text>
</g>
<g >
<title>runtime.mcall (1,427 samples, 33.61%)</title><rect x="491.9" y="437" width="396.6" height="15.0" fill="rgb(235,40,45)" rx="2" ry="2" />
<text  x="494.89" y="447.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.notetsleep (4 samples, 0.09%)</title><rect x="1188.3" y="389" width="1.1" height="15.0" fill="rgb(216,81,16)" rx="2" ry="2" />
<text  x="1191.33" y="399.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Size (2 samples, 0.05%)</title><rect x="44.5" y="341" width="0.5" height="15.0" fill="rgb(225,131,13)" rx="2" ry="2" />
<text  x="47.46" y="351.5" ></text>
</g>
<g >
<title>syscall.anyToSockaddr (107 samples, 2.52%)</title><rect x="87.3" y="341" width="29.7" height="15.0" fill="rgb(213,192,43)" rx="2" ry="2" />
<text  x="90.26" y="351.5" >sy..</text>
</g>
<g >
<title>runtime.strequal (2 samples, 0.05%)</title><rect x="54.2" y="261" width="0.5" height="15.0" fill="rgb(217,130,27)" rx="2" ry="2" />
<text  x="57.19" y="271.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="42.2" y="245" width="0.3" height="15.0" fill="rgb(209,159,9)" rx="2" ry="2" />
<text  x="45.24" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (1 samples, 0.02%)</title><rect x="61.4" y="293" width="0.3" height="15.0" fill="rgb(206,143,50)" rx="2" ry="2" />
<text  x="64.41" y="303.5" ></text>
</g>
<g >
<title>runtime.jmpdefer (1 samples, 0.02%)</title><rect x="80.9" y="357" width="0.2" height="15.0" fill="rgb(248,215,35)" rx="2" ry="2" />
<text  x="83.87" y="367.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.02%)</title><rect x="51.1" y="213" width="0.3" height="15.0" fill="rgb(220,186,16)" rx="2" ry="2" />
<text  x="54.13" y="223.5" ></text>
</g>
<g >
<title>runtime.newproc (4 samples, 0.09%)</title><rect x="461.6" y="357" width="1.1" height="15.0" fill="rgb(214,67,37)" rx="2" ry="2" />
<text  x="464.60" y="367.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="45.0" y="325" width="0.3" height="15.0" fill="rgb(243,91,54)" rx="2" ry="2" />
<text  x="48.02" y="335.5" ></text>
</g>
<g >
<title>runtime.notewakeup (5 samples, 0.12%)</title><rect x="518.3" y="341" width="1.4" height="15.0" fill="rgb(253,158,36)" rx="2" ry="2" />
<text  x="521.29" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (5 samples, 0.12%)</title><rect x="40.6" y="357" width="1.4" height="15.0" fill="rgb(240,147,8)" rx="2" ry="2" />
<text  x="43.57" y="367.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="12.5" y="213" width="0.3" height="15.0" fill="rgb(232,33,51)" rx="2" ry="2" />
<text  x="15.50" y="223.5" ></text>
</g>
<g >
<title>runtime.heapBits.bits (1 samples, 0.02%)</title><rect x="41.4" y="149" width="0.3" height="15.0" fill="rgb(217,153,21)" rx="2" ry="2" />
<text  x="44.40" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="1186.1" y="309" width="0.8" height="15.0" fill="rgb(244,108,49)" rx="2" ry="2" />
<text  x="1189.11" y="319.5" ></text>
</g>
<g >
<title>runtime.newobject (2 samples, 0.05%)</title><rect x="35.8" y="389" width="0.6" height="15.0" fill="rgb(224,160,53)" rx="2" ry="2" />
<text  x="38.85" y="399.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (2 samples, 0.05%)</title><rect x="42.2" y="261" width="0.6" height="15.0" fill="rgb(235,85,53)" rx="2" ry="2" />
<text  x="45.24" y="271.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.02%)</title><rect x="41.7" y="341" width="0.3" height="15.0" fill="rgb(237,78,10)" rx="2" ry="2" />
<text  x="44.68" y="351.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="438.3" y="229" width="0.2" height="15.0" fill="rgb(213,35,22)" rx="2" ry="2" />
<text  x="441.26" y="239.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.02%)</title><rect x="1169.4" y="389" width="0.3" height="15.0" fill="rgb(240,34,37)" rx="2" ry="2" />
<text  x="1172.43" y="399.5" ></text>
</g>
<g >
<title>reflect.packEface (5 samples, 0.12%)</title><rect x="56.4" y="309" width="1.4" height="15.0" fill="rgb(243,223,33)" rx="2" ry="2" />
<text  x="59.41" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC.func1 (1 samples, 0.02%)</title><rect x="63.6" y="405" width="0.3" height="15.0" fill="rgb(251,136,9)" rx="2" ry="2" />
<text  x="66.64" y="415.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (63 samples, 1.48%)</title><rect x="45.6" y="373" width="17.5" height="15.0" fill="rgb(234,154,14)" rx="2" ry="2" />
<text  x="48.57" y="383.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="41.4" y="197" width="0.3" height="15.0" fill="rgb(244,127,5)" rx="2" ry="2" />
<text  x="44.40" y="207.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (1 samples, 0.02%)</title><rect x="245.9" y="341" width="0.3" height="15.0" fill="rgb(225,125,18)" rx="2" ry="2" />
<text  x="248.94" y="351.5" ></text>
</g>
<g >
<title>runtime.startm (5 samples, 0.12%)</title><rect x="824.6" y="357" width="1.3" height="15.0" fill="rgb(224,75,15)" rx="2" ry="2" />
<text  x="827.55" y="367.5" ></text>
</g>
<g >
<title>runtime.chansend1 (13 samples, 0.31%)</title><rect x="223.7" y="421" width="3.6" height="15.0" fill="rgb(230,138,21)" rx="2" ry="2" />
<text  x="226.71" y="431.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="456.6" y="357" width="0.3" height="15.0" fill="rgb(227,177,5)" rx="2" ry="2" />
<text  x="459.60" y="367.5" ></text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.02%)</title><rect x="462.2" y="277" width="0.2" height="15.0" fill="rgb(227,164,25)" rx="2" ry="2" />
<text  x="465.16" y="287.5" ></text>
</g>
<g >
<title>reflect.(*uncommonType).exportedMethods (2 samples, 0.05%)</title><rect x="57.8" y="309" width="0.6" height="15.0" fill="rgb(222,12,3)" rx="2" ry="2" />
<text  x="60.80" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce (1 samples, 0.02%)</title><rect x="51.7" y="101" width="0.3" height="15.0" fill="rgb(240,22,20)" rx="2" ry="2" />
<text  x="54.69" y="111.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (1 samples, 0.02%)</title><rect x="888.5" y="405" width="0.2" height="15.0" fill="rgb(228,185,54)" rx="2" ry="2" />
<text  x="891.47" y="415.5" ></text>
</g>
<g >
<title>runtime.chansend (13 samples, 0.31%)</title><rect x="223.7" y="405" width="3.6" height="15.0" fill="rgb(238,33,4)" rx="2" ry="2" />
<text  x="226.71" y="415.5" ></text>
</g>
<g >
<title>runtime.notetsleep (7 samples, 0.16%)</title><rect x="892.6" y="389" width="2.0" height="15.0" fill="rgb(244,201,32)" rx="2" ry="2" />
<text  x="895.64" y="399.5" ></text>
</g>
<g >
<title>runtime.releaseSudog (1 samples, 0.02%)</title><rect x="491.3" y="341" width="0.3" height="15.0" fill="rgb(219,30,12)" rx="2" ry="2" />
<text  x="494.34" y="351.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (3 samples, 0.07%)</title><rect x="437.7" y="277" width="0.8" height="15.0" fill="rgb(246,11,14)" rx="2" ry="2" />
<text  x="440.70" y="287.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.02%)</title><rect x="459.9" y="309" width="0.3" height="15.0" fill="rgb(234,102,36)" rx="2" ry="2" />
<text  x="462.93" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="42.0" y="341" width="0.8" height="15.0" fill="rgb(216,73,51)" rx="2" ry="2" />
<text  x="44.96" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (1 samples, 0.02%)</title><rect x="51.7" y="181" width="0.3" height="15.0" fill="rgb(228,45,45)" rx="2" ry="2" />
<text  x="54.69" y="191.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.02%)</title><rect x="520.2" y="389" width="0.3" height="15.0" fill="rgb(228,165,23)" rx="2" ry="2" />
<text  x="523.24" y="399.5" ></text>
</g>
<g >
<title>runtime.morestack (1 samples, 0.02%)</title><rect x="450.8" y="421" width="0.2" height="15.0" fill="rgb(238,124,31)" rx="2" ry="2" />
<text  x="453.76" y="431.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.UnpackMessage (3 samples, 0.07%)</title><rect x="74.8" y="421" width="0.8" height="15.0" fill="rgb(250,160,33)" rx="2" ry="2" />
<text  x="77.75" y="431.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (21 samples, 0.49%)</title><rect x="53.4" y="357" width="5.8" height="15.0" fill="rgb(223,162,16)" rx="2" ry="2" />
<text  x="56.35" y="367.5" ></text>
</g>
<g >
<title>runtime.pcdatastart (1 samples, 0.02%)</title><rect x="23.9" y="213" width="0.3" height="15.0" fill="rgb(218,188,50)" rx="2" ry="2" />
<text  x="26.90" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.02%)</title><rect x="1169.4" y="357" width="0.3" height="15.0" fill="rgb(225,77,31)" rx="2" ry="2" />
<text  x="1172.43" y="367.5" ></text>
</g>
<g >
<title>runtime.sellock (1 samples, 0.02%)</title><rect x="491.6" y="341" width="0.3" height="15.0" fill="rgb(210,222,1)" rx="2" ry="2" />
<text  x="494.62" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (2 samples, 0.05%)</title><rect x="42.2" y="277" width="0.6" height="15.0" fill="rgb(211,146,1)" rx="2" ry="2" />
<text  x="45.24" y="287.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Out (1 samples, 0.02%)</title><rect x="48.1" y="309" width="0.3" height="15.0" fill="rgb(248,118,28)" rx="2" ry="2" />
<text  x="51.07" y="319.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.07%)</title><rect x="437.7" y="293" width="0.8" height="15.0" fill="rgb(223,171,16)" rx="2" ry="2" />
<text  x="440.70" y="303.5" ></text>
</g>
<g >
<title>net.itoa (2 samples, 0.05%)</title><rect x="72.8" y="405" width="0.6" height="15.0" fill="rgb(210,147,48)" rx="2" ry="2" />
<text  x="75.81" y="415.5" ></text>
</g>
<g >
<title>runtime.usleep (4 samples, 0.09%)</title><rect x="707.3" y="341" width="1.1" height="15.0" fill="rgb(218,53,45)" rx="2" ry="2" />
<text  x="710.27" y="351.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.02%)</title><rect x="888.5" y="357" width="0.2" height="15.0" fill="rgb(221,216,42)" rx="2" ry="2" />
<text  x="891.47" y="367.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.02%)</title><rect x="458.8" y="245" width="0.3" height="15.0" fill="rgb(213,115,51)" rx="2" ry="2" />
<text  x="461.82" y="255.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (4 samples, 0.09%)</title><rect x="461.6" y="325" width="1.1" height="15.0" fill="rgb(206,87,27)" rx="2" ry="2" />
<text  x="464.60" y="335.5" ></text>
</g>
<g >
<title>runtime.newproc1 (5 samples, 0.12%)</title><rect x="1186.9" y="389" width="1.4" height="15.0" fill="rgb(237,10,54)" rx="2" ry="2" />
<text  x="1189.94" y="399.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.02%)</title><rect x="60.3" y="261" width="0.3" height="15.0" fill="rgb(226,3,47)" rx="2" ry="2" />
<text  x="63.30" y="271.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc.func1 (1 samples, 0.02%)</title><rect x="461.3" y="277" width="0.3" height="15.0" fill="rgb(231,57,46)" rx="2" ry="2" />
<text  x="464.32" y="287.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="73.9" y="405" width="0.6" height="15.0" fill="rgb(230,5,11)" rx="2" ry="2" />
<text  x="76.92" y="415.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="73.9" y="389" width="0.3" height="15.0" fill="rgb(249,68,13)" rx="2" ry="2" />
<text  x="76.92" y="399.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.02%)</title><rect x="216.2" y="181" width="0.3" height="15.0" fill="rgb(224,40,31)" rx="2" ry="2" />
<text  x="219.21" y="191.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Name (1 samples, 0.02%)</title><rect x="46.4" y="341" width="0.3" height="15.0" fill="rgb(205,137,40)" rx="2" ry="2" />
<text  x="49.41" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.02%)</title><rect x="1169.4" y="325" width="0.3" height="15.0" fill="rgb(244,107,1)" rx="2" ry="2" />
<text  x="1172.43" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (10 samples, 0.24%)</title><rect x="42.8" y="373" width="2.8" height="15.0" fill="rgb(208,113,21)" rx="2" ry="2" />
<text  x="45.79" y="383.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.09%)</title><rect x="707.3" y="373" width="1.1" height="15.0" fill="rgb(227,16,52)" rx="2" ry="2" />
<text  x="710.27" y="383.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (3 samples, 0.07%)</title><rect x="226.5" y="341" width="0.8" height="15.0" fill="rgb(215,16,21)" rx="2" ry="2" />
<text  x="229.49" y="351.5" ></text>
</g>
<g >
<title>runtime.callers.func1 (1 samples, 0.02%)</title><rect x="116.7" y="229" width="0.3" height="15.0" fill="rgb(223,38,6)" rx="2" ry="2" />
<text  x="119.72" y="239.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="223.4" y="389" width="0.3" height="15.0" fill="rgb(225,206,12)" rx="2" ry="2" />
<text  x="226.43" y="399.5" ></text>
</g>
<g >
<title>runtime.findrunnable (426 samples, 10.03%)</title><rect x="706.2" y="389" width="118.4" height="15.0" fill="rgb(215,107,4)" rx="2" ry="2" />
<text  x="709.16" y="399.5" >runtime.findru..</text>
</g>
<g >
<title>reflect.(*rtype).typeOff (3 samples, 0.07%)</title><rect x="58.4" y="325" width="0.8" height="15.0" fill="rgb(244,210,39)" rx="2" ry="2" />
<text  x="61.36" y="335.5" ></text>
</g>
<g >
<title>runtime.chansend (1 samples, 0.02%)</title><rect x="73.4" y="405" width="0.2" height="15.0" fill="rgb(212,141,14)" rx="2" ry="2" />
<text  x="76.36" y="415.5" ></text>
</g>
<g >
<title>runtime.kevent (19 samples, 0.45%)</title><rect x="500.5" y="357" width="5.3" height="15.0" fill="rgb(214,186,8)" rx="2" ry="2" />
<text  x="503.51" y="367.5" ></text>
</g>
<g >
<title>runtime.mstart (1,082 samples, 25.48%)</title><rect x="888.7" y="437" width="300.7" height="15.0" fill="rgb(207,112,27)" rx="2" ry="2" />
<text  x="891.75" y="447.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="223.4" y="357" width="0.3" height="15.0" fill="rgb(223,203,13)" rx="2" ry="2" />
<text  x="226.43" y="367.5" ></text>
</g>
<g >
<title>runtime.netpoll (209 samples, 4.92%)</title><rect x="710.6" y="373" width="58.1" height="15.0" fill="rgb(225,182,10)" rx="2" ry="2" />
<text  x="713.61" y="383.5" >runtim..</text>
</g>
<g >
<title>runtime.mstart1 (37 samples, 0.87%)</title><rect x="888.7" y="421" width="10.3" height="15.0" fill="rgb(221,218,9)" rx="2" ry="2" />
<text  x="891.75" y="431.5" ></text>
</g>
<g >
<title>runtime.setprofilebucket (1 samples, 0.02%)</title><rect x="461.3" y="261" width="0.3" height="15.0" fill="rgb(208,226,40)" rx="2" ry="2" />
<text  x="464.32" y="271.5" ></text>
</g>
<g >
<title>runtime.bgsweep (4 samples, 0.09%)</title><rect x="451.9" y="437" width="1.1" height="15.0" fill="rgb(220,120,35)" rx="2" ry="2" />
<text  x="454.87" y="447.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="35.8" y="373" width="0.6" height="15.0" fill="rgb(232,25,18)" rx="2" ry="2" />
<text  x="38.85" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).removeSpan (1 samples, 0.02%)</title><rect x="51.7" y="69" width="0.3" height="15.0" fill="rgb(230,46,29)" rx="2" ry="2" />
<text  x="54.69" y="79.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.02%)</title><rect x="72.5" y="245" width="0.3" height="15.0" fill="rgb(218,204,14)" rx="2" ry="2" />
<text  x="75.53" y="255.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.05%)</title><rect x="72.3" y="373" width="0.5" height="15.0" fill="rgb(210,79,24)" rx="2" ry="2" />
<text  x="75.25" y="383.5" ></text>
</g>
<g >
<title>net.(*UDPConn).readFrom (532 samples, 12.53%)</title><rect x="75.9" y="405" width="147.8" height="15.0" fill="rgb(229,212,23)" rx="2" ry="2" />
<text  x="78.86" y="415.5" >net.(*UDPConn).rea..</text>
</g>
<g >
<title>runtime.chanrecv2 (1 samples, 0.02%)</title><rect x="450.5" y="421" width="0.3" height="15.0" fill="rgb(246,118,41)" rx="2" ry="2" />
<text  x="453.49" y="431.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="12.2" y="213" width="0.3" height="15.0" fill="rgb(248,117,23)" rx="2" ry="2" />
<text  x="15.22" y="223.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (4 samples, 0.09%)</title><rect x="53.9" y="309" width="1.1" height="15.0" fill="rgb(223,22,10)" rx="2" ry="2" />
<text  x="56.91" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (5 samples, 0.12%)</title><rect x="1186.9" y="341" width="1.4" height="15.0" fill="rgb(208,120,38)" rx="2" ry="2" />
<text  x="1189.94" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.02%)</title><rect x="42.5" y="229" width="0.3" height="15.0" fill="rgb(208,125,40)" rx="2" ry="2" />
<text  x="45.52" y="239.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (1 samples, 0.02%)</title><rect x="52.2" y="149" width="0.3" height="15.0" fill="rgb(214,81,25)" rx="2" ry="2" />
<text  x="55.24" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="438.3" y="197" width="0.2" height="15.0" fill="rgb(219,102,41)" rx="2" ry="2" />
<text  x="441.26" y="207.5" ></text>
</g>
<g >
<title>reflect.Value.Type (5 samples, 0.12%)</title><rect x="57.8" y="341" width="1.4" height="15.0" fill="rgb(228,79,47)" rx="2" ry="2" />
<text  x="60.80" y="351.5" ></text>
</g>
<g >
<title>runtime.ready (62 samples, 1.46%)</title><rect x="1169.7" y="389" width="17.2" height="15.0" fill="rgb(245,30,41)" rx="2" ry="2" />
<text  x="1172.71" y="399.5" ></text>
</g>
<g >
<title>net.(*UDPConn).WriteToUDP (796 samples, 18.75%)</title><rect x="229.3" y="421" width="221.2" height="15.0" fill="rgb(216,188,17)" rx="2" ry="2" />
<text  x="232.27" y="431.5" >net.(*UDPConn).WriteToUDP</text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.05%)</title><rect x="72.3" y="325" width="0.5" height="15.0" fill="rgb(241,99,49)" rx="2" ry="2" />
<text  x="75.25" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (663 samples, 15.61%)</title><rect x="521.1" y="357" width="184.2" height="15.0" fill="rgb(227,49,28)" rx="2" ry="2" />
<text  x="524.07" y="367.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (4 samples, 0.09%)</title><rect x="1188.3" y="405" width="1.1" height="15.0" fill="rgb(229,70,11)" rx="2" ry="2" />
<text  x="1191.33" y="415.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.02%)</title><rect x="52.2" y="213" width="0.3" height="15.0" fill="rgb(221,44,17)" rx="2" ry="2" />
<text  x="55.24" y="223.5" ></text>
</g>
<g >
<title>runtime.wakep (62 samples, 1.46%)</title><rect x="1169.7" y="373" width="17.2" height="15.0" fill="rgb(226,141,52)" rx="2" ry="2" />
<text  x="1172.71" y="383.5" ></text>
</g>
<g >
<title>runtime.notewakeup (956 samples, 22.52%)</title><rect x="899.3" y="357" width="265.7" height="15.0" fill="rgb(210,45,41)" rx="2" ry="2" />
<text  x="902.31" y="367.5" >runtime.notewakeup</text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="12.5" y="197" width="0.3" height="15.0" fill="rgb(208,227,12)" rx="2" ry="2" />
<text  x="15.50" y="207.5" ></text>
</g>
<g >
<title>runtime.concatstring4 (3 samples, 0.07%)</title><rect x="458.3" y="325" width="0.8" height="15.0" fill="rgb(238,214,48)" rx="2" ry="2" />
<text  x="461.27" y="335.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.02%)</title><rect x="12.2" y="197" width="0.3" height="15.0" fill="rgb(227,102,46)" rx="2" ry="2" />
<text  x="15.22" y="207.5" ></text>
</g>
<g >
<title>runtime.syscall6 (1 samples, 0.02%)</title><rect x="451.6" y="421" width="0.3" height="15.0" fill="rgb(209,145,24)" rx="2" ry="2" />
<text  x="454.60" y="431.5" ></text>
</g>
<g >
<title>runtime.newobject (3 samples, 0.07%)</title><rect x="38.9" y="389" width="0.8" height="15.0" fill="rgb(233,40,34)" rx="2" ry="2" />
<text  x="41.90" y="399.5" ></text>
</g>
<g >
<title>runtime.notetsleep (7 samples, 0.16%)</title><rect x="1166.7" y="373" width="1.9" height="15.0" fill="rgb(243,170,31)" rx="2" ry="2" />
<text  x="1169.66" y="383.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (5 samples, 0.12%)</title><rect x="1165.0" y="389" width="1.4" height="15.0" fill="rgb(245,149,47)" rx="2" ry="2" />
<text  x="1167.99" y="399.5" ></text>
</g>
<g >
<title>runtime.semasleep (663 samples, 15.61%)</title><rect x="521.1" y="373" width="184.2" height="15.0" fill="rgb(231,209,22)" rx="2" ry="2" />
<text  x="524.07" y="383.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.isSystemGoroutine (3 samples, 0.07%)</title><rect x="461.9" y="293" width="0.8" height="15.0" fill="rgb(245,84,47)" rx="2" ry="2" />
<text  x="464.88" y="303.5" ></text>
</g>
<g >
<title>runtime.stackalloc (1 samples, 0.02%)</title><rect x="34.7" y="277" width="0.3" height="15.0" fill="rgb(252,8,5)" rx="2" ry="2" />
<text  x="37.73" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ArgsDecode (1 samples, 0.02%)</title><rect x="59.2" y="357" width="0.3" height="15.0" fill="rgb(240,144,9)" rx="2" ry="2" />
<text  x="62.19" y="367.5" ></text>
</g>
<g >
<title>runtime.goexit0 (434 samples, 10.22%)</title><rect x="705.3" y="421" width="120.6" height="15.0" fill="rgb(216,77,48)" rx="2" ry="2" />
<text  x="708.33" y="431.5" >runtime.goexit0</text>
</g>
<g >
<title>runtime.chanrecv (1 samples, 0.02%)</title><rect x="450.5" y="405" width="0.3" height="15.0" fill="rgb(208,38,9)" rx="2" ry="2" />
<text  x="453.49" y="415.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="1166.4" y="405" width="0.3" height="15.0" fill="rgb(221,100,39)" rx="2" ry="2" />
<text  x="1169.38" y="415.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="216.2" y="197" width="0.3" height="15.0" fill="rgb(226,42,26)" rx="2" ry="2" />
<text  x="219.21" y="207.5" ></text>
</g>
<g >
<title>runtime.getitab (2 samples, 0.05%)</title><rect x="38.1" y="357" width="0.5" height="15.0" fill="rgb(254,169,6)" rx="2" ry="2" />
<text  x="41.07" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="52.2" y="325" width="0.6" height="15.0" fill="rgb(220,76,13)" rx="2" ry="2" />
<text  x="55.24" y="335.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (6 samples, 0.14%)</title><rect x="56.1" y="341" width="1.7" height="15.0" fill="rgb(248,17,22)" rx="2" ry="2" />
<text  x="59.13" y="351.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="65.6" y="357" width="0.3" height="15.0" fill="rgb(238,55,36)" rx="2" ry="2" />
<text  x="68.58" y="367.5" ></text>
</g>
<g >
<title>runtime.wakep (5 samples, 0.12%)</title><rect x="518.3" y="373" width="1.4" height="15.0" fill="rgb(247,138,1)" rx="2" ry="2" />
<text  x="521.29" y="383.5" ></text>
</g>
<g >
<title>runtime.park_m (224 samples, 5.28%)</title><rect x="826.2" y="421" width="62.3" height="15.0" fill="rgb(213,83,1)" rx="2" ry="2" />
<text  x="829.22" y="431.5" >runtim..</text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="51.1" y="261" width="0.3" height="15.0" fill="rgb(237,197,15)" rx="2" ry="2" />
<text  x="54.13" y="271.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="52.5" y="309" width="0.3" height="15.0" fill="rgb(237,97,35)" rx="2" ry="2" />
<text  x="55.52" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Marshal (5 samples, 0.12%)</title><rect x="59.5" y="325" width="1.4" height="15.0" fill="rgb(212,77,10)" rx="2" ry="2" />
<text  x="62.47" y="335.5" ></text>
</g>
<g >
<title>runtime.gomcache (1 samples, 0.02%)</title><rect x="73.1" y="341" width="0.3" height="15.0" fill="rgb(226,95,30)" rx="2" ry="2" />
<text  x="76.09" y="351.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="36.1" y="357" width="0.3" height="15.0" fill="rgb(251,194,2)" rx="2" ry="2" />
<text  x="39.12" y="367.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.05%)</title><rect x="887.9" y="325" width="0.6" height="15.0" fill="rgb(219,115,39)" rx="2" ry="2" />
<text  x="890.91" y="335.5" ></text>
</g>
<g >
<title>runtime.gosched_m (1 samples, 0.02%)</title><rect x="825.9" y="421" width="0.3" height="15.0" fill="rgb(212,33,49)" rx="2" ry="2" />
<text  x="828.94" y="431.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="491.9" y="405" width="0.3" height="15.0" fill="rgb(215,64,33)" rx="2" ry="2" />
<text  x="494.89" y="415.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="38.6" y="357" width="0.3" height="15.0" fill="rgb(249,180,8)" rx="2" ry="2" />
<text  x="41.62" y="367.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="116.7" y="213" width="0.3" height="15.0" fill="rgb(239,50,19)" rx="2" ry="2" />
<text  x="119.72" y="223.5" ></text>
</g>
<g >
<title>net.(*UDPConn).writeTo (796 samples, 18.75%)</title><rect x="229.3" y="405" width="221.2" height="15.0" fill="rgb(254,39,29)" rx="2" ry="2" />
<text  x="232.27" y="415.5" >net.(*UDPConn).writeTo</text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="899.0" y="389" width="0.3" height="15.0" fill="rgb(232,204,25)" rx="2" ry="2" />
<text  x="902.03" y="399.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.05%)</title><rect x="453.5" y="341" width="0.6" height="15.0" fill="rgb(233,147,35)" rx="2" ry="2" />
<text  x="456.54" y="351.5" ></text>
</g>
<g >
<title>runtime._System (1 samples, 0.02%)</title><rect x="450.8" y="437" width="0.2" height="15.0" fill="rgb(251,220,27)" rx="2" ry="2" />
<text  x="453.76" y="447.5" ></text>
</g>
<g >
<title>runtime.convTstring (4 samples, 0.09%)</title><rect x="460.5" y="357" width="1.1" height="15.0" fill="rgb(243,185,21)" rx="2" ry="2" />
<text  x="463.49" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (93 samples, 2.19%)</title><rect x="862.1" y="325" width="25.8" height="15.0" fill="rgb(236,107,38)" rx="2" ry="2" />
<text  x="865.07" y="335.5" >r..</text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="55.9" y="293" width="0.2" height="15.0" fill="rgb(221,147,14)" rx="2" ry="2" />
<text  x="58.85" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (1 samples, 0.02%)</title><rect x="60.6" y="293" width="0.3" height="15.0" fill="rgb(218,51,23)" rx="2" ry="2" />
<text  x="63.58" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="52.2" y="293" width="0.3" height="15.0" fill="rgb(226,27,9)" rx="2" ry="2" />
<text  x="55.24" y="303.5" ></text>
</g>
<g >
<title>reflect.typedmemclrpartial (1 samples, 0.02%)</title><rect x="51.1" y="309" width="0.3" height="15.0" fill="rgb(211,46,51)" rx="2" ry="2" />
<text  x="54.13" y="319.5" ></text>
</g>
<g >
<title>runtime.concatstrings (3 samples, 0.07%)</title><rect x="458.3" y="309" width="0.8" height="15.0" fill="rgb(241,43,6)" rx="2" ry="2" />
<text  x="461.27" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.02%)</title><rect x="452.7" y="341" width="0.3" height="15.0" fill="rgb(239,0,7)" rx="2" ry="2" />
<text  x="455.71" y="351.5" ></text>
</g>
<g >
<title>runtime.pcvalue (17 samples, 0.40%)</title><rect x="24.2" y="213" width="4.7" height="15.0" fill="rgb(215,63,8)" rx="2" ry="2" />
<text  x="27.17" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (1 samples, 0.02%)</title><rect x="51.7" y="165" width="0.3" height="15.0" fill="rgb(239,205,22)" rx="2" ry="2" />
<text  x="54.69" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="41.4" y="181" width="0.3" height="15.0" fill="rgb(229,29,9)" rx="2" ry="2" />
<text  x="44.40" y="191.5" ></text>
</g>
<g >
<title>net.(*UDPAddr).String (28 samples, 0.66%)</title><rect x="65.6" y="421" width="7.8" height="15.0" fill="rgb(212,213,32)" rx="2" ry="2" />
<text  x="68.58" y="431.5" ></text>
</g>
<g >
<title>runtime.semasleep (7 samples, 0.16%)</title><rect x="1166.7" y="341" width="1.9" height="15.0" fill="rgb(233,145,33)" rx="2" ry="2" />
<text  x="1169.66" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.02%)</title><rect x="42.5" y="213" width="0.3" height="15.0" fill="rgb(254,229,5)" rx="2" ry="2" />
<text  x="45.52" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="52.2" y="245" width="0.3" height="15.0" fill="rgb(214,176,17)" rx="2" ry="2" />
<text  x="55.24" y="255.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="491.6" y="309" width="0.3" height="15.0" fill="rgb(222,212,28)" rx="2" ry="2" />
<text  x="494.62" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (3 samples, 0.07%)</title><rect x="60.9" y="309" width="0.8" height="15.0" fill="rgb(217,137,23)" rx="2" ry="2" />
<text  x="63.86" y="319.5" ></text>
</g>
<g >
<title>runtime.strequal (1 samples, 0.02%)</title><rect x="53.1" y="277" width="0.3" height="15.0" fill="rgb(211,130,33)" rx="2" ry="2" />
<text  x="56.08" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (956 samples, 22.52%)</title><rect x="899.3" y="341" width="265.7" height="15.0" fill="rgb(222,202,17)" rx="2" ry="2" />
<text  x="902.31" y="351.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.memmove (4 samples, 0.09%)</title><rect x="227.6" y="421" width="1.1" height="15.0" fill="rgb(250,171,50)" rx="2" ry="2" />
<text  x="230.60" y="431.5" ></text>
</g>
<g >
<title>runtime.callers (1 samples, 0.02%)</title><rect x="116.7" y="261" width="0.3" height="15.0" fill="rgb(209,151,11)" rx="2" ry="2" />
<text  x="119.72" y="271.5" ></text>
</g>
<g >
<title>runtime.pcvalue (12 samples, 0.28%)</title><rect x="30.6" y="245" width="3.3" height="15.0" fill="rgb(211,120,54)" rx="2" ry="2" />
<text  x="33.57" y="255.5" ></text>
</g>
<g >
<title>runtime.scang (2 samples, 0.05%)</title><rect x="454.1" y="341" width="0.6" height="15.0" fill="rgb(206,14,50)" rx="2" ry="2" />
<text  x="457.10" y="351.5" ></text>
</g>
<g >
<title>runtime.runqsteal (18 samples, 0.42%)</title><rect x="768.7" y="373" width="5.0" height="15.0" fill="rgb(254,128,15)" rx="2" ry="2" />
<text  x="771.69" y="383.5" ></text>
</g>
<g >
<title>runtime.semasleep (6 samples, 0.14%)</title><rect x="892.9" y="357" width="1.7" height="15.0" fill="rgb(206,193,27)" rx="2" ry="2" />
<text  x="895.92" y="367.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="73.4" y="357" width="0.2" height="15.0" fill="rgb(239,215,43)" rx="2" ry="2" />
<text  x="76.36" y="367.5" ></text>
</g>
<g >
<title>runtime.gotraceback (1 samples, 0.02%)</title><rect x="34.2" y="261" width="0.3" height="15.0" fill="rgb(233,113,32)" rx="2" ry="2" />
<text  x="37.18" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (86 samples, 2.03%)</title><rect x="11.4" y="341" width="23.9" height="15.0" fill="rgb(226,4,6)" rx="2" ry="2" />
<text  x="14.39" y="351.5" >g..</text>
</g>
<g >
<title>internal/poll.(*FD).WriteTo (790 samples, 18.61%)</title><rect x="230.9" y="373" width="219.6" height="15.0" fill="rgb(253,226,16)" rx="2" ry="2" />
<text  x="233.94" y="383.5" >internal/poll.(*FD).WriteTo</text>
</g>
<g >
<title>runtime.mallocgc (4 samples, 0.09%)</title><rect x="460.5" y="341" width="1.1" height="15.0" fill="rgb(220,48,12)" rx="2" ry="2" />
<text  x="463.49" y="351.5" ></text>
</g>
<g >
<title>runtime.semawakeup (3 samples, 0.07%)</title><rect x="1165.5" y="357" width="0.9" height="15.0" fill="rgb(235,101,32)" rx="2" ry="2" />
<text  x="1168.54" y="367.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.05%)</title><rect x="222.6" y="277" width="0.6" height="15.0" fill="rgb(231,135,26)" rx="2" ry="2" />
<text  x="225.60" y="287.5" ></text>
</g>
<g >
<title>reflect.(*rtype).typeOff (2 samples, 0.05%)</title><rect x="50.0" y="293" width="0.6" height="15.0" fill="rgb(215,132,33)" rx="2" ry="2" />
<text  x="53.02" y="303.5" ></text>
</g>
<g >
<title>runtime.getStackMap (25 samples, 0.59%)</title><rect x="22.0" y="245" width="6.9" height="15.0" fill="rgb(245,149,15)" rx="2" ry="2" />
<text  x="24.95" y="255.5" ></text>
</g>
<g >
<title>runtime.findmoduledatap (1 samples, 0.02%)</title><rect x="462.2" y="261" width="0.2" height="15.0" fill="rgb(254,78,13)" rx="2" ry="2" />
<text  x="465.16" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="50.9" y="277" width="0.2" height="15.0" fill="rgb(205,207,18)" rx="2" ry="2" />
<text  x="53.85" y="287.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (5 samples, 0.12%)</title><rect x="1186.9" y="405" width="1.4" height="15.0" fill="rgb(205,228,10)" rx="2" ry="2" />
<text  x="1189.94" y="415.5" ></text>
</g>
<g >
<title>runtime.runqput (1 samples, 0.02%)</title><rect x="227.0" y="309" width="0.3" height="15.0" fill="rgb(215,148,19)" rx="2" ry="2" />
<text  x="230.05" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (5 samples, 0.12%)</title><rect x="518.3" y="309" width="1.4" height="15.0" fill="rgb(207,188,28)" rx="2" ry="2" />
<text  x="521.29" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (1 samples, 0.02%)</title><rect x="42.5" y="197" width="0.3" height="15.0" fill="rgb(249,198,23)" rx="2" ry="2" />
<text  x="45.52" y="207.5" ></text>
</g>
<g >
<title>runtime.newstack (1 samples, 0.02%)</title><rect x="51.1" y="293" width="0.3" height="15.0" fill="rgb(212,143,54)" rx="2" ry="2" />
<text  x="54.13" y="303.5" ></text>
</g>
<g >
<title>runtime.wakep (5 samples, 0.12%)</title><rect x="824.6" y="373" width="1.3" height="15.0" fill="rgb(241,137,10)" rx="2" ry="2" />
<text  x="827.55" y="383.5" ></text>
</g>
<g >
<title>runtime.runqsteal (6 samples, 0.14%)</title><rect x="860.4" y="373" width="1.7" height="15.0" fill="rgb(207,178,50)" rx="2" ry="2" />
<text  x="863.40" y="383.5" ></text>
</g>
<g >
<title>syscall.Recvfrom (512 samples, 12.06%)</title><rect x="81.1" y="357" width="142.3" height="15.0" fill="rgb(252,103,40)" rx="2" ry="2" />
<text  x="84.14" y="367.5" >syscall.Recvfrom</text>
</g>
<g >
<title>runtime.chansend1 (1 samples, 0.02%)</title><rect x="73.4" y="421" width="0.2" height="15.0" fill="rgb(220,146,14)" rx="2" ry="2" />
<text  x="76.36" y="431.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (4 samples, 0.09%)</title><rect x="493.0" y="389" width="1.1" height="15.0" fill="rgb(224,112,32)" rx="2" ry="2" />
<text  x="496.01" y="399.5" ></text>
</g>
<g >
<title>runtime.usleep (5 samples, 0.12%)</title><rect x="860.7" y="341" width="1.4" height="15.0" fill="rgb(247,112,42)" rx="2" ry="2" />
<text  x="863.68" y="351.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.07%)</title><rect x="215.7" y="293" width="0.8" height="15.0" fill="rgb(247,224,34)" rx="2" ry="2" />
<text  x="218.65" y="303.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.05%)</title><rect x="80.3" y="357" width="0.6" height="15.0" fill="rgb(232,120,50)" rx="2" ry="2" />
<text  x="83.31" y="367.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.02%)</title><rect x="825.9" y="405" width="0.3" height="15.0" fill="rgb(235,95,23)" rx="2" ry="2" />
<text  x="828.94" y="415.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.05%)</title><rect x="72.3" y="309" width="0.5" height="15.0" fill="rgb(226,118,4)" rx="2" ry="2" />
<text  x="75.25" y="319.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (7 samples, 0.16%)</title><rect x="1166.7" y="357" width="1.9" height="15.0" fill="rgb(243,20,2)" rx="2" ry="2" />
<text  x="1169.66" y="367.5" ></text>
</g>
<g >
<title>runtime.fastrand (1 samples, 0.02%)</title><rect x="452.7" y="293" width="0.3" height="15.0" fill="rgb(232,85,22)" rx="2" ry="2" />
<text  x="455.71" y="303.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.05%)</title><rect x="1165.0" y="341" width="0.5" height="15.0" fill="rgb(249,100,18)" rx="2" ry="2" />
<text  x="1167.99" y="351.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (3 samples, 0.07%)</title><rect x="451.0" y="437" width="0.9" height="15.0" fill="rgb(250,125,1)" rx="2" ry="2" />
<text  x="454.04" y="447.5" ></text>
</g>
<g >
<title>runtime.runqsteal (4 samples, 0.09%)</title><rect x="506.1" y="373" width="1.1" height="15.0" fill="rgb(210,30,52)" rx="2" ry="2" />
<text  x="509.07" y="383.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="458.5" y="293" width="0.3" height="15.0" fill="rgb(214,46,6)" rx="2" ry="2" />
<text  x="461.54" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (197 samples, 4.64%)</title><rect x="10.8" y="421" width="54.8" height="15.0" fill="rgb(211,9,48)" rx="2" ry="2" />
<text  x="13.83" y="431.5" >hslam..</text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="73.4" y="373" width="0.2" height="15.0" fill="rgb(250,37,53)" rx="2" ry="2" />
<text  x="76.36" y="383.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (13 samples, 0.31%)</title><rect x="59.5" y="357" width="3.6" height="15.0" fill="rgb(211,129,38)" rx="2" ry="2" />
<text  x="62.47" y="367.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (1 samples, 0.02%)</title><rect x="51.1" y="197" width="0.3" height="15.0" fill="rgb(241,189,2)" rx="2" ry="2" />
<text  x="54.13" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="63.1" y="357" width="0.5" height="15.0" fill="rgb(249,201,54)" rx="2" ry="2" />
<text  x="66.08" y="367.5" ></text>
</g>
<g >
<title>runtime.newobject (3 samples, 0.07%)</title><rect x="73.6" y="421" width="0.9" height="15.0" fill="rgb(214,198,26)" rx="2" ry="2" />
<text  x="76.64" y="431.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (3 samples, 0.07%)</title><rect x="59.7" y="277" width="0.9" height="15.0" fill="rgb(247,3,0)" rx="2" ry="2" />
<text  x="62.75" y="287.5" ></text>
</g>
<g >
<title>runtime.ready (3 samples, 0.07%)</title><rect x="226.5" y="325" width="0.8" height="15.0" fill="rgb(250,194,39)" rx="2" ry="2" />
<text  x="229.49" y="335.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.05%)</title><rect x="1165.0" y="357" width="0.5" height="15.0" fill="rgb(241,96,32)" rx="2" ry="2" />
<text  x="1167.99" y="367.5" ></text>
</g>
<g >
<title>runtime.goexit1 (2 samples, 0.05%)</title><rect x="457.2" y="437" width="0.5" height="15.0" fill="rgb(221,185,40)" rx="2" ry="2" />
<text  x="460.15" y="447.5" ></text>
</g>
<g >
<title>runtime.usleep (18 samples, 0.42%)</title><rect x="768.7" y="341" width="5.0" height="15.0" fill="rgb(235,24,26)" rx="2" ry="2" />
<text  x="771.69" y="351.5" ></text>
</g>
<g >
<title>runtime.startm (5 samples, 0.12%)</title><rect x="518.3" y="357" width="1.4" height="15.0" fill="rgb(253,97,23)" rx="2" ry="2" />
<text  x="521.29" y="367.5" ></text>
</g>
<g >
<title>runtime.semawakeup (5 samples, 0.12%)</title><rect x="518.3" y="325" width="1.4" height="15.0" fill="rgb(219,138,4)" rx="2" ry="2" />
<text  x="521.29" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (4 samples, 0.09%)</title><rect x="11.7" y="325" width="1.1" height="15.0" fill="rgb(213,154,1)" rx="2" ry="2" />
<text  x="14.67" y="335.5" ></text>
</g>
<g >
<title>runtime.gfget (1 samples, 0.02%)</title><rect x="461.6" y="293" width="0.3" height="15.0" fill="rgb(237,182,31)" rx="2" ry="2" />
<text  x="464.60" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (59 samples, 1.39%)</title><rect x="1169.7" y="309" width="16.4" height="15.0" fill="rgb(229,111,43)" rx="2" ry="2" />
<text  x="1172.71" y="319.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="45.3" y="357" width="0.3" height="15.0" fill="rgb(252,30,12)" rx="2" ry="2" />
<text  x="48.29" y="367.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (24 samples, 0.57%)</title><rect x="216.5" y="309" width="6.7" height="15.0" fill="rgb(235,169,45)" rx="2" ry="2" />
<text  x="219.49" y="319.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (1 samples, 0.02%)</title><rect x="116.7" y="277" width="0.3" height="15.0" fill="rgb(214,36,38)" rx="2" ry="2" />
<text  x="119.72" y="287.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (6 samples, 0.14%)</title><rect x="53.4" y="325" width="1.6" height="15.0" fill="rgb(237,192,41)" rx="2" ry="2" />
<text  x="56.35" y="335.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (2 samples, 0.05%)</title><rect x="49.2" y="293" width="0.5" height="15.0" fill="rgb(239,139,13)" rx="2" ry="2" />
<text  x="52.19" y="303.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (100 samples, 2.36%)</title><rect x="463.3" y="341" width="27.8" height="15.0" fill="rgb(241,222,53)" rx="2" ry="2" />
<text  x="466.27" y="351.5" >r..</text>
</g>
<g >
<title>runtime.systemstack (4 samples, 0.09%)</title><rect x="461.6" y="341" width="1.1" height="15.0" fill="rgb(238,187,47)" rx="2" ry="2" />
<text  x="464.60" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (183 samples, 4.31%)</title><rect x="773.7" y="325" width="50.9" height="15.0" fill="rgb(217,146,41)" rx="2" ry="2" />
<text  x="776.69" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.notewakeup (5 samples, 0.12%)</title><rect x="824.6" y="341" width="1.3" height="15.0" fill="rgb(250,74,1)" rx="2" ry="2" />
<text  x="827.55" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (92 samples, 2.17%)</title><rect x="10.8" y="405" width="25.6" height="15.0" fill="rgb(237,106,2)" rx="2" ry="2" />
<text  x="13.83" y="415.5" >h..</text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (3 samples, 0.07%)</title><rect x="42.0" y="293" width="0.8" height="15.0" fill="rgb(218,60,27)" rx="2" ry="2" />
<text  x="44.96" y="303.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="492.4" y="389" width="0.3" height="15.0" fill="rgb(219,171,35)" rx="2" ry="2" />
<text  x="495.45" y="399.5" ></text>
</g>
<g >
<title>runtime.semasleep (93 samples, 2.19%)</title><rect x="862.1" y="341" width="25.8" height="15.0" fill="rgb(245,29,26)" rx="2" ry="2" />
<text  x="865.07" y="351.5" >r..</text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.05%)</title><rect x="41.1" y="277" width="0.6" height="15.0" fill="rgb(244,64,45)" rx="2" ry="2" />
<text  x="44.13" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeBytes3 (1 samples, 0.02%)</title><rect x="44.7" y="293" width="0.3" height="15.0" fill="rgb(219,145,28)" rx="2" ry="2" />
<text  x="47.74" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (8 samples, 0.19%)</title><rect x="1160.5" y="325" width="2.3" height="15.0" fill="rgb(212,97,4)" rx="2" ry="2" />
<text  x="1163.54" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="62.0" y="309" width="0.5" height="15.0" fill="rgb(216,26,46)" rx="2" ry="2" />
<text  x="64.97" y="319.5" ></text>
</g>
<g >
<title>runtime.adjustframe (44 samples, 1.04%)</title><rect x="16.7" y="261" width="12.2" height="15.0" fill="rgb(246,229,18)" rx="2" ry="2" />
<text  x="19.67" y="271.5" ></text>
</g>
<g >
<title>runtime.gentraceback (71 samples, 1.67%)</title><rect x="14.7" y="277" width="19.8" height="15.0" fill="rgb(237,25,33)" rx="2" ry="2" />
<text  x="17.72" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (3 samples, 0.07%)</title><rect x="506.3" y="341" width="0.9" height="15.0" fill="rgb(222,139,14)" rx="2" ry="2" />
<text  x="509.34" y="351.5" ></text>
</g>
<g >
<title>runtime.notesleep (183 samples, 4.31%)</title><rect x="773.7" y="357" width="50.9" height="15.0" fill="rgb(212,148,31)" rx="2" ry="2" />
<text  x="776.69" y="367.5" >runti..</text>
</g>
<g >
<title>all (4,246 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(213,27,5)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (86 samples, 2.03%)</title><rect x="39.7" y="405" width="23.9" height="15.0" fill="rgb(229,16,9)" rx="2" ry="2" />
<text  x="42.74" y="415.5" >h..</text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.02%)</title><rect x="52.2" y="229" width="0.3" height="15.0" fill="rgb(230,179,50)" rx="2" ry="2" />
<text  x="55.24" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (24 samples, 0.57%)</title><rect x="216.5" y="293" width="6.7" height="15.0" fill="rgb(215,142,48)" rx="2" ry="2" />
<text  x="219.49" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="38.6" y="341" width="0.3" height="15.0" fill="rgb(212,121,28)" rx="2" ry="2" />
<text  x="41.62" y="351.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.02%)</title><rect x="453.0" y="405" width="0.3" height="15.0" fill="rgb(242,125,35)" rx="2" ry="2" />
<text  x="455.99" y="415.5" ></text>
</g>
<g >
<title>runtime.netpoll (2 samples, 0.05%)</title><rect x="1168.6" y="373" width="0.6" height="15.0" fill="rgb(225,55,53)" rx="2" ry="2" />
<text  x="1171.60" y="383.5" ></text>
</g>
<g >
<title>reflect.Value.Call (19 samples, 0.45%)</title><rect x="46.7" y="341" width="5.3" height="15.0" fill="rgb(243,20,2)" rx="2" ry="2" />
<text  x="49.68" y="351.5" ></text>
</g>
<g >
<title>net.IP.To16 (1 samples, 0.02%)</title><rect x="230.4" y="357" width="0.3" height="15.0" fill="rgb(251,199,10)" rx="2" ry="2" />
<text  x="233.38" y="367.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.05%)</title><rect x="492.2" y="405" width="0.5" height="15.0" fill="rgb(249,201,21)" rx="2" ry="2" />
<text  x="495.17" y="415.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="51.7" y="149" width="0.3" height="15.0" fill="rgb(212,205,35)" rx="2" ry="2" />
<text  x="54.69" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="45.3" y="341" width="0.3" height="15.0" fill="rgb(212,144,12)" rx="2" ry="2" />
<text  x="48.29" y="351.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.05%)</title><rect x="438.0" y="245" width="0.5" height="15.0" fill="rgb(214,99,46)" rx="2" ry="2" />
<text  x="440.98" y="255.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).ReadFrom (521 samples, 12.27%)</title><rect x="78.6" y="373" width="144.8" height="15.0" fill="rgb(243,134,18)" rx="2" ry="2" />
<text  x="81.64" y="383.5" >internal/poll.(*FD..</text>
</g>
<g >
<title>runtime.arenaIndex (1 samples, 0.02%)</title><rect x="223.4" y="325" width="0.3" height="15.0" fill="rgb(212,132,38)" rx="2" ry="2" />
<text  x="226.43" y="335.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="492.4" y="373" width="0.3" height="15.0" fill="rgb(228,34,49)" rx="2" ry="2" />
<text  x="495.45" y="383.5" ></text>
</g>
<g >
<title>runtime.syscall6 (2 samples, 0.05%)</title><rect x="1189.4" y="437" width="0.6" height="15.0" fill="rgb(216,130,27)" rx="2" ry="2" />
<text  x="1192.44" y="447.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (12 samples, 0.28%)</title><rect x="30.6" y="261" width="3.3" height="15.0" fill="rgb(214,50,28)" rx="2" ry="2" />
<text  x="33.57" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (3 samples, 0.07%)</title><rect x="40.8" y="341" width="0.9" height="15.0" fill="rgb(225,152,15)" rx="2" ry="2" />
<text  x="43.85" y="351.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="1166.4" y="341" width="0.3" height="15.0" fill="rgb(221,13,34)" rx="2" ry="2" />
<text  x="1169.38" y="351.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="491.6" y="293" width="0.3" height="15.0" fill="rgb(249,118,29)" rx="2" ry="2" />
<text  x="494.62" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (87 samples, 2.05%)</title><rect x="11.1" y="357" width="24.2" height="15.0" fill="rgb(254,200,27)" rx="2" ry="2" />
<text  x="14.11" y="367.5" >g..</text>
</g>
<g >
<title>runtime.scang (1 samples, 0.02%)</title><rect x="52.2" y="197" width="0.3" height="15.0" fill="rgb(241,118,26)" rx="2" ry="2" />
<text  x="55.24" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.02%)</title><rect x="518.0" y="325" width="0.3" height="15.0" fill="rgb(229,78,9)" rx="2" ry="2" />
<text  x="521.02" y="335.5" ></text>
</g>
<g >
<title>runtime.stopm (666 samples, 15.69%)</title><rect x="520.2" y="405" width="185.1" height="15.0" fill="rgb(244,100,52)" rx="2" ry="2" />
<text  x="523.24" y="415.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="45.3" y="325" width="0.3" height="15.0" fill="rgb(221,191,23)" rx="2" ry="2" />
<text  x="48.29" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (4 samples, 0.09%)</title><rect x="59.7" y="309" width="1.2" height="15.0" fill="rgb(236,218,9)" rx="2" ry="2" />
<text  x="62.75" y="319.5" ></text>
</g>
<g >
<title>runtime.resetspinning (5 samples, 0.12%)</title><rect x="824.6" y="389" width="1.3" height="15.0" fill="rgb(209,122,3)" rx="2" ry="2" />
<text  x="827.55" y="399.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.02%)</title><rect x="454.7" y="357" width="0.2" height="15.0" fill="rgb(234,61,19)" rx="2" ry="2" />
<text  x="457.65" y="367.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Marshal (4 samples, 0.09%)</title><rect x="43.3" y="341" width="1.2" height="15.0" fill="rgb(206,214,31)" rx="2" ry="2" />
<text  x="46.35" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (25 samples, 0.59%)</title><rect x="45.9" y="357" width="6.9" height="15.0" fill="rgb(252,189,4)" rx="2" ry="2" />
<text  x="48.85" y="367.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (12 samples, 0.28%)</title><rect x="36.4" y="405" width="3.3" height="15.0" fill="rgb(250,72,6)" rx="2" ry="2" />
<text  x="39.40" y="415.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="1166.1" y="341" width="0.3" height="15.0" fill="rgb(236,121,32)" rx="2" ry="2" />
<text  x="1169.10" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*UDPListener).Serve (123 samples, 2.90%)</title><rect x="457.7" y="373" width="34.2" height="15.0" fill="rgb(236,2,5)" rx="2" ry="2" />
<text  x="460.71" y="383.5" >hs..</text>
</g>
<g >
<title>runtime.adjustframe (2 samples, 0.05%)</title><rect x="13.9" y="245" width="0.5" height="15.0" fill="rgb(238,88,29)" rx="2" ry="2" />
<text  x="16.89" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (5 samples, 0.12%)</title><rect x="1186.9" y="325" width="1.4" height="15.0" fill="rgb(219,133,51)" rx="2" ry="2" />
<text  x="1189.94" y="335.5" ></text>
</g>
<g >
<title>reflect.Value.call (19 samples, 0.45%)</title><rect x="46.7" y="325" width="5.3" height="15.0" fill="rgb(235,158,48)" rx="2" ry="2" />
<text  x="49.68" y="335.5" ></text>
</g>
<g >
<title>net.IP.String (4 samples, 0.09%)</title><rect x="459.1" y="325" width="1.1" height="15.0" fill="rgb(220,177,32)" rx="2" ry="2" />
<text  x="462.10" y="335.5" ></text>
</g>
<g >
<title>runtime.nilinterequal (1 samples, 0.02%)</title><rect x="53.1" y="309" width="0.3" height="15.0" fill="rgb(214,12,1)" rx="2" ry="2" />
<text  x="56.08" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (4 samples, 0.09%)</title><rect x="1188.3" y="341" width="1.1" height="15.0" fill="rgb(229,181,16)" rx="2" ry="2" />
<text  x="1191.33" y="351.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="12.2" y="293" width="0.6" height="15.0" fill="rgb(246,62,34)" rx="2" ry="2" />
<text  x="15.22" y="303.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (43 samples, 1.01%)</title><rect x="438.5" y="309" width="12.0" height="15.0" fill="rgb(219,206,28)" rx="2" ry="2" />
<text  x="441.54" y="319.5" ></text>
</g>
<g >
<title>runtime.fastrand (1 samples, 0.02%)</title><rect x="32.0" y="229" width="0.2" height="15.0" fill="rgb(207,7,24)" rx="2" ry="2" />
<text  x="34.95" y="239.5" ></text>
</g>
<g >
<title>runtime.(*_type).typeOff (2 samples, 0.05%)</title><rect x="58.6" y="293" width="0.6" height="15.0" fill="rgb(206,93,45)" rx="2" ry="2" />
<text  x="61.63" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.05%)</title><rect x="12.2" y="229" width="0.6" height="15.0" fill="rgb(245,23,48)" rx="2" ry="2" />
<text  x="15.22" y="239.5" ></text>
</g>
<g >
<title>syscall.recvfrom (383 samples, 9.02%)</title><rect x="117.0" y="341" width="106.4" height="15.0" fill="rgb(235,185,23)" rx="2" ry="2" />
<text  x="119.99" y="351.5" >syscall.recvf..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (2 samples, 0.05%)</title><rect x="44.5" y="325" width="0.5" height="15.0" fill="rgb(205,182,24)" rx="2" ry="2" />
<text  x="47.46" y="335.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="75.3" y="405" width="0.3" height="15.0" fill="rgb(226,133,39)" rx="2" ry="2" />
<text  x="78.31" y="415.5" ></text>
</g>
<g >
<title>runtime.forEachP (7 samples, 0.16%)</title><rect x="1166.7" y="389" width="1.9" height="15.0" fill="rgb(207,54,33)" rx="2" ry="2" />
<text  x="1169.66" y="399.5" ></text>
</g>
<g >
<title>runtime.stopm (183 samples, 4.31%)</title><rect x="773.7" y="373" width="50.9" height="15.0" fill="rgb(224,125,6)" rx="2" ry="2" />
<text  x="776.69" y="383.5" >runti..</text>
</g>
<g >
<title>runtime.findfunc (6 samples, 0.14%)</title><rect x="28.9" y="261" width="1.7" height="15.0" fill="rgb(247,138,42)" rx="2" ry="2" />
<text  x="31.90" y="271.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="438.3" y="181" width="0.2" height="15.0" fill="rgb(212,140,45)" rx="2" ry="2" />
<text  x="441.26" y="191.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="1166.4" y="357" width="0.3" height="15.0" fill="rgb(251,38,16)" rx="2" ry="2" />
<text  x="1169.38" y="367.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (2 samples, 0.05%)</title><rect x="60.9" y="293" width="0.5" height="15.0" fill="rgb(208,27,12)" rx="2" ry="2" />
<text  x="63.86" y="303.5" ></text>
</g>
<g >
<title>reflect.funcLayout (4 samples, 0.09%)</title><rect x="48.6" y="309" width="1.1" height="15.0" fill="rgb(239,37,1)" rx="2" ry="2" />
<text  x="51.63" y="319.5" ></text>
</g>
<g >
<title>runtime.heapBitsForAddr (1 samples, 0.02%)</title><rect x="39.5" y="341" width="0.2" height="15.0" fill="rgb(241,59,51)" rx="2" ry="2" />
<text  x="42.46" y="351.5" ></text>
</g>
<g >
<title>runtime.startm (62 samples, 1.46%)</title><rect x="1169.7" y="357" width="17.2" height="15.0" fill="rgb(238,159,3)" rx="2" ry="2" />
<text  x="1172.71" y="367.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (3 samples, 0.07%)</title><rect x="40.8" y="325" width="0.9" height="15.0" fill="rgb(206,47,16)" rx="2" ry="2" />
<text  x="43.85" y="335.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.05%)</title><rect x="887.9" y="357" width="0.6" height="15.0" fill="rgb(248,184,51)" rx="2" ry="2" />
<text  x="890.91" y="367.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="38.6" y="277" width="0.3" height="15.0" fill="rgb(225,156,8)" rx="2" ry="2" />
<text  x="41.62" y="287.5" ></text>
</g>
<g >
<title>reflect.methodReceiver (5 samples, 0.12%)</title><rect x="49.7" y="309" width="1.4" height="15.0" fill="rgb(245,3,22)" rx="2" ry="2" />
<text  x="52.74" y="319.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="222.9" y="229" width="0.3" height="15.0" fill="rgb(239,38,52)" rx="2" ry="2" />
<text  x="225.88" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (2 samples, 0.05%)</title><rect x="222.6" y="245" width="0.6" height="15.0" fill="rgb(207,46,15)" rx="2" ry="2" />
<text  x="225.60" y="255.5" ></text>
</g>
<g >
<title>runtime.resolveTypeOff (2 samples, 0.05%)</title><rect x="50.0" y="245" width="0.6" height="15.0" fill="rgb(212,50,53)" rx="2" ry="2" />
<text  x="53.02" y="255.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.02%)</title><rect x="64.2" y="389" width="0.3" height="15.0" fill="rgb(213,213,3)" rx="2" ry="2" />
<text  x="67.19" y="399.5" ></text>
</g>
<g >
<title>runtime.notesleep (93 samples, 2.19%)</title><rect x="862.1" y="357" width="25.8" height="15.0" fill="rgb(251,14,20)" rx="2" ry="2" />
<text  x="865.07" y="367.5" >r..</text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.02%)</title><rect x="453.0" y="421" width="0.3" height="15.0" fill="rgb(218,84,23)" rx="2" ry="2" />
<text  x="455.99" y="431.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (15 samples, 0.35%)</title><rect x="453.0" y="437" width="4.2" height="15.0" fill="rgb(223,204,33)" rx="2" ry="2" />
<text  x="455.99" y="447.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="38.6" y="293" width="0.3" height="15.0" fill="rgb(231,30,12)" rx="2" ry="2" />
<text  x="41.62" y="303.5" ></text>
</g>
<g >
<title>runtime.chansend.func1 (2 samples, 0.05%)</title><rect x="225.9" y="373" width="0.6" height="15.0" fill="rgb(242,146,17)" rx="2" ry="2" />
<text  x="228.93" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (1 samples, 0.02%)</title><rect x="452.7" y="373" width="0.3" height="15.0" fill="rgb(210,180,8)" rx="2" ry="2" />
<text  x="455.71" y="383.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.05%)</title><rect x="12.2" y="277" width="0.6" height="15.0" fill="rgb(212,41,35)" rx="2" ry="2" />
<text  x="15.22" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.05%)</title><rect x="12.2" y="261" width="0.6" height="15.0" fill="rgb(214,154,41)" rx="2" ry="2" />
<text  x="15.22" y="271.5" ></text>
</g>
<g >
<title>runtime.resetspinning (2 samples, 0.05%)</title><rect x="887.9" y="389" width="0.6" height="15.0" fill="rgb(210,38,48)" rx="2" ry="2" />
<text  x="890.91" y="399.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (1 samples, 0.02%)</title><rect x="452.7" y="405" width="0.3" height="15.0" fill="rgb(214,139,45)" rx="2" ry="2" />
<text  x="455.71" y="415.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (940 samples, 22.14%)</title><rect x="899.3" y="325" width="261.2" height="15.0" fill="rgb(245,174,7)" rx="2" ry="2" />
<text  x="902.31" y="335.5" >runtime.pthread_cond_signal</text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="51.4" y="293" width="0.6" height="15.0" fill="rgb(244,79,30)" rx="2" ry="2" />
<text  x="54.41" y="303.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (3 samples, 0.07%)</title><rect x="1168.6" y="405" width="0.8" height="15.0" fill="rgb(241,24,26)" rx="2" ry="2" />
<text  x="1171.60" y="415.5" ></text>
</g>
<g >
<title>runtime.checkdead (2 samples, 0.05%)</title><rect x="520.5" y="373" width="0.6" height="15.0" fill="rgb(213,209,46)" rx="2" ry="2" />
<text  x="523.52" y="383.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (89 samples, 2.10%)</title><rect x="11.1" y="389" width="24.7" height="15.0" fill="rgb(231,162,41)" rx="2" ry="2" />
<text  x="14.11" y="399.5" >g..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (1 samples, 0.02%)</title><rect x="37.0" y="325" width="0.2" height="15.0" fill="rgb(248,54,34)" rx="2" ry="2" />
<text  x="39.96" y="335.5" ></text>
</g>
<g >
<title>runtime.mput (2 samples, 0.05%)</title><rect x="520.5" y="389" width="0.6" height="15.0" fill="rgb(224,212,19)" rx="2" ry="2" />
<text  x="523.52" y="399.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.02%)</title><rect x="51.7" y="261" width="0.3" height="15.0" fill="rgb(231,130,40)" rx="2" ry="2" />
<text  x="54.69" y="271.5" ></text>
</g>
<g >
<title>net.ipToSockaddr (5 samples, 0.12%)</title><rect x="229.3" y="373" width="1.4" height="15.0" fill="rgb(228,59,50)" rx="2" ry="2" />
<text  x="232.27" y="383.5" ></text>
</g>
<g >
<title>runtime.makeslice (3 samples, 0.07%)</title><rect x="61.7" y="325" width="0.8" height="15.0" fill="rgb(253,210,16)" rx="2" ry="2" />
<text  x="64.69" y="335.5" ></text>
</g>
<g >
<title>main.main (123 samples, 2.90%)</title><rect x="457.7" y="421" width="34.2" height="15.0" fill="rgb(236,77,4)" rx="2" ry="2" />
<text  x="460.71" y="431.5" >ma..</text>
</g>
<g >
<title>runtime.entersyscallblock (3 samples, 0.07%)</title><rect x="437.7" y="309" width="0.8" height="15.0" fill="rgb(237,152,9)" rx="2" ry="2" />
<text  x="440.70" y="319.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.02%)</title><rect x="1169.4" y="373" width="0.3" height="15.0" fill="rgb(251,123,16)" rx="2" ry="2" />
<text  x="1172.43" y="383.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.05%)</title><rect x="72.3" y="341" width="0.5" height="15.0" fill="rgb(232,33,4)" rx="2" ry="2" />
<text  x="75.25" y="351.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="52.2" y="165" width="0.3" height="15.0" fill="rgb(229,139,21)" rx="2" ry="2" />
<text  x="55.24" y="175.5" ></text>
</g>
<g >
<title>runtime.goready (3 samples, 0.07%)</title><rect x="226.5" y="373" width="0.8" height="15.0" fill="rgb(216,201,51)" rx="2" ry="2" />
<text  x="229.49" y="383.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.02%)</title><rect x="73.1" y="373" width="0.3" height="15.0" fill="rgb(249,152,26)" rx="2" ry="2" />
<text  x="76.09" y="383.5" ></text>
</g>
<g >
<title>net.(*ipv6ZoneCache).name (6 samples, 0.14%)</title><rect x="76.1" y="389" width="1.7" height="15.0" fill="rgb(251,67,20)" rx="2" ry="2" />
<text  x="79.14" y="399.5" ></text>
</g>
<g >
<title>memeqbody (1 samples, 0.02%)</title><rect x="53.1" y="261" width="0.3" height="15.0" fill="rgb(212,164,50)" rx="2" ry="2" />
<text  x="56.08" y="271.5" ></text>
</g>
<g >
<title>runtime.funcdata (1 samples, 0.02%)</title><rect x="52.2" y="101" width="0.3" height="15.0" fill="rgb(210,178,2)" rx="2" ry="2" />
<text  x="55.24" y="111.5" ></text>
</g>
<g >
<title>net.uitoa (2 samples, 0.05%)</title><rect x="72.8" y="389" width="0.6" height="15.0" fill="rgb(223,108,39)" rx="2" ry="2" />
<text  x="75.81" y="399.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (3 samples, 0.07%)</title><rect x="215.7" y="277" width="0.8" height="15.0" fill="rgb(210,120,7)" rx="2" ry="2" />
<text  x="218.65" y="287.5" ></text>
</g>
<g >
<title>internal/bytealg.Equal (1 samples, 0.02%)</title><rect x="230.1" y="341" width="0.3" height="15.0" fill="rgb(226,149,18)" rx="2" ry="2" />
<text  x="233.10" y="351.5" ></text>
</g>
<g >
<title>runtime.stackfree (1 samples, 0.02%)</title><rect x="35.0" y="277" width="0.3" height="15.0" fill="rgb(254,195,42)" rx="2" ry="2" />
<text  x="38.01" y="287.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="72.3" y="357" width="0.5" height="15.0" fill="rgb(227,25,53)" rx="2" ry="2" />
<text  x="75.25" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).rotateRight (1 samples, 0.02%)</title><rect x="51.7" y="37" width="0.3" height="15.0" fill="rgb(246,183,27)" rx="2" ry="2" />
<text  x="54.69" y="47.5" ></text>
</g>
<g >
<title>runtime.handoffp (3 samples, 0.07%)</title><rect x="437.7" y="261" width="0.8" height="15.0" fill="rgb(242,43,6)" rx="2" ry="2" />
<text  x="440.70" y="271.5" ></text>
</g>
<g >
<title>runtime.heapBitsForAddr (1 samples, 0.02%)</title><rect x="52.5" y="293" width="0.3" height="15.0" fill="rgb(253,120,41)" rx="2" ry="2" />
<text  x="55.52" y="303.5" ></text>
</g>
<g >
<title>runtime.rawstringtmp (1 samples, 0.02%)</title><rect x="458.8" y="293" width="0.3" height="15.0" fill="rgb(212,197,20)" rx="2" ry="2" />
<text  x="461.82" y="303.5" ></text>
</g>
<g >
<title>net.(*UDPAddr).String (8 samples, 0.19%)</title><rect x="458.3" y="357" width="2.2" height="15.0" fill="rgb(225,71,50)" rx="2" ry="2" />
<text  x="461.27" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (4 samples, 0.09%)</title><rect x="55.0" y="309" width="1.1" height="15.0" fill="rgb(228,94,54)" rx="2" ry="2" />
<text  x="58.02" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.02%)</title><rect x="452.7" y="325" width="0.3" height="15.0" fill="rgb(239,203,0)" rx="2" ry="2" />
<text  x="455.71" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.02%)</title><rect x="51.7" y="245" width="0.3" height="15.0" fill="rgb(210,224,7)" rx="2" ry="2" />
<text  x="54.69" y="255.5" ></text>
</g>
<g >
<title>runtime.hasPrefix (1 samples, 0.02%)</title><rect x="462.4" y="277" width="0.3" height="15.0" fill="rgb(223,215,15)" rx="2" ry="2" />
<text  x="465.44" y="287.5" ></text>
</g>
<g >
<title>runtime.deferreturn (4 samples, 0.09%)</title><rect x="64.5" y="405" width="1.1" height="15.0" fill="rgb(208,101,18)" rx="2" ry="2" />
<text  x="67.47" y="415.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalInt32Value (81 samples, 1.91%)</title><rect x="12.8" y="325" width="22.5" height="15.0" fill="rgb(206,208,18)" rx="2" ry="2" />
<text  x="15.78" y="335.5" >g..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (11 samples, 0.26%)</title><rect x="59.5" y="341" width="3.0" height="15.0" fill="rgb(250,198,15)" rx="2" ry="2" />
<text  x="62.47" y="351.5" ></text>
</g>
<g >
<title>reflect.Value.IsNil (1 samples, 0.02%)</title><rect x="52.0" y="341" width="0.2" height="15.0" fill="rgb(253,0,43)" rx="2" ry="2" />
<text  x="54.96" y="351.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (5 samples, 0.12%)</title><rect x="215.1" y="309" width="1.4" height="15.0" fill="rgb(253,210,25)" rx="2" ry="2" />
<text  x="218.10" y="319.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.02%)</title><rect x="52.2" y="117" width="0.3" height="15.0" fill="rgb(249,41,23)" rx="2" ry="2" />
<text  x="55.24" y="127.5" ></text>
</g>
<g >
<title>runtime.kevent (110 samples, 2.59%)</title><rect x="829.8" y="357" width="30.6" height="15.0" fill="rgb(205,75,40)" rx="2" ry="2" />
<text  x="832.83" y="367.5" >ru..</text>
</g>
<g >
<title>runtime.notetsleep_internal (4 samples, 0.09%)</title><rect x="1188.3" y="373" width="1.1" height="15.0" fill="rgb(209,154,14)" rx="2" ry="2" />
<text  x="1191.33" y="383.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (1 samples, 0.02%)</title><rect x="519.7" y="389" width="0.3" height="15.0" fill="rgb(247,134,19)" rx="2" ry="2" />
<text  x="522.68" y="399.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="459.9" y="293" width="0.3" height="15.0" fill="rgb(232,51,27)" rx="2" ry="2" />
<text  x="462.93" y="303.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.02%)</title><rect x="51.1" y="181" width="0.3" height="15.0" fill="rgb(245,49,50)" rx="2" ry="2" />
<text  x="54.13" y="191.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="52.2" y="309" width="0.3" height="15.0" fill="rgb(222,75,18)" rx="2" ry="2" />
<text  x="55.24" y="319.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (2 samples, 0.05%)</title><rect x="222.6" y="261" width="0.6" height="15.0" fill="rgb(234,173,24)" rx="2" ry="2" />
<text  x="225.60" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (3 samples, 0.07%)</title><rect x="42.0" y="325" width="0.8" height="15.0" fill="rgb(229,148,21)" rx="2" ry="2" />
<text  x="44.96" y="335.5" ></text>
</g>
<g >
<title>runtime.semawakeup (5 samples, 0.12%)</title><rect x="824.6" y="325" width="1.3" height="15.0" fill="rgb(245,25,2)" rx="2" ry="2" />
<text  x="827.55" y="335.5" ></text>
</g>
<g >
<title>runtime.scanobject (2 samples, 0.05%)</title><rect x="72.3" y="261" width="0.5" height="15.0" fill="rgb(247,97,27)" rx="2" ry="2" />
<text  x="75.25" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.02%)</title><rect x="899.0" y="405" width="0.3" height="15.0" fill="rgb(207,146,3)" rx="2" ry="2" />
<text  x="902.03" y="415.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (768 samples, 18.09%)</title><rect x="491.9" y="421" width="213.4" height="15.0" fill="rgb(232,175,41)" rx="2" ry="2" />
<text  x="494.89" y="431.5" >runtime.exitsyscall0</text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="861.8" y="325" width="0.3" height="15.0" fill="rgb(235,106,43)" rx="2" ry="2" />
<text  x="864.79" y="335.5" ></text>
</g>
<g >
<title>net.ipEmptyString (4 samples, 0.09%)</title><rect x="459.1" y="341" width="1.1" height="15.0" fill="rgb(216,164,36)" rx="2" ry="2" />
<text  x="462.10" y="351.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="38.6" y="261" width="0.3" height="15.0" fill="rgb(240,200,25)" rx="2" ry="2" />
<text  x="41.62" y="271.5" ></text>
</g>
<g >
<title>runtime.newobject (2 samples, 0.05%)</title><rect x="50.6" y="293" width="0.5" height="15.0" fill="rgb(217,76,26)" rx="2" ry="2" />
<text  x="53.57" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (3 samples, 0.07%)</title><rect x="59.7" y="293" width="0.9" height="15.0" fill="rgb(233,225,37)" rx="2" ry="2" />
<text  x="62.75" y="303.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.02%)</title><rect x="454.4" y="277" width="0.3" height="15.0" fill="rgb(211,6,15)" rx="2" ry="2" />
<text  x="457.38" y="287.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1.1 (1 samples, 0.02%)</title><rect x="519.7" y="373" width="0.3" height="15.0" fill="rgb(222,100,41)" rx="2" ry="2" />
<text  x="522.68" y="383.5" ></text>
</g>
<g >
<title>runtime.gopark (1 samples, 0.02%)</title><rect x="491.1" y="341" width="0.2" height="15.0" fill="rgb(211,9,43)" rx="2" ry="2" />
<text  x="494.06" y="351.5" ></text>
</g>
<g >
<title>sync.(*entry).load (1 samples, 0.02%)</title><rect x="49.5" y="277" width="0.2" height="15.0" fill="rgb(231,98,30)" rx="2" ry="2" />
<text  x="52.46" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (6 samples, 0.14%)</title><rect x="892.9" y="341" width="1.7" height="15.0" fill="rgb(228,48,3)" rx="2" ry="2" />
<text  x="895.92" y="351.5" ></text>
</g>
<g >
<title>runtime.getArgInfoFast (1 samples, 0.02%)</title><rect x="33.9" y="261" width="0.3" height="15.0" fill="rgb(216,71,10)" rx="2" ry="2" />
<text  x="36.90" y="271.5" ></text>
</g>
<g >
<title>net.(*netFD).writeTo (791 samples, 18.63%)</title><rect x="230.7" y="389" width="219.8" height="15.0" fill="rgb(215,218,40)" rx="2" ry="2" />
<text  x="233.66" y="399.5" >net.(*netFD).writeTo</text>
</g>
<g >
<title>runtime.runqgrab (4 samples, 0.09%)</title><rect x="506.1" y="357" width="1.1" height="15.0" fill="rgb(221,61,48)" rx="2" ry="2" />
<text  x="509.07" y="367.5" ></text>
</g>
<g >
<title>runtime.netpollready (1 samples, 0.02%)</title><rect x="505.8" y="357" width="0.3" height="15.0" fill="rgb(211,86,17)" rx="2" ry="2" />
<text  x="508.79" y="367.5" ></text>
</g>
<g >
<title>runtime.step (10 samples, 0.24%)</title><rect x="26.1" y="197" width="2.8" height="15.0" fill="rgb(207,46,29)" rx="2" ry="2" />
<text  x="29.12" y="207.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollReset (1 samples, 0.02%)</title><rect x="80.0" y="325" width="0.3" height="15.0" fill="rgb(247,222,44)" rx="2" ry="2" />
<text  x="83.03" y="335.5" ></text>
</g>
<g >
<title>runtime.gcDrain (14 samples, 0.33%)</title><rect x="453.3" y="389" width="3.9" height="15.0" fill="rgb(225,20,34)" rx="2" ry="2" />
<text  x="456.26" y="399.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (9 samples, 0.21%)</title><rect x="40.3" y="373" width="2.5" height="15.0" fill="rgb(254,178,19)" rx="2" ry="2" />
<text  x="43.29" y="383.5" ></text>
</g>
<g >
<title>runtime.wirep (1 samples, 0.02%)</title><rect x="520.2" y="373" width="0.3" height="15.0" fill="rgb(246,41,39)" rx="2" ry="2" />
<text  x="523.24" y="383.5" ></text>
</g>
<g >
<title>runtime.save (1 samples, 0.02%)</title><rect x="215.4" y="293" width="0.3" height="15.0" fill="rgb(229,4,39)" rx="2" ry="2" />
<text  x="218.37" y="303.5" ></text>
</g>
<g >
<title>runtime.runqgrab (6 samples, 0.14%)</title><rect x="860.4" y="357" width="1.7" height="15.0" fill="rgb(238,30,16)" rx="2" ry="2" />
<text  x="863.40" y="367.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (1 samples, 0.02%)</title><rect x="519.7" y="357" width="0.3" height="15.0" fill="rgb(239,189,32)" rx="2" ry="2" />
<text  x="522.68" y="367.5" ></text>
</g>
<g >
<title>runtime.main (123 samples, 2.90%)</title><rect x="457.7" y="437" width="34.2" height="15.0" fill="rgb(233,225,44)" rx="2" ry="2" />
<text  x="460.71" y="447.5" >ru..</text>
</g>
<g >
<title>runtime.(*mspan).sweep (1 samples, 0.02%)</title><rect x="51.7" y="197" width="0.3" height="15.0" fill="rgb(207,120,15)" rx="2" ry="2" />
<text  x="54.69" y="207.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="50.9" y="261" width="0.2" height="15.0" fill="rgb(254,3,45)" rx="2" ry="2" />
<text  x="53.85" y="271.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (1 samples, 0.02%)</title><rect x="454.4" y="293" width="0.3" height="15.0" fill="rgb(223,175,12)" rx="2" ry="2" />
<text  x="457.38" y="303.5" ></text>
</g>
<g >
<title>runtime.netpoll (117 samples, 2.76%)</title><rect x="827.9" y="373" width="32.5" height="15.0" fill="rgb(240,33,21)" rx="2" ry="2" />
<text  x="830.89" y="383.5" >ru..</text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (1 samples, 0.02%)</title><rect x="452.7" y="389" width="0.3" height="15.0" fill="rgb(222,179,41)" rx="2" ry="2" />
<text  x="455.71" y="399.5" ></text>
</g>
<g >
<title>runtime.stopm (40 samples, 0.94%)</title><rect x="507.2" y="373" width="11.1" height="15.0" fill="rgb(253,120,0)" rx="2" ry="2" />
<text  x="510.18" y="383.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="461.0" y="325" width="0.3" height="15.0" fill="rgb(254,175,50)" rx="2" ry="2" />
<text  x="464.05" y="335.5" ></text>
</g>
<g >
<title>runtime.adjustsudogs (1 samples, 0.02%)</title><rect x="14.4" y="277" width="0.3" height="15.0" fill="rgb(245,144,44)" rx="2" ry="2" />
<text  x="17.45" y="287.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="458.8" y="261" width="0.3" height="15.0" fill="rgb(213,202,19)" rx="2" ry="2" />
<text  x="461.82" y="271.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (2 samples, 0.05%)</title><rect x="454.1" y="357" width="0.6" height="15.0" fill="rgb(238,23,19)" rx="2" ry="2" />
<text  x="457.10" y="367.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (14 samples, 0.33%)</title><rect x="453.3" y="405" width="3.9" height="15.0" fill="rgb(232,84,16)" rx="2" ry="2" />
<text  x="456.26" y="415.5" ></text>
</g>
<g >
<title>runtime.newstack (1 samples, 0.02%)</title><rect x="888.5" y="421" width="0.2" height="15.0" fill="rgb(254,157,39)" rx="2" ry="2" />
<text  x="891.47" y="431.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="216.2" y="213" width="0.3" height="15.0" fill="rgb(225,108,53)" rx="2" ry="2" />
<text  x="219.21" y="223.5" ></text>
</g>
<g >
<title>runtime.handoffp (3 samples, 0.07%)</title><rect x="215.7" y="261" width="0.8" height="15.0" fill="rgb(209,107,40)" rx="2" ry="2" />
<text  x="218.65" y="271.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="888.5" y="373" width="0.2" height="15.0" fill="rgb(239,58,39)" rx="2" ry="2" />
<text  x="891.47" y="383.5" ></text>
</g>
<g >
<title>reflect.New (4 samples, 0.09%)</title><rect x="55.0" y="341" width="1.1" height="15.0" fill="rgb(210,134,16)" rx="2" ry="2" />
<text  x="58.02" y="351.5" ></text>
</g>
<g >
<title>runtime.usleep (4 samples, 0.09%)</title><rect x="224.8" y="357" width="1.1" height="15.0" fill="rgb(212,138,35)" rx="2" ry="2" />
<text  x="227.82" y="367.5" ></text>
</g>
<g >
<title>runtime.adjustpointers (1 samples, 0.02%)</title><rect x="13.9" y="229" width="0.3" height="15.0" fill="rgb(228,129,16)" rx="2" ry="2" />
<text  x="16.89" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (43 samples, 1.01%)</title><rect x="438.5" y="293" width="12.0" height="15.0" fill="rgb(222,203,32)" rx="2" ry="2" />
<text  x="441.54" y="303.5" ></text>
</g>
<g >
<title>reflect.resolveTypeOff (3 samples, 0.07%)</title><rect x="58.4" y="309" width="0.8" height="15.0" fill="rgb(207,17,39)" rx="2" ry="2" />
<text  x="61.36" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (62 samples, 1.46%)</title><rect x="1169.7" y="341" width="17.2" height="15.0" fill="rgb(224,135,43)" rx="2" ry="2" />
<text  x="1172.71" y="351.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.09%)</title><rect x="224.8" y="389" width="1.1" height="15.0" fill="rgb(233,216,8)" rx="2" ry="2" />
<text  x="227.82" y="399.5" ></text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.05%)</title><rect x="80.3" y="341" width="0.6" height="15.0" fill="rgb(237,177,4)" rx="2" ry="2" />
<text  x="83.31" y="351.5" ></text>
</g>
<g >
<title>runtime.wakep (5 samples, 0.12%)</title><rect x="1186.9" y="373" width="1.4" height="15.0" fill="rgb(241,171,34)" rx="2" ry="2" />
<text  x="1189.94" y="383.5" ></text>
</g>
<g >
<title>runtime.gfget.func1 (1 samples, 0.02%)</title><rect x="461.6" y="277" width="0.3" height="15.0" fill="rgb(247,55,52)" rx="2" ry="2" />
<text  x="464.60" y="287.5" ></text>
</g>
<g >
<title>syscall.sendto (732 samples, 17.24%)</title><rect x="247.1" y="341" width="203.4" height="15.0" fill="rgb(248,193,51)" rx="2" ry="2" />
<text  x="250.06" y="351.5" >syscall.sendto</text>
</g>
<g >
<title>net.IP.To4 (19 samples, 0.45%)</title><rect x="66.4" y="373" width="5.3" height="15.0" fill="rgb(228,96,3)" rx="2" ry="2" />
<text  x="69.42" y="383.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (8 samples, 0.19%)</title><rect x="1162.8" y="325" width="2.2" height="15.0" fill="rgb(248,129,15)" rx="2" ry="2" />
<text  x="1165.76" y="335.5" ></text>
</g>
<g >
<title>runtime.efaceeq (1 samples, 0.02%)</title><rect x="53.1" y="293" width="0.3" height="15.0" fill="rgb(223,140,6)" rx="2" ry="2" />
<text  x="56.08" y="303.5" ></text>
</g>
<g >
<title>reflect.resolveTextOff (1 samples, 0.02%)</title><rect x="49.7" y="277" width="0.3" height="15.0" fill="rgb(251,140,44)" rx="2" ry="2" />
<text  x="52.74" y="287.5" ></text>
</g>
<g >
<title>runtime.assertE2I (2 samples, 0.05%)</title><rect x="62.5" y="341" width="0.6" height="15.0" fill="rgb(247,103,49)" rx="2" ry="2" />
<text  x="65.52" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).insert (1 samples, 0.02%)</title><rect x="452.7" y="309" width="0.3" height="15.0" fill="rgb(230,40,40)" rx="2" ry="2" />
<text  x="455.71" y="319.5" ></text>
</g>
<g >
<title>runtime.funcdata (2 samples, 0.05%)</title><rect x="23.3" y="229" width="0.6" height="15.0" fill="rgb(221,209,26)" rx="2" ry="2" />
<text  x="26.34" y="239.5" ></text>
</g>
<g >
<title>runtime.schedule (224 samples, 5.28%)</title><rect x="826.2" y="405" width="62.3" height="15.0" fill="rgb(240,121,36)" rx="2" ry="2" />
<text  x="829.22" y="415.5" >runtim..</text>
</g>
<g >
<title>runtime.schedule (99 samples, 2.33%)</title><rect x="492.7" y="405" width="27.5" height="15.0" fill="rgb(221,147,44)" rx="2" ry="2" />
<text  x="495.73" y="415.5" >r..</text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="1169.2" y="357" width="0.2" height="15.0" fill="rgb(237,171,29)" rx="2" ry="2" />
<text  x="1172.16" y="367.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.02%)</title><rect x="454.4" y="261" width="0.3" height="15.0" fill="rgb(241,48,38)" rx="2" ry="2" />
<text  x="457.38" y="271.5" ></text>
</g>
<g >
<title>runtime.getitab (2 samples, 0.05%)</title><rect x="35.3" y="357" width="0.5" height="15.0" fill="rgb(235,156,20)" rx="2" ry="2" />
<text  x="38.29" y="367.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="42.5" y="245" width="0.3" height="15.0" fill="rgb(232,114,14)" rx="2" ry="2" />
<text  x="45.52" y="255.5" ></text>
</g>
<g >
<title>runtime.newobject (26 samples, 0.61%)</title><rect x="109.8" y="325" width="7.2" height="15.0" fill="rgb(232,2,9)" rx="2" ry="2" />
<text  x="112.77" y="335.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (1 samples, 0.02%)</title><rect x="52.2" y="133" width="0.3" height="15.0" fill="rgb(251,101,54)" rx="2" ry="2" />
<text  x="55.24" y="143.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (3 samples, 0.07%)</title><rect x="43.6" y="309" width="0.9" height="15.0" fill="rgb(251,77,44)" rx="2" ry="2" />
<text  x="46.63" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="38.6" y="309" width="0.3" height="15.0" fill="rgb(229,6,26)" rx="2" ry="2" />
<text  x="41.62" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.05%)</title><rect x="72.3" y="293" width="0.5" height="15.0" fill="rgb(236,77,53)" rx="2" ry="2" />
<text  x="75.25" y="303.5" ></text>
</g>
<g >
<title>runtime.notesleep (663 samples, 15.61%)</title><rect x="521.1" y="389" width="184.2" height="15.0" fill="rgb(220,43,44)" rx="2" ry="2" />
<text  x="524.07" y="399.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.(*randomEnum).next (2 samples, 0.05%)</title><rect x="706.7" y="373" width="0.6" height="15.0" fill="rgb(225,80,35)" rx="2" ry="2" />
<text  x="709.72" y="383.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUTF8StringValue (2 samples, 0.05%)</title><rect x="41.1" y="293" width="0.6" height="15.0" fill="rgb(216,139,6)" rx="2" ry="2" />
<text  x="44.13" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (3 samples, 0.07%)</title><rect x="36.4" y="357" width="0.8" height="15.0" fill="rgb(254,22,21)" rx="2" ry="2" />
<text  x="39.40" y="367.5" ></text>
</g>
<g >
<title>runtime.kevent (2 samples, 0.05%)</title><rect x="1168.6" y="357" width="0.6" height="15.0" fill="rgb(249,105,16)" rx="2" ry="2" />
<text  x="1171.60" y="367.5" ></text>
</g>
<g >
<title>syscall.syscall6 (732 samples, 17.24%)</title><rect x="247.1" y="325" width="203.4" height="15.0" fill="rgb(245,157,33)" rx="2" ry="2" />
<text  x="250.06" y="335.5" >syscall.syscall6</text>
</g>
<g >
<title>runtime.efaceeq (2 samples, 0.05%)</title><rect x="54.2" y="277" width="0.5" height="15.0" fill="rgb(243,192,2)" rx="2" ry="2" />
<text  x="57.19" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (14 samples, 0.33%)</title><rect x="453.3" y="421" width="3.9" height="15.0" fill="rgb(229,154,48)" rx="2" ry="2" />
<text  x="456.26" y="431.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (1 samples, 0.02%)</title><rect x="461.3" y="309" width="0.3" height="15.0" fill="rgb(242,88,41)" rx="2" ry="2" />
<text  x="464.32" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.02%)</title><rect x="51.7" y="277" width="0.3" height="15.0" fill="rgb(207,98,14)" rx="2" ry="2" />
<text  x="54.69" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WriteUDPConn (799 samples, 18.82%)</title><rect x="228.7" y="437" width="222.1" height="15.0" fill="rgb(212,95,26)" rx="2" ry="2" />
<text  x="231.71" y="447.5" >hslam.com/mgit/Mort/rpc/proto..</text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.05%)</title><rect x="887.9" y="341" width="0.6" height="15.0" fill="rgb(245,46,14)" rx="2" ry="2" />
<text  x="890.91" y="351.5" ></text>
</g>
<g >
<title>runtime.adjustpointers (2 samples, 0.05%)</title><rect x="21.4" y="245" width="0.6" height="15.0" fill="rgb(243,51,16)" rx="2" ry="2" />
<text  x="24.39" y="255.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.02%)</title><rect x="62.8" y="309" width="0.3" height="15.0" fill="rgb(247,148,16)" rx="2" ry="2" />
<text  x="65.80" y="319.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="116.7" y="245" width="0.3" height="15.0" fill="rgb(238,210,46)" rx="2" ry="2" />
<text  x="119.72" y="255.5" ></text>
</g>
<g >
<title>net.appendHex (1 samples, 0.02%)</title><rect x="459.7" y="309" width="0.2" height="15.0" fill="rgb(216,45,18)" rx="2" ry="2" />
<text  x="462.66" y="319.5" ></text>
</g>
<g >
<title>syscall.Sendto (733 samples, 17.26%)</title><rect x="246.8" y="357" width="203.7" height="15.0" fill="rgb(206,113,14)" rx="2" ry="2" />
<text  x="249.78" y="367.5" >syscall.Sendto</text>
</g>
<g >
<title>runtime.startTheWorldWithSema (3 samples, 0.07%)</title><rect x="1168.6" y="389" width="0.8" height="15.0" fill="rgb(214,38,30)" rx="2" ry="2" />
<text  x="1171.60" y="399.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (2 samples, 0.05%)</title><rect x="79.8" y="341" width="0.5" height="15.0" fill="rgb(230,38,48)" rx="2" ry="2" />
<text  x="82.76" y="351.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.05%)</title><rect x="1165.0" y="373" width="0.5" height="15.0" fill="rgb(250,103,4)" rx="2" ry="2" />
<text  x="1167.99" y="383.5" ></text>
</g>
<g >
<title>net.IP.String (25 samples, 0.59%)</title><rect x="65.9" y="389" width="6.9" height="15.0" fill="rgb(225,30,39)" rx="2" ry="2" />
<text  x="68.86" y="399.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="216.2" y="229" width="0.3" height="15.0" fill="rgb(226,169,4)" rx="2" ry="2" />
<text  x="219.21" y="239.5" ></text>
</g>
<g >
<title>memeqbody (1 samples, 0.02%)</title><rect x="462.4" y="261" width="0.3" height="15.0" fill="rgb(240,14,39)" rx="2" ry="2" />
<text  x="465.44" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (86 samples, 2.03%)</title><rect x="39.7" y="389" width="23.9" height="15.0" fill="rgb(253,13,27)" rx="2" ry="2" />
<text  x="42.74" y="399.5" >h..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendUTF8StringValueNoZero (1 samples, 0.02%)</title><rect x="44.2" y="293" width="0.3" height="15.0" fill="rgb(207,27,53)" rx="2" ry="2" />
<text  x="47.18" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="227.3" y="405" width="0.3" height="15.0" fill="rgb(245,152,35)" rx="2" ry="2" />
<text  x="230.32" y="415.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.checkSum (1 samples, 0.02%)</title><rect x="75.0" y="405" width="0.3" height="15.0" fill="rgb(213,220,49)" rx="2" ry="2" />
<text  x="78.03" y="415.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (2 samples, 0.05%)</title><rect x="52.8" y="325" width="0.6" height="15.0" fill="rgb(235,170,13)" rx="2" ry="2" />
<text  x="55.80" y="335.5" ></text>
</g>
<g >
<title>runtime.heapBitsForAddr (1 samples, 0.02%)</title><rect x="223.4" y="341" width="0.3" height="15.0" fill="rgb(213,203,52)" rx="2" ry="2" />
<text  x="226.43" y="351.5" ></text>
</g>
<g >
<title>net.(*UDPConn).ReadFromUDP (533 samples, 12.55%)</title><rect x="75.6" y="421" width="148.1" height="15.0" fill="rgb(227,88,28)" rx="2" ry="2" />
<text  x="78.59" y="431.5" >net.(*UDPConn).Rea..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (3 samples, 0.07%)</title><rect x="37.2" y="341" width="0.9" height="15.0" fill="rgb(210,141,5)" rx="2" ry="2" />
<text  x="40.24" y="351.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="62.8" y="325" width="0.3" height="15.0" fill="rgb(224,106,22)" rx="2" ry="2" />
<text  x="65.80" y="335.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (62 samples, 1.46%)</title><rect x="1169.7" y="405" width="17.2" height="15.0" fill="rgb(216,123,23)" rx="2" ry="2" />
<text  x="1172.71" y="415.5" ></text>
</g>
<g >
<title>runtime.concatstrings (1 samples, 0.02%)</title><rect x="65.6" y="373" width="0.3" height="15.0" fill="rgb(226,162,51)" rx="2" ry="2" />
<text  x="68.58" y="383.5" ></text>
</g>
<g >
<title>runtime.usleep (16 samples, 0.38%)</title><rect x="894.6" y="389" width="4.4" height="15.0" fill="rgb(218,207,24)" rx="2" ry="2" />
<text  x="897.58" y="399.5" ></text>
</g>
<g >
<title>runtime.notewakeup (3 samples, 0.07%)</title><rect x="1165.5" y="373" width="0.9" height="15.0" fill="rgb(208,59,52)" rx="2" ry="2" />
<text  x="1168.54" y="383.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.02%)</title><rect x="51.1" y="165" width="0.3" height="15.0" fill="rgb(239,150,36)" rx="2" ry="2" />
<text  x="54.13" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (3 samples, 0.07%)</title><rect x="40.8" y="309" width="0.9" height="15.0" fill="rgb(253,174,20)" rx="2" ry="2" />
<text  x="43.85" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="1166.4" y="389" width="0.3" height="15.0" fill="rgb(244,94,48)" rx="2" ry="2" />
<text  x="1169.38" y="399.5" ></text>
</g>
<g >
<title>runtime.selectgo (105 samples, 2.47%)</title><rect x="462.7" y="357" width="29.2" height="15.0" fill="rgb(206,23,39)" rx="2" ry="2" />
<text  x="465.71" y="367.5" >ru..</text>
</g>
<g >
<title>runtime.osyield (4 samples, 0.09%)</title><rect x="224.8" y="373" width="1.1" height="15.0" fill="rgb(231,106,24)" rx="2" ry="2" />
<text  x="227.82" y="383.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="452.7" y="357" width="0.3" height="15.0" fill="rgb(247,140,10)" rx="2" ry="2" />
<text  x="455.71" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce (1 samples, 0.02%)</title><rect x="42.5" y="165" width="0.3" height="15.0" fill="rgb(215,161,31)" rx="2" ry="2" />
<text  x="45.52" y="175.5" ></text>
</g>
<g >
<title>runtime.nilinterequal (2 samples, 0.05%)</title><rect x="54.2" y="293" width="0.5" height="15.0" fill="rgb(210,22,3)" rx="2" ry="2" />
<text  x="57.19" y="303.5" ></text>
</g>
<g >
<title>runtime.findrunnable (222 samples, 5.23%)</title><rect x="826.2" y="389" width="61.7" height="15.0" fill="rgb(222,60,38)" rx="2" ry="2" />
<text  x="829.22" y="399.5" >runtim..</text>
</g>
<g >
<title>runtime.osyield (4 samples, 0.09%)</title><rect x="707.3" y="357" width="1.1" height="15.0" fill="rgb(220,77,51)" rx="2" ry="2" />
<text  x="710.27" y="367.5" ></text>
</g>
<g >
<title>net.uitoa (1 samples, 0.02%)</title><rect x="460.2" y="325" width="0.3" height="15.0" fill="rgb(254,25,0)" rx="2" ry="2" />
<text  x="463.21" y="335.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="825.9" y="389" width="0.3" height="15.0" fill="rgb(222,14,21)" rx="2" ry="2" />
<text  x="828.94" y="399.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (4 samples, 0.09%)</title><rect x="55.0" y="325" width="1.1" height="15.0" fill="rgb(248,181,23)" rx="2" ry="2" />
<text  x="58.02" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (6 samples, 0.14%)</title><rect x="53.4" y="341" width="1.6" height="15.0" fill="rgb(246,42,7)" rx="2" ry="2" />
<text  x="56.35" y="351.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="38.6" y="325" width="0.3" height="15.0" fill="rgb(245,33,45)" rx="2" ry="2" />
<text  x="41.62" y="335.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.05%)</title><rect x="215.9" y="245" width="0.6" height="15.0" fill="rgb(254,7,46)" rx="2" ry="2" />
<text  x="218.93" y="255.5" ></text>
</g>
<g >
<title>reflect.Value.assignTo (1 samples, 0.02%)</title><rect x="48.4" y="309" width="0.2" height="15.0" fill="rgb(208,4,2)" rx="2" ry="2" />
<text  x="51.35" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (5 samples, 0.12%)</title><rect x="824.6" y="309" width="1.3" height="15.0" fill="rgb(241,113,1)" rx="2" ry="2" />
<text  x="827.55" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="41.1" y="261" width="0.6" height="15.0" fill="rgb(233,82,11)" rx="2" ry="2" />
<text  x="44.13" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.02%)</title><rect x="51.7" y="117" width="0.3" height="15.0" fill="rgb(224,10,40)" rx="2" ry="2" />
<text  x="54.69" y="127.5" ></text>
</g>
<g >
<title>runtime.startm (5 samples, 0.12%)</title><rect x="1186.9" y="357" width="1.4" height="15.0" fill="rgb(227,75,36)" rx="2" ry="2" />
<text  x="1189.94" y="367.5" ></text>
</g>
<g >
<title>reflect.valueInterface (6 samples, 0.14%)</title><rect x="56.1" y="325" width="1.7" height="15.0" fill="rgb(251,197,27)" rx="2" ry="2" />
<text  x="59.13" y="335.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (25 samples, 0.59%)</title><rect x="109.8" y="293" width="6.9" height="15.0" fill="rgb(243,219,21)" rx="2" ry="2" />
<text  x="112.77" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="52.2" y="261" width="0.3" height="15.0" fill="rgb(217,226,11)" rx="2" ry="2" />
<text  x="55.24" y="271.5" ></text>
</g>
<g >
<title>runtime.newproc1 (4 samples, 0.09%)</title><rect x="461.6" y="309" width="1.1" height="15.0" fill="rgb(215,27,52)" rx="2" ry="2" />
<text  x="464.60" y="319.5" ></text>
</g>
<g >
<title>runtime.semasleep (4 samples, 0.09%)</title><rect x="1188.3" y="357" width="1.1" height="15.0" fill="rgb(228,61,8)" rx="2" ry="2" />
<text  x="1191.33" y="367.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (87 samples, 2.05%)</title><rect x="11.1" y="373" width="24.2" height="15.0" fill="rgb(242,19,32)" rx="2" ry="2" />
<text  x="14.11" y="383.5" >h..</text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.02%)</title><rect x="888.5" y="389" width="0.2" height="15.0" fill="rgb(218,111,2)" rx="2" ry="2" />
<text  x="891.47" y="399.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.02%)</title><rect x="14.2" y="229" width="0.2" height="15.0" fill="rgb(206,203,48)" rx="2" ry="2" />
<text  x="17.17" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (4 samples, 0.09%)</title><rect x="1186.9" y="309" width="1.2" height="15.0" fill="rgb(228,188,50)" rx="2" ry="2" />
<text  x="1189.94" y="319.5" ></text>
</g>
<g >
<title>runtime.send (5 samples, 0.12%)</title><rect x="225.9" y="389" width="1.4" height="15.0" fill="rgb(219,116,22)" rx="2" ry="2" />
<text  x="228.93" y="399.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="438.3" y="213" width="0.2" height="15.0" fill="rgb(206,130,12)" rx="2" ry="2" />
<text  x="441.26" y="223.5" ></text>
</g>
<g >
<title>runtime.rawstring (1 samples, 0.02%)</title><rect x="458.8" y="277" width="0.3" height="15.0" fill="rgb(208,112,10)" rx="2" ry="2" />
<text  x="461.82" y="287.5" ></text>
</g>
<g >
<title>syscall.syscall6 (383 samples, 9.02%)</title><rect x="117.0" y="325" width="106.4" height="15.0" fill="rgb(213,169,40)" rx="2" ry="2" />
<text  x="119.99" y="335.5" >syscall.sysca..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.05%)</title><rect x="887.9" y="309" width="0.6" height="15.0" fill="rgb(246,109,50)" rx="2" ry="2" />
<text  x="890.91" y="319.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (1 samples, 0.02%)</title><rect x="51.1" y="245" width="0.3" height="15.0" fill="rgb(209,71,2)" rx="2" ry="2" />
<text  x="54.13" y="255.5" ></text>
</g>
<g >
<title>runtime.profilealloc (1 samples, 0.02%)</title><rect x="461.3" y="325" width="0.3" height="15.0" fill="rgb(253,101,24)" rx="2" ry="2" />
<text  x="464.32" y="335.5" ></text>
</g>
<g >
<title>net.ipEmptyString (25 samples, 0.59%)</title><rect x="65.9" y="405" width="6.9" height="15.0" fill="rgb(217,224,43)" rx="2" ry="2" />
<text  x="68.86" y="415.5" ></text>
</g>
<g >
<title>runtime.nanotime (14 samples, 0.33%)</title><rect x="888.7" y="389" width="3.9" height="15.0" fill="rgb(224,175,51)" rx="2" ry="2" />
<text  x="891.75" y="399.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollReset (1 samples, 0.02%)</title><rect x="245.9" y="325" width="0.3" height="15.0" fill="rgb(252,55,26)" rx="2" ry="2" />
<text  x="248.94" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenAndServe (123 samples, 2.90%)</title><rect x="457.7" y="405" width="34.2" height="15.0" fill="rgb(213,149,35)" rx="2" ry="2" />
<text  x="460.71" y="415.5" >hs..</text>
</g>
<g >
<title>runtime.schedule (432 samples, 10.17%)</title><rect x="705.9" y="405" width="120.0" height="15.0" fill="rgb(239,54,34)" rx="2" ry="2" />
<text  x="708.88" y="415.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.heapBits.bits (1 samples, 0.02%)</title><rect x="456.9" y="357" width="0.3" height="15.0" fill="rgb(244,31,24)" rx="2" ry="2" />
<text  x="459.88" y="367.5" ></text>
</g>
<g >
<title>runtime.stackalloc (1 samples, 0.02%)</title><rect x="461.6" y="261" width="0.3" height="15.0" fill="rgb(239,117,51)" rx="2" ry="2" />
<text  x="464.60" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.07%)</title><rect x="226.5" y="357" width="0.8" height="15.0" fill="rgb(216,200,39)" rx="2" ry="2" />
<text  x="229.49" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="1188.1" y="309" width="0.2" height="15.0" fill="rgb(216,171,31)" rx="2" ry="2" />
<text  x="1191.05" y="319.5" ></text>
</g>
<g >
<title>runtime.startm (956 samples, 22.52%)</title><rect x="899.3" y="373" width="265.7" height="15.0" fill="rgb(206,168,31)" rx="2" ry="2" />
<text  x="902.31" y="383.5" >runtime.startm</text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.02%)</title><rect x="42.5" y="181" width="0.3" height="15.0" fill="rgb(240,5,30)" rx="2" ry="2" />
<text  x="45.52" y="191.5" ></text>
</g>
<g >
<title>runtime.handoff (2 samples, 0.05%)</title><rect x="453.5" y="357" width="0.6" height="15.0" fill="rgb(212,152,0)" rx="2" ry="2" />
<text  x="456.54" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="38.9" y="373" width="0.8" height="15.0" fill="rgb(251,64,16)" rx="2" ry="2" />
<text  x="41.90" y="383.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.05%)</title><rect x="1165.5" y="341" width="0.6" height="15.0" fill="rgb(231,0,27)" rx="2" ry="2" />
<text  x="1168.54" y="351.5" ></text>
</g>
<g >
<title>runtime.resolveTypeOff (2 samples, 0.05%)</title><rect x="58.6" y="277" width="0.6" height="15.0" fill="rgb(234,85,41)" rx="2" ry="2" />
<text  x="61.63" y="287.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="491.6" y="325" width="0.3" height="15.0" fill="rgb(212,148,26)" rx="2" ry="2" />
<text  x="494.62" y="335.5" ></text>
</g>
<g >
<title>runtime.step (6 samples, 0.14%)</title><rect x="32.2" y="229" width="1.7" height="15.0" fill="rgb(225,146,14)" rx="2" ry="2" />
<text  x="35.23" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.05%)</title><rect x="12.2" y="245" width="0.6" height="15.0" fill="rgb(247,141,25)" rx="2" ry="2" />
<text  x="15.22" y="255.5" ></text>
</g>
<g >
<title>runtime.semasleep (40 samples, 0.94%)</title><rect x="507.2" y="341" width="11.1" height="15.0" fill="rgb(215,162,53)" rx="2" ry="2" />
<text  x="510.18" y="351.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="1166.4" y="373" width="0.3" height="15.0" fill="rgb(218,60,52)" rx="2" ry="2" />
<text  x="1169.38" y="383.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeue (3 samples, 0.07%)</title><rect x="224.0" y="389" width="0.8" height="15.0" fill="rgb(227,16,13)" rx="2" ry="2" />
<text  x="226.99" y="399.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.02%)</title><rect x="454.1" y="325" width="0.3" height="15.0" fill="rgb(244,112,40)" rx="2" ry="2" />
<text  x="457.10" y="335.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.05%)</title><rect x="246.2" y="357" width="0.6" height="15.0" fill="rgb(206,153,2)" rx="2" ry="2" />
<text  x="249.22" y="367.5" ></text>
</g>
<g >
<title>runtime.copystack (78 samples, 1.84%)</title><rect x="13.6" y="293" width="21.7" height="15.0" fill="rgb(245,212,35)" rx="2" ry="2" />
<text  x="16.61" y="303.5" >r..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="223.4" y="373" width="0.3" height="15.0" fill="rgb(250,17,3)" rx="2" ry="2" />
<text  x="226.43" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (1 samples, 0.02%)</title><rect x="55.3" y="277" width="0.3" height="15.0" fill="rgb(226,147,21)" rx="2" ry="2" />
<text  x="58.30" y="287.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (6 samples, 0.14%)</title><rect x="892.9" y="373" width="1.7" height="15.0" fill="rgb(237,139,32)" rx="2" ry="2" />
<text  x="895.92" y="383.5" ></text>
</g>
<g >
<title>runtime.morestack (1 samples, 0.02%)</title><rect x="888.5" y="437" width="0.2" height="15.0" fill="rgb(221,62,35)" rx="2" ry="2" />
<text  x="891.47" y="447.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="1169.4" y="341" width="0.3" height="15.0" fill="rgb(252,27,38)" rx="2" ry="2" />
<text  x="1172.43" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Size (3 samples, 0.07%)</title><rect x="37.2" y="373" width="0.9" height="15.0" fill="rgb(230,97,0)" rx="2" ry="2" />
<text  x="40.24" y="383.5" ></text>
</g>
<g >
<title>runtime.gorecover (1 samples, 0.02%)</title><rect x="63.6" y="389" width="0.3" height="15.0" fill="rgb(213,46,53)" rx="2" ry="2" />
<text  x="66.64" y="399.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (3 samples, 0.07%)</title><rect x="38.9" y="357" width="0.8" height="15.0" fill="rgb(230,5,17)" rx="2" ry="2" />
<text  x="41.90" y="367.5" ></text>
</g>
<g >
<title>runtime.findrunnable (87 samples, 2.05%)</title><rect x="494.1" y="389" width="24.2" height="15.0" fill="rgb(232,20,26)" rx="2" ry="2" />
<text  x="497.12" y="399.5" >r..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (3 samples, 0.07%)</title><rect x="60.9" y="325" width="0.8" height="15.0" fill="rgb(215,90,40)" rx="2" ry="2" />
<text  x="63.86" y="335.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (1 samples, 0.02%)</title><rect x="51.1" y="229" width="0.3" height="15.0" fill="rgb(254,91,15)" rx="2" ry="2" />
<text  x="54.13" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce.func1 (1 samples, 0.02%)</title><rect x="51.7" y="85" width="0.3" height="15.0" fill="rgb(224,197,53)" rx="2" ry="2" />
<text  x="54.69" y="95.5" ></text>
</g>
<g >
<title>runtime.netpoll (35 samples, 0.82%)</title><rect x="496.3" y="373" width="9.8" height="15.0" fill="rgb(248,195,11)" rx="2" ry="2" />
<text  x="499.34" y="383.5" ></text>
</g>
<g >
<title>runtime.runqget (1 samples, 0.02%)</title><rect x="520.0" y="389" width="0.2" height="15.0" fill="rgb(247,16,31)" rx="2" ry="2" />
<text  x="522.96" y="399.5" ></text>
</g>
<g >
<title>runtime.newobject (3 samples, 0.07%)</title><rect x="42.0" y="357" width="0.8" height="15.0" fill="rgb(234,62,23)" rx="2" ry="2" />
<text  x="44.96" y="367.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="41.7" y="325" width="0.3" height="15.0" fill="rgb(214,131,4)" rx="2" ry="2" />
<text  x="44.68" y="335.5" ></text>
</g>
<g >
<title>reflect.(*rtype).textOff (1 samples, 0.02%)</title><rect x="49.7" y="293" width="0.3" height="15.0" fill="rgb(231,5,41)" rx="2" ry="2" />
<text  x="52.74" y="303.5" ></text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.05%)</title><rect x="51.4" y="309" width="0.6" height="15.0" fill="rgb(244,58,3)" rx="2" ry="2" />
<text  x="54.41" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (2 samples, 0.05%)</title><rect x="44.5" y="309" width="0.5" height="15.0" fill="rgb(218,116,11)" rx="2" ry="2" />
<text  x="47.46" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (3 samples, 0.07%)</title><rect x="36.4" y="341" width="0.8" height="15.0" fill="rgb(229,138,17)" rx="2" ry="2" />
<text  x="39.40" y="351.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="74.2" y="389" width="0.3" height="15.0" fill="rgb(207,216,46)" rx="2" ry="2" />
<text  x="77.20" y="399.5" ></text>
</g>
</g>
</svg>

