<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Marshal (2 samples, 0.11%)</title><rect x="335.9" y="181" width="1.3" height="15.0" fill="rgb(243,7,36)" rx="2" ry="2" />
<text  x="338.86" y="191.5" ></text>
</g>
<g >
<title>runtime.rawstringtmp (2 samples, 0.11%)</title><rect x="337.8" y="213" width="1.3" height="15.0" fill="rgb(218,10,2)" rx="2" ry="2" />
<text  x="340.81" y="223.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (67 samples, 3.71%)</title><rect x="1090.1" y="341" width="43.7" height="15.0" fill="rgb(223,146,41)" rx="2" ry="2" />
<text  x="1093.09" y="351.5" >runt..</text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareRead (1 samples, 0.06%)</title><rect x="348.3" y="197" width="0.6" height="15.0" fill="rgb(230,183,26)" rx="2" ry="2" />
<text  x="351.26" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (1 samples, 0.06%)</title><rect x="331.9" y="53" width="0.7" height="15.0" fill="rgb(217,220,10)" rx="2" ry="2" />
<text  x="334.94" y="63.5" ></text>
</g>
<g >
<title>runtime.mstart1 (325 samples, 17.99%)</title><rect x="877.9" y="357" width="212.2" height="15.0" fill="rgb(235,16,27)" rx="2" ry="2" />
<text  x="880.86" y="367.5" >runtime.mstart1</text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.06%)</title><rect x="328.0" y="213" width="0.7" height="15.0" fill="rgb(249,167,30)" rx="2" ry="2" />
<text  x="331.02" y="223.5" ></text>
</g>
<g >
<title>runtime.park_m (520 samples, 28.78%)</title><rect x="538.3" y="357" width="339.6" height="15.0" fill="rgb(233,73,42)" rx="2" ry="2" />
<text  x="541.29" y="367.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.osyield (12 samples, 0.66%)</title><rect x="540.2" y="293" width="7.9" height="15.0" fill="rgb(230,151,34)" rx="2" ry="2" />
<text  x="543.25" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (67 samples, 3.71%)</title><rect x="1090.1" y="309" width="43.7" height="15.0" fill="rgb(233,55,43)" rx="2" ry="2" />
<text  x="1093.09" y="319.5" >runt..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="340.4" y="229" width="0.7" height="15.0" fill="rgb(241,169,3)" rx="2" ry="2" />
<text  x="343.43" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.06%)</title><rect x="331.9" y="181" width="0.7" height="15.0" fill="rgb(231,172,32)" rx="2" ry="2" />
<text  x="334.94" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.06%)</title><rect x="336.5" y="165" width="0.7" height="15.0" fill="rgb(243,99,26)" rx="2" ry="2" />
<text  x="339.51" y="175.5" ></text>
</g>
<g >
<title>github.com/buaazp/fasthttprouter.(*Router).Handler (28 samples, 1.55%)</title><rect x="323.4" y="325" width="18.3" height="15.0" fill="rgb(205,102,10)" rx="2" ry="2" />
<text  x="326.45" y="335.5" ></text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.11%)</title><rect x="13.3" y="245" width="1.3" height="15.0" fill="rgb(211,13,54)" rx="2" ry="2" />
<text  x="16.27" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (1 samples, 0.06%)</title><rect x="333.9" y="213" width="0.6" height="15.0" fill="rgb(233,144,38)" rx="2" ry="2" />
<text  x="336.90" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (1 samples, 0.06%)</title><rect x="331.9" y="37" width="0.7" height="15.0" fill="rgb(218,26,24)" rx="2" ry="2" />
<text  x="334.94" y="47.5" ></text>
</g>
<g >
<title>net.JoinHostPort (2 samples, 0.11%)</title><rect x="337.8" y="261" width="1.3" height="15.0" fill="rgb(240,95,10)" rx="2" ry="2" />
<text  x="340.81" y="271.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollWait (1 samples, 0.06%)</title><rect x="349.6" y="165" width="0.6" height="15.0" fill="rgb(247,169,43)" rx="2" ry="2" />
<text  x="352.57" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwunlock (1 samples, 0.06%)</title><rect x="12.0" y="245" width="0.6" height="15.0" fill="rgb(217,137,54)" rx="2" ry="2" />
<text  x="14.96" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (6 samples, 0.33%)</title><rect x="325.4" y="261" width="3.9" height="15.0" fill="rgb(243,124,44)" rx="2" ry="2" />
<text  x="328.41" y="271.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.06%)</title><rect x="804.7" y="293" width="0.7" height="15.0" fill="rgb(237,4,51)" rx="2" ry="2" />
<text  x="807.72" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (3 samples, 0.17%)</title><rect x="335.9" y="213" width="1.9" height="15.0" fill="rgb(252,83,31)" rx="2" ry="2" />
<text  x="338.86" y="223.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (478 samples, 26.45%)</title><rect x="11.3" y="325" width="312.1" height="15.0" fill="rgb(209,6,24)" rx="2" ry="2" />
<text  x="14.31" y="335.5" >bufio.(*Writer).Flush</text>
</g>
<g >
<title>runtime.findrunnable (519 samples, 28.72%)</title><rect x="538.9" y="325" width="339.0" height="15.0" fill="rgb(209,142,44)" rx="2" ry="2" />
<text  x="541.94" y="335.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.06%)</title><rect x="337.2" y="149" width="0.6" height="15.0" fill="rgb(219,102,47)" rx="2" ry="2" />
<text  x="340.16" y="159.5" ></text>
</g>
<g >
<title>runtime.concatstring3 (2 samples, 0.11%)</title><rect x="337.8" y="245" width="1.3" height="15.0" fill="rgb(208,57,26)" rx="2" ry="2" />
<text  x="340.81" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).ContinueReadBody (3 samples, 0.17%)</title><rect x="343.0" y="309" width="2.0" height="15.0" fill="rgb(228,187,49)" rx="2" ry="2" />
<text  x="346.04" y="319.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.06%)</title><rect x="526.5" y="229" width="0.7" height="15.0" fill="rgb(248,111,18)" rx="2" ry="2" />
<text  x="529.54" y="239.5" ></text>
</g>
<g >
<title>runtime.handoffp (67 samples, 3.71%)</title><rect x="1090.1" y="325" width="43.7" height="15.0" fill="rgb(230,186,25)" rx="2" ry="2" />
<text  x="1093.09" y="335.5" >runt..</text>
</g>
<g >
<title>github.com/buaazp/fasthttprouter.(*node).getValue (1 samples, 0.06%)</title><rect x="323.4" y="309" width="0.7" height="15.0" fill="rgb(246,89,15)" rx="2" ry="2" />
<text  x="326.45" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (67 samples, 3.71%)</title><rect x="1090.1" y="293" width="43.7" height="15.0" fill="rgb(254,57,6)" rx="2" ry="2" />
<text  x="1093.09" y="303.5" >runt..</text>
</g>
<g >
<title>runtime.assertE2I (1 samples, 0.06%)</title><rect x="335.2" y="197" width="0.7" height="15.0" fill="rgb(250,144,29)" rx="2" ry="2" />
<text  x="338.20" y="207.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.nextLine (1 samples, 0.06%)</title><rect x="526.5" y="245" width="0.7" height="15.0" fill="rgb(218,228,43)" rx="2" ry="2" />
<text  x="529.54" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (27 samples, 1.49%)</title><rect x="305.8" y="197" width="17.6" height="15.0" fill="rgb(249,46,27)" rx="2" ry="2" />
<text  x="308.82" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Size (1 samples, 0.06%)</title><rect x="332.6" y="197" width="0.6" height="15.0" fill="rgb(240,15,9)" rx="2" ry="2" />
<text  x="335.59" y="207.5" ></text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.11%)</title><rect x="350.2" y="181" width="1.3" height="15.0" fill="rgb(243,116,2)" rx="2" ry="2" />
<text  x="353.22" y="191.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.06%)</title><rect x="1043.1" y="261" width="0.6" height="15.0" fill="rgb(225,115,42)" rx="2" ry="2" />
<text  x="1046.07" y="271.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.06%)</title><rect x="328.7" y="245" width="0.6" height="15.0" fill="rgb(205,86,13)" rx="2" ry="2" />
<text  x="331.67" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np_trampoline (1 samples, 0.06%)</title><rect x="536.3" y="357" width="0.7" height="15.0" fill="rgb(222,220,3)" rx="2" ry="2" />
<text  x="539.33" y="367.5" ></text>
</g>
<g >
<title>runtime.gopark (1 samples, 0.06%)</title><rect x="349.6" y="133" width="0.6" height="15.0" fill="rgb(242,43,13)" rx="2" ry="2" />
<text  x="352.57" y="143.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (267 samples, 14.78%)</title><rect x="348.3" y="229" width="174.3" height="15.0" fill="rgb(222,76,30)" rx="2" ry="2" />
<text  x="351.26" y="239.5" >net.(*netFD).Read</text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.11%)</title><rect x="877.9" y="309" width="1.3" height="15.0" fill="rgb(206,44,23)" rx="2" ry="2" />
<text  x="880.86" y="319.5" ></text>
</g>
<g >
<title>internal/bytealg.Equal (1 samples, 0.06%)</title><rect x="345.0" y="277" width="0.7" height="15.0" fill="rgb(217,61,12)" rx="2" ry="2" />
<text  x="348.00" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (5 samples, 0.28%)</title><rect x="1130.6" y="261" width="3.2" height="15.0" fill="rgb(206,72,39)" rx="2" ry="2" />
<text  x="1133.58" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).IsGet (1 samples, 0.06%)</title><rect x="523.3" y="245" width="0.6" height="15.0" fill="rgb(214,221,33)" rx="2" ry="2" />
<text  x="526.27" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (19 samples, 1.05%)</title><rect x="510.2" y="149" width="12.4" height="15.0" fill="rgb(238,114,18)" rx="2" ry="2" />
<text  x="513.21" y="159.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).RemoteAddr (1 samples, 0.06%)</title><rect x="324.8" y="293" width="0.6" height="15.0" fill="rgb(249,33,5)" rx="2" ry="2" />
<text  x="327.75" y="303.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.CoarseTimeNow (1 samples, 0.06%)</title><rect x="533.1" y="325" width="0.6" height="15.0" fill="rgb(224,210,29)" rx="2" ry="2" />
<text  x="536.07" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.06%)</title><rect x="337.2" y="101" width="0.6" height="15.0" fill="rgb(241,169,48)" rx="2" ry="2" />
<text  x="340.16" y="111.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.06%)</title><rect x="335.2" y="181" width="0.7" height="15.0" fill="rgb(223,132,53)" rx="2" ry="2" />
<text  x="338.20" y="191.5" ></text>
</g>
<g >
<title>runtime.mstart (475 samples, 26.29%)</title><rect x="877.9" y="373" width="310.1" height="15.0" fill="rgb(241,158,20)" rx="2" ry="2" />
<text  x="880.86" y="383.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.gcBgMarkWorker (1 samples, 0.06%)</title><rect x="537.6" y="373" width="0.7" height="15.0" fill="rgb(247,177,53)" rx="2" ry="2" />
<text  x="540.64" y="383.5" ></text>
</g>
<g >
<title>syscall.libc_read_trampoline (1 samples, 0.06%)</title><rect x="1188.7" y="357" width="0.6" height="15.0" fill="rgb(237,71,34)" rx="2" ry="2" />
<text  x="1191.69" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.06%)</title><rect x="338.5" y="165" width="0.6" height="15.0" fill="rgb(217,224,25)" rx="2" ry="2" />
<text  x="341.47" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (4 samples, 0.22%)</title><rect x="330.0" y="229" width="2.6" height="15.0" fill="rgb(207,73,2)" rx="2" ry="2" />
<text  x="332.98" y="239.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_faststr (1 samples, 0.06%)</title><rect x="341.1" y="309" width="0.6" height="15.0" fill="rgb(216,72,15)" rx="2" ry="2" />
<text  x="344.08" y="319.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeUnlock (1 samples, 0.06%)</title><rect x="12.0" y="261" width="0.6" height="15.0" fill="rgb(211,25,2)" rx="2" ry="2" />
<text  x="14.96" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*URI).parseQuick (1 samples, 0.06%)</title><rect x="324.1" y="245" width="0.7" height="15.0" fill="rgb(209,114,0)" rx="2" ry="2" />
<text  x="327.10" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (4 samples, 0.22%)</title><rect x="1185.4" y="277" width="2.6" height="15.0" fill="rgb(210,149,15)" rx="2" ry="2" />
<text  x="1188.43" y="287.5" ></text>
</g>
<g >
<title>runtime.timerproc (1 samples, 0.06%)</title><rect x="1189.3" y="373" width="0.7" height="15.0" fill="rgb(233,103,27)" rx="2" ry="2" />
<text  x="1192.35" y="383.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.06%)</title><rect x="550.0" y="277" width="0.7" height="15.0" fill="rgb(249,41,0)" rx="2" ry="2" />
<text  x="553.04" y="287.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (99 samples, 5.48%)</title><rect x="979.1" y="309" width="64.6" height="15.0" fill="rgb(228,122,18)" rx="2" ry="2" />
<text  x="982.08" y="319.5" >runtime..</text>
</g>
<g >
<title>runtime.asmcgocall (5 samples, 0.28%)</title><rect x="534.4" y="373" width="3.2" height="15.0" fill="rgb(251,142,7)" rx="2" ry="2" />
<text  x="537.37" y="383.5" ></text>
</g>
<g >
<title>runtime.nanotime_trampoline (1 samples, 0.06%)</title><rect x="535.7" y="357" width="0.6" height="15.0" fill="rgb(253,197,21)" rx="2" ry="2" />
<text  x="538.68" y="367.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (1 samples, 0.06%)</title><rect x="332.6" y="229" width="0.6" height="15.0" fill="rgb(242,155,41)" rx="2" ry="2" />
<text  x="335.59" y="239.5" ></text>
</g>
<g >
<title>indexbytebody (2 samples, 0.11%)</title><rect x="529.8" y="213" width="1.3" height="15.0" fill="rgb(217,131,14)" rx="2" ry="2" />
<text  x="532.80" y="223.5" ></text>
</g>
<g >
<title>bytes.Equal (1 samples, 0.06%)</title><rect x="345.0" y="293" width="0.7" height="15.0" fill="rgb(254,77,9)" rx="2" ry="2" />
<text  x="348.00" y="303.5" ></text>
</g>
<g >
<title>net.IP.String (3 samples, 0.17%)</title><rect x="339.1" y="261" width="2.0" height="15.0" fill="rgb(222,199,43)" rx="2" ry="2" />
<text  x="342.12" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="327.4" y="149" width="0.6" height="15.0" fill="rgb(254,145,13)" rx="2" ry="2" />
<text  x="330.37" y="159.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.06%)</title><rect x="328.0" y="229" width="0.7" height="15.0" fill="rgb(253,182,39)" rx="2" ry="2" />
<text  x="331.02" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeBoolValueNoZero (1 samples, 0.06%)</title><rect x="329.3" y="181" width="0.7" height="15.0" fill="rgb(238,62,30)" rx="2" ry="2" />
<text  x="332.32" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.06%)</title><rect x="331.9" y="69" width="0.7" height="15.0" fill="rgb(243,62,23)" rx="2" ry="2" />
<text  x="334.94" y="79.5" ></text>
</g>
<g >
<title>runtime.systemstack (150 samples, 8.30%)</title><rect x="1090.1" y="357" width="97.9" height="15.0" fill="rgb(219,74,18)" rx="2" ry="2" />
<text  x="1093.09" y="367.5" >runtime.sys..</text>
</g>
<g >
<title>reflect.Value.call (1 samples, 0.06%)</title><rect x="333.9" y="181" width="0.6" height="15.0" fill="rgb(208,135,3)" rx="2" ry="2" />
<text  x="336.90" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parseHeaders (9 samples, 0.50%)</title><rect x="527.2" y="261" width="5.9" height="15.0" fill="rgb(205,117,41)" rx="2" ry="2" />
<text  x="530.19" y="271.5" ></text>
</g>
<g >
<title>runtime.notetsleepg (1 samples, 0.06%)</title><rect x="1189.3" y="357" width="0.7" height="15.0" fill="rgb(225,78,8)" rx="2" ry="2" />
<text  x="1192.35" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="338.5" y="181" width="0.6" height="15.0" fill="rgb(253,220,16)" rx="2" ry="2" />
<text  x="341.47" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.06%)</title><rect x="331.9" y="133" width="0.7" height="15.0" fill="rgb(235,87,2)" rx="2" ry="2" />
<text  x="334.94" y="143.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.06%)</title><rect x="539.6" y="309" width="0.6" height="15.0" fill="rgb(251,158,33)" rx="2" ry="2" />
<text  x="542.60" y="319.5" ></text>
</g>
<g >
<title>net.IP.To4 (1 samples, 0.06%)</title><rect x="339.8" y="245" width="0.6" height="15.0" fill="rgb(220,167,48)" rx="2" ry="2" />
<text  x="342.77" y="255.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.06%)</title><rect x="1189.3" y="341" width="0.7" height="15.0" fill="rgb(217,89,5)" rx="2" ry="2" />
<text  x="1192.35" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ArgsDecode (1 samples, 0.06%)</title><rect x="335.2" y="213" width="0.7" height="15.0" fill="rgb(213,21,8)" rx="2" ry="2" />
<text  x="338.20" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).IsHead (1 samples, 0.06%)</title><rect x="523.9" y="245" width="0.7" height="15.0" fill="rgb(219,129,30)" rx="2" ry="2" />
<text  x="526.92" y="255.5" ></text>
</g>
<g >
<title>runtime.concatstrings (2 samples, 0.11%)</title><rect x="337.8" y="229" width="1.3" height="15.0" fill="rgb(226,220,44)" rx="2" ry="2" />
<text  x="340.81" y="239.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).parseURI (1 samples, 0.06%)</title><rect x="324.1" y="261" width="0.7" height="15.0" fill="rgb(238,163,16)" rx="2" ry="2" />
<text  x="327.10" y="271.5" ></text>
</g>
<g >
<title>runtime.syscall (2 samples, 0.11%)</title><rect x="1188.0" y="373" width="1.3" height="15.0" fill="rgb(234,45,54)" rx="2" ry="2" />
<text  x="1191.04" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).tryRead (286 samples, 15.83%)</title><rect x="346.3" y="293" width="186.8" height="15.0" fill="rgb(213,156,41)" rx="2" ry="2" />
<text  x="349.30" y="303.5" >github.com/valyala/fasth..</text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.06%)</title><rect x="337.2" y="85" width="0.6" height="15.0" fill="rgb(220,24,6)" rx="2" ry="2" />
<text  x="340.16" y="95.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.11%)</title><rect x="877.9" y="293" width="1.3" height="15.0" fill="rgb(241,146,18)" rx="2" ry="2" />
<text  x="880.86" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.06%)</title><rect x="338.5" y="133" width="0.6" height="15.0" fill="rgb(221,100,16)" rx="2" ry="2" />
<text  x="341.47" y="143.5" ></text>
</g>
<g >
<title>runtime.lock (16 samples, 0.89%)</title><rect x="540.2" y="309" width="10.5" height="15.0" fill="rgb(205,34,7)" rx="2" ry="2" />
<text  x="543.25" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (71 samples, 3.93%)</title><rect x="1043.7" y="325" width="46.4" height="15.0" fill="rgb(227,179,9)" rx="2" ry="2" />
<text  x="1046.72" y="335.5" >runt..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="331.9" y="197" width="0.7" height="15.0" fill="rgb(235,68,50)" rx="2" ry="2" />
<text  x="334.94" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (4 samples, 0.22%)</title><rect x="1185.4" y="293" width="2.6" height="15.0" fill="rgb(209,91,44)" rx="2" ry="2" />
<text  x="1188.43" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (19 samples, 1.05%)</title><rect x="325.4" y="277" width="12.4" height="15.0" fill="rgb(214,176,20)" rx="2" ry="2" />
<text  x="328.41" y="287.5" ></text>
</g>
<g >
<title>reflect.New (1 samples, 0.06%)</title><rect x="334.5" y="197" width="0.7" height="15.0" fill="rgb(212,39,43)" rx="2" ry="2" />
<text  x="337.55" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (12 samples, 0.66%)</title><rect x="330.0" y="245" width="7.8" height="15.0" fill="rgb(240,162,37)" rx="2" ry="2" />
<text  x="332.98" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*workerPool).workerFunc (803 samples, 44.44%)</title><rect x="10.0" y="357" width="524.4" height="15.0" fill="rgb(215,33,45)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >github.com/valyala/fasthttp.(*workerPool).workerFunc</text>
</g>
<g >
<title>runtime.nanotime (77 samples, 4.26%)</title><rect x="879.2" y="325" width="50.2" height="15.0" fill="rgb(237,53,41)" rx="2" ry="2" />
<text  x="882.16" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.growslice (2 samples, 0.11%)</title><rect x="326.7" y="165" width="1.3" height="15.0" fill="rgb(237,88,17)" rx="2" ry="2" />
<text  x="329.71" y="175.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="337.2" y="165" width="0.6" height="15.0" fill="rgb(211,146,52)" rx="2" ry="2" />
<text  x="340.16" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (7 samples, 0.39%)</title><rect x="333.2" y="229" width="4.6" height="15.0" fill="rgb(246,99,19)" rx="2" ry="2" />
<text  x="336.24" y="239.5" ></text>
</g>
<g >
<title>runtime.usleep (12 samples, 0.66%)</title><rect x="540.2" y="277" width="7.9" height="15.0" fill="rgb(218,75,32)" rx="2" ry="2" />
<text  x="543.25" y="287.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.06%)</title><rect x="337.2" y="37" width="0.6" height="15.0" fill="rgb(220,85,8)" rx="2" ry="2" />
<text  x="340.16" y="47.5" ></text>
</g>
<g >
<title>runtime.notesleep (111 samples, 6.14%)</title><rect x="805.4" y="293" width="72.5" height="15.0" fill="rgb(206,76,11)" rx="2" ry="2" />
<text  x="808.37" y="303.5" >runtime...</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (3 samples, 0.17%)</title><rect x="335.9" y="197" width="1.9" height="15.0" fill="rgb(246,47,47)" rx="2" ry="2" />
<text  x="338.86" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (72 samples, 3.98%)</title><rect x="1133.8" y="277" width="47.1" height="15.0" fill="rgb(218,136,6)" rx="2" ry="2" />
<text  x="1136.84" y="287.5" >runt..</text>
</g>
<g >
<title>net.(*conn).Write (477 samples, 26.40%)</title><rect x="12.0" y="309" width="311.4" height="15.0" fill="rgb(212,206,44)" rx="2" ry="2" />
<text  x="14.96" y="319.5" >net.(*conn).Write</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.06%)</title><rect x="1043.1" y="277" width="0.6" height="15.0" fill="rgb(230,164,26)" rx="2" ry="2" />
<text  x="1046.07" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.06%)</title><rect x="331.9" y="149" width="0.7" height="15.0" fill="rgb(232,71,3)" rx="2" ry="2" />
<text  x="334.94" y="159.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).URI (1 samples, 0.06%)</title><rect x="324.1" y="293" width="0.7" height="15.0" fill="rgb(240,142,21)" rx="2" ry="2" />
<text  x="327.10" y="303.5" ></text>
</g>
<g >
<title>runtime.libcCall (3 samples, 0.17%)</title><rect x="802.8" y="277" width="1.9" height="15.0" fill="rgb(210,21,46)" rx="2" ry="2" />
<text  x="805.76" y="287.5" ></text>
</g>
<g >
<title>runtime.semasleep (97 samples, 5.37%)</title><rect x="980.4" y="293" width="63.3" height="15.0" fill="rgb(241,68,1)" rx="2" ry="2" />
<text  x="983.38" y="303.5" >runtim..</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.06%)</title><rect x="331.9" y="85" width="0.7" height="15.0" fill="rgb(215,229,16)" rx="2" ry="2" />
<text  x="334.94" y="95.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).MultipartFormBoundary (3 samples, 0.17%)</title><rect x="343.0" y="293" width="2.0" height="15.0" fill="rgb(236,83,48)" rx="2" ry="2" />
<text  x="346.04" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (94 samples, 5.20%)</title><rect x="981.0" y="277" width="61.4" height="15.0" fill="rgb(213,29,40)" rx="2" ry="2" />
<text  x="984.03" y="287.5" >runtim..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (3 samples, 0.17%)</title><rect x="330.0" y="213" width="1.9" height="15.0" fill="rgb(233,18,49)" rx="2" ry="2" />
<text  x="332.98" y="223.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (269 samples, 14.89%)</title><rect x="347.0" y="261" width="175.6" height="15.0" fill="rgb(238,24,3)" rx="2" ry="2" />
<text  x="349.96" y="271.5" >bufio.(*Reader).fill</text>
</g>
<g >
<title>internal/poll.(*FD).Read (267 samples, 14.78%)</title><rect x="348.3" y="213" width="174.3" height="15.0" fill="rgb(246,45,53)" rx="2" ry="2" />
<text  x="351.26" y="223.5" >internal/poll.(*FD).Read</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.06%)</title><rect x="329.3" y="197" width="0.7" height="15.0" fill="rgb(238,134,33)" rx="2" ry="2" />
<text  x="332.32" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (1 samples, 0.06%)</title><rect x="334.5" y="213" width="0.7" height="15.0" fill="rgb(218,114,39)" rx="2" ry="2" />
<text  x="337.55" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.06%)</title><rect x="328.7" y="229" width="0.6" height="15.0" fill="rgb(208,104,50)" rx="2" ry="2" />
<text  x="331.67" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (83 samples, 4.59%)</title><rect x="1133.8" y="325" width="54.2" height="15.0" fill="rgb(213,201,15)" rx="2" ry="2" />
<text  x="1136.84" y="335.5" >runti..</text>
</g>
<g >
<title>net.(*netFD).Write (477 samples, 26.40%)</title><rect x="12.0" y="293" width="311.4" height="15.0" fill="rgb(252,188,54)" rx="2" ry="2" />
<text  x="14.96" y="303.5" >net.(*netFD).Write</text>
</g>
<g >
<title>runtime.mcall (520 samples, 28.78%)</title><rect x="538.3" y="373" width="339.6" height="15.0" fill="rgb(217,220,7)" rx="2" ry="2" />
<text  x="541.29" y="383.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.netpoll (308 samples, 17.04%)</title><rect x="603.6" y="309" width="201.1" height="15.0" fill="rgb(209,112,25)" rx="2" ry="2" />
<text  x="606.59" y="319.5" >runtime.netpoll</text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.06%)</title><rect x="337.2" y="53" width="0.6" height="15.0" fill="rgb(251,22,2)" rx="2" ry="2" />
<text  x="340.16" y="63.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.06%)</title><rect x="537.6" y="357" width="0.7" height="15.0" fill="rgb(220,59,40)" rx="2" ry="2" />
<text  x="540.64" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.06%)</title><rect x="331.9" y="165" width="0.7" height="15.0" fill="rgb(215,35,46)" rx="2" ry="2" />
<text  x="334.94" y="175.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).MayContinue (1 samples, 0.06%)</title><rect x="345.0" y="309" width="0.7" height="15.0" fill="rgb(239,205,34)" rx="2" ry="2" />
<text  x="348.00" y="319.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*headerScanner).next (5 samples, 0.28%)</title><rect x="529.8" y="245" width="3.3" height="15.0" fill="rgb(207,91,25)" rx="2" ry="2" />
<text  x="532.80" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (1 samples, 0.06%)</title><rect x="329.3" y="261" width="0.7" height="15.0" fill="rgb(253,5,17)" rx="2" ry="2" />
<text  x="332.32" y="271.5" ></text>
</g>
<g >
<title>runtime.netpollblock (1 samples, 0.06%)</title><rect x="349.6" y="149" width="0.6" height="15.0" fill="rgb(212,4,4)" rx="2" ry="2" />
<text  x="352.57" y="159.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.06%)</title><rect x="328.7" y="213" width="0.6" height="15.0" fill="rgb(235,183,30)" rx="2" ry="2" />
<text  x="331.67" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (3 samples, 0.17%)</title><rect x="326.1" y="229" width="1.9" height="15.0" fill="rgb(229,97,30)" rx="2" ry="2" />
<text  x="329.06" y="239.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).Reset (1 samples, 0.06%)</title><rect x="325.4" y="229" width="0.7" height="15.0" fill="rgb(216,195,54)" rx="2" ry="2" />
<text  x="328.41" y="239.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*workerPool).getCh.func1 (803 samples, 44.44%)</title><rect x="10.0" y="373" width="524.4" height="15.0" fill="rgb(223,203,42)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >github.com/valyala/fasthttp.(*workerPool).getCh.func1</text>
</g>
<g >
<title>net.ipEmptyString (3 samples, 0.17%)</title><rect x="339.1" y="277" width="2.0" height="15.0" fill="rgb(218,199,8)" rx="2" ry="2" />
<text  x="342.12" y="287.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.06%)</title><rect x="331.9" y="213" width="0.7" height="15.0" fill="rgb(241,191,6)" rx="2" ry="2" />
<text  x="334.94" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (1 samples, 0.06%)</title><rect x="332.6" y="213" width="0.6" height="15.0" fill="rgb(238,91,5)" rx="2" ry="2" />
<text  x="335.59" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).Read (287 samples, 15.88%)</title><rect x="345.7" y="309" width="187.4" height="15.0" fill="rgb(210,134,6)" rx="2" ry="2" />
<text  x="348.65" y="319.5" >github.com/valyala/fasth..</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parse (16 samples, 0.89%)</title><rect x="522.6" y="277" width="10.5" height="15.0" fill="rgb(217,210,9)" rx="2" ry="2" />
<text  x="525.62" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.06%)</title><rect x="338.5" y="117" width="0.6" height="15.0" fill="rgb(222,124,42)" rx="2" ry="2" />
<text  x="341.47" y="127.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (83 samples, 4.59%)</title><rect x="1133.8" y="341" width="54.2" height="15.0" fill="rgb(221,215,36)" rx="2" ry="2" />
<text  x="1136.84" y="351.5" >runti..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (109 samples, 6.03%)</title><rect x="806.7" y="261" width="71.2" height="15.0" fill="rgb(242,48,39)" rx="2" ry="2" />
<text  x="809.68" y="271.5" >runtime...</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Size (1 samples, 0.06%)</title><rect x="329.3" y="229" width="0.7" height="15.0" fill="rgb(206,38,34)" rx="2" ry="2" />
<text  x="332.32" y="239.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (1 samples, 0.06%)</title><rect x="334.5" y="181" width="0.7" height="15.0" fill="rgb(238,41,4)" rx="2" ry="2" />
<text  x="337.55" y="191.5" ></text>
</g>
<g >
<title>syscall.syscall (473 samples, 26.18%)</title><rect x="14.6" y="229" width="308.8" height="15.0" fill="rgb(234,151,44)" rx="2" ry="2" />
<text  x="17.57" y="239.5" >syscall.syscall</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (2 samples, 0.11%)</title><rect x="330.6" y="181" width="1.3" height="15.0" fill="rgb(223,174,26)" rx="2" ry="2" />
<text  x="333.63" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (111 samples, 6.14%)</title><rect x="805.4" y="277" width="72.5" height="15.0" fill="rgb(219,192,33)" rx="2" ry="2" />
<text  x="808.37" y="287.5" >runtime...</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).noBody (2 samples, 0.11%)</title><rect x="523.3" y="261" width="1.3" height="15.0" fill="rgb(231,206,31)" rx="2" ry="2" />
<text  x="526.27" y="271.5" ></text>
</g>
<g >
<title>net.(*TCPAddr).String (3 samples, 0.17%)</title><rect x="339.1" y="293" width="2.0" height="15.0" fill="rgb(253,124,37)" rx="2" ry="2" />
<text  x="342.12" y="303.5" ></text>
</g>
<g >
<title>runtime.stopm (112 samples, 6.20%)</title><rect x="804.7" y="309" width="73.2" height="15.0" fill="rgb(206,204,3)" rx="2" ry="2" />
<text  x="807.72" y="319.5" >runtime...</text>
</g>
<g >
<title>runtime.nanotime (81 samples, 4.48%)</title><rect x="550.7" y="309" width="52.9" height="15.0" fill="rgb(238,215,4)" rx="2" ry="2" />
<text  x="553.70" y="319.5" >runti..</text>
</g>
<g >
<title>reflect.Value.Call (1 samples, 0.06%)</title><rect x="333.9" y="197" width="0.6" height="15.0" fill="rgb(227,228,27)" rx="2" ry="2" />
<text  x="336.90" y="207.5" ></text>
</g>
<g >
<title>syscall.write (473 samples, 26.18%)</title><rect x="14.6" y="245" width="308.8" height="15.0" fill="rgb(242,143,6)" rx="2" ry="2" />
<text  x="17.57" y="255.5" >syscall.write</text>
</g>
<g >
<title>runtime.kevent_trampoline (1 samples, 0.06%)</title><rect x="535.0" y="357" width="0.7" height="15.0" fill="rgb(212,179,5)" rx="2" ry="2" />
<text  x="538.02" y="367.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.11%)</title><rect x="877.9" y="325" width="1.3" height="15.0" fill="rgb(236,131,27)" rx="2" ry="2" />
<text  x="880.86" y="335.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.06%)</title><rect x="338.5" y="85" width="0.6" height="15.0" fill="rgb(251,207,13)" rx="2" ry="2" />
<text  x="341.47" y="95.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.06%)</title><rect x="335.2" y="165" width="0.7" height="15.0" fill="rgb(248,202,3)" rx="2" ry="2" />
<text  x="338.20" y="175.5" ></text>
</g>
<g >
<title>all (1,807 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(233,127,49)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>runtime.procyield (3 samples, 0.17%)</title><rect x="548.1" y="293" width="1.9" height="15.0" fill="rgb(242,143,25)" rx="2" ry="2" />
<text  x="551.09" y="303.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Server).serveConn (803 samples, 44.44%)</title><rect x="10.0" y="341" width="524.4" height="15.0" fill="rgb(252,87,20)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >github.com/valyala/fasthttp.(*Server).serveConn</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.06%)</title><rect x="337.2" y="133" width="0.6" height="15.0" fill="rgb(216,56,11)" rx="2" ry="2" />
<text  x="340.16" y="143.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (269 samples, 14.89%)</title><rect x="347.0" y="277" width="175.6" height="15.0" fill="rgb(242,176,42)" rx="2" ry="2" />
<text  x="349.96" y="287.5" >bufio.(*Reader).Peek</text>
</g>
<g >
<title>github.com/valyala/fasthttp.releaseWriter (1 samples, 0.06%)</title><rect x="533.7" y="325" width="0.7" height="15.0" fill="rgb(217,116,32)" rx="2" ry="2" />
<text  x="536.72" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.06%)</title><rect x="337.2" y="117" width="0.6" height="15.0" fill="rgb(228,165,29)" rx="2" ry="2" />
<text  x="340.16" y="127.5" ></text>
</g>
<g >
<title>runtime.rawstring (2 samples, 0.11%)</title><rect x="337.8" y="197" width="1.3" height="15.0" fill="rgb(246,17,13)" rx="2" ry="2" />
<text  x="340.81" y="207.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).Path (1 samples, 0.06%)</title><rect x="324.1" y="309" width="0.7" height="15.0" fill="rgb(220,39,38)" rx="2" ry="2" />
<text  x="327.10" y="319.5" ></text>
</g>
<g >
<title>bytes.IndexByte (2 samples, 0.11%)</title><rect x="529.8" y="229" width="1.3" height="15.0" fill="rgb(239,33,30)" rx="2" ry="2" />
<text  x="532.80" y="239.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parseFirstLine (4 samples, 0.22%)</title><rect x="524.6" y="261" width="2.6" height="15.0" fill="rgb(208,48,28)" rx="2" ry="2" />
<text  x="527.58" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.06%)</title><rect x="550.0" y="293" width="0.7" height="15.0" fill="rgb(221,128,15)" rx="2" ry="2" />
<text  x="553.04" y="303.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).waitRead (2 samples, 0.11%)</title><rect x="348.9" y="197" width="1.3" height="15.0" fill="rgb(235,38,10)" rx="2" ry="2" />
<text  x="351.92" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (67 samples, 3.71%)</title><rect x="1090.1" y="277" width="43.7" height="15.0" fill="rgb(244,24,20)" rx="2" ry="2" />
<text  x="1093.09" y="287.5" >runt..</text>
</g>
<g >
<title>indexbytebody (1 samples, 0.06%)</title><rect x="526.5" y="213" width="0.7" height="15.0" fill="rgb(210,204,31)" rx="2" ry="2" />
<text  x="529.54" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep (175 samples, 9.68%)</title><rect x="929.4" y="325" width="114.3" height="15.0" fill="rgb(249,102,54)" rx="2" ry="2" />
<text  x="932.45" y="335.5" >runtime.notets..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (1 samples, 0.06%)</title><rect x="329.3" y="245" width="0.7" height="15.0" fill="rgb(235,222,20)" rx="2" ry="2" />
<text  x="332.32" y="255.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.06%)</title><rect x="340.4" y="245" width="0.7" height="15.0" fill="rgb(253,112,6)" rx="2" ry="2" />
<text  x="343.43" y="255.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.06%)</title><rect x="980.4" y="277" width="0.6" height="15.0" fill="rgb(236,39,10)" rx="2" ry="2" />
<text  x="983.38" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (2 samples, 0.11%)</title><rect x="330.6" y="165" width="1.3" height="15.0" fill="rgb(226,213,15)" rx="2" ry="2" />
<text  x="333.63" y="175.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.peekArgBytes (1 samples, 0.06%)</title><rect x="341.7" y="293" width="0.7" height="15.0" fill="rgb(218,28,33)" rx="2" ry="2" />
<text  x="344.73" y="303.5" ></text>
</g>
<g >
<title>runtime.deferreturn (3 samples, 0.17%)</title><rect x="12.6" y="261" width="2.0" height="15.0" fill="rgb(234,49,37)" rx="2" ry="2" />
<text  x="15.61" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.06%)</title><rect x="331.9" y="101" width="0.7" height="15.0" fill="rgb(208,216,33)" rx="2" ry="2" />
<text  x="334.94" y="111.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (5 samples, 0.28%)</title><rect x="325.4" y="245" width="3.3" height="15.0" fill="rgb(247,16,8)" rx="2" ry="2" />
<text  x="328.41" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.normalizeHeaderKey (3 samples, 0.17%)</title><rect x="531.1" y="229" width="2.0" height="15.0" fill="rgb(207,201,9)" rx="2" ry="2" />
<text  x="534.11" y="239.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.06%)</title><rect x="337.2" y="181" width="0.6" height="15.0" fill="rgb(217,114,0)" rx="2" ry="2" />
<text  x="340.16" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (79 samples, 4.37%)</title><rect x="1133.8" y="309" width="51.6" height="15.0" fill="rgb(251,44,45)" rx="2" ry="2" />
<text  x="1136.84" y="319.5" >runti..</text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.06%)</title><rect x="338.5" y="149" width="0.6" height="15.0" fill="rgb(220,222,15)" rx="2" ry="2" />
<text  x="341.47" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).Reset (1 samples, 0.06%)</title><rect x="330.0" y="197" width="0.6" height="15.0" fill="rgb(217,95,29)" rx="2" ry="2" />
<text  x="332.98" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.06%)</title><rect x="331.9" y="117" width="0.7" height="15.0" fill="rgb(241,216,1)" rx="2" ry="2" />
<text  x="334.94" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.06%)</title><rect x="1042.4" y="277" width="0.7" height="15.0" fill="rgb(215,169,44)" rx="2" ry="2" />
<text  x="1045.42" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).MayContinue (1 samples, 0.06%)</title><rect x="341.7" y="325" width="0.7" height="15.0" fill="rgb(230,161,29)" rx="2" ry="2" />
<text  x="344.73" y="335.5" ></text>
</g>
<g >
<title>runtime.unlock (4 samples, 0.22%)</title><rect x="1185.4" y="309" width="2.6" height="15.0" fill="rgb(246,183,31)" rx="2" ry="2" />
<text  x="1188.43" y="319.5" ></text>
</g>
<g >
<title>net.(*conn).Read (267 samples, 14.78%)</title><rect x="348.3" y="245" width="174.3" height="15.0" fill="rgb(210,72,7)" rx="2" ry="2" />
<text  x="351.26" y="255.5" >net.(*conn).Read</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (3 samples, 0.17%)</title><rect x="326.1" y="197" width="1.9" height="15.0" fill="rgb(246,83,41)" rx="2" ry="2" />
<text  x="329.06" y="207.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.06%)</title><rect x="328.0" y="197" width="0.7" height="15.0" fill="rgb(233,70,30)" rx="2" ry="2" />
<text  x="331.02" y="207.5" ></text>
</g>
<g >
<title>runtime.kevent (220 samples, 12.17%)</title><rect x="661.1" y="293" width="143.6" height="15.0" fill="rgb(235,147,52)" rx="2" ry="2" />
<text  x="664.06" y="303.5" >runtime.kevent</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (3 samples, 0.17%)</title><rect x="326.1" y="213" width="1.9" height="15.0" fill="rgb(247,91,19)" rx="2" ry="2" />
<text  x="329.06" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (79 samples, 4.37%)</title><rect x="1133.8" y="293" width="51.6" height="15.0" fill="rgb(235,77,6)" rx="2" ry="2" />
<text  x="1136.84" y="303.5" >runti..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (2 samples, 0.11%)</title><rect x="326.7" y="181" width="1.3" height="15.0" fill="rgb(248,106,42)" rx="2" ry="2" />
<text  x="329.71" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).readLimitBody (292 samples, 16.16%)</title><rect x="342.4" y="325" width="190.7" height="15.0" fill="rgb(246,107,2)" rx="2" ry="2" />
<text  x="345.39" y="335.5" >github.com/valyala/fasth..</text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.06%)</title><rect x="338.5" y="101" width="0.6" height="15.0" fill="rgb(236,117,12)" rx="2" ry="2" />
<text  x="341.47" y="111.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).peek (1 samples, 0.06%)</title><rect x="341.7" y="309" width="0.7" height="15.0" fill="rgb(210,13,20)" rx="2" ry="2" />
<text  x="344.73" y="319.5" ></text>
</g>
<g >
<title>syscall.Write (473 samples, 26.18%)</title><rect x="14.6" y="261" width="308.8" height="15.0" fill="rgb(245,221,31)" rx="2" ry="2" />
<text  x="17.57" y="271.5" >syscall.Write</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.06%)</title><rect x="336.5" y="149" width="0.7" height="15.0" fill="rgb(254,216,54)" rx="2" ry="2" />
<text  x="339.51" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (2 samples, 0.11%)</title><rect x="330.6" y="197" width="1.3" height="15.0" fill="rgb(238,54,52)" rx="2" ry="2" />
<text  x="333.63" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (12 samples, 0.66%)</title><rect x="330.0" y="261" width="7.8" height="15.0" fill="rgb(205,99,41)" rx="2" ry="2" />
<text  x="332.98" y="271.5" ></text>
</g>
<g >
<title>sync.(*Pool).Put (1 samples, 0.06%)</title><rect x="533.7" y="309" width="0.7" height="15.0" fill="rgb(230,170,53)" rx="2" ry="2" />
<text  x="536.72" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeFASTHTTP (21 samples, 1.16%)</title><rect x="325.4" y="293" width="13.7" height="15.0" fill="rgb(252,83,11)" rx="2" ry="2" />
<text  x="328.41" y="303.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.06%)</title><rect x="327.4" y="133" width="0.6" height="15.0" fill="rgb(247,136,33)" rx="2" ry="2" />
<text  x="330.37" y="143.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.06%)</title><rect x="329.3" y="213" width="0.7" height="15.0" fill="rgb(253,68,47)" rx="2" ry="2" />
<text  x="332.32" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (62 samples, 3.43%)</title><rect x="1090.1" y="261" width="40.5" height="15.0" fill="rgb(234,31,9)" rx="2" ry="2" />
<text  x="1093.09" y="271.5" >run..</text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.06%)</title><rect x="1189.3" y="325" width="0.7" height="15.0" fill="rgb(227,213,32)" rx="2" ry="2" />
<text  x="1192.35" y="335.5" ></text>
</g>
<g >
<title>runtime.schedule (520 samples, 28.78%)</title><rect x="538.3" y="341" width="339.6" height="15.0" fill="rgb(210,43,25)" rx="2" ry="2" />
<text  x="541.29" y="351.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.11%)</title><rect x="350.2" y="197" width="1.3" height="15.0" fill="rgb(239,18,15)" rx="2" ry="2" />
<text  x="353.22" y="207.5" ></text>
</g>
<g >
<title>syscall.syscall (262 samples, 14.50%)</title><rect x="351.5" y="165" width="171.1" height="15.0" fill="rgb(210,86,48)" rx="2" ry="2" />
<text  x="354.53" y="175.5" >syscall.syscall</text>
</g>
<g >
<title>internal/poll.(*pollDesc).wait (2 samples, 0.11%)</title><rect x="348.9" y="181" width="1.3" height="15.0" fill="rgb(220,128,11)" rx="2" ry="2" />
<text  x="351.92" y="191.5" ></text>
</g>
<g >
<title>syscall.Read (262 samples, 14.50%)</title><rect x="351.5" y="197" width="171.1" height="15.0" fill="rgb(233,218,28)" rx="2" ry="2" />
<text  x="354.53" y="207.5" >syscall.Read</text>
</g>
<g >
<title>syscall.read (262 samples, 14.50%)</title><rect x="351.5" y="181" width="171.1" height="15.0" fill="rgb(219,123,43)" rx="2" ry="2" />
<text  x="354.53" y="191.5" >syscall.read</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (7 samples, 0.39%)</title><rect x="1180.9" y="277" width="4.5" height="15.0" fill="rgb(252,81,24)" rx="2" ry="2" />
<text  x="1183.86" y="287.5" ></text>
</g>
<g >
<title>net.(*TCPAddr).String (2 samples, 0.11%)</title><rect x="337.8" y="277" width="1.3" height="15.0" fill="rgb(253,226,12)" rx="2" ry="2" />
<text  x="340.81" y="287.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (27 samples, 1.49%)</title><rect x="305.8" y="213" width="17.6" height="15.0" fill="rgb(216,77,1)" rx="2" ry="2" />
<text  x="308.82" y="223.5" ></text>
</g>
<g >
<title>runtime.sysmon (325 samples, 17.99%)</title><rect x="877.9" y="341" width="212.2" height="15.0" fill="rgb(209,98,18)" rx="2" ry="2" />
<text  x="880.86" y="351.5" >runtime.sysmon</text>
</g>
<g >
<title>runtime.usleep_trampoline (1 samples, 0.06%)</title><rect x="537.0" y="357" width="0.6" height="15.0" fill="rgb(220,147,8)" rx="2" ry="2" />
<text  x="539.98" y="367.5" ></text>
</g>
<g >
<title>runtime.wirep (1 samples, 0.06%)</title><rect x="804.7" y="277" width="0.7" height="15.0" fill="rgb(251,89,28)" rx="2" ry="2" />
<text  x="807.72" y="287.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (477 samples, 26.40%)</title><rect x="12.0" y="277" width="311.4" height="15.0" fill="rgb(237,13,30)" rx="2" ry="2" />
<text  x="14.96" y="287.5" >internal/poll.(*FD).Write</text>
</g>
<g >
<title>runtime.exitsyscallfast (19 samples, 1.05%)</title><rect x="510.2" y="133" width="12.4" height="15.0" fill="rgb(237,58,42)" rx="2" ry="2" />
<text  x="513.21" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenFASTHTTP.func1 (25 samples, 1.38%)</title><rect x="324.8" y="309" width="16.3" height="15.0" fill="rgb(218,111,18)" rx="2" ry="2" />
<text  x="327.75" y="319.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.06%)</title><rect x="337.2" y="69" width="0.6" height="15.0" fill="rgb(235,222,51)" rx="2" ry="2" />
<text  x="340.16" y="79.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).URI (1 samples, 0.06%)</title><rect x="324.1" y="277" width="0.7" height="15.0" fill="rgb(226,32,50)" rx="2" ry="2" />
<text  x="327.10" y="287.5" ></text>
</g>
</g>
</svg>

