<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>github.com/gorilla/websocket.(*Conn).prepWrite (1 samples, 0.04%)</title><rect x="71.1" y="341" width="0.4" height="15.0" fill="rgb(213,228,4)" rx="2" ry="2" />
<text  x="74.08" y="351.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="175.2" y="229" width="0.5" height="15.0" fill="rgb(206,147,9)" rx="2" ry="2" />
<text  x="178.20" y="239.5" ></text>
</g>
<g >
<title>runtime.notesleep (612 samples, 24.00%)</title><rect x="414.4" y="309" width="283.2" height="15.0" fill="rgb(250,174,16)" rx="2" ry="2" />
<text  x="417.44" y="319.5" >runtime.notesleep</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).read (117 samples, 4.59%)</title><rect x="11.4" y="309" width="54.1" height="15.0" fill="rgb(216,105,6)" rx="2" ry="2" />
<text  x="14.39" y="319.5" >githu..</text>
</g>
<g >
<title>runtime.send (2 samples, 0.08%)</title><rect x="69.7" y="341" width="0.9" height="15.0" fill="rgb(232,87,35)" rx="2" ry="2" />
<text  x="72.69" y="351.5" ></text>
</g>
<g >
<title>runtime.pcvalue (2 samples, 0.08%)</title><rect x="203.0" y="181" width="0.9" height="15.0" fill="rgb(231,43,22)" rx="2" ry="2" />
<text  x="205.96" y="191.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (192 samples, 7.53%)</title><rect x="73.9" y="277" width="88.8" height="15.0" fill="rgb(206,61,45)" rx="2" ry="2" />
<text  x="76.86" y="287.5" >internal/p..</text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.04%)</title><rect x="174.7" y="197" width="0.5" height="15.0" fill="rgb(225,203,51)" rx="2" ry="2" />
<text  x="177.74" y="207.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).ReadMessage (129 samples, 5.06%)</title><rect x="10.0" y="357" width="59.7" height="15.0" fill="rgb(220,71,25)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >github..</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).WriteMessage (201 samples, 7.88%)</title><rect x="70.6" y="357" width="93.0" height="15.0" fill="rgb(235,209,35)" rx="2" ry="2" />
<text  x="73.62" y="367.5" >github.com/..</text>
</g>
<g >
<title>runtime.chanrecv2 (1 samples, 0.04%)</title><rect x="163.6" y="373" width="0.5" height="15.0" fill="rgb(246,172,43)" rx="2" ry="2" />
<text  x="166.63" y="383.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (1 samples, 0.04%)</title><rect x="70.2" y="293" width="0.4" height="15.0" fill="rgb(242,35,37)" rx="2" ry="2" />
<text  x="73.16" y="303.5" ></text>
</g>
<g >
<title>runtime.getStackMap (2 samples, 0.08%)</title><rect x="203.0" y="213" width="0.9" height="15.0" fill="rgb(231,94,29)" rx="2" ry="2" />
<text  x="205.96" y="223.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.04%)</title><rect x="175.2" y="213" width="0.5" height="15.0" fill="rgb(225,76,40)" rx="2" ry="2" />
<text  x="178.20" y="223.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (13 samples, 0.51%)</title><rect x="59.1" y="149" width="6.0" height="15.0" fill="rgb(212,168,19)" rx="2" ry="2" />
<text  x="62.05" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (108 samples, 4.24%)</title><rect x="983.6" y="309" width="50.0" height="15.0" fill="rgb(249,63,43)" rx="2" ry="2" />
<text  x="986.62" y="319.5" >runti..</text>
</g>
<g >
<title>runtime.startm (1 samples, 0.04%)</title><rect x="177.1" y="165" width="0.4" height="15.0" fill="rgb(253,195,30)" rx="2" ry="2" />
<text  x="180.05" y="175.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (6 samples, 0.24%)</title><rect x="715.2" y="261" width="2.8" height="15.0" fill="rgb(227,36,41)" rx="2" ry="2" />
<text  x="718.22" y="271.5" ></text>
</g>
<g >
<title>runtime.notetsleep (3 samples, 0.12%)</title><rect x="1033.6" y="325" width="1.4" height="15.0" fill="rgb(205,133,52)" rx="2" ry="2" />
<text  x="1036.59" y="335.5" ></text>
</g>
<g >
<title>runtime.ready (330 samples, 12.94%)</title><rect x="1036.4" y="341" width="152.7" height="15.0" fill="rgb(245,81,0)" rx="2" ry="2" />
<text  x="1039.37" y="351.5" >runtime.ready</text>
</g>
<g >
<title>net.(*conn).Read (117 samples, 4.59%)</title><rect x="11.4" y="261" width="54.1" height="15.0" fill="rgb(250,46,32)" rx="2" ry="2" />
<text  x="14.39" y="271.5" >net.(..</text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.04%)</title><rect x="205.3" y="309" width="0.4" height="15.0" fill="rgb(250,60,30)" rx="2" ry="2" />
<text  x="208.28" y="319.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="171.5" y="149" width="0.5" height="15.0" fill="rgb(233,175,10)" rx="2" ry="2" />
<text  x="174.50" y="159.5" ></text>
</g>
<g >
<title>bytes.makeSlice (1 samples, 0.04%)</title><rect x="67.8" y="277" width="0.5" height="15.0" fill="rgb(230,176,18)" rx="2" ry="2" />
<text  x="70.84" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (330 samples, 12.94%)</title><rect x="1036.4" y="293" width="152.7" height="15.0" fill="rgb(225,216,21)" rx="2" ry="2" />
<text  x="1039.37" y="303.5" >runtime.notewakeup</text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.04%)</title><rect x="1189.5" y="325" width="0.5" height="15.0" fill="rgb(208,44,21)" rx="2" ry="2" />
<text  x="1192.54" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.04%)</title><rect x="871.2" y="293" width="0.4" height="15.0" fill="rgb(242,216,36)" rx="2" ry="2" />
<text  x="874.17" y="303.5" ></text>
</g>
<g >
<title>runtime.scang (2 samples, 0.08%)</title><rect x="203.0" y="293" width="0.9" height="15.0" fill="rgb(214,84,6)" rx="2" ry="2" />
<text  x="205.96" y="303.5" ></text>
</g>
<g >
<title>runtime.markroot (2 samples, 0.08%)</title><rect x="203.0" y="325" width="0.9" height="15.0" fill="rgb(222,119,32)" rx="2" ry="2" />
<text  x="205.96" y="335.5" ></text>
</g>
<g >
<title>runtime.nanotime (131 samples, 5.14%)</title><rect x="720.8" y="341" width="60.6" height="15.0" fill="rgb(241,176,39)" rx="2" ry="2" />
<text  x="723.78" y="351.5" >runtim..</text>
</g>
<g >
<title>internal/poll.(*FD).SetWriteDeadline (1 samples, 0.04%)</title><rect x="73.4" y="277" width="0.5" height="15.0" fill="rgb(238,143,0)" rx="2" ry="2" />
<text  x="76.40" y="287.5" ></text>
</g>
<g >
<title>runtime.nanotime (84 samples, 3.29%)</title><rect x="213.6" y="325" width="38.9" height="15.0" fill="rgb(242,133,33)" rx="2" ry="2" />
<text  x="216.61" y="335.5" >run..</text>
</g>
<g >
<title>reflect.(*rtype).Name (1 samples, 0.04%)</title><rect x="168.3" y="213" width="0.4" height="15.0" fill="rgb(229,37,10)" rx="2" ry="2" />
<text  x="171.26" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (1 samples, 0.04%)</title><rect x="165.5" y="261" width="0.4" height="15.0" fill="rgb(222,82,17)" rx="2" ry="2" />
<text  x="168.48" y="271.5" ></text>
</g>
<g >
<title>syscall.Read (112 samples, 4.39%)</title><rect x="13.7" y="213" width="51.8" height="15.0" fill="rgb(250,221,47)" rx="2" ry="2" />
<text  x="16.70" y="223.5" >sysca..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (2 samples, 0.08%)</title><rect x="167.3" y="181" width="1.0" height="15.0" fill="rgb(244,83,15)" rx="2" ry="2" />
<text  x="170.33" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeWSConn (74 samples, 2.90%)</title><rect x="164.1" y="309" width="34.2" height="15.0" fill="rgb(251,99,2)" rx="2" ry="2" />
<text  x="167.09" y="319.5" >hs..</text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="169.6" y="165" width="0.5" height="15.0" fill="rgb(212,126,36)" rx="2" ry="2" />
<text  x="172.65" y="175.5" ></text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.08%)</title><rect x="172.0" y="213" width="0.9" height="15.0" fill="rgb(208,57,14)" rx="2" ry="2" />
<text  x="174.96" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.04%)</title><rect x="165.5" y="229" width="0.4" height="15.0" fill="rgb(212,23,0)" rx="2" ry="2" />
<text  x="168.48" y="239.5" ></text>
</g>
<g >
<title>bytes.makeSlice.func1 (1 samples, 0.04%)</title><rect x="66.5" y="261" width="0.4" height="15.0" fill="rgb(220,73,19)" rx="2" ry="2" />
<text  x="69.45" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WriteConn (202 samples, 7.92%)</title><rect x="70.6" y="389" width="93.5" height="15.0" fill="rgb(206,0,3)" rx="2" ry="2" />
<text  x="73.62" y="399.5" >hslam.com/m..</text>
</g>
<g >
<title>runtime.findrunnable (1 samples, 0.04%)</title><rect x="205.3" y="341" width="0.4" height="15.0" fill="rgb(212,196,23)" rx="2" ry="2" />
<text  x="208.28" y="351.5" ></text>
</g>
<g >
<title>runtime.chanrecv (1 samples, 0.04%)</title><rect x="163.6" y="357" width="0.5" height="15.0" fill="rgb(249,41,11)" rx="2" ry="2" />
<text  x="166.63" y="367.5" ></text>
</g>
<g >
<title>runtime.libcCall (2 samples, 0.08%)</title><rect x="917.4" y="325" width="1.0" height="15.0" fill="rgb(246,149,36)" rx="2" ry="2" />
<text  x="920.44" y="335.5" ></text>
</g>
<g >
<title>runtime.mstart1 (432 samples, 16.94%)</title><rect x="718.5" y="373" width="199.9" height="15.0" fill="rgb(227,138,29)" rx="2" ry="2" />
<text  x="721.46" y="383.5" >runtime.mstart1</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (2 samples, 0.08%)</title><rect x="174.3" y="213" width="0.9" height="15.0" fill="rgb(208,61,28)" rx="2" ry="2" />
<text  x="177.27" y="223.5" ></text>
</g>
<g >
<title>net/http.HandlerFunc.ServeHTTP (74 samples, 2.90%)</title><rect x="164.1" y="341" width="34.2" height="15.0" fill="rgb(249,57,44)" rx="2" ry="2" />
<text  x="167.09" y="351.5" >ne..</text>
</g>
<g >
<title>runtime.runqsteal (21 samples, 0.82%)</title><rect x="403.3" y="325" width="9.8" height="15.0" fill="rgb(207,143,17)" rx="2" ry="2" />
<text  x="406.33" y="335.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.04%)</title><rect x="205.3" y="357" width="0.4" height="15.0" fill="rgb(247,212,11)" rx="2" ry="2" />
<text  x="208.28" y="367.5" ></text>
</g>
<g >
<title>runtime.mstart (1,017 samples, 39.88%)</title><rect x="718.5" y="389" width="470.6" height="15.0" fill="rgb(229,175,47)" rx="2" ry="2" />
<text  x="721.46" y="399.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.04%)</title><rect x="205.3" y="277" width="0.4" height="15.0" fill="rgb(219,152,33)" rx="2" ry="2" />
<text  x="208.28" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (100 samples, 3.92%)</title><rect x="824.9" y="293" width="46.3" height="15.0" fill="rgb(218,147,19)" rx="2" ry="2" />
<text  x="827.89" y="303.5" >runt..</text>
</g>
<g >
<title>runtime.handoff (2 samples, 0.08%)</title><rect x="202.0" y="309" width="1.0" height="15.0" fill="rgb(234,147,20)" rx="2" ry="2" />
<text  x="205.04" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (2 samples, 0.08%)</title><rect x="174.3" y="229" width="0.9" height="15.0" fill="rgb(205,31,37)" rx="2" ry="2" />
<text  x="177.27" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="177.1" y="229" width="0.4" height="15.0" fill="rgb(245,40,32)" rx="2" ry="2" />
<text  x="180.05" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="201.1" y="341" width="0.5" height="15.0" fill="rgb(219,155,3)" rx="2" ry="2" />
<text  x="204.11" y="351.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (2 samples, 0.08%)</title><rect x="58.1" y="133" width="1.0" height="15.0" fill="rgb(236,151,13)" rx="2" ry="2" />
<text  x="61.13" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1033.1" y="293" width="0.5" height="15.0" fill="rgb(235,32,38)" rx="2" ry="2" />
<text  x="1036.13" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.08%)</title><rect x="696.3" y="277" width="0.9" height="15.0" fill="rgb(226,17,51)" rx="2" ry="2" />
<text  x="699.25" y="287.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (1 samples, 0.04%)</title><rect x="65.1" y="149" width="0.4" height="15.0" fill="rgb(249,23,54)" rx="2" ry="2" />
<text  x="68.07" y="159.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (2 samples, 0.08%)</title><rect x="203.0" y="197" width="0.9" height="15.0" fill="rgb(245,55,36)" rx="2" ry="2" />
<text  x="205.96" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.04%)</title><rect x="165.9" y="229" width="0.5" height="15.0" fill="rgb(240,31,27)" rx="2" ry="2" />
<text  x="168.95" y="239.5" ></text>
</g>
<g >
<title>runtime.jmpdefer (1 samples, 0.04%)</title><rect x="176.6" y="277" width="0.5" height="15.0" fill="rgb(238,79,41)" rx="2" ry="2" />
<text  x="179.59" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (44 samples, 1.73%)</title><rect x="697.6" y="277" width="20.4" height="15.0" fill="rgb(241,165,37)" rx="2" ry="2" />
<text  x="700.64" y="287.5" ></text>
</g>
<g >
<title>runtime.freedefer (3 samples, 0.12%)</title><rect x="12.3" y="197" width="1.4" height="15.0" fill="rgb(239,60,25)" rx="2" ry="2" />
<text  x="15.31" y="207.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.04%)</title><rect x="66.9" y="261" width="0.5" height="15.0" fill="rgb(211,43,5)" rx="2" ry="2" />
<text  x="69.92" y="271.5" ></text>
</g>
<g >
<title>runtime.selparkcommit (1 samples, 0.04%)</title><rect x="718.0" y="357" width="0.5" height="15.0" fill="rgb(218,42,3)" rx="2" ry="2" />
<text  x="721.00" y="367.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (13 samples, 0.51%)</title><rect x="59.1" y="165" width="6.0" height="15.0" fill="rgb(242,145,1)" rx="2" ry="2" />
<text  x="62.05" y="175.5" ></text>
</g>
<g >
<title>net/http.(*conn).serve (74 samples, 2.90%)</title><rect x="164.1" y="389" width="34.2" height="15.0" fill="rgb(206,18,4)" rx="2" ry="2" />
<text  x="167.09" y="399.5" >ne..</text>
</g>
<g >
<title>runtime.selectgo (45 samples, 1.76%)</title><rect x="177.5" y="293" width="20.8" height="15.0" fill="rgb(250,193,49)" rx="2" ry="2" />
<text  x="180.51" y="303.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.04%)</title><rect x="212.7" y="309" width="0.4" height="15.0" fill="rgb(226,109,6)" rx="2" ry="2" />
<text  x="215.68" y="319.5" ></text>
</g>
<g >
<title>runtime.gopark (1 samples, 0.04%)</title><rect x="197.9" y="277" width="0.4" height="15.0" fill="rgb(252,135,9)" rx="2" ry="2" />
<text  x="200.87" y="287.5" ></text>
</g>
<g >
<title>reflect.Value.call (7 samples, 0.27%)</title><rect x="168.7" y="197" width="3.3" height="15.0" fill="rgb(244,57,23)" rx="2" ry="2" />
<text  x="171.72" y="207.5" ></text>
</g>
<g >
<title>runtime.kevent (3 samples, 0.12%)</title><rect x="1035.0" y="309" width="1.4" height="15.0" fill="rgb(212,202,47)" rx="2" ry="2" />
<text  x="1037.98" y="319.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (8 samples, 0.31%)</title><rect x="201.6" y="357" width="3.7" height="15.0" fill="rgb(244,151,16)" rx="2" ry="2" />
<text  x="204.58" y="367.5" ></text>
</g>
<g >
<title>runtime.wakep (330 samples, 12.94%)</title><rect x="1036.4" y="325" width="152.7" height="15.0" fill="rgb(217,112,4)" rx="2" ry="2" />
<text  x="1039.37" y="335.5" >runtime.wakep</text>
</g>
<g >
<title>runtime.gentraceback (2 samples, 0.08%)</title><rect x="203.0" y="261" width="0.9" height="15.0" fill="rgb(254,142,22)" rx="2" ry="2" />
<text  x="205.96" y="271.5" ></text>
</g>
<g >
<title>reflect.Value.Call (7 samples, 0.27%)</title><rect x="168.7" y="213" width="3.3" height="15.0" fill="rgb(214,169,5)" rx="2" ry="2" />
<text  x="171.72" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep (196 samples, 7.69%)</title><rect x="781.4" y="341" width="90.7" height="15.0" fill="rgb(209,144,6)" rx="2" ry="2" />
<text  x="784.40" y="351.5" >runtime.no..</text>
</g>
<g >
<title>runtime.sysmon (432 samples, 16.94%)</title><rect x="718.5" y="357" width="199.9" height="15.0" fill="rgb(228,19,26)" rx="2" ry="2" />
<text  x="721.46" y="367.5" >runtime.sysmon</text>
</g>
<g >
<title>runtime.releasep (1 samples, 0.04%)</title><rect x="400.6" y="325" width="0.4" height="15.0" fill="rgb(208,115,22)" rx="2" ry="2" />
<text  x="403.56" y="335.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (1 samples, 0.04%)</title><rect x="139.1" y="213" width="0.5" height="15.0" fill="rgb(253,74,10)" rx="2" ry="2" />
<text  x="142.11" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (3 samples, 0.12%)</title><rect x="1033.6" y="309" width="1.4" height="15.0" fill="rgb(210,90,6)" rx="2" ry="2" />
<text  x="1036.59" y="319.5" ></text>
</g>
<g >
<title>time.Sleep (1 samples, 0.04%)</title><rect x="1189.5" y="373" width="0.5" height="15.0" fill="rgb(253,228,2)" rx="2" ry="2" />
<text  x="1192.54" y="383.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.04%)</title><rect x="720.3" y="325" width="0.5" height="15.0" fill="rgb(254,113,22)" rx="2" ry="2" />
<text  x="723.31" y="335.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.04%)</title><rect x="70.2" y="277" width="0.4" height="15.0" fill="rgb(244,131,24)" rx="2" ry="2" />
<text  x="73.16" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (1 samples, 0.04%)</title><rect x="165.5" y="245" width="0.4" height="15.0" fill="rgb(244,208,46)" rx="2" ry="2" />
<text  x="168.48" y="255.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="823.0" y="309" width="0.5" height="15.0" fill="rgb(250,209,35)" rx="2" ry="2" />
<text  x="826.04" y="319.5" ></text>
</g>
<g >
<title>reflect.methodReceiver (2 samples, 0.08%)</title><rect x="170.1" y="181" width="0.9" height="15.0" fill="rgb(237,198,35)" rx="2" ry="2" />
<text  x="173.11" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.08%)</title><rect x="58.1" y="85" width="1.0" height="15.0" fill="rgb(215,31,36)" rx="2" ry="2" />
<text  x="61.13" y="95.5" ></text>
</g>
<g >
<title>runtime.gosched_m (3 samples, 0.12%)</title><rect x="205.7" y="373" width="1.4" height="15.0" fill="rgb(212,200,34)" rx="2" ry="2" />
<text  x="208.74" y="383.5" ></text>
</g>
<g >
<title>runtime.notewakeup (44 samples, 1.73%)</title><rect x="697.6" y="293" width="20.4" height="15.0" fill="rgb(218,149,39)" rx="2" ry="2" />
<text  x="700.64" y="303.5" ></text>
</g>
<g >
<title>runtime.chansend (1 samples, 0.04%)</title><rect x="177.1" y="277" width="0.4" height="15.0" fill="rgb(245,218,46)" rx="2" ry="2" />
<text  x="180.05" y="287.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.08%)</title><rect x="413.5" y="309" width="0.9" height="15.0" fill="rgb(247,199,18)" rx="2" ry="2" />
<text  x="416.51" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="697.2" y="277" width="0.4" height="15.0" fill="rgb(240,169,54)" rx="2" ry="2" />
<text  x="700.18" y="287.5" ></text>
</g>
<g >
<title>runtime.chansend1 (2 samples, 0.08%)</title><rect x="69.7" y="373" width="0.9" height="15.0" fill="rgb(227,0,54)" rx="2" ry="2" />
<text  x="72.69" y="383.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.maskBytes (1 samples, 0.04%)</title><rect x="69.2" y="277" width="0.5" height="15.0" fill="rgb(232,157,43)" rx="2" ry="2" />
<text  x="72.23" y="287.5" ></text>
</g>
<g >
<title>reflect.name.name (1 samples, 0.04%)</title><rect x="168.3" y="181" width="0.4" height="15.0" fill="rgb(207,132,28)" rx="2" ry="2" />
<text  x="171.26" y="191.5" ></text>
</g>
<g >
<title>runtime.runqempty (1 samples, 0.04%)</title><rect x="401.0" y="325" width="0.5" height="15.0" fill="rgb(226,95,36)" rx="2" ry="2" />
<text  x="404.02" y="335.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.04%)</title><rect x="66.9" y="245" width="0.5" height="15.0" fill="rgb(226,25,23)" rx="2" ry="2" />
<text  x="69.92" y="255.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Out (1 samples, 0.04%)</title><rect x="169.2" y="181" width="0.4" height="15.0" fill="rgb(243,205,13)" rx="2" ry="2" />
<text  x="172.18" y="191.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (141 samples, 5.53%)</title><rect x="918.4" y="357" width="65.2" height="15.0" fill="rgb(244,0,12)" rx="2" ry="2" />
<text  x="921.37" y="367.5" >runtime..</text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.04%)</title><rect x="212.7" y="293" width="0.4" height="15.0" fill="rgb(212,119,28)" rx="2" ry="2" />
<text  x="215.68" y="303.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (2 samples, 0.08%)</title><rect x="203.0" y="229" width="0.9" height="15.0" fill="rgb(210,3,36)" rx="2" ry="2" />
<text  x="205.96" y="239.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).grow (1 samples, 0.04%)</title><rect x="67.8" y="293" width="0.5" height="15.0" fill="rgb(229,149,16)" rx="2" ry="2" />
<text  x="70.84" y="303.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*messageWriter).flushFrame (199 samples, 7.80%)</title><rect x="71.5" y="341" width="92.1" height="15.0" fill="rgb(206,29,20)" rx="2" ry="2" />
<text  x="74.55" y="351.5" >github.com/..</text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="165.5" y="181" width="0.4" height="15.0" fill="rgb(231,111,32)" rx="2" ry="2" />
<text  x="168.48" y="191.5" ></text>
</g>
<g >
<title>runtime.gogo (1 samples, 0.04%)</title><rect x="198.3" y="373" width="0.5" height="15.0" fill="rgb(211,31,9)" rx="2" ry="2" />
<text  x="201.34" y="383.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.04%)</title><rect x="171.5" y="181" width="0.5" height="15.0" fill="rgb(253,59,40)" rx="2" ry="2" />
<text  x="174.50" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (134 samples, 5.25%)</title><rect x="918.4" y="277" width="62.0" height="15.0" fill="rgb(219,6,19)" rx="2" ry="2" />
<text  x="921.37" y="287.5" >runtim..</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).write.func1 (1 samples, 0.04%)</title><rect x="72.9" y="309" width="0.5" height="15.0" fill="rgb(221,143,3)" rx="2" ry="2" />
<text  x="75.93" y="319.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.04%)</title><rect x="176.1" y="261" width="0.5" height="15.0" fill="rgb(216,170,5)" rx="2" ry="2" />
<text  x="179.13" y="271.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.04%)</title><rect x="58.6" y="69" width="0.5" height="15.0" fill="rgb(251,197,1)" rx="2" ry="2" />
<text  x="61.59" y="79.5" ></text>
</g>
<g >
<title>runtime.semawakeup (330 samples, 12.94%)</title><rect x="1036.4" y="277" width="152.7" height="15.0" fill="rgb(216,64,53)" rx="2" ry="2" />
<text  x="1039.37" y="287.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.freedefer (6 samples, 0.24%)</title><rect x="73.9" y="245" width="2.7" height="15.0" fill="rgb(241,87,20)" rx="2" ry="2" />
<text  x="76.86" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.ReadConn (131 samples, 5.14%)</title><rect x="10.0" y="389" width="60.6" height="15.0" fill="rgb(210,33,43)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >hslam...</text>
</g>
<g >
<title>runtime.deferreturn (6 samples, 0.24%)</title><rect x="73.9" y="261" width="2.7" height="15.0" fill="rgb(235,210,12)" rx="2" ry="2" />
<text  x="76.86" y="271.5" ></text>
</g>
<g >
<title>reflect.New (2 samples, 0.08%)</title><rect x="173.3" y="213" width="1.0" height="15.0" fill="rgb(243,51,48)" rx="2" ry="2" />
<text  x="176.35" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (606 samples, 23.76%)</title><rect x="415.8" y="277" width="280.5" height="15.0" fill="rgb(218,68,2)" rx="2" ry="2" />
<text  x="418.83" y="287.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.12%)</title><rect x="1033.6" y="293" width="1.4" height="15.0" fill="rgb(217,167,2)" rx="2" ry="2" />
<text  x="1036.59" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (2 samples, 0.08%)</title><rect x="165.0" y="277" width="0.9" height="15.0" fill="rgb(208,108,3)" rx="2" ry="2" />
<text  x="168.02" y="287.5" ></text>
</g>
<g >
<title>runtime.resetspinning (44 samples, 1.73%)</title><rect x="697.6" y="341" width="20.4" height="15.0" fill="rgb(214,208,42)" rx="2" ry="2" />
<text  x="700.64" y="351.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.04%)</title><rect x="413.1" y="309" width="0.4" height="15.0" fill="rgb(217,203,13)" rx="2" ry="2" />
<text  x="416.05" y="319.5" ></text>
</g>
<g >
<title>runtime.systemstack (8 samples, 0.31%)</title><rect x="201.6" y="373" width="3.7" height="15.0" fill="rgb(237,88,34)" rx="2" ry="2" />
<text  x="204.58" y="383.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (1 samples, 0.04%)</title><rect x="165.9" y="277" width="0.5" height="15.0" fill="rgb(248,137,21)" rx="2" ry="2" />
<text  x="168.95" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.04%)</title><rect x="165.5" y="197" width="0.4" height="15.0" fill="rgb(240,39,48)" rx="2" ry="2" />
<text  x="168.48" y="207.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (3 samples, 0.12%)</title><rect x="1035.0" y="341" width="1.4" height="15.0" fill="rgb(214,189,18)" rx="2" ry="2" />
<text  x="1037.98" y="351.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (9 samples, 0.35%)</title><rect x="201.1" y="389" width="4.2" height="15.0" fill="rgb(253,165,37)" rx="2" ry="2" />
<text  x="204.11" y="399.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (2 samples, 0.08%)</title><rect x="166.4" y="181" width="0.9" height="15.0" fill="rgb(210,13,6)" rx="2" ry="2" />
<text  x="169.41" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (10 samples, 0.39%)</title><rect x="168.3" y="229" width="4.6" height="15.0" fill="rgb(228,221,49)" rx="2" ry="2" />
<text  x="171.26" y="239.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (1 samples, 0.04%)</title><rect x="201.1" y="325" width="0.5" height="15.0" fill="rgb(241,44,34)" rx="2" ry="2" />
<text  x="204.11" y="335.5" ></text>
</g>
<g >
<title>runtime.stopm (615 samples, 24.12%)</title><rect x="413.1" y="325" width="284.5" height="15.0" fill="rgb(218,170,30)" rx="2" ry="2" />
<text  x="416.05" y="335.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.startTheWorldWithSema (1 samples, 0.04%)</title><rect x="201.1" y="309" width="0.5" height="15.0" fill="rgb(215,10,3)" rx="2" ry="2" />
<text  x="204.11" y="319.5" ></text>
</g>
<g >
<title>runtime.startm (44 samples, 1.73%)</title><rect x="697.6" y="309" width="20.4" height="15.0" fill="rgb(251,201,26)" rx="2" ry="2" />
<text  x="700.64" y="319.5" ></text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.08%)</title><rect x="824.0" y="293" width="0.9" height="15.0" fill="rgb(226,138,39)" rx="2" ry="2" />
<text  x="826.97" y="303.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (2 samples, 0.08%)</title><rect x="203.0" y="309" width="0.9" height="15.0" fill="rgb(247,113,46)" rx="2" ry="2" />
<text  x="205.96" y="319.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).grow (5 samples, 0.20%)</title><rect x="65.5" y="293" width="2.3" height="15.0" fill="rgb(226,60,46)" rx="2" ry="2" />
<text  x="68.53" y="303.5" ></text>
</g>
<g >
<title>runtime.semacreate (1 samples, 0.04%)</title><rect x="415.4" y="293" width="0.4" height="15.0" fill="rgb(214,134,14)" rx="2" ry="2" />
<text  x="418.36" y="303.5" ></text>
</g>
<g >
<title>syscall.syscall (112 samples, 4.39%)</title><rect x="13.7" y="181" width="51.8" height="15.0" fill="rgb(206,84,39)" rx="2" ry="2" />
<text  x="16.70" y="191.5" >sysca..</text>
</g>
<g >
<title>runtime.deferreturn (4 samples, 0.16%)</title><rect x="11.9" y="213" width="1.8" height="15.0" fill="rgb(214,216,21)" rx="2" ry="2" />
<text  x="14.85" y="223.5" ></text>
</g>
<g >
<title>runtime.mcall (1,109 samples, 43.49%)</title><rect x="205.3" y="389" width="513.2" height="15.0" fill="rgb(206,21,38)" rx="2" ry="2" />
<text  x="208.28" y="399.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.pthread_cond_signal (38 samples, 1.49%)</title><rect x="697.6" y="261" width="17.6" height="15.0" fill="rgb(224,42,1)" rx="2" ry="2" />
<text  x="700.64" y="271.5" ></text>
</g>
<g >
<title>runtime.startm (330 samples, 12.94%)</title><rect x="1036.4" y="309" width="152.7" height="15.0" fill="rgb(212,73,17)" rx="2" ry="2" />
<text  x="1039.37" y="319.5" >runtime.startm</text>
</g>
<g >
<title>runtime.goready.func1 (1 samples, 0.04%)</title><rect x="177.1" y="213" width="0.4" height="15.0" fill="rgb(247,135,41)" rx="2" ry="2" />
<text  x="180.05" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="198.8" y="373" width="0.5" height="15.0" fill="rgb(251,97,42)" rx="2" ry="2" />
<text  x="201.80" y="383.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (15 samples, 0.59%)</title><rect x="168.3" y="245" width="6.9" height="15.0" fill="rgb(240,213,3)" rx="2" ry="2" />
<text  x="171.26" y="255.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.04%)</title><rect x="177.1" y="197" width="0.4" height="15.0" fill="rgb(228,3,38)" rx="2" ry="2" />
<text  x="180.05" y="207.5" ></text>
</g>
<g >
<title>runtime.notewakeup (141 samples, 5.53%)</title><rect x="918.4" y="309" width="65.2" height="15.0" fill="rgb(240,100,6)" rx="2" ry="2" />
<text  x="921.37" y="319.5" >runtime..</text>
</g>
<g >
<title>net.(*netFD).Read (116 samples, 4.55%)</title><rect x="11.9" y="245" width="53.6" height="15.0" fill="rgb(241,30,37)" rx="2" ry="2" />
<text  x="14.85" y="255.5" >net.(..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (2 samples, 0.08%)</title><rect x="167.3" y="245" width="1.0" height="15.0" fill="rgb(207,96,1)" rx="2" ry="2" />
<text  x="170.33" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.04%)</title><rect x="174.3" y="181" width="0.4" height="15.0" fill="rgb(248,61,35)" rx="2" ry="2" />
<text  x="177.27" y="191.5" ></text>
</g>
<g >
<title>syscall.syscall (186 samples, 7.29%)</title><rect x="76.6" y="229" width="86.1" height="15.0" fill="rgb(244,121,21)" rx="2" ry="2" />
<text  x="79.64" y="239.5" >syscall.sy..</text>
</g>
<g >
<title>runtime.lock (3 samples, 0.12%)</title><rect x="719.4" y="341" width="1.4" height="15.0" fill="rgb(228,117,2)" rx="2" ry="2" />
<text  x="722.39" y="351.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).ReadFrom (4 samples, 0.16%)</title><rect x="67.8" y="309" width="1.9" height="15.0" fill="rgb(222,125,30)" rx="2" ry="2" />
<text  x="70.84" y="319.5" ></text>
</g>
<g >
<title>runtime.netpoll (320 samples, 12.55%)</title><rect x="252.5" y="325" width="148.1" height="15.0" fill="rgb(212,115,54)" rx="2" ry="2" />
<text  x="255.48" y="335.5" >runtime.netpoll</text>
</g>
<g >
<title>runtime.handoffp (141 samples, 5.53%)</title><rect x="918.4" y="341" width="65.2" height="15.0" fill="rgb(228,85,36)" rx="2" ry="2" />
<text  x="921.37" y="351.5" >runtime..</text>
</g>
<g >
<title>runtime/pprof.profileWriter (1 samples, 0.04%)</title><rect x="1189.5" y="389" width="0.5" height="15.0" fill="rgb(230,74,0)" rx="2" ry="2" />
<text  x="1192.54" y="399.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait_trampoline (1 samples, 0.04%)</title><rect x="200.2" y="373" width="0.5" height="15.0" fill="rgb(243,181,31)" rx="2" ry="2" />
<text  x="203.19" y="383.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*messageReader).Read (3 samples, 0.12%)</title><rect x="68.3" y="293" width="1.4" height="15.0" fill="rgb(234,44,40)" rx="2" ry="2" />
<text  x="71.31" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (141 samples, 5.53%)</title><rect x="918.4" y="325" width="65.2" height="15.0" fill="rgb(217,176,38)" rx="2" ry="2" />
<text  x="921.37" y="335.5" >runtime..</text>
</g>
<g >
<title>internal/poll.(*FD).Read (116 samples, 4.55%)</title><rect x="11.9" y="229" width="53.6" height="15.0" fill="rgb(229,208,45)" rx="2" ry="2" />
<text  x="14.85" y="239.5" >inter..</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).write (199 samples, 7.80%)</title><rect x="71.5" y="325" width="92.1" height="15.0" fill="rgb(227,35,53)" rx="2" ry="2" />
<text  x="74.55" y="335.5" >github.com/..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (2 samples, 0.08%)</title><rect x="166.4" y="213" width="0.9" height="15.0" fill="rgb(236,40,12)" rx="2" ry="2" />
<text  x="169.41" y="223.5" ></text>
</g>
<g >
<title>runtime.send (1 samples, 0.04%)</title><rect x="177.1" y="261" width="0.4" height="15.0" fill="rgb(219,5,3)" rx="2" ry="2" />
<text  x="180.05" y="271.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.08%)</title><rect x="212.7" y="325" width="0.9" height="15.0" fill="rgb(207,166,27)" rx="2" ry="2" />
<text  x="215.68" y="335.5" ></text>
</g>
<g >
<title>runtime.lock (3 samples, 0.12%)</title><rect x="205.7" y="341" width="1.4" height="15.0" fill="rgb(238,192,18)" rx="2" ry="2" />
<text  x="208.74" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeBoolValueNoZero (1 samples, 0.04%)</title><rect x="165.9" y="197" width="0.5" height="15.0" fill="rgb(246,131,50)" rx="2" ry="2" />
<text  x="168.95" y="207.5" ></text>
</g>
<g >
<title>runtime.runqgrab (20 samples, 0.78%)</title><rect x="403.8" y="309" width="9.3" height="15.0" fill="rgb(246,20,2)" rx="2" ry="2" />
<text  x="406.80" y="319.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (106 samples, 4.16%)</title><rect x="822.6" y="325" width="49.0" height="15.0" fill="rgb(245,92,27)" rx="2" ry="2" />
<text  x="825.58" y="335.5" >runt..</text>
</g>
<g >
<title>syscall.read (112 samples, 4.39%)</title><rect x="13.7" y="197" width="51.8" height="15.0" fill="rgb(226,21,42)" rx="2" ry="2" />
<text  x="16.70" y="207.5" >sysca..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (2 samples, 0.08%)</title><rect x="166.4" y="229" width="0.9" height="15.0" fill="rgb(246,70,21)" rx="2" ry="2" />
<text  x="169.41" y="239.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="67.4" y="229" width="0.4" height="15.0" fill="rgb(210,158,32)" rx="2" ry="2" />
<text  x="70.38" y="239.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (117 samples, 4.59%)</title><rect x="11.4" y="277" width="54.1" height="15.0" fill="rgb(254,129,33)" rx="2" ry="2" />
<text  x="14.39" y="287.5" >bufio..</text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="870.7" y="277" width="0.5" height="15.0" fill="rgb(254,153,39)" rx="2" ry="2" />
<text  x="873.71" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.04%)</title><rect x="1189.5" y="341" width="0.5" height="15.0" fill="rgb(250,56,9)" rx="2" ry="2" />
<text  x="1192.54" y="351.5" ></text>
</g>
<g >
<title>runtime.usleep_trampoline (1 samples, 0.04%)</title><rect x="200.7" y="373" width="0.4" height="15.0" fill="rgb(224,6,2)" rx="2" ry="2" />
<text  x="203.65" y="383.5" ></text>
</g>
<g >
<title>runtime.systemstack (585 samples, 22.94%)</title><rect x="918.4" y="373" width="270.7" height="15.0" fill="rgb(251,74,33)" rx="2" ry="2" />
<text  x="921.37" y="383.5" >runtime.systemstack</text>
</g>
<g >
<title>net.(*netFD).SetWriteDeadline (1 samples, 0.04%)</title><rect x="73.4" y="293" width="0.5" height="15.0" fill="rgb(245,167,38)" rx="2" ry="2" />
<text  x="76.40" y="303.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (2 samples, 0.08%)</title><rect x="203.0" y="245" width="0.9" height="15.0" fill="rgb(233,87,48)" rx="2" ry="2" />
<text  x="205.96" y="255.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (3 samples, 0.12%)</title><rect x="1035.0" y="357" width="1.4" height="15.0" fill="rgb(214,80,15)" rx="2" ry="2" />
<text  x="1037.98" y="367.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (1 samples, 0.04%)</title><rect x="205.3" y="373" width="0.4" height="15.0" fill="rgb(229,3,10)" rx="2" ry="2" />
<text  x="208.28" y="383.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (2 samples, 0.08%)</title><rect x="202.0" y="325" width="1.0" height="15.0" fill="rgb(217,71,36)" rx="2" ry="2" />
<text  x="205.04" y="335.5" ></text>
</g>
<g >
<title>runtime.goready (1 samples, 0.04%)</title><rect x="177.1" y="245" width="0.4" height="15.0" fill="rgb(210,109,26)" rx="2" ry="2" />
<text  x="180.05" y="255.5" ></text>
</g>
<g >
<title>reflect.(*rtype).exportedMethods (1 samples, 0.04%)</title><rect x="170.6" y="165" width="0.4" height="15.0" fill="rgb(208,34,22)" rx="2" ry="2" />
<text  x="173.57" y="175.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).advanceFrame (119 samples, 4.67%)</title><rect x="10.5" y="325" width="55.0" height="15.0" fill="rgb(249,116,9)" rx="2" ry="2" />
<text  x="13.46" y="335.5" >githu..</text>
</g>
<g >
<title>runtime.park_m (1,105 samples, 43.33%)</title><rect x="207.1" y="373" width="511.4" height="15.0" fill="rgb(225,117,9)" rx="2" ry="2" />
<text  x="210.13" y="383.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.chansend1 (1 samples, 0.04%)</title><rect x="177.1" y="293" width="0.4" height="15.0" fill="rgb(208,56,20)" rx="2" ry="2" />
<text  x="180.05" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.04%)</title><rect x="413.1" y="293" width="0.4" height="15.0" fill="rgb(213,115,0)" rx="2" ry="2" />
<text  x="416.05" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (1 samples, 0.04%)</title><rect x="165.9" y="261" width="0.5" height="15.0" fill="rgb(227,217,47)" rx="2" ry="2" />
<text  x="168.95" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.04%)</title><rect x="1189.5" y="309" width="0.5" height="15.0" fill="rgb(234,28,25)" rx="2" ry="2" />
<text  x="1192.54" y="319.5" ></text>
</g>
<g >
<title>net.(*conn).SetWriteDeadline (1 samples, 0.04%)</title><rect x="73.4" y="309" width="0.5" height="15.0" fill="rgb(223,70,4)" rx="2" ry="2" />
<text  x="76.40" y="319.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.08%)</title><rect x="202.0" y="293" width="1.0" height="15.0" fill="rgb(239,22,31)" rx="2" ry="2" />
<text  x="205.04" y="303.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.04%)</title><rect x="206.7" y="325" width="0.4" height="15.0" fill="rgb(208,165,22)" rx="2" ry="2" />
<text  x="209.67" y="335.5" ></text>
</g>
<g >
<title>runtime.runqget (4 samples, 0.16%)</title><rect x="401.5" y="325" width="1.8" height="15.0" fill="rgb(243,58,9)" rx="2" ry="2" />
<text  x="404.48" y="335.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.04%)</title><rect x="163.6" y="341" width="0.5" height="15.0" fill="rgb(250,67,2)" rx="2" ry="2" />
<text  x="166.63" y="351.5" ></text>
</g>
<g >
<title>net/http.(*ServeMux).ServeHTTP (74 samples, 2.90%)</title><rect x="164.1" y="357" width="34.2" height="15.0" fill="rgb(246,84,20)" rx="2" ry="2" />
<text  x="167.09" y="367.5" >ne..</text>
</g>
<g >
<title>runtime.goschedImpl (3 samples, 0.12%)</title><rect x="205.7" y="357" width="1.4" height="15.0" fill="rgb(241,111,24)" rx="2" ry="2" />
<text  x="208.74" y="367.5" ></text>
</g>
<g >
<title>runtime.usleep (99 samples, 3.88%)</title><rect x="872.6" y="341" width="45.8" height="15.0" fill="rgb(234,140,40)" rx="2" ry="2" />
<text  x="875.56" y="351.5" >runt..</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).NextReader (120 samples, 4.71%)</title><rect x="10.0" y="341" width="55.5" height="15.0" fill="rgb(243,202,4)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >githu..</text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="871.2" y="277" width="0.4" height="15.0" fill="rgb(219,0,46)" rx="2" ry="2" />
<text  x="874.17" y="287.5" ></text>
</g>
<g >
<title>all (2,550 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(222,27,6)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>runtime.schedule (1,103 samples, 43.25%)</title><rect x="207.6" y="357" width="510.4" height="15.0" fill="rgb(251,121,19)" rx="2" ry="2" />
<text  x="210.59" y="367.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.exitsyscall (50 samples, 1.96%)</title><rect x="139.6" y="213" width="23.1" height="15.0" fill="rgb(218,67,40)" rx="2" ry="2" />
<text  x="142.57" y="223.5" >r..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WSConn.Read (129 samples, 5.06%)</title><rect x="10.0" y="373" width="59.7" height="15.0" fill="rgb(209,35,14)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >hslam...</text>
</g>
<g >
<title>reflect.add (1 samples, 0.04%)</title><rect x="169.2" y="149" width="0.4" height="15.0" fill="rgb(227,142,16)" rx="2" ry="2" />
<text  x="172.18" y="159.5" ></text>
</g>
<g >
<title>runtime.netpoll (3 samples, 0.12%)</title><rect x="1035.0" y="325" width="1.4" height="15.0" fill="rgb(210,113,49)" rx="2" ry="2" />
<text  x="1037.98" y="335.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.08%)</title><rect x="58.1" y="149" width="1.0" height="15.0" fill="rgb(219,207,8)" rx="2" ry="2" />
<text  x="61.13" y="159.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.04%)</title><rect x="139.6" y="197" width="0.4" height="15.0" fill="rgb(245,116,40)" rx="2" ry="2" />
<text  x="142.57" y="207.5" ></text>
</g>
<g >
<title>runtime.syscall (1 samples, 0.04%)</title><rect x="1189.1" y="389" width="0.4" height="15.0" fill="rgb(244,63,33)" rx="2" ry="2" />
<text  x="1192.07" y="399.5" ></text>
</g>
<g >
<title>runtime.(*timersBucket).addtimerLocked (1 samples, 0.04%)</title><rect x="1189.5" y="357" width="0.5" height="15.0" fill="rgb(231,225,35)" rx="2" ry="2" />
<text  x="1192.54" y="367.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (108 samples, 4.24%)</title><rect x="983.6" y="357" width="50.0" height="15.0" fill="rgb(209,227,23)" rx="2" ry="2" />
<text  x="986.62" y="367.5" >runti..</text>
</g>
<g >
<title>runtime.convTstring (1 samples, 0.04%)</title><rect x="175.2" y="245" width="0.5" height="15.0" fill="rgb(214,69,54)" rx="2" ry="2" />
<text  x="178.20" y="255.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="171.5" y="165" width="0.5" height="15.0" fill="rgb(233,101,5)" rx="2" ry="2" />
<text  x="174.50" y="175.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.04%)</title><rect x="720.3" y="309" width="0.5" height="15.0" fill="rgb(226,66,17)" rx="2" ry="2" />
<text  x="723.31" y="319.5" ></text>
</g>
<g >
<title>runtime.semasleep (609 samples, 23.88%)</title><rect x="415.8" y="293" width="281.8" height="15.0" fill="rgb(231,186,32)" rx="2" ry="2" />
<text  x="418.83" y="303.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.04%)</title><rect x="67.4" y="261" width="0.4" height="15.0" fill="rgb(253,148,24)" rx="2" ry="2" />
<text  x="70.38" y="271.5" ></text>
</g>
<g >
<title>runtime.goready (1 samples, 0.04%)</title><rect x="70.2" y="325" width="0.4" height="15.0" fill="rgb(249,142,27)" rx="2" ry="2" />
<text  x="73.16" y="335.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.04%)</title><rect x="697.2" y="261" width="0.4" height="15.0" fill="rgb(245,131,0)" rx="2" ry="2" />
<text  x="700.18" y="271.5" ></text>
</g>
<g >
<title>runtime.notewakeup (108 samples, 4.24%)</title><rect x="983.6" y="325" width="50.0" height="15.0" fill="rgb(231,146,32)" rx="2" ry="2" />
<text  x="986.62" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.exitsyscallfast (49 samples, 1.92%)</title><rect x="140.0" y="197" width="22.7" height="15.0" fill="rgb(208,125,39)" rx="2" ry="2" />
<text  x="143.03" y="207.5" >r..</text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.04%)</title><rect x="163.2" y="309" width="0.4" height="15.0" fill="rgb(233,82,16)" rx="2" ry="2" />
<text  x="166.17" y="319.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.04%)</title><rect x="205.3" y="293" width="0.4" height="15.0" fill="rgb(233,32,0)" rx="2" ry="2" />
<text  x="208.28" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.08%)</title><rect x="58.1" y="101" width="1.0" height="15.0" fill="rgb(244,121,6)" rx="2" ry="2" />
<text  x="61.13" y="111.5" ></text>
</g>
<g >
<title>io/ioutil.readAll (9 samples, 0.35%)</title><rect x="65.5" y="325" width="4.2" height="15.0" fill="rgb(213,2,41)" rx="2" ry="2" />
<text  x="68.53" y="335.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.04%)</title><rect x="175.7" y="277" width="0.4" height="15.0" fill="rgb(246,55,27)" rx="2" ry="2" />
<text  x="178.66" y="287.5" ></text>
</g>
<g >
<title>runtime.handoffp (2 samples, 0.08%)</title><rect x="58.1" y="117" width="1.0" height="15.0" fill="rgb(234,135,33)" rx="2" ry="2" />
<text  x="61.13" y="127.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (2 samples, 0.08%)</title><rect x="166.4" y="197" width="0.9" height="15.0" fill="rgb(231,188,33)" rx="2" ry="2" />
<text  x="169.41" y="207.5" ></text>
</g>
<g >
<title>runtime.chansend.func1 (1 samples, 0.04%)</title><rect x="69.7" y="325" width="0.5" height="15.0" fill="rgb(230,76,49)" rx="2" ry="2" />
<text  x="72.69" y="335.5" ></text>
</g>
<g >
<title>net.(*conn).Write (192 samples, 7.53%)</title><rect x="73.9" y="309" width="88.8" height="15.0" fill="rgb(228,24,16)" rx="2" ry="2" />
<text  x="76.86" y="319.5" >net.(*conn..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (330 samples, 12.94%)</title><rect x="1036.4" y="261" width="152.7" height="15.0" fill="rgb(222,202,22)" rx="2" ry="2" />
<text  x="1039.37" y="271.5" >runtime.pthread_con..</text>
</g>
<g >
<title>reflect.(*rtype).uncommon (1 samples, 0.04%)</title><rect x="170.6" y="149" width="0.4" height="15.0" fill="rgb(243,175,30)" rx="2" ry="2" />
<text  x="173.57" y="159.5" ></text>
</g>
<g >
<title>syscall.write (186 samples, 7.29%)</title><rect x="76.6" y="245" width="86.1" height="15.0" fill="rgb(211,223,40)" rx="2" ry="2" />
<text  x="79.64" y="255.5" >syscall.wr..</text>
</g>
<g >
<title>runtime.gcDrain (8 samples, 0.31%)</title><rect x="201.6" y="341" width="3.7" height="15.0" fill="rgb(222,95,29)" rx="2" ry="2" />
<text  x="204.58" y="351.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (1 samples, 0.04%)</title><rect x="68.8" y="277" width="0.4" height="15.0" fill="rgb(253,94,35)" rx="2" ry="2" />
<text  x="71.77" y="287.5" ></text>
</g>
<g >
<title>runtime.scanstack (2 samples, 0.08%)</title><rect x="203.0" y="277" width="0.9" height="15.0" fill="rgb(232,159,21)" rx="2" ry="2" />
<text  x="205.96" y="287.5" ></text>
</g>
<g >
<title>runtime.chanrecv1 (1 samples, 0.04%)</title><rect x="162.7" y="309" width="0.5" height="15.0" fill="rgb(213,113,3)" rx="2" ry="2" />
<text  x="165.71" y="319.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (4 samples, 0.16%)</title><rect x="199.3" y="389" width="1.8" height="15.0" fill="rgb(224,67,2)" rx="2" ry="2" />
<text  x="202.26" y="399.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Size (2 samples, 0.08%)</title><rect x="167.3" y="213" width="1.0" height="15.0" fill="rgb(249,181,51)" rx="2" ry="2" />
<text  x="170.33" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WSConn.Write (201 samples, 7.88%)</title><rect x="70.6" y="373" width="93.0" height="15.0" fill="rgb(205,155,10)" rx="2" ry="2" />
<text  x="73.62" y="383.5" >hslam.com/m..</text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.04%)</title><rect x="176.1" y="277" width="0.5" height="15.0" fill="rgb(230,90,37)" rx="2" ry="2" />
<text  x="179.13" y="287.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.12%)</title><rect x="203.9" y="325" width="1.4" height="15.0" fill="rgb(232,141,48)" rx="2" ry="2" />
<text  x="206.89" y="335.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (43 samples, 1.69%)</title><rect x="178.0" y="277" width="19.9" height="15.0" fill="rgb(248,198,30)" rx="2" ry="2" />
<text  x="180.98" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (20 samples, 0.78%)</title><rect x="166.4" y="277" width="9.3" height="15.0" fill="rgb(208,139,19)" rx="2" ry="2" />
<text  x="169.41" y="287.5" ></text>
</g>
<g >
<title>reflect.(*funcType).out (1 samples, 0.04%)</title><rect x="169.2" y="165" width="0.4" height="15.0" fill="rgb(217,36,39)" rx="2" ry="2" />
<text  x="172.18" y="175.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (192 samples, 7.53%)</title><rect x="73.9" y="293" width="88.8" height="15.0" fill="rgb(217,220,28)" rx="2" ry="2" />
<text  x="76.86" y="303.5" >net.(*netF..</text>
</g>
<g >
<title>runtime.usleep (19 samples, 0.75%)</title><rect x="404.3" y="293" width="8.8" height="15.0" fill="rgb(228,158,33)" rx="2" ry="2" />
<text  x="407.26" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (20 samples, 0.78%)</title><rect x="166.4" y="261" width="9.3" height="15.0" fill="rgb(221,145,41)" rx="2" ry="2" />
<text  x="169.41" y="271.5" ></text>
</g>
<g >
<title>runtime.chanrecv (1 samples, 0.04%)</title><rect x="162.7" y="293" width="0.5" height="15.0" fill="rgb(231,27,1)" rx="2" ry="2" />
<text  x="165.71" y="303.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.04%)</title><rect x="177.1" y="149" width="0.4" height="15.0" fill="rgb(239,79,49)" rx="2" ry="2" />
<text  x="180.05" y="159.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.04%)</title><rect x="208.5" y="341" width="0.5" height="15.0" fill="rgb(225,222,30)" rx="2" ry="2" />
<text  x="211.52" y="351.5" ></text>
</g>
<g >
<title>gosave (1 samples, 0.04%)</title><rect x="65.1" y="133" width="0.4" height="15.0" fill="rgb(220,122,12)" rx="2" ry="2" />
<text  x="68.07" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Size (1 samples, 0.04%)</title><rect x="165.9" y="245" width="0.5" height="15.0" fill="rgb(217,168,25)" rx="2" ry="2" />
<text  x="168.95" y="255.5" ></text>
</g>
<g >
<title>runtime.wakep (44 samples, 1.73%)</title><rect x="697.6" y="325" width="20.4" height="15.0" fill="rgb(223,149,52)" rx="2" ry="2" />
<text  x="700.64" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.04%)</title><rect x="58.6" y="53" width="0.5" height="15.0" fill="rgb(213,99,33)" rx="2" ry="2" />
<text  x="61.59" y="63.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.04%)</title><rect x="205.3" y="325" width="0.4" height="15.0" fill="rgb(245,73,51)" rx="2" ry="2" />
<text  x="208.28" y="335.5" ></text>
</g>
<g >
<title>runtime.semawakeup (141 samples, 5.53%)</title><rect x="918.4" y="293" width="65.2" height="15.0" fill="rgb(242,110,31)" rx="2" ry="2" />
<text  x="921.37" y="303.5" >runtime..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.04%)</title><rect x="165.9" y="213" width="0.5" height="15.0" fill="rgb(244,136,33)" rx="2" ry="2" />
<text  x="168.95" y="223.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (117 samples, 4.59%)</title><rect x="11.4" y="293" width="54.1" height="15.0" fill="rgb(238,165,10)" rx="2" ry="2" />
<text  x="14.39" y="303.5" >bufio..</text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.04%)</title><rect x="177.1" y="181" width="0.4" height="15.0" fill="rgb(224,75,20)" rx="2" ry="2" />
<text  x="180.05" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUTF8StringValue (1 samples, 0.04%)</title><rect x="166.9" y="165" width="0.4" height="15.0" fill="rgb(241,63,46)" rx="2" ry="2" />
<text  x="169.87" y="175.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (2 samples, 0.08%)</title><rect x="58.1" y="165" width="1.0" height="15.0" fill="rgb(228,103,50)" rx="2" ry="2" />
<text  x="61.13" y="175.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.04%)</title><rect x="872.1" y="341" width="0.5" height="15.0" fill="rgb(222,213,22)" rx="2" ry="2" />
<text  x="875.09" y="351.5" ></text>
</g>
<g >
<title>runtime.chansend (2 samples, 0.08%)</title><rect x="69.7" y="357" width="0.9" height="15.0" fill="rgb(238,217,12)" rx="2" ry="2" />
<text  x="72.69" y="367.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenWS.func1 (74 samples, 2.90%)</title><rect x="164.1" y="325" width="34.2" height="15.0" fill="rgb(237,109,46)" rx="2" ry="2" />
<text  x="167.09" y="335.5" >hs..</text>
</g>
<g >
<title>runtime.heapBits.bits (2 samples, 0.08%)</title><rect x="204.4" y="309" width="0.9" height="15.0" fill="rgb(211,161,34)" rx="2" ry="2" />
<text  x="207.35" y="319.5" ></text>
</g>
<g >
<title>runtime.kevent (221 samples, 8.67%)</title><rect x="297.8" y="309" width="102.3" height="15.0" fill="rgb(219,110,54)" rx="2" ry="2" />
<text  x="300.83" y="319.5" >runtime.kevent</text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.04%)</title><rect x="201.1" y="373" width="0.5" height="15.0" fill="rgb(211,206,46)" rx="2" ry="2" />
<text  x="204.11" y="383.5" ></text>
</g>
<g >
<title>reflect.resolveTypeOff (1 samples, 0.04%)</title><rect x="173.8" y="165" width="0.5" height="15.0" fill="rgb(220,214,3)" rx="2" ry="2" />
<text  x="176.81" y="175.5" ></text>
</g>
<g >
<title>syscall.Write (186 samples, 7.29%)</title><rect x="76.6" y="261" width="86.1" height="15.0" fill="rgb(206,164,40)" rx="2" ry="2" />
<text  x="79.64" y="271.5" >syscall.Wr..</text>
</g>
<g >
<title>runtime.findrunnable (1,056 samples, 41.41%)</title><rect x="209.0" y="341" width="488.6" height="15.0" fill="rgb(205,50,28)" rx="2" ry="2" />
<text  x="211.98" y="351.5" >runtime.findrunnable</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (2 samples, 0.08%)</title><rect x="166.4" y="245" width="0.9" height="15.0" fill="rgb(211,148,9)" rx="2" ry="2" />
<text  x="169.41" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (107 samples, 4.20%)</title><rect x="983.6" y="293" width="49.5" height="15.0" fill="rgb(215,140,16)" rx="2" ry="2" />
<text  x="986.62" y="303.5" >runt..</text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.04%)</title><rect x="174.7" y="165" width="0.5" height="15.0" fill="rgb(238,213,4)" rx="2" ry="2" />
<text  x="177.74" y="175.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="174.7" y="181" width="0.5" height="15.0" fill="rgb(244,65,5)" rx="2" ry="2" />
<text  x="177.74" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.04%)</title><rect x="213.1" y="309" width="0.5" height="15.0" fill="rgb(227,149,9)" rx="2" ry="2" />
<text  x="216.15" y="319.5" ></text>
</g>
<g >
<title>runtime._System (2 samples, 0.08%)</title><rect x="198.3" y="389" width="1.0" height="15.0" fill="rgb(210,210,3)" rx="2" ry="2" />
<text  x="201.34" y="399.5" ></text>
</g>
<g >
<title>bytes.makeSlice (4 samples, 0.16%)</title><rect x="66.0" y="277" width="1.8" height="15.0" fill="rgb(209,64,3)" rx="2" ry="2" />
<text  x="68.99" y="287.5" ></text>
</g>
<g >
<title>runtime.netpollready (1 samples, 0.04%)</title><rect x="400.1" y="309" width="0.5" height="15.0" fill="rgb(212,51,21)" rx="2" ry="2" />
<text  x="403.09" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (1 samples, 0.04%)</title><rect x="165.5" y="213" width="0.4" height="15.0" fill="rgb(242,73,0)" rx="2" ry="2" />
<text  x="168.48" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="70.2" y="309" width="0.4" height="15.0" fill="rgb(232,49,9)" rx="2" ry="2" />
<text  x="73.16" y="319.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).Grow (5 samples, 0.20%)</title><rect x="65.5" y="309" width="2.3" height="15.0" fill="rgb(231,29,45)" rx="2" ry="2" />
<text  x="68.53" y="319.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="58.6" y="37" width="0.5" height="15.0" fill="rgb(218,60,34)" rx="2" ry="2" />
<text  x="61.59" y="47.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="67.4" y="245" width="0.4" height="15.0" fill="rgb(240,95,10)" rx="2" ry="2" />
<text  x="70.38" y="255.5" ></text>
</g>
<g >
<title>reflect.typedmemclrpartial (1 samples, 0.04%)</title><rect x="171.0" y="181" width="0.5" height="15.0" fill="rgb(239,90,37)" rx="2" ry="2" />
<text  x="174.04" y="191.5" ></text>
</g>
<g >
<title>reflect.(*rtype).String (1 samples, 0.04%)</title><rect x="168.3" y="197" width="0.4" height="15.0" fill="rgb(237,90,41)" rx="2" ry="2" />
<text  x="171.26" y="207.5" ></text>
</g>
<g >
<title>reflect.(*rtype).typeOff (1 samples, 0.04%)</title><rect x="173.8" y="181" width="0.5" height="15.0" fill="rgb(231,206,25)" rx="2" ry="2" />
<text  x="176.81" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (26 samples, 1.02%)</title><rect x="165.0" y="293" width="12.1" height="15.0" fill="rgb(207,14,15)" rx="2" ry="2" />
<text  x="168.02" y="303.5" ></text>
</g>
<g >
<title>io/ioutil.ReadAll (9 samples, 0.35%)</title><rect x="65.5" y="341" width="4.2" height="15.0" fill="rgb(244,221,36)" rx="2" ry="2" />
<text  x="68.53" y="351.5" ></text>
</g>
<g >
<title>net/http.serverHandler.ServeHTTP (74 samples, 2.90%)</title><rect x="164.1" y="373" width="34.2" height="15.0" fill="rgb(222,185,6)" rx="2" ry="2" />
<text  x="167.09" y="383.5" >ne..</text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (3 samples, 0.12%)</title><rect x="1033.6" y="357" width="1.4" height="15.0" fill="rgb(240,5,2)" rx="2" ry="2" />
<text  x="1036.59" y="367.5" ></text>
</g>
<g >
<title>runtime.forEachP (3 samples, 0.12%)</title><rect x="1033.6" y="341" width="1.4" height="15.0" fill="rgb(240,219,31)" rx="2" ry="2" />
<text  x="1036.59" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (2 samples, 0.08%)</title><rect x="167.3" y="197" width="1.0" height="15.0" fill="rgb(226,211,36)" rx="2" ry="2" />
<text  x="170.33" y="207.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (108 samples, 4.24%)</title><rect x="983.6" y="341" width="50.0" height="15.0" fill="rgb(235,214,8)" rx="2" ry="2" />
<text  x="986.62" y="351.5" >runti..</text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="65.1" y="165" width="0.4" height="15.0" fill="rgb(210,179,22)" rx="2" ry="2" />
<text  x="68.07" y="175.5" ></text>
</g>
<g >
<title>runtime.semacreate (1 samples, 0.04%)</title><rect x="871.6" y="325" width="0.5" height="15.0" fill="rgb(244,89,23)" rx="2" ry="2" />
<text  x="874.63" y="335.5" ></text>
</g>
<g >
<title>reflect.funcLayout (1 samples, 0.04%)</title><rect x="169.6" y="181" width="0.5" height="15.0" fill="rgb(234,81,13)" rx="2" ry="2" />
<text  x="172.65" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (3 samples, 0.12%)</title><rect x="1033.6" y="277" width="1.4" height="15.0" fill="rgb(246,12,32)" rx="2" ry="2" />
<text  x="1036.59" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (7 samples, 0.27%)</title><rect x="980.4" y="277" width="3.2" height="15.0" fill="rgb(223,166,27)" rx="2" ry="2" />
<text  x="983.38" y="287.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination (1 samples, 0.04%)</title><rect x="201.1" y="357" width="0.5" height="15.0" fill="rgb(213,153,33)" rx="2" ry="2" />
<text  x="204.11" y="367.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (330 samples, 12.94%)</title><rect x="1036.4" y="357" width="152.7" height="15.0" fill="rgb(231,50,15)" rx="2" ry="2" />
<text  x="1039.37" y="367.5" >runtime.goready.func1</text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (3 samples, 0.12%)</title><rect x="172.9" y="229" width="1.4" height="15.0" fill="rgb(229,16,29)" rx="2" ry="2" />
<text  x="175.89" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeBytes3 (2 samples, 0.08%)</title><rect x="167.3" y="165" width="1.0" height="15.0" fill="rgb(235,191,11)" rx="2" ry="2" />
<text  x="170.33" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (104 samples, 4.08%)</title><rect x="823.5" y="309" width="48.1" height="15.0" fill="rgb(219,198,0)" rx="2" ry="2" />
<text  x="826.51" y="319.5" >runt..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.04%)</title><rect x="213.1" y="293" width="0.5" height="15.0" fill="rgb(205,107,5)" rx="2" ry="2" />
<text  x="216.15" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (1 samples, 0.04%)</title><rect x="174.3" y="197" width="0.4" height="15.0" fill="rgb(241,190,43)" rx="2" ry="2" />
<text  x="177.27" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (2 samples, 0.08%)</title><rect x="167.3" y="229" width="1.0" height="15.0" fill="rgb(247,18,9)" rx="2" ry="2" />
<text  x="170.33" y="239.5" ></text>
</g>
<g >
<title>unicode/utf8.ValidString (1 samples, 0.04%)</title><rect x="166.9" y="149" width="0.4" height="15.0" fill="rgb(209,169,31)" rx="2" ry="2" />
<text  x="169.87" y="159.5" ></text>
</g>
<g >
<title>reflect.(*rtype).ptrTo (1 samples, 0.04%)</title><rect x="173.8" y="197" width="0.5" height="15.0" fill="rgb(249,6,54)" rx="2" ry="2" />
<text  x="176.81" y="207.5" ></text>
</g>
</g>
</svg>

