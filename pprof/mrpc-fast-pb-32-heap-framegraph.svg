<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>runtime.gentraceback (8 samples, 0.18%)</title><rect x="404.5" y="309" width="2.1" height="15.0" fill="rgb(227,190,43)" rx="2" ry="2" />
<text  x="407.47" y="319.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="220.1" y="165" width="0.2" height="15.0" fill="rgb(206,162,15)" rx="2" ry="2" />
<text  x="223.07" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (1 samples, 0.02%)</title><rect x="212.7" y="261" width="0.3" height="15.0" fill="rgb(246,96,12)" rx="2" ry="2" />
<text  x="215.73" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Marshal (3 samples, 0.07%)</title><rect x="187.9" y="293" width="0.7" height="15.0" fill="rgb(225,168,48)" rx="2" ry="2" />
<text  x="190.85" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (2 samples, 0.04%)</title><rect x="435.6" y="373" width="0.6" height="15.0" fill="rgb(212,192,20)" rx="2" ry="2" />
<text  x="438.64" y="383.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="220.9" y="293" width="0.2" height="15.0" fill="rgb(245,195,54)" rx="2" ry="2" />
<text  x="223.85" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (7 samples, 0.16%)</title><rect x="411.0" y="341" width="1.9" height="15.0" fill="rgb(205,13,0)" rx="2" ry="2" />
<text  x="414.02" y="351.5" ></text>
</g>
<g >
<title>runtime.lock (5 samples, 0.11%)</title><rect x="408.1" y="405" width="1.3" height="15.0" fill="rgb(213,168,12)" rx="2" ry="2" />
<text  x="411.14" y="415.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (1 samples, 0.02%)</title><rect x="213.5" y="197" width="0.3" height="15.0" fill="rgb(251,12,46)" rx="2" ry="2" />
<text  x="216.52" y="207.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (2 samples, 0.04%)</title><rect x="207.5" y="245" width="0.5" height="15.0" fill="rgb(246,223,30)" rx="2" ry="2" />
<text  x="210.50" y="255.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="221.6" y="325" width="0.3" height="15.0" fill="rgb(210,127,1)" rx="2" ry="2" />
<text  x="224.64" y="335.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (655 samples, 14.54%)</title><rect x="10.5" y="389" width="171.6" height="15.0" fill="rgb(214,180,36)" rx="2" ry="2" />
<text  x="13.52" y="399.5" >bufio.(*Writer).Flush</text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="1187.1" y="405" width="0.3" height="15.0" fill="rgb(252,119,42)" rx="2" ry="2" />
<text  x="1190.12" y="415.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (3 samples, 0.07%)</title><rect x="187.9" y="261" width="0.7" height="15.0" fill="rgb(217,70,2)" rx="2" ry="2" />
<text  x="190.85" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (2 samples, 0.04%)</title><rect x="387.4" y="101" width="0.6" height="15.0" fill="rgb(227,44,21)" rx="2" ry="2" />
<text  x="390.44" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (1,410 samples, 31.30%)</title><rect x="820.4" y="421" width="369.3" height="15.0" fill="rgb(251,91,32)" rx="2" ry="2" />
<text  x="823.42" y="431.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.semasleep (1,168 samples, 25.93%)</title><rect x="436.4" y="373" width="306.0" height="15.0" fill="rgb(235,66,14)" rx="2" ry="2" />
<text  x="439.42" y="383.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="802.1" y="357" width="0.2" height="15.0" fill="rgb(235,213,54)" rx="2" ry="2" />
<text  x="805.08" y="367.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1,167 samples, 25.90%)</title><rect x="436.7" y="357" width="305.7" height="15.0" fill="rgb(254,201,42)" rx="2" ry="2" />
<text  x="439.69" y="367.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="190.5" y="213" width="0.2" height="15.0" fill="rgb(250,126,25)" rx="2" ry="2" />
<text  x="193.47" y="223.5" ></text>
</g>
<g >
<title>reflect.(*rtype).NumIn (1 samples, 0.02%)</title><rect x="200.7" y="229" width="0.2" height="15.0" fill="rgb(207,73,31)" rx="2" ry="2" />
<text  x="203.69" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="203.3" y="117" width="0.3" height="15.0" fill="rgb(232,147,43)" rx="2" ry="2" />
<text  x="206.31" y="127.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (125 samples, 2.77%)</title><rect x="185.2" y="341" width="32.8" height="15.0" fill="rgb(217,4,21)" rx="2" ry="2" />
<text  x="188.23" y="351.5" >hs..</text>
</g>
<g >
<title>runtime.exitsyscallfast (7 samples, 0.16%)</title><rect x="388.0" y="197" width="1.8" height="15.0" fill="rgb(211,120,4)" rx="2" ry="2" />
<text  x="390.97" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeFASTHTTP (130 samples, 2.89%)</title><rect x="184.4" y="357" width="34.1" height="15.0" fill="rgb(240,157,27)" rx="2" ry="2" />
<text  x="187.45" y="367.5" >hs..</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*headerScanner).next (1 samples, 0.02%)</title><rect x="391.4" y="309" width="0.2" height="15.0" fill="rgb(232,115,50)" rx="2" ry="2" />
<text  x="394.37" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (6 samples, 0.13%)</title><rect x="185.2" y="293" width="1.6" height="15.0" fill="rgb(216,200,15)" rx="2" ry="2" />
<text  x="188.23" y="303.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="209.3" y="213" width="0.3" height="15.0" fill="rgb(209,227,52)" rx="2" ry="2" />
<text  x="212.33" y="223.5" ></text>
</g>
<g >
<title>runtime.deferreturn (196 samples, 4.35%)</title><rect x="225.0" y="261" width="51.4" height="15.0" fill="rgb(233,207,46)" rx="2" ry="2" />
<text  x="228.05" y="271.5" >runti..</text>
</g>
<g >
<title>runtime.notewakeup (1,391 samples, 30.88%)</title><rect x="821.2" y="357" width="364.3" height="15.0" fill="rgb(209,137,49)" rx="2" ry="2" />
<text  x="824.20" y="367.5" >runtime.notewakeup</text>
</g>
<g >
<title>reflect.Value.Call (28 samples, 0.62%)</title><rect x="198.3" y="261" width="7.4" height="15.0" fill="rgb(253,7,52)" rx="2" ry="2" />
<text  x="201.33" y="271.5" ></text>
</g>
<g >
<title>runtime.sysmon (70 samples, 1.55%)</title><rect x="802.1" y="405" width="18.3" height="15.0" fill="rgb(207,9,32)" rx="2" ry="2" />
<text  x="805.08" y="415.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (11 samples, 0.24%)</title><rect x="187.9" y="309" width="2.8" height="15.0" fill="rgb(233,167,11)" rx="2" ry="2" />
<text  x="190.85" y="319.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).parseURI (2 samples, 0.04%)</title><rect x="183.1" y="325" width="0.6" height="15.0" fill="rgb(225,127,12)" rx="2" ry="2" />
<text  x="186.14" y="335.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.04%)</title><rect x="413.4" y="357" width="0.5" height="15.0" fill="rgb(228,175,48)" rx="2" ry="2" />
<text  x="416.37" y="367.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Name (1 samples, 0.02%)</title><rect x="198.1" y="261" width="0.2" height="15.0" fill="rgb(212,55,2)" rx="2" ry="2" />
<text  x="201.07" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.writeResponse (21 samples, 0.47%)</title><rect x="396.3" y="389" width="5.5" height="15.0" fill="rgb(235,47,48)" rx="2" ry="2" />
<text  x="399.35" y="399.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.statusLine (2 samples, 0.04%)</title><rect x="401.3" y="309" width="0.5" height="15.0" fill="rgb(225,142,11)" rx="2" ry="2" />
<text  x="404.33" y="319.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.02%)</title><rect x="786.4" y="357" width="0.2" height="15.0" fill="rgb(232,129,41)" rx="2" ry="2" />
<text  x="789.36" y="367.5" ></text>
</g>
<g >
<title>runtime.heapBits.next (1 samples, 0.02%)</title><rect x="407.9" y="357" width="0.2" height="15.0" fill="rgb(208,170,12)" rx="2" ry="2" />
<text  x="410.87" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="216.4" y="277" width="0.5" height="15.0" fill="rgb(218,0,1)" rx="2" ry="2" />
<text  x="219.40" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).tryRead (640 samples, 14.21%)</title><rect x="224.3" y="357" width="167.6" height="15.0" fill="rgb(239,11,3)" rx="2" ry="2" />
<text  x="227.26" y="367.5" >github.com/valyala/fa..</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="1186.1" y="341" width="0.8" height="15.0" fill="rgb(216,204,5)" rx="2" ry="2" />
<text  x="1189.07" y="351.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).URI (2 samples, 0.04%)</title><rect x="183.1" y="341" width="0.6" height="15.0" fill="rgb(215,40,35)" rx="2" ry="2" />
<text  x="186.14" y="351.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).Reset (1 samples, 0.02%)</title><rect x="223.2" y="389" width="0.3" height="15.0" fill="rgb(237,125,17)" rx="2" ry="2" />
<text  x="226.21" y="399.5" ></text>
</g>
<g >
<title>runtime.semasleep (7 samples, 0.16%)</title><rect x="1187.4" y="341" width="1.8" height="15.0" fill="rgb(221,212,32)" rx="2" ry="2" />
<text  x="1190.38" y="351.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="196.5" y="229" width="0.3" height="15.0" fill="rgb(237,122,7)" rx="2" ry="2" />
<text  x="199.50" y="239.5" ></text>
</g>
<g >
<title>runtime.concatstrings (2 samples, 0.04%)</title><rect x="218.8" y="309" width="0.5" height="15.0" fill="rgb(249,92,29)" rx="2" ry="2" />
<text  x="221.76" y="319.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.02%)</title><rect x="406.3" y="261" width="0.3" height="15.0" fill="rgb(207,17,13)" rx="2" ry="2" />
<text  x="409.30" y="271.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (1 samples, 0.02%)</title><rect x="1189.2" y="405" width="0.3" height="15.0" fill="rgb(238,76,45)" rx="2" ry="2" />
<text  x="1192.21" y="415.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (631 samples, 14.01%)</title><rect x="224.5" y="277" width="165.3" height="15.0" fill="rgb(219,70,4)" rx="2" ry="2" />
<text  x="227.52" y="287.5" >internal/poll.(*FD).R..</text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.02%)</title><rect x="220.1" y="181" width="0.2" height="15.0" fill="rgb(208,115,8)" rx="2" ry="2" />
<text  x="223.07" y="191.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="204.4" y="197" width="0.2" height="15.0" fill="rgb(218,105,53)" rx="2" ry="2" />
<text  x="207.35" y="207.5" ></text>
</g>
<g >
<title>reflect.New (1 samples, 0.02%)</title><rect x="209.3" y="261" width="0.3" height="15.0" fill="rgb(228,167,53)" rx="2" ry="2" />
<text  x="212.33" y="271.5" ></text>
</g>
<g >
<title>runtime.scanstack (8 samples, 0.18%)</title><rect x="404.5" y="325" width="2.1" height="15.0" fill="rgb(240,86,10)" rx="2" ry="2" />
<text  x="407.47" y="335.5" ></text>
</g>
<g >
<title>net.(*conn).Write (652 samples, 14.47%)</title><rect x="11.3" y="373" width="170.8" height="15.0" fill="rgb(228,51,31)" rx="2" ry="2" />
<text  x="14.31" y="383.5" >net.(*conn).Write</text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.02%)</title><rect x="203.3" y="133" width="0.3" height="15.0" fill="rgb(233,64,54)" rx="2" ry="2" />
<text  x="206.31" y="143.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="207.0" y="245" width="0.5" height="15.0" fill="rgb(210,16,44)" rx="2" ry="2" />
<text  x="209.97" y="255.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="216.9" y="325" width="0.3" height="15.0" fill="rgb(237,214,42)" rx="2" ry="2" />
<text  x="219.93" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.02%)</title><rect x="196.8" y="213" width="0.2" height="15.0" fill="rgb(254,210,45)" rx="2" ry="2" />
<text  x="199.76" y="223.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.02%)</title><rect x="205.1" y="69" width="0.3" height="15.0" fill="rgb(218,218,17)" rx="2" ry="2" />
<text  x="208.14" y="79.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.02%)</title><rect x="213.5" y="213" width="0.3" height="15.0" fill="rgb(229,23,28)" rx="2" ry="2" />
<text  x="216.52" y="223.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="742.9" y="357" width="0.2" height="15.0" fill="rgb(207,172,0)" rx="2" ry="2" />
<text  x="745.88" y="367.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (1 samples, 0.02%)</title><rect x="1189.2" y="389" width="0.3" height="15.0" fill="rgb(248,153,20)" rx="2" ry="2" />
<text  x="1192.21" y="399.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).ContinueReadBody (3 samples, 0.07%)</title><rect x="223.5" y="373" width="0.8" height="15.0" fill="rgb(213,156,32)" rx="2" ry="2" />
<text  x="226.47" y="383.5" ></text>
</g>
<g >
<title>runtime.kevent (80 samples, 1.78%)</title><rect x="765.1" y="357" width="21.0" height="15.0" fill="rgb(228,198,47)" rx="2" ry="2" />
<text  x="768.15" y="367.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).IsGet (1 samples, 0.02%)</title><rect x="391.9" y="389" width="0.3" height="15.0" fill="rgb(237,164,14)" rx="2" ry="2" />
<text  x="394.90" y="399.5" ></text>
</g>
<g >
<title>runtime.checkdead (1 samples, 0.02%)</title><rect x="436.2" y="373" width="0.2" height="15.0" fill="rgb(226,212,18)" rx="2" ry="2" />
<text  x="439.16" y="383.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="404.2" y="341" width="0.3" height="15.0" fill="rgb(221,205,46)" rx="2" ry="2" />
<text  x="407.21" y="351.5" ></text>
</g>
<g >
<title>runtime.netpoll (128 samples, 2.84%)</title><rect x="752.8" y="373" width="33.6" height="15.0" fill="rgb(221,226,12)" rx="2" ry="2" />
<text  x="755.84" y="383.5" >ru..</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="1189.5" y="357" width="0.2" height="15.0" fill="rgb(214,177,39)" rx="2" ry="2" />
<text  x="1192.48" y="367.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).peek (2 samples, 0.04%)</title><rect x="222.7" y="373" width="0.5" height="15.0" fill="rgb(226,32,1)" rx="2" ry="2" />
<text  x="225.69" y="383.5" ></text>
</g>
<g >
<title>sync/atomic.(*Value).Load (1 samples, 0.02%)</title><rect x="208.0" y="245" width="0.3" height="15.0" fill="rgb(233,178,5)" rx="2" ry="2" />
<text  x="211.02" y="255.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="802.1" y="389" width="0.2" height="15.0" fill="rgb(235,206,29)" rx="2" ry="2" />
<text  x="805.08" y="399.5" ></text>
</g>
<g >
<title>runtime.forEachP (7 samples, 0.16%)</title><rect x="1187.4" y="389" width="1.8" height="15.0" fill="rgb(212,93,29)" rx="2" ry="2" />
<text  x="1190.38" y="399.5" ></text>
</g>
<g >
<title>runtime.acquirep (2 samples, 0.04%)</title><rect x="435.6" y="389" width="0.6" height="15.0" fill="rgb(219,4,17)" rx="2" ry="2" />
<text  x="438.64" y="399.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="196.5" y="149" width="0.3" height="15.0" fill="rgb(248,127,23)" rx="2" ry="2" />
<text  x="199.50" y="159.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="204.1" y="197" width="0.3" height="15.0" fill="rgb(209,138,28)" rx="2" ry="2" />
<text  x="207.09" y="207.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.02%)</title><rect x="216.9" y="309" width="0.3" height="15.0" fill="rgb(227,92,20)" rx="2" ry="2" />
<text  x="219.93" y="319.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.02%)</title><rect x="12.9" y="309" width="0.2" height="15.0" fill="rgb(217,192,51)" rx="2" ry="2" />
<text  x="15.88" y="319.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="802.1" y="373" width="0.2" height="15.0" fill="rgb(231,150,2)" rx="2" ry="2" />
<text  x="805.08" y="383.5" ></text>
</g>
<g >
<title>net.(*TCPAddr).String (2 samples, 0.04%)</title><rect x="218.0" y="341" width="0.5" height="15.0" fill="rgb(226,138,20)" rx="2" ry="2" />
<text  x="220.97" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (98 samples, 2.18%)</title><rect x="191.3" y="325" width="25.6" height="15.0" fill="rgb(209,159,54)" rx="2" ry="2" />
<text  x="194.26" y="335.5" >h..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (12 samples, 0.27%)</title><rect x="213.0" y="277" width="3.1" height="15.0" fill="rgb(239,168,7)" rx="2" ry="2" />
<text  x="216.00" y="287.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (632 samples, 14.03%)</title><rect x="224.3" y="325" width="165.5" height="15.0" fill="rgb(227,169,7)" rx="2" ry="2" />
<text  x="227.26" y="335.5" >bufio.(*Reader).fill</text>
</g>
<g >
<title>net.itoa (1 samples, 0.02%)</title><rect x="218.2" y="325" width="0.3" height="15.0" fill="rgb(228,141,51)" rx="2" ry="2" />
<text  x="221.24" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.02%)</title><rect x="187.1" y="133" width="0.2" height="15.0" fill="rgb(234,116,32)" rx="2" ry="2" />
<text  x="190.07" y="143.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="204.1" y="165" width="0.3" height="15.0" fill="rgb(207,44,18)" rx="2" ry="2" />
<text  x="207.09" y="175.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (2 samples, 0.04%)</title><rect x="405.8" y="245" width="0.5" height="15.0" fill="rgb(246,145,23)" rx="2" ry="2" />
<text  x="408.78" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (3 samples, 0.07%)</title><rect x="208.3" y="261" width="0.8" height="15.0" fill="rgb(219,1,45)" rx="2" ry="2" />
<text  x="211.28" y="271.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (3 samples, 0.07%)</title><rect x="203.3" y="229" width="0.8" height="15.0" fill="rgb(223,69,7)" rx="2" ry="2" />
<text  x="206.31" y="239.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (3 samples, 0.07%)</title><rect x="394.3" y="341" width="0.7" height="15.0" fill="rgb(226,173,46)" rx="2" ry="2" />
<text  x="397.25" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (4 samples, 0.09%)</title><rect x="191.8" y="277" width="1.0" height="15.0" fill="rgb(216,149,34)" rx="2" ry="2" />
<text  x="194.78" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="742.9" y="325" width="0.2" height="15.0" fill="rgb(231,70,45)" rx="2" ry="2" />
<text  x="745.88" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parseFirstLine (2 samples, 0.04%)</title><rect x="390.1" y="325" width="0.5" height="15.0" fill="rgb(237,32,2)" rx="2" ry="2" />
<text  x="393.06" y="335.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="742.1" y="341" width="0.3" height="15.0" fill="rgb(250,209,8)" rx="2" ry="2" />
<text  x="745.10" y="351.5" ></text>
</g>
<g >
<title>runtime.semawakeup (4 samples, 0.09%)</title><rect x="1185.8" y="357" width="1.1" height="15.0" fill="rgb(232,88,31)" rx="2" ry="2" />
<text  x="1188.81" y="367.5" ></text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.04%)</title><rect x="217.2" y="309" width="0.5" height="15.0" fill="rgb(236,6,24)" rx="2" ry="2" />
<text  x="220.19" y="319.5" ></text>
</g>
<g >
<title>runtime.notetsleep (7 samples, 0.16%)</title><rect x="1187.4" y="373" width="1.8" height="15.0" fill="rgb(241,205,36)" rx="2" ry="2" />
<text  x="1190.38" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.parseContentLength (1 samples, 0.02%)</title><rect x="391.6" y="309" width="0.3" height="15.0" fill="rgb(232,218,10)" rx="2" ry="2" />
<text  x="394.63" y="319.5" ></text>
</g>
<g >
<title>reflect.(*rtype).exportedMethods (2 samples, 0.04%)</title><rect x="205.7" y="245" width="0.5" height="15.0" fill="rgb(244,145,31)" rx="2" ry="2" />
<text  x="208.66" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).MultipartFormBoundary (2 samples, 0.04%)</title><rect x="223.5" y="357" width="0.5" height="15.0" fill="rgb(221,83,53)" rx="2" ry="2" />
<text  x="226.47" y="367.5" ></text>
</g>
<g >
<title>github.com/buaazp/fasthttprouter.(*node).getValue (1 samples, 0.02%)</title><rect x="182.9" y="373" width="0.2" height="15.0" fill="rgb(217,89,25)" rx="2" ry="2" />
<text  x="185.87" y="383.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (5 samples, 0.11%)</title><rect x="174.2" y="277" width="1.3" height="15.0" fill="rgb(253,84,19)" rx="2" ry="2" />
<text  x="177.23" y="287.5" ></text>
</g>
<g >
<title>sync.(*Pool).Get (1 samples, 0.02%)</title><rect x="395.0" y="373" width="0.3" height="15.0" fill="rgb(251,31,24)" rx="2" ry="2" />
<text  x="398.04" y="383.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.02%)</title><rect x="213.5" y="229" width="0.3" height="15.0" fill="rgb(233,12,8)" rx="2" ry="2" />
<text  x="216.52" y="239.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.02%)</title><rect x="220.3" y="85" width="0.3" height="15.0" fill="rgb(226,92,49)" rx="2" ry="2" />
<text  x="223.33" y="95.5" ></text>
</g>
<g >
<title>runtime.pcvalue (4 samples, 0.09%)</title><rect x="404.5" y="277" width="1.0" height="15.0" fill="rgb(233,83,4)" rx="2" ry="2" />
<text  x="407.47" y="287.5" ></text>
</g>
<g >
<title>reflect.(*rtype).exportedMethods (2 samples, 0.04%)</title><rect x="211.4" y="245" width="0.5" height="15.0" fill="rgb(228,197,25)" rx="2" ry="2" />
<text  x="214.43" y="255.5" ></text>
</g>
<g >
<title>reflect.(*rtype).String (1 samples, 0.02%)</title><rect x="198.1" y="245" width="0.2" height="15.0" fill="rgb(209,5,2)" rx="2" ry="2" />
<text  x="201.07" y="255.5" ></text>
</g>
<g >
<title>runtime.getStackMap (3 samples, 0.07%)</title><rect x="405.5" y="261" width="0.8" height="15.0" fill="rgb(215,212,54)" rx="2" ry="2" />
<text  x="408.52" y="271.5" ></text>
</g>
<g >
<title>runtime.syscall (1 samples, 0.02%)</title><rect x="1189.7" y="437" width="0.3" height="15.0" fill="rgb(211,78,7)" rx="2" ry="2" />
<text  x="1192.74" y="447.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (4 samples, 0.09%)</title><rect x="191.8" y="229" width="1.0" height="15.0" fill="rgb(241,201,49)" rx="2" ry="2" />
<text  x="194.78" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (1 samples, 0.02%)</title><rect x="187.1" y="165" width="0.2" height="15.0" fill="rgb(235,174,24)" rx="2" ry="2" />
<text  x="190.07" y="175.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="192.8" y="245" width="0.3" height="15.0" fill="rgb(208,122,19)" rx="2" ry="2" />
<text  x="195.83" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (8 samples, 0.18%)</title><rect x="213.8" y="245" width="2.1" height="15.0" fill="rgb(245,167,27)" rx="2" ry="2" />
<text  x="216.78" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.SizeVarint (1 samples, 0.02%)</title><rect x="190.2" y="229" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="193.21" y="239.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="207.2" y="133" width="0.3" height="15.0" fill="rgb(218,162,33)" rx="2" ry="2" />
<text  x="210.23" y="143.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).noBody (1 samples, 0.02%)</title><rect x="391.1" y="309" width="0.3" height="15.0" fill="rgb(247,68,0)" rx="2" ry="2" />
<text  x="394.11" y="319.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.02%)</title><rect x="404.2" y="373" width="0.3" height="15.0" fill="rgb(231,159,41)" rx="2" ry="2" />
<text  x="407.21" y="383.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Size (7 samples, 0.16%)</title><rect x="188.6" y="293" width="1.9" height="15.0" fill="rgb(242,154,20)" rx="2" ry="2" />
<text  x="191.64" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (1 samples, 0.02%)</title><rect x="187.1" y="181" width="0.2" height="15.0" fill="rgb(227,121,0)" rx="2" ry="2" />
<text  x="190.07" y="191.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="191.0" y="309" width="0.3" height="15.0" fill="rgb(223,215,49)" rx="2" ry="2" />
<text  x="193.99" y="319.5" ></text>
</g>
<g >
<title>runtime.convTstring (2 samples, 0.04%)</title><rect x="216.4" y="293" width="0.5" height="15.0" fill="rgb(223,186,42)" rx="2" ry="2" />
<text  x="219.40" y="303.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.04%)</title><rect x="820.7" y="325" width="0.5" height="15.0" fill="rgb(207,75,30)" rx="2" ry="2" />
<text  x="823.68" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).MayContinue (2 samples, 0.04%)</title><rect x="222.7" y="389" width="0.5" height="15.0" fill="rgb(206,163,47)" rx="2" ry="2" />
<text  x="225.69" y="399.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.02%)</title><rect x="220.1" y="197" width="0.2" height="15.0" fill="rgb(254,182,52)" rx="2" ry="2" />
<text  x="223.07" y="207.5" ></text>
</g>
<g >
<title>runtime.freedefer (196 samples, 4.35%)</title><rect x="225.0" y="245" width="51.4" height="15.0" fill="rgb(243,60,52)" rx="2" ry="2" />
<text  x="228.05" y="255.5" >runti..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="395.6" y="309" width="0.2" height="15.0" fill="rgb(242,208,47)" rx="2" ry="2" />
<text  x="398.56" y="319.5" ></text>
</g>
<g >
<title>bytes.Equal (1 samples, 0.02%)</title><rect x="389.8" y="293" width="0.3" height="15.0" fill="rgb(206,120,51)" rx="2" ry="2" />
<text  x="392.80" y="303.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (5 samples, 0.11%)</title><rect x="811.5" y="373" width="1.3" height="15.0" fill="rgb(223,144,36)" rx="2" ry="2" />
<text  x="814.51" y="383.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="216.7" y="261" width="0.2" height="15.0" fill="rgb(229,28,22)" rx="2" ry="2" />
<text  x="219.66" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.parseUintBuf (1 samples, 0.02%)</title><rect x="391.6" y="293" width="0.3" height="15.0" fill="rgb(215,208,40)" rx="2" ry="2" />
<text  x="394.63" y="303.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.02%)</title><rect x="404.2" y="357" width="0.3" height="15.0" fill="rgb(224,24,41)" rx="2" ry="2" />
<text  x="407.21" y="367.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (632 samples, 14.03%)</title><rect x="224.3" y="341" width="165.5" height="15.0" fill="rgb(208,64,15)" rx="2" ry="2" />
<text  x="227.26" y="351.5" >bufio.(*Reader).Peek</text>
</g>
<g >
<title>runtime.makeslice (5 samples, 0.11%)</title><rect x="204.1" y="229" width="1.3" height="15.0" fill="rgb(235,163,10)" rx="2" ry="2" />
<text  x="207.09" y="239.5" ></text>
</g>
<g >
<title>runtime.jmpdefer (1 samples, 0.02%)</title><rect x="217.7" y="325" width="0.3" height="15.0" fill="rgb(236,194,44)" rx="2" ry="2" />
<text  x="220.71" y="335.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (1 samples, 0.02%)</title><rect x="220.3" y="117" width="0.3" height="15.0" fill="rgb(222,27,37)" rx="2" ry="2" />
<text  x="223.33" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gList).push (1 samples, 0.02%)</title><rect x="786.1" y="341" width="0.3" height="15.0" fill="rgb(245,193,45)" rx="2" ry="2" />
<text  x="789.10" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (5 samples, 0.11%)</title><rect x="811.5" y="341" width="1.3" height="15.0" fill="rgb(254,23,15)" rx="2" ry="2" />
<text  x="814.51" y="351.5" ></text>
</g>
<g >
<title>runtime.step (2 samples, 0.04%)</title><rect x="405.0" y="261" width="0.5" height="15.0" fill="rgb(234,212,42)" rx="2" ry="2" />
<text  x="407.99" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="435.4" y="325" width="0.2" height="15.0" fill="rgb(239,125,12)" rx="2" ry="2" />
<text  x="438.38" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).resetSkipHeader (1 samples, 0.02%)</title><rect x="223.2" y="373" width="0.3" height="15.0" fill="rgb(232,84,12)" rx="2" ry="2" />
<text  x="226.21" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.nextLine (2 samples, 0.04%)</title><rect x="390.1" y="309" width="0.5" height="15.0" fill="rgb(225,95,43)" rx="2" ry="2" />
<text  x="393.06" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (7 samples, 0.16%)</title><rect x="1187.4" y="325" width="1.8" height="15.0" fill="rgb(252,24,31)" rx="2" ry="2" />
<text  x="1190.38" y="335.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.02%)</title><rect x="742.6" y="389" width="0.3" height="15.0" fill="rgb(237,63,46)" rx="2" ry="2" />
<text  x="745.62" y="399.5" ></text>
</g>
<g >
<title>reflect.(*rtype).AssignableTo (2 samples, 0.04%)</title><rect x="199.4" y="229" width="0.5" height="15.0" fill="rgb(230,140,45)" rx="2" ry="2" />
<text  x="202.38" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (10 samples, 0.22%)</title><rect x="213.5" y="261" width="2.6" height="15.0" fill="rgb(216,129,42)" rx="2" ry="2" />
<text  x="216.52" y="271.5" ></text>
</g>
<g >
<title>runtime.getitab (4 samples, 0.09%)</title><rect x="394.0" y="357" width="1.0" height="15.0" fill="rgb(247,27,21)" rx="2" ry="2" />
<text  x="396.99" y="367.5" ></text>
</g>
<g >
<title>bufio.(*Reader).reset (1 samples, 0.02%)</title><rect x="393.2" y="357" width="0.3" height="15.0" fill="rgb(219,117,11)" rx="2" ry="2" />
<text  x="396.21" y="367.5" ></text>
</g>
<g >
<title>reflect.(*funcType).in (1 samples, 0.02%)</title><rect x="200.4" y="213" width="0.3" height="15.0" fill="rgb(241,188,29)" rx="2" ry="2" />
<text  x="203.42" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="190.5" y="245" width="0.2" height="15.0" fill="rgb(219,128,43)" rx="2" ry="2" />
<text  x="193.47" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.02%)</title><rect x="203.3" y="101" width="0.3" height="15.0" fill="rgb(253,152,37)" rx="2" ry="2" />
<text  x="206.31" y="111.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (8 samples, 0.18%)</title><rect x="213.8" y="229" width="2.1" height="15.0" fill="rgb(236,46,30)" rx="2" ry="2" />
<text  x="216.78" y="239.5" ></text>
</g>
<g >
<title>runtime.notetsleep (5 samples, 0.11%)</title><rect x="811.5" y="389" width="1.3" height="15.0" fill="rgb(245,211,48)" rx="2" ry="2" />
<text  x="814.51" y="399.5" ></text>
</g>
<g >
<title>runtime.stopm (1,171 samples, 25.99%)</title><rect x="435.6" y="405" width="306.8" height="15.0" fill="rgb(218,147,29)" rx="2" ry="2" />
<text  x="438.64" y="415.5" >runtime.stopm</text>
</g>
<g >
<title>reflect.unsafe_New (1 samples, 0.02%)</title><rect x="209.3" y="245" width="0.3" height="15.0" fill="rgb(240,36,53)" rx="2" ry="2" />
<text  x="212.33" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="190.5" y="261" width="0.2" height="15.0" fill="rgb(214,59,8)" rx="2" ry="2" />
<text  x="193.47" y="271.5" ></text>
</g>
<g >
<title>runtime.rawstring (1 samples, 0.02%)</title><rect x="219.0" y="277" width="0.3" height="15.0" fill="rgb(215,160,42)" rx="2" ry="2" />
<text  x="222.02" y="287.5" ></text>
</g>
<g >
<title>runtime.stopm (60 samples, 1.33%)</title><rect x="786.4" y="373" width="15.7" height="15.0" fill="rgb(217,167,38)" rx="2" ry="2" />
<text  x="789.36" y="383.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (4 samples, 0.09%)</title><rect x="1178.0" y="325" width="1.0" height="15.0" fill="rgb(228,116,34)" rx="2" ry="2" />
<text  x="1180.95" y="335.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="748.1" y="357" width="0.3" height="15.0" fill="rgb(238,209,43)" rx="2" ry="2" />
<text  x="751.12" y="367.5" ></text>
</g>
<g >
<title>runtime.freedefer (202 samples, 4.48%)</title><rect x="13.4" y="309" width="52.9" height="15.0" fill="rgb(229,46,45)" rx="2" ry="2" />
<text  x="16.41" y="319.5" >runti..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (1 samples, 0.02%)</title><rect x="215.6" y="213" width="0.3" height="15.0" fill="rgb(219,179,25)" rx="2" ry="2" />
<text  x="218.62" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).pickFreeSpan (1 samples, 0.02%)</title><rect x="203.3" y="53" width="0.3" height="15.0" fill="rgb(235,189,24)" rx="2" ry="2" />
<text  x="206.31" y="63.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.02%)</title><rect x="203.3" y="149" width="0.3" height="15.0" fill="rgb(226,159,48)" rx="2" ry="2" />
<text  x="206.31" y="159.5" ></text>
</g>
<g >
<title>runtime.runqput (1 samples, 0.02%)</title><rect x="410.8" y="357" width="0.2" height="15.0" fill="rgb(208,128,48)" rx="2" ry="2" />
<text  x="413.75" y="367.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="196.5" y="197" width="0.3" height="15.0" fill="rgb(239,216,12)" rx="2" ry="2" />
<text  x="199.50" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce.func1 (1 samples, 0.02%)</title><rect x="187.1" y="85" width="0.2" height="15.0" fill="rgb(235,185,8)" rx="2" ry="2" />
<text  x="190.07" y="95.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="395.6" y="245" width="0.2" height="15.0" fill="rgb(230,221,7)" rx="2" ry="2" />
<text  x="398.56" y="255.5" ></text>
</g>
<g >
<title>reflect.packEface (3 samples, 0.07%)</title><rect x="210.4" y="229" width="0.8" height="15.0" fill="rgb(229,126,45)" rx="2" ry="2" />
<text  x="213.38" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.02%)</title><rect x="786.4" y="341" width="0.2" height="15.0" fill="rgb(212,93,20)" rx="2" ry="2" />
<text  x="789.36" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="1185.8" y="341" width="0.3" height="15.0" fill="rgb(228,145,6)" rx="2" ry="2" />
<text  x="1188.81" y="351.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.07%)</title><rect x="174.8" y="261" width="0.7" height="15.0" fill="rgb(221,94,12)" rx="2" ry="2" />
<text  x="177.75" y="271.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="186.5" y="197" width="0.3" height="15.0" fill="rgb(234,100,12)" rx="2" ry="2" />
<text  x="189.54" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="435.1" y="341" width="0.3" height="15.0" fill="rgb(239,2,10)" rx="2" ry="2" />
<text  x="438.11" y="351.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.02%)</title><rect x="196.2" y="229" width="0.3" height="15.0" fill="rgb(252,23,47)" rx="2" ry="2" />
<text  x="199.23" y="239.5" ></text>
</g>
<g >
<title>syscall.write (442 samples, 9.81%)</title><rect x="66.3" y="309" width="115.8" height="15.0" fill="rgb(221,74,34)" rx="2" ry="2" />
<text  x="69.32" y="319.5" >syscall.write</text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.04%)</title><rect x="387.4" y="133" width="0.6" height="15.0" fill="rgb(238,199,23)" rx="2" ry="2" />
<text  x="390.44" y="143.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="196.8" y="261" width="0.2" height="15.0" fill="rgb(244,228,54)" rx="2" ry="2" />
<text  x="199.76" y="271.5" ></text>
</g>
<g >
<title>runtime.(*_type).typeOff (2 samples, 0.04%)</title><rect x="206.2" y="213" width="0.5" height="15.0" fill="rgb(229,61,5)" rx="2" ry="2" />
<text  x="209.19" y="223.5" ></text>
</g>
<g >
<title>runtime.memequal128 (1 samples, 0.02%)</title><rect x="202.0" y="149" width="0.3" height="15.0" fill="rgb(246,46,28)" rx="2" ry="2" />
<text  x="205.00" y="159.5" ></text>
</g>
<g >
<title>runtime.notesleep (1,168 samples, 25.93%)</title><rect x="436.4" y="389" width="306.0" height="15.0" fill="rgb(251,219,1)" rx="2" ry="2" />
<text  x="439.42" y="399.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.scang (1 samples, 0.02%)</title><rect x="220.3" y="165" width="0.3" height="15.0" fill="rgb(238,86,40)" rx="2" ry="2" />
<text  x="223.33" y="175.5" ></text>
</g>
<g >
<title>runtime.convT64 (1 samples, 0.02%)</title><rect x="216.1" y="293" width="0.3" height="15.0" fill="rgb(221,69,39)" rx="2" ry="2" />
<text  x="219.14" y="303.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.02%)</title><rect x="395.6" y="357" width="0.2" height="15.0" fill="rgb(216,24,35)" rx="2" ry="2" />
<text  x="398.56" y="367.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Elem (1 samples, 0.02%)</title><rect x="209.1" y="261" width="0.2" height="15.0" fill="rgb(244,159,32)" rx="2" ry="2" />
<text  x="212.07" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="393.5" y="309" width="0.2" height="15.0" fill="rgb(226,216,22)" rx="2" ry="2" />
<text  x="396.47" y="319.5" ></text>
</g>
<g >
<title>all (4,505 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(209,34,53)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).SetContentLength (8 samples, 0.18%)</title><rect x="396.3" y="357" width="2.1" height="15.0" fill="rgb(225,127,40)" rx="2" ry="2" />
<text  x="399.35" y="367.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="204.1" y="181" width="0.3" height="15.0" fill="rgb(224,110,3)" rx="2" ry="2" />
<text  x="207.09" y="191.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="175.3" y="197" width="0.2" height="15.0" fill="rgb(209,44,15)" rx="2" ry="2" />
<text  x="178.28" y="207.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="190.5" y="197" width="0.2" height="15.0" fill="rgb(247,112,28)" rx="2" ry="2" />
<text  x="193.47" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="220.1" y="261" width="0.5" height="15.0" fill="rgb(247,170,35)" rx="2" ry="2" />
<text  x="223.07" y="271.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (3 samples, 0.07%)</title><rect x="207.5" y="261" width="0.8" height="15.0" fill="rgb(242,47,18)" rx="2" ry="2" />
<text  x="210.50" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (4 samples, 0.09%)</title><rect x="191.8" y="245" width="1.0" height="15.0" fill="rgb(217,118,9)" rx="2" ry="2" />
<text  x="194.78" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (25 samples, 0.55%)</title><rect x="175.5" y="277" width="6.6" height="15.0" fill="rgb(221,93,27)" rx="2" ry="2" />
<text  x="178.54" y="287.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="1187.1" y="373" width="0.3" height="15.0" fill="rgb(206,226,32)" rx="2" ry="2" />
<text  x="1190.12" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).AppendBytes (9 samples, 0.20%)</title><rect x="399.5" y="325" width="2.3" height="15.0" fill="rgb(205,157,14)" rx="2" ry="2" />
<text  x="402.49" y="335.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).wait (1 samples, 0.02%)</title><rect x="224.8" y="245" width="0.2" height="15.0" fill="rgb(227,99,50)" rx="2" ry="2" />
<text  x="227.78" y="255.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="820.4" y="373" width="0.3" height="15.0" fill="rgb(219,23,41)" rx="2" ry="2" />
<text  x="823.42" y="383.5" ></text>
</g>
<g >
<title>runtime.sweepone (2 samples, 0.04%)</title><rect x="403.4" y="421" width="0.5" height="15.0" fill="rgb(218,41,2)" rx="2" ry="2" />
<text  x="406.42" y="431.5" ></text>
</g>
<g >
<title>runtime.nilinterequal (1 samples, 0.02%)</title><rect x="202.0" y="181" width="0.3" height="15.0" fill="rgb(253,90,34)" rx="2" ry="2" />
<text  x="205.00" y="191.5" ></text>
</g>
<g >
<title>reflect.resolveTypeOff (3 samples, 0.07%)</title><rect x="211.9" y="229" width="0.8" height="15.0" fill="rgb(227,99,11)" rx="2" ry="2" />
<text  x="214.95" y="239.5" ></text>
</g>
<g >
<title>bufio.NewReaderSize (1 samples, 0.02%)</title><rect x="393.5" y="373" width="0.2" height="15.0" fill="rgb(242,202,51)" rx="2" ry="2" />
<text  x="396.47" y="383.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="402.1" y="421" width="0.3" height="15.0" fill="rgb(221,85,40)" rx="2" ry="2" />
<text  x="405.11" y="431.5" ></text>
</g>
<g >
<title>unicode/utf8.ValidString (2 samples, 0.04%)</title><rect x="192.3" y="197" width="0.5" height="15.0" fill="rgb(252,87,1)" rx="2" ry="2" />
<text  x="195.30" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Marshal (8 samples, 0.18%)</title><rect x="193.9" y="261" width="2.1" height="15.0" fill="rgb(253,12,45)" rx="2" ry="2" />
<text  x="196.88" y="271.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (4 samples, 0.09%)</title><rect x="405.5" y="277" width="1.1" height="15.0" fill="rgb(228,154,35)" rx="2" ry="2" />
<text  x="408.52" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).Header (9 samples, 0.20%)</title><rect x="399.5" y="341" width="2.3" height="15.0" fill="rgb(227,154,54)" rx="2" ry="2" />
<text  x="402.49" y="351.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (1 samples, 0.02%)</title><rect x="205.1" y="101" width="0.3" height="15.0" fill="rgb(224,21,39)" rx="2" ry="2" />
<text  x="208.14" y="111.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="196.2" y="245" width="0.3" height="15.0" fill="rgb(209,45,48)" rx="2" ry="2" />
<text  x="199.23" y="255.5" ></text>
</g>
<g >
<title>runtime.procPin (1 samples, 0.02%)</title><rect x="396.1" y="325" width="0.2" height="15.0" fill="rgb(213,26,50)" rx="2" ry="2" />
<text  x="399.09" y="335.5" ></text>
</g>
<g >
<title>runtime.nanotime (7 samples, 0.16%)</title><rect x="413.9" y="373" width="1.8" height="15.0" fill="rgb(243,219,13)" rx="2" ry="2" />
<text  x="416.90" y="383.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="393.5" y="357" width="0.2" height="15.0" fill="rgb(236,191,2)" rx="2" ry="2" />
<text  x="396.47" y="367.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parse (8 samples, 0.18%)</title><rect x="389.8" y="341" width="2.1" height="15.0" fill="rgb(206,218,7)" rx="2" ry="2" />
<text  x="392.80" y="351.5" ></text>
</g>
<g >
<title>net.itoa (1 samples, 0.02%)</title><rect x="220.9" y="341" width="0.2" height="15.0" fill="rgb(249,114,26)" rx="2" ry="2" />
<text  x="223.85" y="351.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Align (1 samples, 0.02%)</title><rect x="199.1" y="229" width="0.3" height="15.0" fill="rgb(219,218,52)" rx="2" ry="2" />
<text  x="202.11" y="239.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenFASTHTTP.func1 (147 samples, 3.26%)</title><rect x="183.7" y="373" width="38.5" height="15.0" fill="rgb(210,2,34)" rx="2" ry="2" />
<text  x="186.66" y="383.5" >hsl..</text>
</g>
<g >
<title>runtime.mcall (1 samples, 0.02%)</title><rect x="401.8" y="421" width="0.3" height="15.0" fill="rgb(223,92,16)" rx="2" ry="2" />
<text  x="404.85" y="431.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (6 samples, 0.13%)</title><rect x="200.9" y="213" width="1.6" height="15.0" fill="rgb(205,40,30)" rx="2" ry="2" />
<text  x="203.95" y="223.5" ></text>
</g>
<g >
<title>runtime.notesleep (33 samples, 0.73%)</title><rect x="426.5" y="357" width="8.6" height="15.0" fill="rgb(216,68,44)" rx="2" ry="2" />
<text  x="429.47" y="367.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (2 samples, 0.04%)</title><rect x="387.4" y="181" width="0.6" height="15.0" fill="rgb(236,78,45)" rx="2" ry="2" />
<text  x="390.44" y="191.5" ></text>
</g>
<g >
<title>syscall.read (432 samples, 9.59%)</title><rect x="276.6" y="245" width="113.2" height="15.0" fill="rgb(247,101,22)" rx="2" ry="2" />
<text  x="279.65" y="255.5" >syscall.read</text>
</g>
<g >
<title>net.(*TCPAddr).String (10 samples, 0.22%)</title><rect x="218.5" y="357" width="2.6" height="15.0" fill="rgb(229,120,9)" rx="2" ry="2" />
<text  x="221.50" y="367.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Response).AppendBodyString (1 samples, 0.02%)</title><rect x="185.0" y="309" width="0.2" height="15.0" fill="rgb(229,183,13)" rx="2" ry="2" />
<text  x="187.97" y="319.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="187.1" y="149" width="0.2" height="15.0" fill="rgb(212,104,6)" rx="2" ry="2" />
<text  x="190.07" y="159.5" ></text>
</g>
<g >
<title>reflect.resolveTypeOff (2 samples, 0.04%)</title><rect x="206.2" y="229" width="0.5" height="15.0" fill="rgb(249,65,19)" rx="2" ry="2" />
<text  x="209.19" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.02%)</title><rect x="187.1" y="245" width="0.2" height="15.0" fill="rgb(253,189,44)" rx="2" ry="2" />
<text  x="190.07" y="255.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="207.2" y="165" width="0.3" height="15.0" fill="rgb(235,11,35)" rx="2" ry="2" />
<text  x="210.23" y="175.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (2 samples, 0.04%)</title><rect x="204.6" y="197" width="0.5" height="15.0" fill="rgb(234,18,10)" rx="2" ry="2" />
<text  x="207.61" y="207.5" ></text>
</g>
<g >
<title>sync.runtime_nanotime (1 samples, 0.02%)</title><rect x="395.8" y="341" width="0.3" height="15.0" fill="rgb(213,78,4)" rx="2" ry="2" />
<text  x="398.82" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.02%)</title><rect x="187.1" y="261" width="0.2" height="15.0" fill="rgb(245,72,40)" rx="2" ry="2" />
<text  x="190.07" y="271.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (4 samples, 0.09%)</title><rect x="404.5" y="293" width="1.0" height="15.0" fill="rgb(218,73,44)" rx="2" ry="2" />
<text  x="407.47" y="303.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="820.4" y="389" width="0.3" height="15.0" fill="rgb(251,200,11)" rx="2" ry="2" />
<text  x="823.42" y="399.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="186.3" y="213" width="0.5" height="15.0" fill="rgb(210,166,8)" rx="2" ry="2" />
<text  x="189.28" y="223.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="1187.1" y="357" width="0.3" height="15.0" fill="rgb(252,213,44)" rx="2" ry="2" />
<text  x="1190.12" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.02%)</title><rect x="203.3" y="197" width="0.3" height="15.0" fill="rgb(221,56,49)" rx="2" ry="2" />
<text  x="206.31" y="207.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.delAllArgsBytes (2 samples, 0.04%)</title><rect x="397.9" y="341" width="0.5" height="15.0" fill="rgb(224,128,28)" rx="2" ry="2" />
<text  x="400.92" y="351.5" ></text>
</g>
<g >
<title>runtime.kevent (20 samples, 0.44%)</title><rect x="421.2" y="357" width="5.3" height="15.0" fill="rgb(219,79,35)" rx="2" ry="2" />
<text  x="424.23" y="367.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.pointer.isNil (1 samples, 0.02%)</title><rect x="195.7" y="213" width="0.3" height="15.0" fill="rgb(234,126,54)" rx="2" ry="2" />
<text  x="198.71" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (1 samples, 0.02%)</title><rect x="203.3" y="69" width="0.3" height="15.0" fill="rgb(252,160,9)" rx="2" ry="2" />
<text  x="206.31" y="79.5" ></text>
</g>
<g >
<title>reflect.funcLayout (6 samples, 0.13%)</title><rect x="200.9" y="229" width="1.6" height="15.0" fill="rgb(233,217,9)" rx="2" ry="2" />
<text  x="203.95" y="239.5" ></text>
</g>
<g >
<title>runtime.startm (1,393 samples, 30.92%)</title><rect x="820.7" y="373" width="364.8" height="15.0" fill="rgb(241,141,39)" rx="2" ry="2" />
<text  x="823.68" y="383.5" >runtime.startm</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (7 samples, 0.16%)</title><rect x="194.1" y="245" width="1.9" height="15.0" fill="rgb(227,30,37)" rx="2" ry="2" />
<text  x="197.14" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (6 samples, 0.13%)</title><rect x="411.0" y="309" width="1.6" height="15.0" fill="rgb(233,140,46)" rx="2" ry="2" />
<text  x="414.02" y="319.5" ></text>
</g>
<g >
<title>runtime.nanotime (35 samples, 0.78%)</title><rect x="802.3" y="389" width="9.2" height="15.0" fill="rgb(246,117,13)" rx="2" ry="2" />
<text  x="805.34" y="399.5" ></text>
</g>
<g >
<title>runtime.bgsweep (2 samples, 0.04%)</title><rect x="403.4" y="437" width="0.5" height="15.0" fill="rgb(220,129,14)" rx="2" ry="2" />
<text  x="406.42" y="447.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (98 samples, 2.18%)</title><rect x="191.3" y="309" width="25.6" height="15.0" fill="rgb(254,51,10)" rx="2" ry="2" />
<text  x="194.26" y="319.5" >h..</text>
</g>
<g >
<title>net.(*netFD).Read (631 samples, 14.01%)</title><rect x="224.5" y="293" width="165.3" height="15.0" fill="rgb(225,176,52)" rx="2" ry="2" />
<text  x="227.52" y="303.5" >net.(*netFD).Read</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).ResetBody (1 samples, 0.02%)</title><rect x="223.2" y="357" width="0.3" height="15.0" fill="rgb(252,20,46)" rx="2" ry="2" />
<text  x="226.21" y="367.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="196.8" y="277" width="0.2" height="15.0" fill="rgb(252,11,29)" rx="2" ry="2" />
<text  x="199.76" y="287.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.02%)</title><rect x="220.9" y="309" width="0.2" height="15.0" fill="rgb(207,131,15)" rx="2" ry="2" />
<text  x="223.85" y="319.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.04%)</title><rect x="820.7" y="341" width="0.5" height="15.0" fill="rgb(246,84,47)" rx="2" ry="2" />
<text  x="823.68" y="351.5" ></text>
</g>
<g >
<title>runtime.handoffp (1,393 samples, 30.92%)</title><rect x="820.7" y="389" width="364.8" height="15.0" fill="rgb(252,25,2)" rx="2" ry="2" />
<text  x="823.68" y="399.5" >runtime.handoffp</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Response).Write (21 samples, 0.47%)</title><rect x="396.3" y="373" width="5.5" height="15.0" fill="rgb(244,82,8)" rx="2" ry="2" />
<text  x="399.35" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).readLimitBody (643 samples, 14.27%)</title><rect x="223.5" y="389" width="168.4" height="15.0" fill="rgb(214,215,5)" rx="2" ry="2" />
<text  x="226.47" y="399.5" >github.com/valyala/fa..</text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.02%)</title><rect x="220.3" y="149" width="0.3" height="15.0" fill="rgb(230,57,10)" rx="2" ry="2" />
<text  x="223.33" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1,391 samples, 30.88%)</title><rect x="821.2" y="341" width="364.3" height="15.0" fill="rgb(219,226,48)" rx="2" ry="2" />
<text  x="824.20" y="351.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.globrunqget (1 samples, 0.02%)</title><rect x="410.8" y="373" width="0.2" height="15.0" fill="rgb(237,73,35)" rx="2" ry="2" />
<text  x="413.75" y="383.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="186.8" y="293" width="0.8" height="15.0" fill="rgb(249,8,50)" rx="2" ry="2" />
<text  x="189.80" y="303.5" ></text>
</g>
<g >
<title>runtime.efaceeq (1 samples, 0.02%)</title><rect x="202.0" y="165" width="0.3" height="15.0" fill="rgb(231,11,14)" rx="2" ry="2" />
<text  x="205.00" y="175.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (3 samples, 0.07%)</title><rect x="208.3" y="245" width="0.8" height="15.0" fill="rgb(222,172,42)" rx="2" ry="2" />
<text  x="211.28" y="255.5" ></text>
</g>
<g >
<title>runtime.resolveTypeOff (1 samples, 0.02%)</title><rect x="202.5" y="165" width="0.3" height="15.0" fill="rgb(231,72,5)" rx="2" ry="2" />
<text  x="205.52" y="175.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="196.5" y="261" width="0.3" height="15.0" fill="rgb(242,181,51)" rx="2" ry="2" />
<text  x="199.50" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.delAllArgs (2 samples, 0.04%)</title><rect x="397.9" y="325" width="0.5" height="15.0" fill="rgb(219,78,49)" rx="2" ry="2" />
<text  x="400.92" y="335.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.04%)</title><rect x="820.7" y="357" width="0.5" height="15.0" fill="rgb(226,163,9)" rx="2" ry="2" />
<text  x="823.68" y="367.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (7 samples, 0.16%)</title><rect x="1187.4" y="357" width="1.8" height="15.0" fill="rgb(238,193,24)" rx="2" ry="2" />
<text  x="1190.38" y="367.5" ></text>
</g>
<g >
<title>reflect.Value.call (27 samples, 0.60%)</title><rect x="198.3" y="245" width="7.1" height="15.0" fill="rgb(232,25,38)" rx="2" ry="2" />
<text  x="201.33" y="255.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="220.6" y="277" width="0.3" height="15.0" fill="rgb(213,223,25)" rx="2" ry="2" />
<text  x="223.59" y="287.5" ></text>
</g>
<g >
<title>runtime.stopm (33 samples, 0.73%)</title><rect x="426.5" y="373" width="8.6" height="15.0" fill="rgb(214,199,53)" rx="2" ry="2" />
<text  x="429.47" y="383.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (6 samples, 0.13%)</title><rect x="209.6" y="261" width="1.6" height="15.0" fill="rgb(254,91,26)" rx="2" ry="2" />
<text  x="212.59" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).RemoteAddr (2 samples, 0.04%)</title><rect x="183.9" y="357" width="0.5" height="15.0" fill="rgb(244,0,26)" rx="2" ry="2" />
<text  x="186.92" y="367.5" ></text>
</g>
<g >
<title>runtime.newobject (3 samples, 0.07%)</title><rect x="186.8" y="309" width="0.8" height="15.0" fill="rgb(215,8,49)" rx="2" ry="2" />
<text  x="189.80" y="319.5" ></text>
</g>
<g >
<title>runtime.netpoll (41 samples, 0.91%)</title><rect x="415.7" y="373" width="10.8" height="15.0" fill="rgb(205,188,13)" rx="2" ry="2" />
<text  x="418.73" y="383.5" ></text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.02%)</title><rect x="1189.2" y="373" width="0.3" height="15.0" fill="rgb(211,77,12)" rx="2" ry="2" />
<text  x="1192.21" y="383.5" ></text>
</g>
<g >
<title>runtime.findrunnable (96 samples, 2.13%)</title><rect x="410.2" y="389" width="25.2" height="15.0" fill="rgb(206,211,24)" rx="2" ry="2" />
<text  x="413.23" y="399.5" >r..</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*URI).parseQuick (2 samples, 0.04%)</title><rect x="183.1" y="309" width="0.6" height="15.0" fill="rgb(250,41,16)" rx="2" ry="2" />
<text  x="186.14" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (19 samples, 0.42%)</title><rect x="743.1" y="309" width="5.0" height="15.0" fill="rgb(225,103,29)" rx="2" ry="2" />
<text  x="746.15" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="1187.1" y="389" width="0.3" height="15.0" fill="rgb(233,120,34)" rx="2" ry="2" />
<text  x="1190.12" y="399.5" ></text>
</g>
<g >
<title>runtime.gcDrain (16 samples, 0.36%)</title><rect x="403.9" y="389" width="4.2" height="15.0" fill="rgb(235,224,30)" rx="2" ry="2" />
<text  x="406.94" y="399.5" ></text>
</g>
<g >
<title>runtime.(*mcache).releaseAll (1 samples, 0.02%)</title><rect x="786.4" y="325" width="0.2" height="15.0" fill="rgb(219,128,38)" rx="2" ry="2" />
<text  x="789.36" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Server).serveConn (1,496 samples, 33.21%)</title><rect x="10.0" y="405" width="391.8" height="15.0" fill="rgb(243,111,17)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >github.com/valyala/fasthttp.(*Server).serveConn</text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.02%)</title><rect x="203.3" y="181" width="0.3" height="15.0" fill="rgb(230,126,41)" rx="2" ry="2" />
<text  x="206.31" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.02%)</title><rect x="196.0" y="245" width="0.2" height="15.0" fill="rgb(237,180,29)" rx="2" ry="2" />
<text  x="198.97" y="255.5" ></text>
</g>
<g >
<title>runtime.efaceeq (1 samples, 0.02%)</title><rect x="207.8" y="213" width="0.2" height="15.0" fill="rgb(238,31,39)" rx="2" ry="2" />
<text  x="210.76" y="223.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (5 samples, 0.11%)</title><rect x="201.2" y="197" width="1.3" height="15.0" fill="rgb(210,212,22)" rx="2" ry="2" />
<text  x="204.21" y="207.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (16 samples, 0.36%)</title><rect x="403.9" y="405" width="4.2" height="15.0" fill="rgb(246,171,15)" rx="2" ry="2" />
<text  x="406.94" y="415.5" ></text>
</g>
<g >
<title>runtime.deductSweepCredit (1 samples, 0.02%)</title><rect x="187.1" y="229" width="0.2" height="15.0" fill="rgb(208,124,5)" rx="2" ry="2" />
<text  x="190.07" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="196.5" y="245" width="0.3" height="15.0" fill="rgb(218,40,52)" rx="2" ry="2" />
<text  x="199.50" y="255.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="192.8" y="261" width="0.3" height="15.0" fill="rgb(243,151,30)" rx="2" ry="2" />
<text  x="195.83" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parseHeaders (5 samples, 0.11%)</title><rect x="390.6" y="325" width="1.3" height="15.0" fill="rgb(218,101,28)" rx="2" ry="2" />
<text  x="393.59" y="335.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="205.1" y="117" width="0.3" height="15.0" fill="rgb(208,87,41)" rx="2" ry="2" />
<text  x="208.14" y="127.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.04%)</title><rect x="217.2" y="325" width="0.5" height="15.0" fill="rgb(245,160,36)" rx="2" ry="2" />
<text  x="220.19" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="395.6" y="293" width="0.2" height="15.0" fill="rgb(249,107,39)" rx="2" ry="2" />
<text  x="398.56" y="303.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Write (4 samples, 0.09%)</title><rect x="398.4" y="341" width="1.1" height="15.0" fill="rgb(233,54,43)" rx="2" ry="2" />
<text  x="401.44" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Marshal (1 samples, 0.02%)</title><rect x="213.5" y="245" width="0.3" height="15.0" fill="rgb(207,50,4)" rx="2" ry="2" />
<text  x="216.52" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (6 samples, 0.13%)</title><rect x="185.2" y="309" width="1.6" height="15.0" fill="rgb(250,199,8)" rx="2" ry="2" />
<text  x="188.23" y="319.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (4 samples, 0.09%)</title><rect x="405.5" y="293" width="1.1" height="15.0" fill="rgb(221,202,51)" rx="2" ry="2" />
<text  x="408.52" y="303.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.02%)</title><rect x="407.6" y="357" width="0.3" height="15.0" fill="rgb(219,164,17)" rx="2" ry="2" />
<text  x="410.61" y="367.5" ></text>
</g>
<g >
<title>runtime.(*_type).typeOff (1 samples, 0.02%)</title><rect x="202.5" y="181" width="0.3" height="15.0" fill="rgb(205,65,32)" rx="2" ry="2" />
<text  x="205.52" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/bytebufferpool.(*ByteBuffer).WriteString (1 samples, 0.02%)</title><rect x="185.0" y="293" width="0.2" height="15.0" fill="rgb(240,121,24)" rx="2" ry="2" />
<text  x="187.97" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (5 samples, 0.11%)</title><rect x="204.1" y="213" width="1.3" height="15.0" fill="rgb(209,137,26)" rx="2" ry="2" />
<text  x="207.09" y="223.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (3 samples, 0.07%)</title><rect x="174.8" y="245" width="0.7" height="15.0" fill="rgb(254,155,13)" rx="2" ry="2" />
<text  x="177.75" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (7 samples, 0.16%)</title><rect x="188.6" y="277" width="1.9" height="15.0" fill="rgb(251,162,42)" rx="2" ry="2" />
<text  x="191.64" y="287.5" ></text>
</g>
<g >
<title>runtime.resolveTypeOff (3 samples, 0.07%)</title><rect x="211.9" y="197" width="0.8" height="15.0" fill="rgb(242,80,49)" rx="2" ry="2" />
<text  x="214.95" y="207.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="207.2" y="229" width="0.3" height="15.0" fill="rgb(211,7,34)" rx="2" ry="2" />
<text  x="210.23" y="239.5" ></text>
</g>
<g >
<title>sync.runtime_nanotime (1 samples, 0.02%)</title><rect x="393.7" y="341" width="0.3" height="15.0" fill="rgb(243,150,19)" rx="2" ry="2" />
<text  x="396.73" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (14 samples, 0.31%)</title><rect x="187.6" y="325" width="3.7" height="15.0" fill="rgb(254,127,32)" rx="2" ry="2" />
<text  x="190.59" y="335.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="435.4" y="341" width="0.2" height="15.0" fill="rgb(243,145,24)" rx="2" ry="2" />
<text  x="438.38" y="351.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.02%)</title><rect x="1189.5" y="373" width="0.2" height="15.0" fill="rgb(233,48,43)" rx="2" ry="2" />
<text  x="1192.48" y="383.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.04%)</title><rect x="220.1" y="245" width="0.5" height="15.0" fill="rgb(248,105,10)" rx="2" ry="2" />
<text  x="223.07" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.02%)</title><rect x="786.4" y="309" width="0.2" height="15.0" fill="rgb(240,87,22)" rx="2" ry="2" />
<text  x="789.36" y="319.5" ></text>
</g>
<g >
<title>runtime.spanOf (1 samples, 0.02%)</title><rect x="407.3" y="341" width="0.3" height="15.0" fill="rgb(207,105,27)" rx="2" ry="2" />
<text  x="410.35" y="351.5" ></text>
</g>
<g >
<title>runtime.usleep (5 samples, 0.11%)</title><rect x="408.1" y="373" width="1.3" height="15.0" fill="rgb(247,34,6)" rx="2" ry="2" />
<text  x="411.14" y="383.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="395.6" y="341" width="0.2" height="15.0" fill="rgb(240,222,6)" rx="2" ry="2" />
<text  x="398.56" y="351.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.04%)</title><rect x="220.1" y="229" width="0.5" height="15.0" fill="rgb(208,126,43)" rx="2" ry="2" />
<text  x="223.07" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="196.5" y="165" width="0.3" height="15.0" fill="rgb(240,107,41)" rx="2" ry="2" />
<text  x="199.50" y="175.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).Write (13 samples, 0.29%)</title><rect x="398.4" y="357" width="3.4" height="15.0" fill="rgb(231,17,53)" rx="2" ry="2" />
<text  x="401.44" y="367.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Reset (1 samples, 0.02%)</title><rect x="393.2" y="373" width="0.3" height="15.0" fill="rgb(232,81,1)" rx="2" ry="2" />
<text  x="396.21" y="383.5" ></text>
</g>
<g >
<title>reflect.(*rtype).In (3 samples, 0.07%)</title><rect x="199.9" y="229" width="0.8" height="15.0" fill="rgb(217,93,10)" rx="2" ry="2" />
<text  x="202.90" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="196.5" y="181" width="0.3" height="15.0" fill="rgb(254,221,44)" rx="2" ry="2" />
<text  x="199.50" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*URI).parse (1 samples, 0.02%)</title><rect x="183.4" y="293" width="0.3" height="15.0" fill="rgb(254,191,40)" rx="2" ry="2" />
<text  x="186.40" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (9 samples, 0.20%)</title><rect x="185.2" y="325" width="2.4" height="15.0" fill="rgb(214,37,25)" rx="2" ry="2" />
<text  x="188.23" y="335.5" ></text>
</g>
<g >
<title>runtime.scanobject (6 samples, 0.13%)</title><rect x="406.6" y="373" width="1.5" height="15.0" fill="rgb(225,127,30)" rx="2" ry="2" />
<text  x="409.56" y="383.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.02%)</title><rect x="406.0" y="213" width="0.3" height="15.0" fill="rgb(241,181,53)" rx="2" ry="2" />
<text  x="409.04" y="223.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.02%)</title><rect x="220.3" y="181" width="0.3" height="15.0" fill="rgb(222,213,37)" rx="2" ry="2" />
<text  x="223.33" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (6 samples, 0.13%)</title><rect x="185.2" y="277" width="1.6" height="15.0" fill="rgb(207,117,34)" rx="2" ry="2" />
<text  x="188.23" y="287.5" ></text>
</g>
<g >
<title>runtime.rawstringtmp (2 samples, 0.04%)</title><rect x="218.8" y="293" width="0.5" height="15.0" fill="rgb(232,22,13)" rx="2" ry="2" />
<text  x="221.76" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (3 samples, 0.07%)</title><rect x="186.0" y="245" width="0.8" height="15.0" fill="rgb(248,145,35)" rx="2" ry="2" />
<text  x="189.02" y="255.5" ></text>
</g>
<g >
<title>runtime.growslice (2 samples, 0.04%)</title><rect x="186.3" y="229" width="0.5" height="15.0" fill="rgb(252,133,15)" rx="2" ry="2" />
<text  x="189.28" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="207.2" y="213" width="0.3" height="15.0" fill="rgb(225,52,25)" rx="2" ry="2" />
<text  x="210.23" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.acquireReader (3 samples, 0.07%)</title><rect x="393.2" y="389" width="0.8" height="15.0" fill="rgb(231,146,40)" rx="2" ry="2" />
<text  x="396.21" y="399.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="1185.5" y="373" width="0.3" height="15.0" fill="rgb(245,80,2)" rx="2" ry="2" />
<text  x="1188.55" y="383.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="387.7" y="85" width="0.3" height="15.0" fill="rgb(207,29,2)" rx="2" ry="2" />
<text  x="390.70" y="95.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (11 samples, 0.24%)</title><rect x="193.9" y="277" width="2.9" height="15.0" fill="rgb(242,167,17)" rx="2" ry="2" />
<text  x="196.88" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (19 samples, 0.42%)</title><rect x="743.1" y="341" width="5.0" height="15.0" fill="rgb(240,77,29)" rx="2" ry="2" />
<text  x="746.15" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (73 samples, 1.62%)</title><rect x="197.0" y="293" width="19.1" height="15.0" fill="rgb(205,167,53)" rx="2" ry="2" />
<text  x="200.02" y="303.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.02%)</title><rect x="205.1" y="85" width="0.3" height="15.0" fill="rgb(207,194,9)" rx="2" ry="2" />
<text  x="208.14" y="95.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (1 samples, 0.02%)</title><rect x="393.7" y="357" width="0.3" height="15.0" fill="rgb(254,35,48)" rx="2" ry="2" />
<text  x="396.73" y="367.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwlock (1 samples, 0.02%)</title><rect x="11.6" y="309" width="0.2" height="15.0" fill="rgb(226,23,4)" rx="2" ry="2" />
<text  x="14.57" y="319.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.02%)</title><rect x="224.0" y="357" width="0.3" height="15.0" fill="rgb(251,117,10)" rx="2" ry="2" />
<text  x="227.00" y="367.5" ></text>
</g>
<g >
<title>runtime.makeslice (3 samples, 0.07%)</title><rect x="206.7" y="261" width="0.8" height="15.0" fill="rgb(207,227,13)" rx="2" ry="2" />
<text  x="209.71" y="271.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.09%)</title><rect x="412.9" y="373" width="1.0" height="15.0" fill="rgb(215,222,31)" rx="2" ry="2" />
<text  x="415.85" y="383.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="1185.5" y="357" width="0.3" height="15.0" fill="rgb(250,90,20)" rx="2" ry="2" />
<text  x="1188.55" y="367.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="820.4" y="357" width="0.3" height="15.0" fill="rgb(208,210,4)" rx="2" ry="2" />
<text  x="823.42" y="367.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.04%)</title><rect x="222.2" y="373" width="0.5" height="15.0" fill="rgb(214,50,52)" rx="2" ry="2" />
<text  x="225.16" y="383.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.02%)</title><rect x="1189.5" y="389" width="0.2" height="15.0" fill="rgb(228,128,42)" rx="2" ry="2" />
<text  x="1192.48" y="399.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).Write (1 samples, 0.02%)</title><rect x="185.0" y="341" width="0.2" height="15.0" fill="rgb(242,34,23)" rx="2" ry="2" />
<text  x="187.97" y="351.5" ></text>
</g>
<g >
<title>sync.(*Pool).pin (1 samples, 0.02%)</title><rect x="396.1" y="357" width="0.2" height="15.0" fill="rgb(241,200,8)" rx="2" ry="2" />
<text  x="399.09" y="367.5" ></text>
</g>
<g >
<title>runtime.callers.func1 (1 samples, 0.02%)</title><rect x="205.1" y="133" width="0.3" height="15.0" fill="rgb(244,119,52)" rx="2" ry="2" />
<text  x="208.14" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="196.5" y="213" width="0.3" height="15.0" fill="rgb(224,124,54)" rx="2" ry="2" />
<text  x="199.50" y="223.5" ></text>
</g>
<g >
<title>runtime.mstart1 (70 samples, 1.55%)</title><rect x="802.1" y="421" width="18.3" height="15.0" fill="rgb(211,33,43)" rx="2" ry="2" />
<text  x="805.08" y="431.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.02%)</title><rect x="203.3" y="85" width="0.3" height="15.0" fill="rgb(220,19,48)" rx="2" ry="2" />
<text  x="206.31" y="95.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="221.4" y="341" width="0.8" height="15.0" fill="rgb(225,135,29)" rx="2" ry="2" />
<text  x="224.38" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBoolValueNoZero (1 samples, 0.02%)</title><rect x="187.9" y="245" width="0.2" height="15.0" fill="rgb(217,41,10)" rx="2" ry="2" />
<text  x="190.85" y="255.5" ></text>
</g>
<g >
<title>sync.(*Pool).Get (1 samples, 0.02%)</title><rect x="393.7" y="373" width="0.3" height="15.0" fill="rgb(236,128,44)" rx="2" ry="2" />
<text  x="396.73" y="383.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.02%)</title><rect x="208.8" y="213" width="0.3" height="15.0" fill="rgb(243,61,42)" rx="2" ry="2" />
<text  x="211.81" y="223.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="395.6" y="325" width="0.2" height="15.0" fill="rgb(215,103,13)" rx="2" ry="2" />
<text  x="398.56" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="393.5" y="293" width="0.2" height="15.0" fill="rgb(213,82,47)" rx="2" ry="2" />
<text  x="396.47" y="303.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*workerPool).getCh.func1 (1,496 samples, 33.21%)</title><rect x="10.0" y="437" width="391.8" height="15.0" fill="rgb(241,126,53)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >github.com/valyala/fasthttp.(*workerPool).getCh.func1</text>
</g>
<g >
<title>github.com/valyala/fasthttp.releaseReader (4 samples, 0.09%)</title><rect x="395.3" y="389" width="1.0" height="15.0" fill="rgb(239,170,54)" rx="2" ry="2" />
<text  x="398.30" y="399.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.02%)</title><rect x="187.1" y="277" width="0.2" height="15.0" fill="rgb(252,159,35)" rx="2" ry="2" />
<text  x="190.07" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ArgsDecode (1 samples, 0.02%)</title><rect x="212.7" y="277" width="0.3" height="15.0" fill="rgb(223,118,7)" rx="2" ry="2" />
<text  x="215.73" y="287.5" ></text>
</g>
<g >
<title>reflect.directlyAssignable (1 samples, 0.02%)</title><rect x="199.6" y="213" width="0.3" height="15.0" fill="rgb(248,55,22)" rx="2" ry="2" />
<text  x="202.64" y="223.5" ></text>
</g>
<g >
<title>runtime.notesleep (59 samples, 1.31%)</title><rect x="786.6" y="357" width="15.5" height="15.0" fill="rgb(223,154,1)" rx="2" ry="2" />
<text  x="789.63" y="367.5" ></text>
</g>
<g >
<title>runtime.startm (7 samples, 0.16%)</title><rect x="411.0" y="357" width="1.9" height="15.0" fill="rgb(230,16,26)" rx="2" ry="2" />
<text  x="414.02" y="367.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="1186.9" y="357" width="0.2" height="15.0" fill="rgb(210,176,34)" rx="2" ry="2" />
<text  x="1189.86" y="367.5" ></text>
</g>
<g >
<title>net.JoinHostPort (2 samples, 0.04%)</title><rect x="218.8" y="341" width="0.5" height="15.0" fill="rgb(219,88,13)" rx="2" ry="2" />
<text  x="221.76" y="351.5" ></text>
</g>
<g >
<title>runtime.convI2I (4 samples, 0.09%)</title><rect x="394.0" y="373" width="1.0" height="15.0" fill="rgb(244,53,5)" rx="2" ry="2" />
<text  x="396.99" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.02%)</title><rect x="196.8" y="181" width="0.2" height="15.0" fill="rgb(234,189,7)" rx="2" ry="2" />
<text  x="199.76" y="191.5" ></text>
</g>
<g >
<title>reflect.(*rtype).typeOff (2 samples, 0.04%)</title><rect x="206.2" y="245" width="0.5" height="15.0" fill="rgb(214,218,0)" rx="2" ry="2" />
<text  x="209.19" y="255.5" ></text>
</g>
<g >
<title>runtime.schedule (227 samples, 5.04%)</title><rect x="742.6" y="405" width="59.5" height="15.0" fill="rgb(205,194,19)" rx="2" ry="2" />
<text  x="745.62" y="415.5" >runtim..</text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.02%)</title><rect x="187.1" y="213" width="0.2" height="15.0" fill="rgb(249,202,20)" rx="2" ry="2" />
<text  x="190.07" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).removeNode (1 samples, 0.02%)</title><rect x="203.3" y="37" width="0.3" height="15.0" fill="rgb(237,82,22)" rx="2" ry="2" />
<text  x="206.31" y="47.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="435.1" y="373" width="0.3" height="15.0" fill="rgb(244,225,45)" rx="2" ry="2" />
<text  x="438.11" y="383.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="412.6" y="309" width="0.3" height="15.0" fill="rgb(209,139,30)" rx="2" ry="2" />
<text  x="415.59" y="319.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (652 samples, 14.47%)</title><rect x="11.3" y="357" width="170.8" height="15.0" fill="rgb(238,80,30)" rx="2" ry="2" />
<text  x="14.31" y="367.5" >net.(*netFD).Write</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeBoolValueNoZero (1 samples, 0.02%)</title><rect x="189.9" y="245" width="0.3" height="15.0" fill="rgb(206,226,29)" rx="2" ry="2" />
<text  x="192.95" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).Read (640 samples, 14.21%)</title><rect x="224.3" y="373" width="167.6" height="15.0" fill="rgb(233,216,37)" rx="2" ry="2" />
<text  x="227.26" y="383.5" >github.com/valyala/fa..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="190.5" y="277" width="0.2" height="15.0" fill="rgb(221,42,27)" rx="2" ry="2" />
<text  x="193.47" y="287.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="207.2" y="197" width="0.3" height="15.0" fill="rgb(215,92,29)" rx="2" ry="2" />
<text  x="210.23" y="207.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).SetServerBytes (2 samples, 0.04%)</title><rect x="392.2" y="389" width="0.5" height="15.0" fill="rgb(230,109,13)" rx="2" ry="2" />
<text  x="395.16" y="399.5" ></text>
</g>
<g >
<title>runtime.memhash (1 samples, 0.02%)</title><rect x="202.3" y="149" width="0.2" height="15.0" fill="rgb(238,18,15)" rx="2" ry="2" />
<text  x="205.26" y="159.5" ></text>
</g>
<g >
<title>runtime.resolveTypeOff (2 samples, 0.04%)</title><rect x="206.2" y="197" width="0.5" height="15.0" fill="rgb(207,38,45)" rx="2" ry="2" />
<text  x="209.19" y="207.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.04%)</title><rect x="220.1" y="213" width="0.5" height="15.0" fill="rgb(245,174,6)" rx="2" ry="2" />
<text  x="223.07" y="223.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (7 samples, 0.16%)</title><rect x="388.0" y="213" width="1.8" height="15.0" fill="rgb(210,19,21)" rx="2" ry="2" />
<text  x="390.97" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="387.4" y="197" width="0.6" height="15.0" fill="rgb(238,159,6)" rx="2" ry="2" />
<text  x="390.44" y="207.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.02%)</title><rect x="435.4" y="373" width="0.2" height="15.0" fill="rgb(227,11,33)" rx="2" ry="2" />
<text  x="438.38" y="383.5" ></text>
</g>
<g >
<title>runtime.handoffp (2 samples, 0.04%)</title><rect x="387.4" y="165" width="0.6" height="15.0" fill="rgb(248,95,50)" rx="2" ry="2" />
<text  x="390.44" y="175.5" ></text>
</g>
<g >
<title>reflect.typedmemclrpartial (2 samples, 0.04%)</title><rect x="202.8" y="229" width="0.5" height="15.0" fill="rgb(223,159,5)" rx="2" ry="2" />
<text  x="205.78" y="239.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1,393 samples, 30.92%)</title><rect x="820.7" y="405" width="364.8" height="15.0" fill="rgb(247,159,49)" rx="2" ry="2" />
<text  x="823.68" y="415.5" >runtime.entersyscallblock_handoff</text>
</g>
<g >
<title>runtime.netpollcheckerr (2 samples, 0.04%)</title><rect x="12.1" y="277" width="0.5" height="15.0" fill="rgb(207,0,10)" rx="2" ry="2" />
<text  x="15.10" y="287.5" ></text>
</g>
<g >
<title>net.IP.To4 (1 samples, 0.02%)</title><rect x="219.3" y="309" width="0.2" height="15.0" fill="rgb(247,34,53)" rx="2" ry="2" />
<text  x="222.28" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (6 samples, 0.13%)</title><rect x="194.4" y="229" width="1.6" height="15.0" fill="rgb(231,41,41)" rx="2" ry="2" />
<text  x="197.40" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait_trampoline (2 samples, 0.04%)</title><rect x="402.9" y="421" width="0.5" height="15.0" fill="rgb(220,111,36)" rx="2" ry="2" />
<text  x="405.90" y="431.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.02%)</title><rect x="196.2" y="261" width="0.3" height="15.0" fill="rgb(233,220,12)" rx="2" ry="2" />
<text  x="199.23" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1,362 samples, 30.23%)</title><rect x="821.2" y="325" width="356.8" height="15.0" fill="rgb(227,68,15)" rx="2" ry="2" />
<text  x="824.20" y="335.5" >runtime.pthread_cond_signal</text>
</g>
<g >
<title>reflect.(*rtype).typeOff (3 samples, 0.07%)</title><rect x="211.9" y="245" width="0.8" height="15.0" fill="rgb(233,65,2)" rx="2" ry="2" />
<text  x="214.95" y="255.5" ></text>
</g>
<g >
<title>runtime.strequal (1 samples, 0.02%)</title><rect x="207.8" y="197" width="0.2" height="15.0" fill="rgb(248,27,49)" rx="2" ry="2" />
<text  x="210.76" y="207.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.02%)</title><rect x="435.4" y="357" width="0.2" height="15.0" fill="rgb(217,172,36)" rx="2" ry="2" />
<text  x="438.38" y="367.5" ></text>
</g>
<g >
<title>syscall.syscall (432 samples, 9.59%)</title><rect x="276.6" y="229" width="113.2" height="15.0" fill="rgb(227,9,3)" rx="2" ry="2" />
<text  x="279.65" y="239.5" >syscall.syscall</text>
</g>
<g >
<title>reflect.(*rtype).uncommon (2 samples, 0.04%)</title><rect x="211.4" y="229" width="0.5" height="15.0" fill="rgb(226,5,48)" rx="2" ry="2" />
<text  x="214.43" y="239.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (1 samples, 0.02%)</title><rect x="395.8" y="357" width="0.3" height="15.0" fill="rgb(240,110,41)" rx="2" ry="2" />
<text  x="398.82" y="367.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (3 samples, 0.07%)</title><rect x="11.8" y="309" width="0.8" height="15.0" fill="rgb(207,148,29)" rx="2" ry="2" />
<text  x="14.83" y="319.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.02%)</title><rect x="202.3" y="181" width="0.2" height="15.0" fill="rgb(232,15,25)" rx="2" ry="2" />
<text  x="205.26" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.CoarseTimeNow (2 samples, 0.04%)</title><rect x="392.7" y="389" width="0.5" height="15.0" fill="rgb(230,188,44)" rx="2" ry="2" />
<text  x="395.68" y="399.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeVarintS32ValueNoZero (1 samples, 0.02%)</title><rect x="190.2" y="245" width="0.3" height="15.0" fill="rgb(220,105,18)" rx="2" ry="2" />
<text  x="193.21" y="255.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.02%)</title><rect x="175.3" y="213" width="0.2" height="15.0" fill="rgb(221,41,23)" rx="2" ry="2" />
<text  x="178.28" y="223.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="207.2" y="149" width="0.3" height="15.0" fill="rgb(213,192,52)" rx="2" ry="2" />
<text  x="210.23" y="159.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (5 samples, 0.11%)</title><rect x="219.5" y="309" width="1.4" height="15.0" fill="rgb(239,140,52)" rx="2" ry="2" />
<text  x="222.54" y="319.5" ></text>
</g>
<g >
<title>reflect.valueInterface (6 samples, 0.13%)</title><rect x="209.6" y="245" width="1.6" height="15.0" fill="rgb(219,78,29)" rx="2" ry="2" />
<text  x="212.59" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).noBody (1 samples, 0.02%)</title><rect x="389.8" y="325" width="0.3" height="15.0" fill="rgb(218,102,11)" rx="2" ry="2" />
<text  x="392.80" y="335.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="748.4" y="357" width="0.2" height="15.0" fill="rgb(223,165,13)" rx="2" ry="2" />
<text  x="751.38" y="367.5" ></text>
</g>
<g >
<title>runtime.semasleep (33 samples, 0.73%)</title><rect x="426.5" y="341" width="8.6" height="15.0" fill="rgb(237,167,15)" rx="2" ry="2" />
<text  x="429.47" y="351.5" ></text>
</g>
<g >
<title>runtime.nilinterequal (1 samples, 0.02%)</title><rect x="207.8" y="229" width="0.2" height="15.0" fill="rgb(253,155,46)" rx="2" ry="2" />
<text  x="210.76" y="239.5" ></text>
</g>
<g >
<title>runtime.injectglist (21 samples, 0.47%)</title><rect x="742.9" y="373" width="5.5" height="15.0" fill="rgb(234,101,38)" rx="2" ry="2" />
<text  x="745.88" y="383.5" ></text>
</g>
<g >
<title>runtime.notewakeup (4 samples, 0.09%)</title><rect x="1185.8" y="373" width="1.1" height="15.0" fill="rgb(230,227,34)" rx="2" ry="2" />
<text  x="1188.81" y="383.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="395.6" y="277" width="0.2" height="15.0" fill="rgb(236,108,17)" rx="2" ry="2" />
<text  x="398.56" y="287.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="187.3" y="277" width="0.3" height="15.0" fill="rgb(219,22,50)" rx="2" ry="2" />
<text  x="190.33" y="287.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (24 samples, 0.53%)</title><rect x="175.8" y="261" width="6.3" height="15.0" fill="rgb(222,141,47)" rx="2" ry="2" />
<text  x="178.80" y="271.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (4 samples, 0.09%)</title><rect x="402.4" y="437" width="1.0" height="15.0" fill="rgb(243,123,10)" rx="2" ry="2" />
<text  x="405.37" y="447.5" ></text>
</g>
<g >
<title>runtime.semawakeup (19 samples, 0.42%)</title><rect x="743.1" y="325" width="5.0" height="15.0" fill="rgb(238,204,36)" rx="2" ry="2" />
<text  x="746.15" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Response).AppendBody (1 samples, 0.02%)</title><rect x="185.0" y="325" width="0.2" height="15.0" fill="rgb(227,228,30)" rx="2" ry="2" />
<text  x="187.97" y="335.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="742.4" y="405" width="0.2" height="15.0" fill="rgb(224,54,6)" rx="2" ry="2" />
<text  x="745.36" y="415.5" ></text>
</g>
<g >
<title>runtime.memmove (7 samples, 0.16%)</title><rect x="399.5" y="293" width="1.8" height="15.0" fill="rgb(212,206,39)" rx="2" ry="2" />
<text  x="402.49" y="303.5" ></text>
</g>
<g >
<title>bytes.IndexByte (2 samples, 0.04%)</title><rect x="390.1" y="293" width="0.5" height="15.0" fill="rgb(238,214,7)" rx="2" ry="2" />
<text  x="393.06" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (4 samples, 0.09%)</title><rect x="219.8" y="293" width="1.1" height="15.0" fill="rgb(208,11,34)" rx="2" ry="2" />
<text  x="222.81" y="303.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Kind (1 samples, 0.02%)</title><rect x="211.2" y="245" width="0.2" height="15.0" fill="rgb(232,25,48)" rx="2" ry="2" />
<text  x="214.16" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.02%)</title><rect x="196.8" y="197" width="0.2" height="15.0" fill="rgb(232,76,53)" rx="2" ry="2" />
<text  x="199.76" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mSpanList).remove (1 samples, 0.02%)</title><rect x="786.4" y="293" width="0.2" height="15.0" fill="rgb(233,63,44)" rx="2" ry="2" />
<text  x="789.36" y="303.5" ></text>
</g>
<g >
<title>runtime.usleep (29 samples, 0.64%)</title><rect x="812.8" y="389" width="7.6" height="15.0" fill="rgb(223,25,37)" rx="2" ry="2" />
<text  x="815.82" y="399.5" ></text>
</g>
<g >
<title>runtime.callers (1 samples, 0.02%)</title><rect x="205.1" y="165" width="0.3" height="15.0" fill="rgb(242,124,8)" rx="2" ry="2" />
<text  x="208.14" y="175.5" ></text>
</g>
<g >
<title>runtime.park_m (227 samples, 5.04%)</title><rect x="742.6" y="421" width="59.5" height="15.0" fill="rgb(250,172,11)" rx="2" ry="2" />
<text  x="745.62" y="431.5" >runtim..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (5 samples, 0.11%)</title><rect x="194.4" y="213" width="1.3" height="15.0" fill="rgb(226,115,54)" rx="2" ry="2" />
<text  x="197.40" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (25 samples, 0.55%)</title><rect x="1179.0" y="325" width="6.5" height="15.0" fill="rgb(207,99,14)" rx="2" ry="2" />
<text  x="1182.00" y="335.5" ></text>
</g>
<g >
<title>runtime.deferproc (2 samples, 0.04%)</title><rect x="12.6" y="325" width="0.5" height="15.0" fill="rgb(231,226,4)" rx="2" ry="2" />
<text  x="15.62" y="335.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (7 samples, 0.16%)</title><rect x="1187.4" y="405" width="1.8" height="15.0" fill="rgb(249,167,43)" rx="2" ry="2" />
<text  x="1190.38" y="415.5" ></text>
</g>
<g >
<title>runtime.schedule (100 samples, 2.22%)</title><rect x="409.4" y="405" width="26.2" height="15.0" fill="rgb(243,135,5)" rx="2" ry="2" />
<text  x="412.45" y="415.5" >r..</text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.02%)</title><rect x="1189.2" y="357" width="0.3" height="15.0" fill="rgb(237,195,17)" rx="2" ry="2" />
<text  x="1192.21" y="367.5" ></text>
</g>
<g >
<title>runtime.osyield (5 samples, 0.11%)</title><rect x="408.1" y="389" width="1.3" height="15.0" fill="rgb(246,202,47)" rx="2" ry="2" />
<text  x="411.14" y="399.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (8 samples, 0.18%)</title><rect x="404.5" y="357" width="2.1" height="15.0" fill="rgb(253,70,35)" rx="2" ry="2" />
<text  x="407.47" y="367.5" ></text>
</g>
<g >
<title>sync.(*Pool).Put (4 samples, 0.09%)</title><rect x="395.3" y="373" width="1.0" height="15.0" fill="rgb(214,229,28)" rx="2" ry="2" />
<text  x="398.30" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*workerPool).workerFunc (1,496 samples, 33.21%)</title><rect x="10.0" y="421" width="391.8" height="15.0" fill="rgb(245,52,5)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >github.com/valyala/fasthttp.(*workerPool).workerFunc</text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="1186.9" y="373" width="0.2" height="15.0" fill="rgb(254,67,13)" rx="2" ry="2" />
<text  x="1189.86" y="383.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (6 samples, 0.13%)</title><rect x="214.0" y="213" width="1.6" height="15.0" fill="rgb(244,190,14)" rx="2" ry="2" />
<text  x="217.04" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (3 samples, 0.07%)</title><rect x="207.5" y="277" width="0.8" height="15.0" fill="rgb(218,8,35)" rx="2" ry="2" />
<text  x="210.50" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="435.1" y="357" width="0.3" height="15.0" fill="rgb(220,133,53)" rx="2" ry="2" />
<text  x="438.11" y="367.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.04%)</title><rect x="412.9" y="341" width="0.5" height="15.0" fill="rgb(220,53,20)" rx="2" ry="2" />
<text  x="415.85" y="351.5" ></text>
</g>
<g >
<title>net.(*conn).Read (631 samples, 14.01%)</title><rect x="224.5" y="309" width="165.3" height="15.0" fill="rgb(232,110,32)" rx="2" ry="2" />
<text  x="227.52" y="319.5" >net.(*conn).Read</text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.04%)</title><rect x="220.1" y="277" width="0.5" height="15.0" fill="rgb(224,202,3)" rx="2" ry="2" />
<text  x="223.07" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="1185.5" y="341" width="0.3" height="15.0" fill="rgb(253,107,14)" rx="2" ry="2" />
<text  x="1188.55" y="351.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="220.3" y="133" width="0.3" height="15.0" fill="rgb(243,107,51)" rx="2" ry="2" />
<text  x="223.33" y="143.5" ></text>
</g>
<g >
<title>runtime.netpollready (1 samples, 0.02%)</title><rect x="786.1" y="357" width="0.3" height="15.0" fill="rgb(233,179,51)" rx="2" ry="2" />
<text  x="789.10" y="367.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Size (1 samples, 0.02%)</title><rect x="196.0" y="261" width="0.2" height="15.0" fill="rgb(224,21,3)" rx="2" ry="2" />
<text  x="198.97" y="271.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (1 samples, 0.02%)</title><rect x="205.1" y="181" width="0.3" height="15.0" fill="rgb(239,164,35)" rx="2" ry="2" />
<text  x="208.14" y="191.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (1 samples, 0.02%)</title><rect x="1189.5" y="405" width="0.2" height="15.0" fill="rgb(217,70,52)" rx="2" ry="2" />
<text  x="1192.48" y="415.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.04%)</title><rect x="387.4" y="149" width="0.6" height="15.0" fill="rgb(244,142,14)" rx="2" ry="2" />
<text  x="390.44" y="159.5" ></text>
</g>
<g >
<title>runtime.nanotime (16 samples, 0.36%)</title><rect x="748.6" y="373" width="4.2" height="15.0" fill="rgb(252,137,47)" rx="2" ry="2" />
<text  x="751.65" y="383.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="203.6" y="197" width="0.2" height="15.0" fill="rgb(220,144,18)" rx="2" ry="2" />
<text  x="206.57" y="207.5" ></text>
</g>
<g >
<title>runtime.profilealloc (1 samples, 0.02%)</title><rect x="205.1" y="197" width="0.3" height="15.0" fill="rgb(207,106,36)" rx="2" ry="2" />
<text  x="208.14" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (7 samples, 0.16%)</title><rect x="411.0" y="325" width="1.9" height="15.0" fill="rgb(253,78,50)" rx="2" ry="2" />
<text  x="414.02" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).IsGet (1 samples, 0.02%)</title><rect x="391.1" y="293" width="0.3" height="15.0" fill="rgb(231,117,43)" rx="2" ry="2" />
<text  x="394.11" y="303.5" ></text>
</g>
<g >
<title>runtime.pcvalue (2 samples, 0.04%)</title><rect x="405.8" y="229" width="0.5" height="15.0" fill="rgb(234,197,32)" rx="2" ry="2" />
<text  x="408.78" y="239.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="407.3" y="357" width="0.3" height="15.0" fill="rgb(208,141,24)" rx="2" ry="2" />
<text  x="410.35" y="367.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.02%)</title><rect x="215.9" y="245" width="0.2" height="15.0" fill="rgb(233,66,39)" rx="2" ry="2" />
<text  x="218.88" y="255.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="203.0" y="213" width="0.3" height="15.0" fill="rgb(210,156,52)" rx="2" ry="2" />
<text  x="206.04" y="223.5" ></text>
</g>
<g >
<title>runtime.injectglist (7 samples, 0.16%)</title><rect x="411.0" y="373" width="1.9" height="15.0" fill="rgb(239,55,6)" rx="2" ry="2" />
<text  x="414.02" y="383.5" ></text>
</g>
<g >
<title>reflect.Value.Type (4 samples, 0.09%)</title><rect x="205.7" y="261" width="1.0" height="15.0" fill="rgb(232,54,45)" rx="2" ry="2" />
<text  x="208.66" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (6 samples, 0.13%)</title><rect x="185.2" y="261" width="1.6" height="15.0" fill="rgb(234,171,44)" rx="2" ry="2" />
<text  x="188.23" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="204.1" y="149" width="0.3" height="15.0" fill="rgb(252,47,2)" rx="2" ry="2" />
<text  x="207.09" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (1 samples, 0.02%)</title><rect x="187.1" y="197" width="0.2" height="15.0" fill="rgb(232,192,18)" rx="2" ry="2" />
<text  x="190.07" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.04%)</title><rect x="387.4" y="117" width="0.6" height="15.0" fill="rgb(210,170,53)" rx="2" ry="2" />
<text  x="390.44" y="127.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.02%)</title><rect x="395.8" y="325" width="0.3" height="15.0" fill="rgb(252,160,3)" rx="2" ry="2" />
<text  x="398.82" y="335.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="216.4" y="261" width="0.3" height="15.0" fill="rgb(252,98,48)" rx="2" ry="2" />
<text  x="219.40" y="271.5" ></text>
</g>
<g >
<title>syscall.Write (442 samples, 9.81%)</title><rect x="66.3" y="325" width="115.8" height="15.0" fill="rgb(235,222,42)" rx="2" ry="2" />
<text  x="69.32" y="335.5" >syscall.Write</text>
</g>
<g >
<title>runtime.deferreturn (203 samples, 4.51%)</title><rect x="13.1" y="325" width="53.2" height="15.0" fill="rgb(236,22,41)" rx="2" ry="2" />
<text  x="16.14" y="335.5" >runti..</text>
</g>
<g >
<title>reflect.flag.mustBe (1 samples, 0.02%)</title><rect x="205.4" y="245" width="0.3" height="15.0" fill="rgb(209,8,44)" rx="2" ry="2" />
<text  x="208.40" y="255.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (2 samples, 0.04%)</title><rect x="208.5" y="229" width="0.6" height="15.0" fill="rgb(239,45,45)" rx="2" ry="2" />
<text  x="211.54" y="239.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="190.5" y="181" width="0.2" height="15.0" fill="rgb(234,211,3)" rx="2" ry="2" />
<text  x="193.47" y="191.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="203.3" y="213" width="0.8" height="15.0" fill="rgb(208,75,18)" rx="2" ry="2" />
<text  x="206.31" y="223.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="748.4" y="341" width="0.2" height="15.0" fill="rgb(244,215,39)" rx="2" ry="2" />
<text  x="751.38" y="351.5" ></text>
</g>
<g >
<title>runtime.mput (1 samples, 0.02%)</title><rect x="436.2" y="389" width="0.2" height="15.0" fill="rgb(214,1,40)" rx="2" ry="2" />
<text  x="439.16" y="399.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="742.9" y="341" width="0.2" height="15.0" fill="rgb(226,108,32)" rx="2" ry="2" />
<text  x="745.88" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (1 samples, 0.02%)</title><rect x="212.7" y="213" width="0.3" height="15.0" fill="rgb(236,23,15)" rx="2" ry="2" />
<text  x="215.73" y="223.5" ></text>
</g>
<g >
<title>runtime._System (2 samples, 0.04%)</title><rect x="401.8" y="437" width="0.6" height="15.0" fill="rgb(239,107,42)" rx="2" ry="2" />
<text  x="404.85" y="447.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="1187.1" y="341" width="0.3" height="15.0" fill="rgb(227,223,35)" rx="2" ry="2" />
<text  x="1190.12" y="351.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.peekArgBytes (2 samples, 0.04%)</title><rect x="222.7" y="357" width="0.5" height="15.0" fill="rgb(229,176,19)" rx="2" ry="2" />
<text  x="225.69" y="367.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="393.5" y="277" width="0.2" height="15.0" fill="rgb(253,183,17)" rx="2" ry="2" />
<text  x="396.47" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce (1 samples, 0.02%)</title><rect x="187.1" y="101" width="0.2" height="15.0" fill="rgb(229,178,22)" rx="2" ry="2" />
<text  x="190.07" y="111.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).IsHead (1 samples, 0.02%)</title><rect x="389.8" y="309" width="0.3" height="15.0" fill="rgb(212,195,10)" rx="2" ry="2" />
<text  x="392.80" y="319.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="190.5" y="293" width="0.2" height="15.0" fill="rgb(238,67,8)" rx="2" ry="2" />
<text  x="193.47" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (1 samples, 0.02%)</title><rect x="188.1" y="245" width="0.3" height="15.0" fill="rgb(241,2,9)" rx="2" ry="2" />
<text  x="191.11" y="255.5" ></text>
</g>
<g >
<title>runtime.concatstring3 (2 samples, 0.04%)</title><rect x="218.8" y="325" width="0.5" height="15.0" fill="rgb(214,105,21)" rx="2" ry="2" />
<text  x="221.76" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (6 samples, 0.13%)</title><rect x="188.9" y="261" width="1.6" height="15.0" fill="rgb(216,27,52)" rx="2" ry="2" />
<text  x="191.90" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.02%)</title><rect x="393.7" y="325" width="0.3" height="15.0" fill="rgb(222,107,5)" rx="2" ry="2" />
<text  x="396.73" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).Path (2 samples, 0.04%)</title><rect x="183.1" y="373" width="0.6" height="15.0" fill="rgb(219,89,27)" rx="2" ry="2" />
<text  x="186.14" y="383.5" ></text>
</g>
<g >
<title>runtime.memhash128 (1 samples, 0.02%)</title><rect x="202.3" y="165" width="0.2" height="15.0" fill="rgb(243,220,47)" rx="2" ry="2" />
<text  x="205.26" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="205.1" y="149" width="0.3" height="15.0" fill="rgb(254,4,4)" rx="2" ry="2" />
<text  x="208.14" y="159.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="207.2" y="181" width="0.3" height="15.0" fill="rgb(223,158,20)" rx="2" ry="2" />
<text  x="210.23" y="191.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.04%)</title><rect x="412.9" y="357" width="0.5" height="15.0" fill="rgb(242,122,21)" rx="2" ry="2" />
<text  x="415.85" y="367.5" ></text>
</g>
<g >
<title>runtime.mstart (1,480 samples, 32.85%)</title><rect x="802.1" y="437" width="387.6" height="15.0" fill="rgb(244,93,45)" rx="2" ry="2" />
<text  x="805.08" y="447.5" >runtime.mstart</text>
</g>
<g >
<title>internal/poll.(*pollDesc).waitRead (1 samples, 0.02%)</title><rect x="224.8" y="261" width="0.2" height="15.0" fill="rgb(238,79,52)" rx="2" ry="2" />
<text  x="227.78" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (17 samples, 0.38%)</title><rect x="208.3" y="277" width="4.4" height="15.0" fill="rgb(238,205,25)" rx="2" ry="2" />
<text  x="211.28" y="287.5" ></text>
</g>
<g >
<title>github.com/buaazp/fasthttprouter.(*Router).Handler (155 samples, 3.44%)</title><rect x="182.1" y="389" width="40.6" height="15.0" fill="rgb(220,191,25)" rx="2" ry="2" />
<text  x="185.09" y="399.5" >git..</text>
</g>
<g >
<title>runtime.semasleep (59 samples, 1.31%)</title><rect x="786.6" y="341" width="15.5" height="15.0" fill="rgb(242,152,29)" rx="2" ry="2" />
<text  x="789.63" y="351.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (1 samples, 0.02%)</title><rect x="220.3" y="101" width="0.3" height="15.0" fill="rgb(221,77,25)" rx="2" ry="2" />
<text  x="223.33" y="111.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (1,277 samples, 28.35%)</title><rect x="408.1" y="421" width="334.5" height="15.0" fill="rgb(238,214,23)" rx="2" ry="2" />
<text  x="411.14" y="431.5" >runtime.exitsyscall0</text>
</g>
<g >
<title>sync.runtime_procPin (1 samples, 0.02%)</title><rect x="396.1" y="341" width="0.2" height="15.0" fill="rgb(224,59,18)" rx="2" ry="2" />
<text  x="399.09" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.02%)</title><rect x="187.1" y="117" width="0.2" height="15.0" fill="rgb(216,139,19)" rx="2" ry="2" />
<text  x="190.07" y="127.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="406.3" y="245" width="0.3" height="15.0" fill="rgb(207,61,48)" rx="2" ry="2" />
<text  x="409.30" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="1186.9" y="341" width="0.2" height="15.0" fill="rgb(253,34,35)" rx="2" ry="2" />
<text  x="1189.86" y="351.5" ></text>
</g>
<g >
<title>net.ipEmptyString (6 samples, 0.13%)</title><rect x="219.3" y="341" width="1.6" height="15.0" fill="rgb(247,61,27)" rx="2" ry="2" />
<text  x="222.28" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.02%)</title><rect x="820.4" y="405" width="0.3" height="15.0" fill="rgb(230,52,18)" rx="2" ry="2" />
<text  x="823.42" y="415.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="192.8" y="277" width="0.3" height="15.0" fill="rgb(224,177,22)" rx="2" ry="2" />
<text  x="195.83" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint64ValueNoZero (1 samples, 0.02%)</title><rect x="188.4" y="245" width="0.2" height="15.0" fill="rgb(211,10,13)" rx="2" ry="2" />
<text  x="191.38" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (33 samples, 0.73%)</title><rect x="426.5" y="325" width="8.6" height="15.0" fill="rgb(234,74,18)" rx="2" ry="2" />
<text  x="429.47" y="335.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="221.9" y="325" width="0.3" height="15.0" fill="rgb(249,121,14)" rx="2" ry="2" />
<text  x="224.90" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.AppendUint (4 samples, 0.09%)</title><rect x="396.9" y="341" width="1.0" height="15.0" fill="rgb(236,132,29)" rx="2" ry="2" />
<text  x="399.87" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (3 samples, 0.07%)</title><rect x="187.9" y="277" width="0.7" height="15.0" fill="rgb(238,110,53)" rx="2" ry="2" />
<text  x="190.85" y="287.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (2 samples, 0.04%)</title><rect x="387.4" y="213" width="0.6" height="15.0" fill="rgb(243,226,40)" rx="2" ry="2" />
<text  x="390.44" y="223.5" ></text>
</g>
<g >
<title>reflect.resolveTypeOff (1 samples, 0.02%)</title><rect x="202.5" y="197" width="0.3" height="15.0" fill="rgb(224,41,16)" rx="2" ry="2" />
<text  x="205.52" y="207.5" ></text>
</g>
<g >
<title>runtime.mcall (1,504 samples, 33.39%)</title><rect x="408.1" y="437" width="394.0" height="15.0" fill="rgb(235,139,19)" rx="2" ry="2" />
<text  x="411.14" y="447.5" >runtime.mcall</text>
</g>
<g >
<title>syscall.syscall (441 samples, 9.79%)</title><rect x="66.6" y="293" width="115.5" height="15.0" fill="rgb(216,50,50)" rx="2" ry="2" />
<text  x="69.58" y="303.5" >syscall.syscall</text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.02%)</title><rect x="1189.5" y="341" width="0.2" height="15.0" fill="rgb(225,12,51)" rx="2" ry="2" />
<text  x="1192.48" y="351.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="393.5" y="325" width="0.2" height="15.0" fill="rgb(232,213,7)" rx="2" ry="2" />
<text  x="396.47" y="335.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (652 samples, 14.47%)</title><rect x="11.3" y="341" width="170.8" height="15.0" fill="rgb(252,112,36)" rx="2" ry="2" />
<text  x="14.31" y="351.5" >internal/poll.(*FD).Wr..</text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.02%)</title><rect x="196.8" y="229" width="0.2" height="15.0" fill="rgb(213,30,44)" rx="2" ry="2" />
<text  x="199.76" y="239.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.02%)</title><rect x="183.4" y="261" width="0.3" height="15.0" fill="rgb(219,75,39)" rx="2" ry="2" />
<text  x="186.40" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.acquireWriter (5 samples, 0.11%)</title><rect x="394.0" y="389" width="1.3" height="15.0" fill="rgb(216,30,48)" rx="2" ry="2" />
<text  x="396.99" y="399.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (39 samples, 0.87%)</title><rect x="197.3" y="277" width="10.2" height="15.0" fill="rgb(225,122,5)" rx="2" ry="2" />
<text  x="200.28" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.appendHeaderLine (7 samples, 0.16%)</title><rect x="399.5" y="309" width="1.8" height="15.0" fill="rgb(248,30,34)" rx="2" ry="2" />
<text  x="402.49" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.02%)</title><rect x="212.7" y="229" width="0.3" height="15.0" fill="rgb(216,197,4)" rx="2" ry="2" />
<text  x="215.73" y="239.5" ></text>
</g>
<g >
<title>runtime.pageIndexOf (1 samples, 0.02%)</title><rect x="407.6" y="341" width="0.3" height="15.0" fill="rgb(236,101,38)" rx="2" ry="2" />
<text  x="410.61" y="351.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="742.6" y="373" width="0.3" height="15.0" fill="rgb(216,105,49)" rx="2" ry="2" />
<text  x="745.62" y="383.5" ></text>
</g>
<g >
<title>runtime.stackmapdata (1 samples, 0.02%)</title><rect x="220.3" y="69" width="0.3" height="15.0" fill="rgb(234,18,25)" rx="2" ry="2" />
<text  x="223.33" y="79.5" ></text>
</g>
<g >
<title>reflect.methodReceiver (1 samples, 0.02%)</title><rect x="202.5" y="229" width="0.3" height="15.0" fill="rgb(235,144,40)" rx="2" ry="2" />
<text  x="205.52" y="239.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).closeBodyStream (1 samples, 0.02%)</title><rect x="223.2" y="341" width="0.3" height="15.0" fill="rgb(237,60,23)" rx="2" ry="2" />
<text  x="226.21" y="351.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareWrite (3 samples, 0.07%)</title><rect x="11.8" y="325" width="0.8" height="15.0" fill="rgb(229,199,14)" rx="2" ry="2" />
<text  x="14.83" y="335.5" ></text>
</g>
<g >
<title>runtime.scang (8 samples, 0.18%)</title><rect x="404.5" y="341" width="2.1" height="15.0" fill="rgb(230,137,23)" rx="2" ry="2" />
<text  x="407.47" y="351.5" ></text>
</g>
<g >
<title>syscall.Read (433 samples, 9.61%)</title><rect x="276.4" y="261" width="113.4" height="15.0" fill="rgb(227,50,27)" rx="2" ry="2" />
<text  x="279.38" y="271.5" >syscall.Read</text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.02%)</title><rect x="220.3" y="197" width="0.3" height="15.0" fill="rgb(253,129,25)" rx="2" ry="2" />
<text  x="223.33" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (4 samples, 0.09%)</title><rect x="191.8" y="261" width="1.0" height="15.0" fill="rgb(224,91,12)" rx="2" ry="2" />
<text  x="194.78" y="271.5" ></text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.02%)</title><rect x="435.4" y="389" width="0.2" height="15.0" fill="rgb(226,44,19)" rx="2" ry="2" />
<text  x="438.38" y="399.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithRequest).XXX_Unmarshal (1 samples, 0.02%)</title><rect x="212.7" y="245" width="0.3" height="15.0" fill="rgb(254,10,17)" rx="2" ry="2" />
<text  x="215.73" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (15 samples, 0.33%)</title><rect x="193.1" y="293" width="3.9" height="15.0" fill="rgb(208,218,47)" rx="2" ry="2" />
<text  x="196.09" y="303.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeLock (1 samples, 0.02%)</title><rect x="11.6" y="325" width="0.2" height="15.0" fill="rgb(210,131,4)" rx="2" ry="2" />
<text  x="14.57" y="335.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.02%)</title><rect x="183.4" y="277" width="0.3" height="15.0" fill="rgb(235,115,28)" rx="2" ry="2" />
<text  x="186.40" y="287.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="209.3" y="229" width="0.3" height="15.0" fill="rgb(226,56,24)" rx="2" ry="2" />
<text  x="212.33" y="239.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="203.8" y="197" width="0.3" height="15.0" fill="rgb(229,110,27)" rx="2" ry="2" />
<text  x="206.83" y="207.5" ></text>
</g>
<g >
<title>runtime.duffcopy (1 samples, 0.02%)</title><rect x="190.7" y="309" width="0.3" height="15.0" fill="rgb(212,151,50)" rx="2" ry="2" />
<text  x="193.73" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.02%)</title><rect x="203.3" y="165" width="0.3" height="15.0" fill="rgb(235,148,30)" rx="2" ry="2" />
<text  x="206.31" y="175.5" ></text>
</g>
<g >
<title>runtime.convTstring (4 samples, 0.09%)</title><rect x="221.1" y="357" width="1.1" height="15.0" fill="rgb(236,71,44)" rx="2" ry="2" />
<text  x="224.12" y="367.5" ></text>
</g>
<g >
<title>indexbytebody (2 samples, 0.04%)</title><rect x="390.1" y="277" width="0.5" height="15.0" fill="rgb(209,53,4)" rx="2" ry="2" />
<text  x="393.06" y="287.5" ></text>
</g>
<g >
<title>runtime.memmove (4 samples, 0.09%)</title><rect x="398.4" y="325" width="1.1" height="15.0" fill="rgb(217,167,25)" rx="2" ry="2" />
<text  x="401.44" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.02%)</title><rect x="196.8" y="245" width="0.2" height="15.0" fill="rgb(245,182,18)" rx="2" ry="2" />
<text  x="199.76" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (6 samples, 0.13%)</title><rect x="1185.5" y="405" width="1.6" height="15.0" fill="rgb(245,24,12)" rx="2" ry="2" />
<text  x="1188.55" y="415.5" ></text>
</g>
<g >
<title>runtime.systemstack (16 samples, 0.36%)</title><rect x="403.9" y="421" width="4.2" height="15.0" fill="rgb(237,139,2)" rx="2" ry="2" />
<text  x="406.94" y="431.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="395.6" y="261" width="0.2" height="15.0" fill="rgb(246,55,16)" rx="2" ry="2" />
<text  x="398.56" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).URI (2 samples, 0.04%)</title><rect x="183.1" y="357" width="0.6" height="15.0" fill="rgb(207,152,9)" rx="2" ry="2" />
<text  x="186.14" y="367.5" ></text>
</g>
<g >
<title>runtime.save (1 samples, 0.02%)</title><rect x="174.5" y="261" width="0.3" height="15.0" fill="rgb(207,172,10)" rx="2" ry="2" />
<text  x="177.49" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUTF8StringValue (2 samples, 0.04%)</title><rect x="192.3" y="213" width="0.5" height="15.0" fill="rgb(214,6,53)" rx="2" ry="2" />
<text  x="195.30" y="223.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="196.8" y="165" width="0.2" height="15.0" fill="rgb(213,147,52)" rx="2" ry="2" />
<text  x="199.76" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (5 samples, 0.11%)</title><rect x="811.5" y="357" width="1.3" height="15.0" fill="rgb(221,176,48)" rx="2" ry="2" />
<text  x="814.51" y="367.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.02%)</title><rect x="410.0" y="389" width="0.2" height="15.0" fill="rgb(221,187,11)" rx="2" ry="2" />
<text  x="412.97" y="399.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (2 samples, 0.04%)</title><rect x="413.4" y="341" width="0.5" height="15.0" fill="rgb(244,78,2)" rx="2" ry="2" />
<text  x="416.37" y="351.5" ></text>
</g>
<g >
<title>reflect.(*rtype).typeOff (1 samples, 0.02%)</title><rect x="202.5" y="213" width="0.3" height="15.0" fill="rgb(220,147,19)" rx="2" ry="2" />
<text  x="205.52" y="223.5" ></text>
</g>
<g >
<title>net.uitoa (1 samples, 0.02%)</title><rect x="220.9" y="325" width="0.2" height="15.0" fill="rgb(221,150,35)" rx="2" ry="2" />
<text  x="223.85" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="190.5" y="229" width="0.2" height="15.0" fill="rgb(242,117,17)" rx="2" ry="2" />
<text  x="193.47" y="239.5" ></text>
</g>
<g >
<title>runtime.markroot (8 samples, 0.18%)</title><rect x="404.5" y="373" width="2.1" height="15.0" fill="rgb(207,38,13)" rx="2" ry="2" />
<text  x="407.47" y="383.5" ></text>
</g>
<g >
<title>runtime.(*_type).typeOff (3 samples, 0.07%)</title><rect x="211.9" y="213" width="0.8" height="15.0" fill="rgb(244,134,47)" rx="2" ry="2" />
<text  x="214.95" y="223.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (16 samples, 0.36%)</title><rect x="403.9" y="437" width="4.2" height="15.0" fill="rgb(216,21,6)" rx="2" ry="2" />
<text  x="406.94" y="447.5" ></text>
</g>
<g >
<title>reflect.Value.Type (6 samples, 0.13%)</title><rect x="211.2" y="261" width="1.5" height="15.0" fill="rgb(229,23,13)" rx="2" ry="2" />
<text  x="214.16" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (5 samples, 0.11%)</title><rect x="191.8" y="293" width="1.3" height="15.0" fill="rgb(244,52,8)" rx="2" ry="2" />
<text  x="194.78" y="303.5" ></text>
</g>
<g >
<title>net.IP.String (6 samples, 0.13%)</title><rect x="219.3" y="325" width="1.6" height="15.0" fill="rgb(254,197,12)" rx="2" ry="2" />
<text  x="222.28" y="335.5" ></text>
</g>
<g >
<title>runtime.findrunnable (226 samples, 5.02%)</title><rect x="742.9" y="389" width="59.2" height="15.0" fill="rgb(217,163,27)" rx="2" ry="2" />
<text  x="745.88" y="399.5" >runtim..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (59 samples, 1.31%)</title><rect x="786.6" y="325" width="15.5" height="15.0" fill="rgb(214,181,24)" rx="2" ry="2" />
<text  x="789.63" y="335.5" ></text>
</g>
<g >
<title>runtime.gcWriteBarrier (1 samples, 0.02%)</title><rect x="391.4" y="293" width="0.2" height="15.0" fill="rgb(238,196,4)" rx="2" ry="2" />
<text  x="394.37" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (19 samples, 0.42%)</title><rect x="743.1" y="357" width="5.0" height="15.0" fill="rgb(212,136,35)" rx="2" ry="2" />
<text  x="746.15" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="393.5" y="341" width="0.2" height="15.0" fill="rgb(246,89,0)" rx="2" ry="2" />
<text  x="396.47" y="351.5" ></text>
</g>
<g >
<title>runtime.handoffp (2 samples, 0.04%)</title><rect x="175.0" y="229" width="0.5" height="15.0" fill="rgb(216,160,6)" rx="2" ry="2" />
<text  x="178.02" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (6 samples, 0.13%)</title><rect x="1185.5" y="389" width="1.6" height="15.0" fill="rgb(252,113,41)" rx="2" ry="2" />
<text  x="1188.55" y="399.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollReset (3 samples, 0.07%)</title><rect x="11.8" y="293" width="0.8" height="15.0" fill="rgb(234,4,27)" rx="2" ry="2" />
<text  x="14.83" y="303.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="748.4" y="373" width="0.2" height="15.0" fill="rgb(205,16,37)" rx="2" ry="2" />
<text  x="751.38" y="383.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).IsGet (1 samples, 0.02%)</title><rect x="391.9" y="373" width="0.3" height="15.0" fill="rgb(214,173,17)" rx="2" ry="2" />
<text  x="394.90" y="383.5" ></text>
</g>
</g>
</svg>

