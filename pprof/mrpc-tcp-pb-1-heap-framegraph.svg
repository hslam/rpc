<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>runtime.pthread_cond_signal (64 samples, 2.51%)</title><rect x="988.8" y="149" width="29.6" height="15.0" fill="rgb(243,141,39)" rx="2" ry="2" />
<text  x="991.78" y="159.5" >ru..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (593 samples, 23.25%)</title><rect x="445.3" y="133" width="274.3" height="15.0" fill="rgb(231,2,46)" rx="2" ry="2" />
<text  x="448.27" y="143.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.04%)</title><rect x="206.1" y="133" width="0.5" height="15.0" fill="rgb(236,12,48)" rx="2" ry="2" />
<text  x="209.13" y="143.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.08%)</title><rect x="203.4" y="197" width="0.9" height="15.0" fill="rgb(205,165,35)" rx="2" ry="2" />
<text  x="206.35" y="207.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (362 samples, 14.19%)</title><rect x="1021.2" y="213" width="167.4" height="15.0" fill="rgb(246,18,31)" rx="2" ry="2" />
<text  x="1024.16" y="223.5" >runtime.goready.func1</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (3 samples, 0.12%)</title><rect x="23.9" y="133" width="1.4" height="15.0" fill="rgb(229,55,3)" rx="2" ry="2" />
<text  x="26.88" y="143.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.04%)</title><rect x="56.3" y="165" width="0.4" height="15.0" fill="rgb(225,227,41)" rx="2" ry="2" />
<text  x="59.26" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (4 samples, 0.16%)</title><rect x="26.7" y="165" width="1.8" height="15.0" fill="rgb(226,115,38)" rx="2" ry="2" />
<text  x="29.65" y="175.5" ></text>
</g>
<g >
<title>runtime.handoffp (1 samples, 0.04%)</title><rect x="178.4" y="85" width="0.4" height="15.0" fill="rgb(216,165,43)" rx="2" ry="2" />
<text  x="181.37" y="95.5" ></text>
</g>
<g >
<title>runtime.chansend1 (5 samples, 0.20%)</title><rect x="26.2" y="229" width="2.3" height="15.0" fill="rgb(233,76,24)" rx="2" ry="2" />
<text  x="29.19" y="239.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (2 samples, 0.08%)</title><rect x="16.0" y="149" width="0.9" height="15.0" fill="rgb(245,105,11)" rx="2" ry="2" />
<text  x="19.01" y="159.5" ></text>
</g>
<g >
<title>runtime.sysmon (422 samples, 16.54%)</title><rect x="737.6" y="213" width="195.2" height="15.0" fill="rgb(244,181,45)" rx="2" ry="2" />
<text  x="740.61" y="223.5" >runtime.sysmon</text>
</g>
<g >
<title>runtime.semasleep (598 samples, 23.44%)</title><rect x="444.3" y="149" width="276.7" height="15.0" fill="rgb(206,185,4)" rx="2" ry="2" />
<text  x="447.35" y="159.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.(*_type).typeOff (2 samples, 0.08%)</title><rect x="22.0" y="101" width="1.0" height="15.0" fill="rgb(224,198,42)" rx="2" ry="2" />
<text  x="25.03" y="111.5" ></text>
</g>
<g >
<title>syscall.syscall (114 samples, 4.47%)</title><rect x="56.7" y="149" width="52.8" height="15.0" fill="rgb(242,225,12)" rx="2" ry="2" />
<text  x="59.72" y="159.5" >sysca..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.04%)</title><rect x="14.6" y="149" width="0.5" height="15.0" fill="rgb(226,194,48)" rx="2" ry="2" />
<text  x="17.63" y="159.5" ></text>
</g>
<g >
<title>reflect.funcLayout (1 samples, 0.04%)</title><rect x="18.8" y="117" width="0.5" height="15.0" fill="rgb(251,62,37)" rx="2" ry="2" />
<text  x="21.79" y="127.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (17 samples, 0.67%)</title><rect x="17.4" y="181" width="7.9" height="15.0" fill="rgb(232,35,44)" rx="2" ry="2" />
<text  x="20.40" y="191.5" ></text>
</g>
<g >
<title>net.(*conn).Write (200 samples, 7.84%)</title><rect x="110.8" y="229" width="92.6" height="15.0" fill="rgb(217,147,25)" rx="2" ry="2" />
<text  x="113.84" y="239.5" >net.(*conn)..</text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (121 samples, 4.74%)</title><rect x="835.2" y="149" width="56.0" height="15.0" fill="rgb(250,94,41)" rx="2" ry="2" />
<text  x="838.21" y="159.5" >runti..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WriteStream (204 samples, 8.00%)</title><rect x="109.9" y="245" width="94.4" height="15.0" fill="rgb(216,205,33)" rx="2" ry="2" />
<text  x="112.91" y="255.5" >hslam.com/m..</text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="1189.1" y="197" width="0.4" height="15.0" fill="rgb(217,147,23)" rx="2" ry="2" />
<text  x="1192.07" y="207.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profileBuilder).addCPUData (1 samples, 0.04%)</title><rect x="1189.5" y="229" width="0.5" height="15.0" fill="rgb(214,47,48)" rx="2" ry="2" />
<text  x="1192.54" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (2 samples, 0.08%)</title><rect x="16.0" y="117" width="0.9" height="15.0" fill="rgb(209,113,50)" rx="2" ry="2" />
<text  x="19.01" y="127.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (70 samples, 2.74%)</title><rect x="988.8" y="213" width="32.4" height="15.0" fill="rgb(207,129,31)" rx="2" ry="2" />
<text  x="991.78" y="223.5" >ru..</text>
</g>
<g >
<title>reflect.(*rtype).typeOff (2 samples, 0.08%)</title><rect x="22.0" y="133" width="1.0" height="15.0" fill="rgb(236,69,51)" rx="2" ry="2" />
<text  x="25.03" y="143.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_fast64 (1 samples, 0.04%)</title><rect x="1189.5" y="197" width="0.5" height="15.0" fill="rgb(246,143,9)" rx="2" ry="2" />
<text  x="1192.54" y="207.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.04%)</title><rect x="12.8" y="85" width="0.4" height="15.0" fill="rgb(232,151,47)" rx="2" ry="2" />
<text  x="15.78" y="95.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeue (1 samples, 0.04%)</title><rect x="54.9" y="181" width="0.4" height="15.0" fill="rgb(248,159,39)" rx="2" ry="2" />
<text  x="57.87" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.04%)</title><rect x="14.2" y="165" width="0.4" height="15.0" fill="rgb(214,65,7)" rx="2" ry="2" />
<text  x="17.16" y="175.5" ></text>
</g>
<g >
<title>runtime.ready (4 samples, 0.16%)</title><rect x="26.7" y="133" width="1.8" height="15.0" fill="rgb(250,131,33)" rx="2" ry="2" />
<text  x="29.65" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (29 samples, 1.14%)</title><rect x="721.0" y="117" width="13.4" height="15.0" fill="rgb(239,161,20)" rx="2" ry="2" />
<text  x="723.96" y="127.5" ></text>
</g>
<g >
<title>runtime.chansend (5 samples, 0.20%)</title><rect x="26.2" y="213" width="2.3" height="15.0" fill="rgb(214,92,5)" rx="2" ry="2" />
<text  x="29.19" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="19.3" y="85" width="0.4" height="15.0" fill="rgb(229,172,31)" rx="2" ry="2" />
<text  x="22.25" y="95.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (6 samples, 0.24%)</title><rect x="734.8" y="117" width="2.8" height="15.0" fill="rgb(216,90,34)" rx="2" ry="2" />
<text  x="737.84" y="127.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).Reset (1 samples, 0.04%)</title><rect x="10.5" y="181" width="0.4" height="15.0" fill="rgb(232,153,27)" rx="2" ry="2" />
<text  x="13.46" y="191.5" ></text>
</g>
<g >
<title>reflect.Value.Type (1 samples, 0.04%)</title><rect x="17.9" y="117" width="0.4" height="15.0" fill="rgb(254,147,6)" rx="2" ry="2" />
<text  x="20.86" y="127.5" ></text>
</g>
<g >
<title>runtime.runqsteal (44 samples, 1.72%)</title><rect x="421.7" y="181" width="20.3" height="15.0" fill="rgb(247,96,34)" rx="2" ry="2" />
<text  x="424.68" y="191.5" ></text>
</g>
<g >
<title>runtime.usleep (4 samples, 0.16%)</title><rect x="213.5" y="149" width="1.9" height="15.0" fill="rgb(242,173,12)" rx="2" ry="2" />
<text  x="216.53" y="159.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.04%)</title><rect x="208.9" y="181" width="0.5" height="15.0" fill="rgb(231,108,40)" rx="2" ry="2" />
<text  x="211.90" y="191.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.04%)</title><rect x="16.9" y="117" width="0.5" height="15.0" fill="rgb(233,122,24)" rx="2" ry="2" />
<text  x="19.94" y="127.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeTCPConn (90 samples, 3.53%)</title><rect x="10.0" y="245" width="41.6" height="15.0" fill="rgb(205,1,6)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >hsl..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (355 samples, 13.92%)</title><rect x="1021.2" y="117" width="164.2" height="15.0" fill="rgb(254,151,44)" rx="2" ry="2" />
<text  x="1024.16" y="127.5" >runtime.pthread_cond_..</text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.04%)</title><rect x="25.7" y="213" width="0.5" height="15.0" fill="rgb(244,192,39)" rx="2" ry="2" />
<text  x="28.73" y="223.5" ></text>
</g>
<g >
<title>runtime.selectgo (50 samples, 1.96%)</title><rect x="28.5" y="229" width="23.1" height="15.0" fill="rgb(216,197,39)" rx="2" ry="2" />
<text  x="31.50" y="239.5" >r..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (21 samples, 0.82%)</title><rect x="15.6" y="197" width="9.7" height="15.0" fill="rgb(226,64,24)" rx="2" ry="2" />
<text  x="18.55" y="207.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (121 samples, 4.74%)</title><rect x="932.8" y="213" width="56.0" height="15.0" fill="rgb(217,48,14)" rx="2" ry="2" />
<text  x="935.81" y="223.5" >runti..</text>
</g>
<g >
<title>runtime.nanotime (87 samples, 3.41%)</title><rect x="216.3" y="181" width="40.2" height="15.0" fill="rgb(209,150,27)" rx="2" ry="2" />
<text  x="219.30" y="191.5" >run..</text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1018.4" y="149" width="0.5" height="15.0" fill="rgb(208,219,7)" rx="2" ry="2" />
<text  x="1021.39" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (362 samples, 14.19%)</title><rect x="1021.2" y="133" width="167.4" height="15.0" fill="rgb(233,74,33)" rx="2" ry="2" />
<text  x="1024.16" y="143.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.growslice (2 samples, 0.08%)</title><rect x="12.3" y="117" width="0.9" height="15.0" fill="rgb(225,124,51)" rx="2" ry="2" />
<text  x="15.31" y="127.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1 samples, 0.04%)</title><rect x="106.2" y="101" width="0.5" height="15.0" fill="rgb(224,72,26)" rx="2" ry="2" />
<text  x="109.21" y="111.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1,106 samples, 43.36%)</title><rect x="209.4" y="197" width="511.6" height="15.0" fill="rgb(247,77,50)" rx="2" ry="2" />
<text  x="212.36" y="207.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.osyield (4 samples, 0.16%)</title><rect x="213.5" y="165" width="1.9" height="15.0" fill="rgb(240,45,43)" rx="2" ry="2" />
<text  x="216.53" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (2 samples, 0.08%)</title><rect x="14.6" y="165" width="1.0" height="15.0" fill="rgb(218,13,21)" rx="2" ry="2" />
<text  x="17.63" y="175.5" ></text>
</g>
<g >
<title>runtime.notewakeup (70 samples, 2.74%)</title><rect x="988.8" y="181" width="32.4" height="15.0" fill="rgb(231,37,47)" rx="2" ry="2" />
<text  x="991.78" y="191.5" >ru..</text>
</g>
<g >
<title>runtime.usleep (41 samples, 1.61%)</title><rect x="423.1" y="149" width="18.9" height="15.0" fill="rgb(230,190,5)" rx="2" ry="2" />
<text  x="426.07" y="159.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.04%)</title><rect x="739.9" y="181" width="0.5" height="15.0" fill="rgb(242,81,14)" rx="2" ry="2" />
<text  x="742.93" y="191.5" ></text>
</g>
<g >
<title>runtime.syscall (1 samples, 0.04%)</title><rect x="1188.6" y="245" width="0.5" height="15.0" fill="rgb(206,131,26)" rx="2" ry="2" />
<text  x="1191.61" y="255.5" ></text>
</g>
<g >
<title>runtime.nanotime (120 samples, 4.70%)</title><rect x="740.4" y="197" width="55.5" height="15.0" fill="rgb(224,65,26)" rx="2" ry="2" />
<text  x="743.39" y="207.5" >runti..</text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.04%)</title><rect x="18.8" y="85" width="0.5" height="15.0" fill="rgb(207,40,14)" rx="2" ry="2" />
<text  x="21.79" y="95.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (126 samples, 4.94%)</title><rect x="833.4" y="181" width="58.2" height="15.0" fill="rgb(249,130,21)" rx="2" ry="2" />
<text  x="836.36" y="191.5" >runtim..</text>
</g>
<g >
<title>runtime.freedefer (8 samples, 0.31%)</title><rect x="110.8" y="165" width="3.7" height="15.0" fill="rgb(225,120,47)" rx="2" ry="2" />
<text  x="113.84" y="175.5" ></text>
</g>
<g >
<title>syscall.Write (192 samples, 7.53%)</title><rect x="114.5" y="181" width="88.9" height="15.0" fill="rgb(245,71,28)" rx="2" ry="2" />
<text  x="117.54" y="191.5" >syscall.Wr..</text>
</g>
<g >
<title>runtime.gorecover (1 samples, 0.04%)</title><rect x="25.3" y="197" width="0.4" height="15.0" fill="rgb(210,93,38)" rx="2" ry="2" />
<text  x="28.26" y="207.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="18.8" y="101" width="0.5" height="15.0" fill="rgb(219,41,32)" rx="2" ry="2" />
<text  x="21.79" y="111.5" ></text>
</g>
<g >
<title>runtime.chansend1 (2 samples, 0.08%)</title><rect x="54.9" y="213" width="0.9" height="15.0" fill="rgb(246,104,0)" rx="2" ry="2" />
<text  x="57.87" y="223.5" ></text>
</g>
<g >
<title>runtime.wakep (2 samples, 0.08%)</title><rect x="27.6" y="117" width="0.9" height="15.0" fill="rgb(214,150,51)" rx="2" ry="2" />
<text  x="30.58" y="127.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_fast32 (1 samples, 0.04%)</title><rect x="22.5" y="69" width="0.5" height="15.0" fill="rgb(224,182,51)" rx="2" ry="2" />
<text  x="25.49" y="79.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.08%)</title><rect x="13.2" y="181" width="1.0" height="15.0" fill="rgb(241,149,25)" rx="2" ry="2" />
<text  x="16.24" y="191.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.04%)</title><rect x="206.1" y="229" width="0.5" height="15.0" fill="rgb(222,150,30)" rx="2" ry="2" />
<text  x="209.13" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.04%)</title><rect x="23.4" y="117" width="0.5" height="15.0" fill="rgb(251,173,49)" rx="2" ry="2" />
<text  x="26.41" y="127.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Size (2 samples, 0.08%)</title><rect x="14.6" y="181" width="1.0" height="15.0" fill="rgb(245,85,34)" rx="2" ry="2" />
<text  x="17.63" y="191.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (200 samples, 7.84%)</title><rect x="110.8" y="197" width="92.6" height="15.0" fill="rgb(220,42,49)" rx="2" ry="2" />
<text  x="113.84" y="207.5" >internal/po..</text>
</g>
<g >
<title>net.(*netFD).Write (200 samples, 7.84%)</title><rect x="110.8" y="213" width="92.6" height="15.0" fill="rgb(224,49,15)" rx="2" ry="2" />
<text  x="113.84" y="223.5" >net.(*netFD..</text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="109.5" y="229" width="0.4" height="15.0" fill="rgb(213,206,7)" rx="2" ry="2" />
<text  x="112.45" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (5 samples, 0.20%)</title><rect x="10.9" y="149" width="2.3" height="15.0" fill="rgb(218,229,44)" rx="2" ry="2" />
<text  x="13.93" y="159.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.04%)</title><rect x="16.9" y="149" width="0.5" height="15.0" fill="rgb(228,138,30)" rx="2" ry="2" />
<text  x="19.94" y="159.5" ></text>
</g>
<g >
<title>runtime.mstart1 (422 samples, 16.54%)</title><rect x="737.6" y="229" width="195.2" height="15.0" fill="rgb(216,206,28)" rx="2" ry="2" />
<text  x="740.61" y="239.5" >runtime.mstart1</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (6 samples, 0.24%)</title><rect x="10.5" y="197" width="2.7" height="15.0" fill="rgb(220,79,10)" rx="2" ry="2" />
<text  x="13.46" y="207.5" ></text>
</g>
<g >
<title>runtime.procresize (1 samples, 0.04%)</title><rect x="206.1" y="149" width="0.5" height="15.0" fill="rgb(224,89,42)" rx="2" ry="2" />
<text  x="209.13" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (70 samples, 2.74%)</title><rect x="988.8" y="165" width="32.4" height="15.0" fill="rgb(217,148,28)" rx="2" ry="2" />
<text  x="991.78" y="175.5" >ru..</text>
</g>
<g >
<title>runtime.exitsyscallfast (6 samples, 0.24%)</title><rect x="106.7" y="117" width="2.8" height="15.0" fill="rgb(210,93,49)" rx="2" ry="2" />
<text  x="109.68" y="127.5" ></text>
</g>
<g >
<title>runtime.wakep (36 samples, 1.41%)</title><rect x="721.0" y="181" width="16.6" height="15.0" fill="rgb(244,104,49)" rx="2" ry="2" />
<text  x="723.96" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (1 samples, 0.04%)</title><rect x="206.1" y="85" width="0.5" height="15.0" fill="rgb(244,93,41)" rx="2" ry="2" />
<text  x="209.13" y="95.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (53 samples, 2.08%)</title><rect x="178.8" y="133" width="24.6" height="15.0" fill="rgb(247,206,3)" rx="2" ry="2" />
<text  x="181.84" y="143.5" >r..</text>
</g>
<g >
<title>runtime.send (5 samples, 0.20%)</title><rect x="26.2" y="197" width="2.3" height="15.0" fill="rgb(245,46,3)" rx="2" ry="2" />
<text  x="29.19" y="207.5" ></text>
</g>
<g >
<title>reflect.Value.call (4 samples, 0.16%)</title><rect x="17.9" y="133" width="1.8" height="15.0" fill="rgb(212,79,27)" rx="2" ry="2" />
<text  x="20.86" y="143.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.04%)</title><rect x="739.5" y="165" width="0.4" height="15.0" fill="rgb(241,220,4)" rx="2" ry="2" />
<text  x="742.46" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (125 samples, 4.90%)</title><rect x="833.8" y="165" width="57.8" height="15.0" fill="rgb(217,178,35)" rx="2" ry="2" />
<text  x="836.83" y="175.5" >runtim..</text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.08%)</title><rect x="27.6" y="85" width="0.9" height="15.0" fill="rgb(225,17,40)" rx="2" ry="2" />
<text  x="30.58" y="95.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.08%)</title><rect x="1185.4" y="117" width="0.9" height="15.0" fill="rgb(251,229,3)" rx="2" ry="2" />
<text  x="1188.37" y="127.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.04%)</title><rect x="19.3" y="69" width="0.4" height="15.0" fill="rgb(209,81,19)" rx="2" ry="2" />
<text  x="22.25" y="79.5" ></text>
</g>
<g >
<title>runtime.netpollready (1 samples, 0.04%)</title><rect x="419.4" y="165" width="0.4" height="15.0" fill="rgb(215,141,36)" rx="2" ry="2" />
<text  x="422.37" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (1 samples, 0.04%)</title><rect x="15.1" y="149" width="0.5" height="15.0" fill="rgb(238,223,25)" rx="2" ry="2" />
<text  x="18.09" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.04%)</title><rect x="106.2" y="53" width="0.5" height="15.0" fill="rgb(228,219,5)" rx="2" ry="2" />
<text  x="109.21" y="63.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (4 samples, 0.16%)</title><rect x="23.4" y="149" width="1.9" height="15.0" fill="rgb(254,95,7)" rx="2" ry="2" />
<text  x="26.41" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (5 samples, 0.20%)</title><rect x="1186.3" y="117" width="2.3" height="15.0" fill="rgb(229,112,54)" rx="2" ry="2" />
<text  x="1189.30" y="127.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (3 samples, 0.12%)</title><rect x="20.2" y="133" width="1.4" height="15.0" fill="rgb(251,61,36)" rx="2" ry="2" />
<text  x="23.18" y="143.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="55.3" y="149" width="0.5" height="15.0" fill="rgb(213,76,36)" rx="2" ry="2" />
<text  x="58.33" y="159.5" ></text>
</g>
<g >
<title>runtime.netpoll (353 samples, 13.84%)</title><rect x="256.5" y="181" width="163.3" height="15.0" fill="rgb(220,96,14)" rx="2" ry="2" />
<text  x="259.55" y="191.5" >runtime.netpoll</text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="834.8" y="149" width="0.4" height="15.0" fill="rgb(223,9,15)" rx="2" ry="2" />
<text  x="837.75" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (21 samples, 0.82%)</title><rect x="15.6" y="213" width="9.7" height="15.0" fill="rgb(230,95,47)" rx="2" ry="2" />
<text  x="18.55" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Marshal (1 samples, 0.04%)</title><rect x="23.4" y="133" width="0.5" height="15.0" fill="rgb(253,221,43)" rx="2" ry="2" />
<text  x="26.41" y="143.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (1 samples, 0.04%)</title><rect x="206.1" y="181" width="0.5" height="15.0" fill="rgb(218,184,40)" rx="2" ry="2" />
<text  x="209.13" y="191.5" ></text>
</g>
<g >
<title>reflect.packEface (1 samples, 0.04%)</title><rect x="21.6" y="117" width="0.4" height="15.0" fill="rgb(225,29,14)" rx="2" ry="2" />
<text  x="24.56" y="127.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="17.4" y="133" width="0.5" height="15.0" fill="rgb(254,160,12)" rx="2" ry="2" />
<text  x="20.40" y="143.5" ></text>
</g>
<g >
<title>runtime.chanrecv (2 samples, 0.08%)</title><rect x="203.4" y="213" width="0.9" height="15.0" fill="rgb(224,12,20)" rx="2" ry="2" />
<text  x="206.35" y="223.5" ></text>
</g>
<g >
<title>runtime.startm (362 samples, 14.19%)</title><rect x="1021.2" y="165" width="167.4" height="15.0" fill="rgb(216,151,48)" rx="2" ry="2" />
<text  x="1024.16" y="175.5" >runtime.startm</text>
</g>
<g >
<title>net.(*conn).Read (116 samples, 4.55%)</title><rect x="55.8" y="229" width="53.7" height="15.0" fill="rgb(236,85,43)" rx="2" ry="2" />
<text  x="58.79" y="239.5" >net.(..</text>
</g>
<g >
<title>runtime.spanOfUnchecked (1 samples, 0.04%)</title><rect x="208.4" y="165" width="0.5" height="15.0" fill="rgb(229,68,18)" rx="2" ry="2" />
<text  x="211.44" y="175.5" ></text>
</g>
<g >
<title>runtime.mstart (975 samples, 38.22%)</title><rect x="737.6" y="245" width="451.0" height="15.0" fill="rgb(229,122,0)" rx="2" ry="2" />
<text  x="740.61" y="255.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.scanobject (5 samples, 0.20%)</title><rect x="206.6" y="181" width="2.3" height="15.0" fill="rgb(228,112,19)" rx="2" ry="2" />
<text  x="209.59" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (1 samples, 0.04%)</title><rect x="23.4" y="85" width="0.5" height="15.0" fill="rgb(233,64,34)" rx="2" ry="2" />
<text  x="26.41" y="95.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (34 samples, 1.33%)</title><rect x="10.5" y="229" width="15.7" height="15.0" fill="rgb(211,84,17)" rx="2" ry="2" />
<text  x="13.46" y="239.5" ></text>
</g>
<g >
<title>runtime.pidleput (1 samples, 0.04%)</title><rect x="420.3" y="181" width="0.5" height="15.0" fill="rgb(224,89,8)" rx="2" ry="2" />
<text  x="423.29" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (5 samples, 0.20%)</title><rect x="206.6" y="229" width="2.3" height="15.0" fill="rgb(210,42,38)" rx="2" ry="2" />
<text  x="209.59" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (3 samples, 0.12%)</title><rect x="16.0" y="165" width="1.4" height="15.0" fill="rgb(223,153,47)" rx="2" ry="2" />
<text  x="19.01" y="175.5" ></text>
</g>
<g >
<title>reflect.methodReceiver (1 samples, 0.04%)</title><rect x="19.3" y="117" width="0.4" height="15.0" fill="rgb(215,61,13)" rx="2" ry="2" />
<text  x="22.25" y="127.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.04%)</title><rect x="18.8" y="69" width="0.5" height="15.0" fill="rgb(206,131,16)" rx="2" ry="2" />
<text  x="21.79" y="79.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.04%)</title><rect x="207.5" y="165" width="0.5" height="15.0" fill="rgb(250,155,37)" rx="2" ry="2" />
<text  x="210.51" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.04%)</title><rect x="23.4" y="101" width="0.5" height="15.0" fill="rgb(231,196,50)" rx="2" ry="2" />
<text  x="26.41" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="178.4" y="117" width="0.4" height="15.0" fill="rgb(220,136,15)" rx="2" ry="2" />
<text  x="181.37" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (2 samples, 0.08%)</title><rect x="442.5" y="149" width="0.9" height="15.0" fill="rgb(245,165,4)" rx="2" ry="2" />
<text  x="445.50" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.ReadStream (126 samples, 4.94%)</title><rect x="51.6" y="245" width="58.3" height="15.0" fill="rgb(209,34,2)" rx="2" ry="2" />
<text  x="54.63" y="255.5" >hslam...</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (3 samples, 0.12%)</title><rect x="16.0" y="181" width="1.4" height="15.0" fill="rgb(208,145,21)" rx="2" ry="2" />
<text  x="19.01" y="191.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profMap).lookup (1 samples, 0.04%)</title><rect x="1189.5" y="213" width="0.5" height="15.0" fill="rgb(248,81,7)" rx="2" ry="2" />
<text  x="1192.54" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (121 samples, 4.74%)</title><rect x="932.8" y="165" width="56.0" height="15.0" fill="rgb(223,44,54)" rx="2" ry="2" />
<text  x="935.81" y="175.5" >runti..</text>
</g>
<g >
<title>reflect.resolveTypeOff (2 samples, 0.08%)</title><rect x="22.0" y="117" width="1.0" height="15.0" fill="rgb(224,117,14)" rx="2" ry="2" />
<text  x="25.03" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="109.0" y="101" width="0.5" height="15.0" fill="rgb(234,143,23)" rx="2" ry="2" />
<text  x="111.99" y="111.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (2 samples, 0.08%)</title><rect x="203.4" y="229" width="0.9" height="15.0" fill="rgb(219,1,6)" rx="2" ry="2" />
<text  x="206.35" y="239.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination (1 samples, 0.04%)</title><rect x="206.1" y="213" width="0.5" height="15.0" fill="rgb(210,38,14)" rx="2" ry="2" />
<text  x="209.13" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC.func1 (1 samples, 0.04%)</title><rect x="25.3" y="213" width="0.4" height="15.0" fill="rgb(220,18,49)" rx="2" ry="2" />
<text  x="28.26" y="223.5" ></text>
</g>
<g >
<title>runtime.notesleep (600 samples, 23.52%)</title><rect x="443.4" y="165" width="277.6" height="15.0" fill="rgb(228,72,2)" rx="2" ry="2" />
<text  x="446.42" y="175.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.startm (36 samples, 1.41%)</title><rect x="721.0" y="165" width="16.6" height="15.0" fill="rgb(228,85,37)" rx="2" ry="2" />
<text  x="723.96" y="175.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.04%)</title><rect x="27.1" y="117" width="0.5" height="15.0" fill="rgb(246,177,31)" rx="2" ry="2" />
<text  x="30.11" y="127.5" ></text>
</g>
<g >
<title>runtime.resetspinning (36 samples, 1.41%)</title><rect x="721.0" y="197" width="16.6" height="15.0" fill="rgb(250,79,38)" rx="2" ry="2" />
<text  x="723.96" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (36 samples, 1.41%)</title><rect x="721.0" y="133" width="16.6" height="15.0" fill="rgb(215,190,13)" rx="2" ry="2" />
<text  x="723.96" y="143.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (1 samples, 0.04%)</title><rect x="206.1" y="165" width="0.5" height="15.0" fill="rgb(246,177,47)" rx="2" ry="2" />
<text  x="209.13" y="175.5" ></text>
</g>
<g >
<title>syscall.Read (114 samples, 4.47%)</title><rect x="56.7" y="181" width="52.8" height="15.0" fill="rgb(227,90,7)" rx="2" ry="2" />
<text  x="59.72" y="191.5" >sysca..</text>
</g>
<g >
<title>runtime.resolveTypeOff (2 samples, 0.08%)</title><rect x="22.0" y="85" width="1.0" height="15.0" fill="rgb(250,83,37)" rx="2" ry="2" />
<text  x="25.03" y="95.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="12.8" y="101" width="0.4" height="15.0" fill="rgb(254,113,34)" rx="2" ry="2" />
<text  x="15.78" y="111.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (6 samples, 0.24%)</title><rect x="986.0" y="133" width="2.8" height="15.0" fill="rgb(209,61,7)" rx="2" ry="2" />
<text  x="989.01" y="143.5" ></text>
</g>
<g >
<title>runtime.park_m (1,143 samples, 44.81%)</title><rect x="208.9" y="229" width="528.7" height="15.0" fill="rgb(224,204,38)" rx="2" ry="2" />
<text  x="211.90" y="239.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.ready (362 samples, 14.19%)</title><rect x="1021.2" y="197" width="167.4" height="15.0" fill="rgb(247,139,22)" rx="2" ry="2" />
<text  x="1024.16" y="207.5" >runtime.ready</text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="19.3" y="101" width="0.4" height="15.0" fill="rgb(224,118,52)" rx="2" ry="2" />
<text  x="22.25" y="111.5" ></text>
</g>
<g >
<title>runtime.kevent (223 samples, 8.74%)</title><rect x="316.2" y="165" width="103.2" height="15.0" fill="rgb(247,63,38)" rx="2" ry="2" />
<text  x="319.22" y="175.5" >runtime.kevent</text>
</g>
<g >
<title>runtime.kevent_trampoline (3 samples, 0.12%)</title><rect x="204.7" y="229" width="1.4" height="15.0" fill="rgb(205,100,13)" rx="2" ry="2" />
<text  x="207.74" y="239.5" ></text>
</g>
<g >
<title>runtime.runqgrab (43 samples, 1.69%)</title><rect x="422.1" y="165" width="19.9" height="15.0" fill="rgb(225,42,48)" rx="2" ry="2" />
<text  x="425.14" y="175.5" ></text>
</g>
<g >
<title>runtime.handoffp (1 samples, 0.04%)</title><rect x="106.2" y="85" width="0.5" height="15.0" fill="rgb(207,56,4)" rx="2" ry="2" />
<text  x="109.21" y="95.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (1 samples, 0.04%)</title><rect x="19.7" y="165" width="0.5" height="15.0" fill="rgb(208,114,34)" rx="2" ry="2" />
<text  x="22.71" y="175.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1 samples, 0.04%)</title><rect x="178.4" y="101" width="0.4" height="15.0" fill="rgb(238,34,36)" rx="2" ry="2" />
<text  x="181.37" y="111.5" ></text>
</g>
<g >
<title>runtime.heapBits.bits (1 samples, 0.04%)</title><rect x="208.0" y="165" width="0.4" height="15.0" fill="rgb(211,221,28)" rx="2" ry="2" />
<text  x="210.98" y="175.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (3 samples, 0.12%)</title><rect x="105.3" y="133" width="1.4" height="15.0" fill="rgb(246,205,52)" rx="2" ry="2" />
<text  x="108.29" y="143.5" ></text>
</g>
<g >
<title>syscall.syscall (192 samples, 7.53%)</title><rect x="114.5" y="149" width="88.9" height="15.0" fill="rgb(216,29,22)" rx="2" ry="2" />
<text  x="117.54" y="159.5" >syscall.sy..</text>
</g>
<g >
<title>runtime.timerproc (1 samples, 0.04%)</title><rect x="1189.1" y="245" width="0.4" height="15.0" fill="rgb(249,186,27)" rx="2" ry="2" />
<text  x="1192.07" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (3 samples, 0.12%)</title><rect x="23.9" y="117" width="1.4" height="15.0" fill="rgb(246,63,39)" rx="2" ry="2" />
<text  x="26.88" y="127.5" ></text>
</g>
<g >
<title>runtime.acquirep (2 samples, 0.08%)</title><rect x="442.5" y="165" width="0.9" height="15.0" fill="rgb(254,219,28)" rx="2" ry="2" />
<text  x="445.50" y="175.5" ></text>
</g>
<g >
<title>runtime.handoffp (121 samples, 4.74%)</title><rect x="932.8" y="197" width="56.0" height="15.0" fill="rgb(252,216,23)" rx="2" ry="2" />
<text  x="935.81" y="207.5" >runti..</text>
</g>
<g >
<title>runtime.gcTrigger.test (1 samples, 0.04%)</title><rect x="739.0" y="197" width="0.5" height="15.0" fill="rgb(210,68,26)" rx="2" ry="2" />
<text  x="742.00" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (5 samples, 0.20%)</title><rect x="10.9" y="165" width="2.3" height="15.0" fill="rgb(205,211,29)" rx="2" ry="2" />
<text  x="13.93" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcache).releaseAll (1 samples, 0.04%)</title><rect x="206.1" y="117" width="0.5" height="15.0" fill="rgb(209,72,5)" rx="2" ry="2" />
<text  x="209.13" y="127.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (5 samples, 0.20%)</title><rect x="206.6" y="213" width="2.3" height="15.0" fill="rgb(249,54,34)" rx="2" ry="2" />
<text  x="209.59" y="223.5" ></text>
</g>
<g >
<title>runtime.goready (4 samples, 0.16%)</title><rect x="26.7" y="181" width="1.8" height="15.0" fill="rgb(220,77,22)" rx="2" ry="2" />
<text  x="29.65" y="191.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.04%)</title><rect x="208.9" y="197" width="0.5" height="15.0" fill="rgb(212,205,11)" rx="2" ry="2" />
<text  x="211.90" y="207.5" ></text>
</g>
<g >
<title>runtime.deferreturn (8 samples, 0.31%)</title><rect x="110.8" y="181" width="3.7" height="15.0" fill="rgb(243,4,37)" rx="2" ry="2" />
<text  x="113.84" y="191.5" ></text>
</g>
<g >
<title>runtime/pprof.profileWriter (1 samples, 0.04%)</title><rect x="1189.5" y="245" width="0.5" height="15.0" fill="rgb(230,123,36)" rx="2" ry="2" />
<text  x="1192.54" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.04%)</title><rect x="734.4" y="117" width="0.4" height="15.0" fill="rgb(243,114,37)" rx="2" ry="2" />
<text  x="737.37" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (2 samples, 0.08%)</title><rect x="720.0" y="133" width="1.0" height="15.0" fill="rgb(242,140,48)" rx="2" ry="2" />
<text  x="723.04" y="143.5" ></text>
</g>
<g >
<title>runtime.netpollinited (1 samples, 0.04%)</title><rect x="419.8" y="181" width="0.5" height="15.0" fill="rgb(236,56,0)" rx="2" ry="2" />
<text  x="422.83" y="191.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (116 samples, 4.55%)</title><rect x="55.8" y="213" width="53.7" height="15.0" fill="rgb(224,93,5)" rx="2" ry="2" />
<text  x="58.79" y="223.5" >net.(..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="206.1" y="197" width="0.5" height="15.0" fill="rgb(239,111,40)" rx="2" ry="2" />
<text  x="209.13" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="106.2" y="117" width="0.5" height="15.0" fill="rgb(236,0,32)" rx="2" ry="2" />
<text  x="109.21" y="127.5" ></text>
</g>
<g >
<title>syscall.read (114 samples, 4.47%)</title><rect x="56.7" y="165" width="52.8" height="15.0" fill="rgb(250,103,32)" rx="2" ry="2" />
<text  x="59.72" y="175.5" >sysca..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (115 samples, 4.51%)</title><rect x="932.8" y="133" width="53.2" height="15.0" fill="rgb(226,114,52)" rx="2" ry="2" />
<text  x="935.81" y="143.5" >runti..</text>
</g>
<g >
<title>runtime.sendDirect (1 samples, 0.04%)</title><rect x="55.3" y="165" width="0.5" height="15.0" fill="rgb(219,165,6)" rx="2" ry="2" />
<text  x="58.33" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (5 samples, 0.20%)</title><rect x="17.4" y="165" width="2.3" height="15.0" fill="rgb(205,98,33)" rx="2" ry="2" />
<text  x="20.40" y="175.5" ></text>
</g>
<g >
<title>runtime.mcall (1,143 samples, 44.81%)</title><rect x="208.9" y="245" width="528.7" height="15.0" fill="rgb(210,8,39)" rx="2" ry="2" />
<text  x="211.90" y="255.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.goready.func1 (4 samples, 0.16%)</title><rect x="26.7" y="149" width="1.8" height="15.0" fill="rgb(230,132,31)" rx="2" ry="2" />
<text  x="29.65" y="159.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.04%)</title><rect x="1189.1" y="213" width="0.4" height="15.0" fill="rgb(209,185,6)" rx="2" ry="2" />
<text  x="1192.07" y="223.5" ></text>
</g>
<g >
<title>runtime.libcCall (2 samples, 0.08%)</title><rect x="890.3" y="133" width="0.9" height="15.0" fill="rgb(205,223,20)" rx="2" ry="2" />
<text  x="893.26" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Marshal (1 samples, 0.04%)</title><rect x="14.2" y="181" width="0.4" height="15.0" fill="rgb(235,162,2)" rx="2" ry="2" />
<text  x="17.16" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrain (5 samples, 0.20%)</title><rect x="206.6" y="197" width="2.3" height="15.0" fill="rgb(225,93,18)" rx="2" ry="2" />
<text  x="209.59" y="207.5" ></text>
</g>
<g >
<title>runtime.newobject (2 samples, 0.08%)</title><rect x="13.2" y="197" width="1.0" height="15.0" fill="rgb(214,71,44)" rx="2" ry="2" />
<text  x="16.24" y="207.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (4 samples, 0.16%)</title><rect x="204.3" y="245" width="1.8" height="15.0" fill="rgb(254,43,51)" rx="2" ry="2" />
<text  x="207.28" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (2 samples, 0.08%)</title><rect x="12.3" y="133" width="0.9" height="15.0" fill="rgb(206,90,30)" rx="2" ry="2" />
<text  x="15.31" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (553 samples, 21.68%)</title><rect x="932.8" y="229" width="255.8" height="15.0" fill="rgb(227,109,44)" rx="2" ry="2" />
<text  x="935.81" y="239.5" >runtime.systemstack</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (3 samples, 0.12%)</title><rect x="14.2" y="213" width="1.4" height="15.0" fill="rgb(230,218,8)" rx="2" ry="2" />
<text  x="17.16" y="223.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.04%)</title><rect x="109.0" y="53" width="0.5" height="15.0" fill="rgb(232,44,9)" rx="2" ry="2" />
<text  x="111.99" y="63.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (6 samples, 0.24%)</title><rect x="206.1" y="245" width="2.8" height="15.0" fill="rgb(249,60,19)" rx="2" ry="2" />
<text  x="209.13" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUTF8StringValue (1 samples, 0.04%)</title><rect x="16.5" y="101" width="0.4" height="15.0" fill="rgb(245,23,6)" rx="2" ry="2" />
<text  x="19.48" y="111.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (2 samples, 0.08%)</title><rect x="177.9" y="133" width="0.9" height="15.0" fill="rgb(248,138,10)" rx="2" ry="2" />
<text  x="180.91" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (5 samples, 0.20%)</title><rect x="23.0" y="165" width="2.3" height="15.0" fill="rgb(227,193,9)" rx="2" ry="2" />
<text  x="25.95" y="175.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (1 samples, 0.04%)</title><rect x="21.6" y="149" width="0.4" height="15.0" fill="rgb(208,221,13)" rx="2" ry="2" />
<text  x="24.56" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (36 samples, 1.41%)</title><rect x="721.0" y="149" width="16.6" height="15.0" fill="rgb(220,62,40)" rx="2" ry="2" />
<text  x="723.96" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.04%)</title><rect x="891.2" y="149" width="0.4" height="15.0" fill="rgb(211,108,31)" rx="2" ry="2" />
<text  x="894.18" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (121 samples, 4.74%)</title><rect x="932.8" y="149" width="56.0" height="15.0" fill="rgb(221,191,28)" rx="2" ry="2" />
<text  x="935.81" y="159.5" >runti..</text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="720.5" y="117" width="0.5" height="15.0" fill="rgb(251,174,52)" rx="2" ry="2" />
<text  x="723.50" y="127.5" ></text>
</g>
<g >
<title>runtime.stopm (603 samples, 23.64%)</title><rect x="442.0" y="181" width="279.0" height="15.0" fill="rgb(212,163,26)" rx="2" ry="2" />
<text  x="445.03" y="191.5" >runtime.stopm</text>
</g>
<g >
<title>reflect.Value.Type (2 samples, 0.08%)</title><rect x="22.0" y="149" width="1.0" height="15.0" fill="rgb(240,61,35)" rx="2" ry="2" />
<text  x="25.03" y="159.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.04%)</title><rect x="56.3" y="181" width="0.4" height="15.0" fill="rgb(243,68,4)" rx="2" ry="2" />
<text  x="59.26" y="191.5" ></text>
</g>
<g >
<title>runtime.semacreate (1 samples, 0.04%)</title><rect x="443.9" y="149" width="0.4" height="15.0" fill="rgb(221,171,9)" rx="2" ry="2" />
<text  x="446.88" y="159.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.04%)</title><rect x="106.2" y="69" width="0.5" height="15.0" fill="rgb(225,11,36)" rx="2" ry="2" />
<text  x="109.21" y="79.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.04%)</title><rect x="720.0" y="117" width="0.5" height="15.0" fill="rgb(250,16,12)" rx="2" ry="2" />
<text  x="723.04" y="127.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (3 samples, 0.12%)</title><rect x="20.2" y="149" width="1.4" height="15.0" fill="rgb(233,91,45)" rx="2" ry="2" />
<text  x="23.18" y="159.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.08%)</title><rect x="739.5" y="197" width="0.9" height="15.0" fill="rgb(244,208,34)" rx="2" ry="2" />
<text  x="742.46" y="207.5" ></text>
</g>
<g >
<title>runtime.notetsleepg (1 samples, 0.04%)</title><rect x="1189.1" y="229" width="0.4" height="15.0" fill="rgb(225,160,20)" rx="2" ry="2" />
<text  x="1192.07" y="239.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (115 samples, 4.51%)</title><rect x="56.3" y="197" width="53.2" height="15.0" fill="rgb(228,114,39)" rx="2" ry="2" />
<text  x="59.26" y="207.5" >inter..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (5 samples, 0.20%)</title><rect x="10.9" y="181" width="2.3" height="15.0" fill="rgb(245,144,0)" rx="2" ry="2" />
<text  x="13.93" y="191.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="16.5" y="69" width="0.4" height="15.0" fill="rgb(221,185,10)" rx="2" ry="2" />
<text  x="19.48" y="79.5" ></text>
</g>
<g >
<title>reflect.valueInterface (1 samples, 0.04%)</title><rect x="21.6" y="133" width="0.4" height="15.0" fill="rgb(251,227,37)" rx="2" ry="2" />
<text  x="24.56" y="143.5" ></text>
</g>
<g >
<title>runtime.runqempty (2 samples, 0.08%)</title><rect x="420.8" y="181" width="0.9" height="15.0" fill="rgb(235,69,47)" rx="2" ry="2" />
<text  x="423.76" y="191.5" ></text>
</g>
<g >
<title>reflect.flag.mustBeExported (1 samples, 0.04%)</title><rect x="18.3" y="117" width="0.5" height="15.0" fill="rgb(251,228,50)" rx="2" ry="2" />
<text  x="21.33" y="127.5" ></text>
</g>
<g >
<title>all (2,551 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(232,188,0)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.libcCall (4 samples, 0.16%)</title><rect x="931.0" y="181" width="1.8" height="15.0" fill="rgb(239,40,51)" rx="2" ry="2" />
<text  x="933.96" y="191.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (6 samples, 0.24%)</title><rect x="106.7" y="133" width="2.8" height="15.0" fill="rgb(227,161,34)" rx="2" ry="2" />
<text  x="109.68" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (6 samples, 0.24%)</title><rect x="20.2" y="165" width="2.8" height="15.0" fill="rgb(247,196,5)" rx="2" ry="2" />
<text  x="23.18" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (2 samples, 0.08%)</title><rect x="16.0" y="133" width="0.9" height="15.0" fill="rgb(242,44,0)" rx="2" ry="2" />
<text  x="19.01" y="143.5" ></text>
</g>
<g >
<title>runtime.wakep (362 samples, 14.19%)</title><rect x="1021.2" y="181" width="167.4" height="15.0" fill="rgb(254,45,54)" rx="2" ry="2" />
<text  x="1024.16" y="191.5" >runtime.wakep</text>
</g>
<g >
<title>runtime.notewakeup (362 samples, 14.19%)</title><rect x="1021.2" y="149" width="167.4" height="15.0" fill="rgb(253,1,47)" rx="2" ry="2" />
<text  x="1024.16" y="159.5" >runtime.notewakeup</text>
</g>
<g >
<title>syscall.write (192 samples, 7.53%)</title><rect x="114.5" y="165" width="88.9" height="15.0" fill="rgb(246,42,13)" rx="2" ry="2" />
<text  x="117.54" y="175.5" >syscall.wr..</text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.04%)</title><rect x="739.5" y="181" width="0.4" height="15.0" fill="rgb(254,3,22)" rx="2" ry="2" />
<text  x="742.46" y="191.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.04%)</title><rect x="21.1" y="117" width="0.5" height="15.0" fill="rgb(219,46,7)" rx="2" ry="2" />
<text  x="24.10" y="127.5" ></text>
</g>
<g >
<title>runtime.chansend (2 samples, 0.08%)</title><rect x="54.9" y="197" width="0.9" height="15.0" fill="rgb(225,122,5)" rx="2" ry="2" />
<text  x="57.87" y="207.5" ></text>
</g>
<g >
<title>runtime.send (1 samples, 0.04%)</title><rect x="55.3" y="181" width="0.5" height="15.0" fill="rgb(212,176,27)" rx="2" ry="2" />
<text  x="58.33" y="191.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (1 samples, 0.04%)</title><rect x="109.0" y="69" width="0.5" height="15.0" fill="rgb(218,204,8)" rx="2" ry="2" />
<text  x="111.99" y="79.5" ></text>
</g>
<g >
<title>runtime.(*gcSweepBuf).push (1 samples, 0.04%)</title><rect x="206.1" y="69" width="0.5" height="15.0" fill="rgb(230,19,23)" rx="2" ry="2" />
<text  x="209.13" y="79.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (3 samples, 0.12%)</title><rect x="14.2" y="197" width="1.4" height="15.0" fill="rgb(240,172,32)" rx="2" ry="2" />
<text  x="17.16" y="207.5" ></text>
</g>
<g >
<title>runtime.chansend.func1 (1 samples, 0.04%)</title><rect x="26.2" y="181" width="0.5" height="15.0" fill="rgb(207,221,18)" rx="2" ry="2" />
<text  x="29.19" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.04%)</title><rect x="719.6" y="133" width="0.4" height="15.0" fill="rgb(232,9,8)" rx="2" ry="2" />
<text  x="722.57" y="143.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.04%)</title><rect x="109.0" y="85" width="0.5" height="15.0" fill="rgb(245,20,9)" rx="2" ry="2" />
<text  x="111.99" y="95.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.UnpackStream (9 samples, 0.35%)</title><rect x="51.6" y="229" width="4.2" height="15.0" fill="rgb(216,39,49)" rx="2" ry="2" />
<text  x="54.63" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (2 samples, 0.08%)</title><rect x="215.4" y="149" width="0.9" height="15.0" fill="rgb(209,129,12)" rx="2" ry="2" />
<text  x="218.38" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (1 samples, 0.04%)</title><rect x="17.4" y="149" width="0.5" height="15.0" fill="rgb(241,76,11)" rx="2" ry="2" />
<text  x="20.40" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (8 samples, 0.31%)</title><rect x="10.5" y="213" width="3.7" height="15.0" fill="rgb(238,51,15)" rx="2" ry="2" />
<text  x="13.46" y="223.5" ></text>
</g>
<g >
<title>runtime.schedule (1,143 samples, 44.81%)</title><rect x="208.9" y="213" width="528.7" height="15.0" fill="rgb(225,106,37)" rx="2" ry="2" />
<text  x="211.90" y="223.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.startm (121 samples, 4.74%)</title><rect x="932.8" y="181" width="56.0" height="15.0" fill="rgb(216,159,50)" rx="2" ry="2" />
<text  x="935.81" y="191.5" >runti..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (2 samples, 0.08%)</title><rect x="24.3" y="101" width="1.0" height="15.0" fill="rgb(233,69,7)" rx="2" ry="2" />
<text  x="27.34" y="111.5" ></text>
</g>
<g >
<title>runtime.notetsleep (207 samples, 8.11%)</title><rect x="795.9" y="197" width="95.7" height="15.0" fill="rgb(205,25,27)" rx="2" ry="2" />
<text  x="798.90" y="207.5" >runtime.not..</text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.08%)</title><rect x="215.4" y="165" width="0.9" height="15.0" fill="rgb(254,172,48)" rx="2" ry="2" />
<text  x="218.38" y="175.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.04%)</title><rect x="106.2" y="37" width="0.5" height="15.0" fill="rgb(253,169,51)" rx="2" ry="2" />
<text  x="109.21" y="47.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.04%)</title><rect x="28.0" y="69" width="0.5" height="15.0" fill="rgb(205,20,36)" rx="2" ry="2" />
<text  x="31.04" y="79.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (53 samples, 2.08%)</title><rect x="178.8" y="117" width="24.6" height="15.0" fill="rgb(248,127,23)" rx="2" ry="2" />
<text  x="181.84" y="127.5" >r..</text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (70 samples, 2.74%)</title><rect x="988.8" y="197" width="32.4" height="15.0" fill="rgb(211,41,29)" rx="2" ry="2" />
<text  x="991.78" y="207.5" >ru..</text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="16.9" y="133" width="0.5" height="15.0" fill="rgb(232,19,5)" rx="2" ry="2" />
<text  x="19.94" y="143.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (50 samples, 1.96%)</title><rect x="28.5" y="213" width="23.1" height="15.0" fill="rgb(214,163,49)" rx="2" ry="2" />
<text  x="31.50" y="223.5" >r..</text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.04%)</title><rect x="206.1" y="101" width="0.5" height="15.0" fill="rgb(206,82,40)" rx="2" ry="2" />
<text  x="209.13" y="111.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (5 samples, 0.20%)</title><rect x="1018.9" y="149" width="2.3" height="15.0" fill="rgb(233,147,7)" rx="2" ry="2" />
<text  x="1021.85" y="159.5" ></text>
</g>
<g >
<title>runtime.lock (6 samples, 0.24%)</title><rect x="213.5" y="181" width="2.8" height="15.0" fill="rgb(240,108,32)" rx="2" ry="2" />
<text  x="216.53" y="191.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.04%)</title><rect x="16.5" y="85" width="0.4" height="15.0" fill="rgb(222,28,15)" rx="2" ry="2" />
<text  x="19.48" y="95.5" ></text>
</g>
<g >
<title>runtime.usleep (89 samples, 3.49%)</title><rect x="891.6" y="197" width="41.2" height="15.0" fill="rgb(211,171,19)" rx="2" ry="2" />
<text  x="894.65" y="207.5" >run..</text>
</g>
<g >
<title>runtime.startm (2 samples, 0.08%)</title><rect x="27.6" y="101" width="0.9" height="15.0" fill="rgb(233,85,23)" rx="2" ry="2" />
<text  x="30.58" y="111.5" ></text>
</g>
<g >
<title>reflect.Value.Call (4 samples, 0.16%)</title><rect x="17.9" y="149" width="1.8" height="15.0" fill="rgb(226,214,31)" rx="2" ry="2" />
<text  x="20.86" y="159.5" ></text>
</g>
</g>
</svg>

