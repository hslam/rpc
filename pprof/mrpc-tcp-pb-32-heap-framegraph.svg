<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.02%)</title><rect x="15.2" y="245" width="0.3" height="15.0" fill="rgb(237,191,14)" rx="2" ry="2" />
<text  x="18.25" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="260.9" y="245" width="0.5" height="15.0" fill="rgb(216,131,52)" rx="2" ry="2" />
<text  x="263.95" y="255.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (13 samples, 0.28%)</title><rect x="1186.3" y="341" width="3.2" height="15.0" fill="rgb(213,99,21)" rx="2" ry="2" />
<text  x="1189.25" y="351.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.04%)</title><rect x="260.9" y="197" width="0.5" height="15.0" fill="rgb(244,125,35)" rx="2" ry="2" />
<text  x="263.95" y="207.5" ></text>
</g>
<g >
<title>runtime.unlock (3 samples, 0.06%)</title><rect x="793.8" y="325" width="0.8" height="15.0" fill="rgb(206,36,35)" rx="2" ry="2" />
<text  x="796.83" y="335.5" ></text>
</g>
<g >
<title>reflect.Value.Call (11 samples, 0.23%)</title><rect x="16.2" y="277" width="2.8" height="15.0" fill="rgb(211,4,8)" rx="2" ry="2" />
<text  x="19.25" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (11 samples, 0.23%)</title><rect x="796.6" y="325" width="2.7" height="15.0" fill="rgb(248,72,8)" rx="2" ry="2" />
<text  x="799.58" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="261.2" y="149" width="0.2" height="15.0" fill="rgb(224,224,32)" rx="2" ry="2" />
<text  x="264.20" y="159.5" ></text>
</g>
<g >
<title>runtime.semrelease (1 samples, 0.02%)</title><rect x="264.4" y="277" width="0.3" height="15.0" fill="rgb(224,40,50)" rx="2" ry="2" />
<text  x="267.45" y="287.5" ></text>
</g>
<g >
<title>time.Sleep (1 samples, 0.02%)</title><rect x="1189.8" y="357" width="0.2" height="15.0" fill="rgb(241,4,35)" rx="2" ry="2" />
<text  x="1192.75" y="367.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="18.2" y="85" width="0.3" height="15.0" fill="rgb(228,28,24)" rx="2" ry="2" />
<text  x="21.25" y="95.5" ></text>
</g>
<g >
<title>runtime.chansend (7 samples, 0.15%)</title><rect x="24.5" y="341" width="1.7" height="15.0" fill="rgb(251,15,25)" rx="2" ry="2" />
<text  x="27.50" y="351.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="262.4" y="261" width="0.3" height="15.0" fill="rgb(205,74,30)" rx="2" ry="2" />
<text  x="265.45" y="271.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (3 samples, 0.06%)</title><rect x="261.4" y="261" width="0.8" height="15.0" fill="rgb(236,133,10)" rx="2" ry="2" />
<text  x="264.45" y="271.5" ></text>
</g>
<g >
<title>runtime.gosched_m (1 samples, 0.02%)</title><rect x="738.8" y="357" width="0.3" height="15.0" fill="rgb(209,99,40)" rx="2" ry="2" />
<text  x="741.85" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (1 samples, 0.02%)</title><rect x="18.2" y="133" width="0.3" height="15.0" fill="rgb(216,100,48)" rx="2" ry="2" />
<text  x="21.25" y="143.5" ></text>
</g>
<g >
<title>runtime.deferproc (2 samples, 0.04%)</title><rect x="266.2" y="309" width="0.5" height="15.0" fill="rgb(240,80,5)" rx="2" ry="2" />
<text  x="269.20" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (13 samples, 0.28%)</title><rect x="1186.3" y="277" width="3.2" height="15.0" fill="rgb(244,215,47)" rx="2" ry="2" />
<text  x="1189.25" y="287.5" ></text>
</g>
<g >
<title>runtime.sellock (2 samples, 0.04%)</title><rect x="98.0" y="341" width="0.5" height="15.0" fill="rgb(211,122,9)" rx="2" ry="2" />
<text  x="100.98" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (4 samples, 0.08%)</title><rect x="12.0" y="277" width="1.0" height="15.0" fill="rgb(254,42,49)" rx="2" ry="2" />
<text  x="15.00" y="287.5" ></text>
</g>
<g >
<title>runtime.lock (3 samples, 0.06%)</title><rect x="799.3" y="293" width="0.8" height="15.0" fill="rgb(224,196,0)" rx="2" ry="2" />
<text  x="802.33" y="303.5" ></text>
</g>
<g >
<title>runtime.growslice (2 samples, 0.04%)</title><rect x="263.4" y="341" width="0.5" height="15.0" fill="rgb(217,148,20)" rx="2" ry="2" />
<text  x="266.45" y="351.5" ></text>
</g>
<g >
<title>runtime.chansend1 (7 samples, 0.15%)</title><rect x="24.5" y="357" width="1.7" height="15.0" fill="rgb(213,71,29)" rx="2" ry="2" />
<text  x="27.50" y="367.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (4 samples, 0.08%)</title><rect x="14.7" y="309" width="1.0" height="15.0" fill="rgb(208,121,49)" rx="2" ry="2" />
<text  x="17.75" y="319.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.02%)</title><rect x="366.2" y="293" width="0.2" height="15.0" fill="rgb(222,206,16)" rx="2" ry="2" />
<text  x="369.17" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (4 samples, 0.08%)</title><rect x="22.7" y="213" width="1.0" height="15.0" fill="rgb(228,63,5)" rx="2" ry="2" />
<text  x="25.75" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (1 samples, 0.02%)</title><rect x="12.2" y="261" width="0.3" height="15.0" fill="rgb(209,55,15)" rx="2" ry="2" />
<text  x="15.25" y="271.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (1,487 samples, 31.50%)</title><rect x="367.2" y="357" width="371.6" height="15.0" fill="rgb(207,124,0)" rx="2" ry="2" />
<text  x="370.17" y="367.5" >runtime.exitsyscall0</text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="262.4" y="245" width="0.3" height="15.0" fill="rgb(231,17,32)" rx="2" ry="2" />
<text  x="265.45" y="255.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.02%)</title><rect x="1185.8" y="309" width="0.2" height="15.0" fill="rgb(248,214,12)" rx="2" ry="2" />
<text  x="1188.75" y="319.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="794.6" y="309" width="0.2" height="15.0" fill="rgb(239,81,20)" rx="2" ry="2" />
<text  x="797.58" y="319.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.02%)</title><rect x="266.4" y="293" width="0.3" height="15.0" fill="rgb(236,17,43)" rx="2" ry="2" />
<text  x="269.45" y="303.5" ></text>
</g>
<g >
<title>runtime.stopm (23 samples, 0.49%)</title><rect x="375.4" y="309" width="5.8" height="15.0" fill="rgb(205,205,4)" rx="2" ry="2" />
<text  x="378.42" y="319.5" ></text>
</g>
<g >
<title>runtime.netpoll (16 samples, 0.34%)</title><rect x="370.9" y="309" width="4.0" height="15.0" fill="rgb(251,23,5)" rx="2" ry="2" />
<text  x="373.92" y="319.5" ></text>
</g>
<g >
<title>runtime.wakep (13 samples, 0.28%)</title><rect x="1186.3" y="309" width="3.2" height="15.0" fill="rgb(238,163,33)" rx="2" ry="2" />
<text  x="1189.25" y="319.5" ></text>
</g>
<g >
<title>runtime.injectglist (7 samples, 0.15%)</title><rect x="739.8" y="309" width="1.8" height="15.0" fill="rgb(222,55,42)" rx="2" ry="2" />
<text  x="742.85" y="319.5" ></text>
</g>
<g >
<title>runtime.startm (6 samples, 0.13%)</title><rect x="739.8" y="293" width="1.5" height="15.0" fill="rgb(211,209,48)" rx="2" ry="2" />
<text  x="742.85" y="303.5" ></text>
</g>
<g >
<title>reflect.storeRcvr (1 samples, 0.02%)</title><rect x="17.5" y="245" width="0.2" height="15.0" fill="rgb(208,77,5)" rx="2" ry="2" />
<text  x="20.50" y="255.5" ></text>
</g>
<g >
<title>runtime.jmpdefer (1 samples, 0.02%)</title><rect x="157.0" y="309" width="0.2" height="15.0" fill="rgb(234,15,49)" rx="2" ry="2" />
<text  x="159.97" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Size (2 samples, 0.04%)</title><rect x="15.0" y="277" width="0.5" height="15.0" fill="rgb(249,170,10)" rx="2" ry="2" />
<text  x="18.00" y="287.5" ></text>
</g>
<g >
<title>runtime.handoffp (2 samples, 0.04%)</title><rect x="260.9" y="213" width="0.5" height="15.0" fill="rgb(244,28,21)" rx="2" ry="2" />
<text  x="263.95" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (18 samples, 0.38%)</title><rect x="16.0" y="293" width="4.5" height="15.0" fill="rgb(253,83,48)" rx="2" ry="2" />
<text  x="19.00" y="303.5" ></text>
</g>
<g >
<title>runtime.semrelease1 (1 samples, 0.02%)</title><rect x="264.4" y="261" width="0.3" height="15.0" fill="rgb(229,130,48)" rx="2" ry="2" />
<text  x="267.45" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="262.4" y="277" width="0.3" height="15.0" fill="rgb(205,47,45)" rx="2" ry="2" />
<text  x="265.45" y="287.5" ></text>
</g>
<g >
<title>runtime.makeslice (3 samples, 0.06%)</title><rect x="13.0" y="309" width="0.7" height="15.0" fill="rgb(247,183,13)" rx="2" ry="2" />
<text  x="16.00" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.04%)</title><rect x="264.7" y="261" width="0.5" height="15.0" fill="rgb(214,124,4)" rx="2" ry="2" />
<text  x="267.70" y="271.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="741.6" y="309" width="0.2" height="15.0" fill="rgb(223,18,41)" rx="2" ry="2" />
<text  x="744.60" y="319.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="364.4" y="357" width="0.3" height="15.0" fill="rgb(214,180,49)" rx="2" ry="2" />
<text  x="367.42" y="367.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profileBuilder).addCPUData (1 samples, 0.02%)</title><rect x="1189.5" y="357" width="0.3" height="15.0" fill="rgb(206,52,26)" rx="2" ry="2" />
<text  x="1192.50" y="367.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="361.2" y="245" width="0.5" height="15.0" fill="rgb(239,113,11)" rx="2" ry="2" />
<text  x="364.18" y="255.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="24.2" y="277" width="0.3" height="15.0" fill="rgb(206,199,9)" rx="2" ry="2" />
<text  x="27.25" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (6 samples, 0.13%)</title><rect x="22.7" y="293" width="1.5" height="15.0" fill="rgb(232,184,42)" rx="2" ry="2" />
<text  x="25.75" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (2 samples, 0.04%)</title><rect x="365.7" y="341" width="0.5" height="15.0" fill="rgb(240,26,35)" rx="2" ry="2" />
<text  x="368.67" y="351.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (2 samples, 0.04%)</title><rect x="363.4" y="357" width="0.5" height="15.0" fill="rgb(238,94,39)" rx="2" ry="2" />
<text  x="366.43" y="367.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="11.7" y="293" width="0.3" height="15.0" fill="rgb(206,11,22)" rx="2" ry="2" />
<text  x="14.75" y="303.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (7 samples, 0.15%)</title><rect x="20.7" y="277" width="1.8" height="15.0" fill="rgb(230,214,5)" rx="2" ry="2" />
<text  x="23.75" y="287.5" ></text>
</g>
<g >
<title>runtime.gcDrain (4 samples, 0.08%)</title><rect x="366.2" y="325" width="1.0" height="15.0" fill="rgb(246,80,9)" rx="2" ry="2" />
<text  x="369.17" y="335.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (3 samples, 0.06%)</title><rect x="364.7" y="373" width="0.7" height="15.0" fill="rgb(212,118,10)" rx="2" ry="2" />
<text  x="367.67" y="383.5" ></text>
</g>
<g >
<title>runtime.(*gcSweepBuf).push (1 samples, 0.02%)</title><rect x="365.7" y="325" width="0.2" height="15.0" fill="rgb(205,128,43)" rx="2" ry="2" />
<text  x="368.67" y="335.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="741.6" y="277" width="0.2" height="15.0" fill="rgb(206,64,1)" rx="2" ry="2" />
<text  x="744.60" y="287.5" ></text>
</g>
<g >
<title>runtime.scanobject (2 samples, 0.04%)</title><rect x="264.7" y="229" width="0.5" height="15.0" fill="rgb(208,167,6)" rx="2" ry="2" />
<text  x="267.70" y="239.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (9 samples, 0.19%)</title><rect x="20.5" y="293" width="2.2" height="15.0" fill="rgb(246,199,33)" rx="2" ry="2" />
<text  x="23.50" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (1,561 samples, 33.07%)</title><rect x="799.3" y="357" width="390.2" height="15.0" fill="rgb(245,37,3)" rx="2" ry="2" />
<text  x="802.33" y="367.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="25.0" y="325" width="0.2" height="15.0" fill="rgb(237,86,37)" rx="2" ry="2" />
<text  x="28.00" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="741.3" y="261" width="0.3" height="15.0" fill="rgb(225,196,54)" rx="2" ry="2" />
<text  x="744.35" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.06%)</title><rect x="19.7" y="261" width="0.8" height="15.0" fill="rgb(244,97,47)" rx="2" ry="2" />
<text  x="22.75" y="271.5" ></text>
</g>
<g >
<title>runtime.runqsteal (3 samples, 0.06%)</title><rect x="776.8" y="309" width="0.8" height="15.0" fill="rgb(220,194,7)" rx="2" ry="2" />
<text  x="779.84" y="319.5" ></text>
</g>
<g >
<title>runtime.handoffp (1,545 samples, 32.73%)</title><rect x="799.3" y="325" width="386.2" height="15.0" fill="rgb(253,150,32)" rx="2" ry="2" />
<text  x="802.33" y="335.5" >runtime.handoffp</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (6 samples, 0.13%)</title><rect x="22.7" y="277" width="1.5" height="15.0" fill="rgb(235,110,42)" rx="2" ry="2" />
<text  x="25.75" y="287.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="262.4" y="341" width="0.3" height="15.0" fill="rgb(222,138,8)" rx="2" ry="2" />
<text  x="265.45" y="351.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.02%)</title><rect x="15.5" y="245" width="0.2" height="15.0" fill="rgb(241,198,53)" rx="2" ry="2" />
<text  x="18.50" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).Reset (1 samples, 0.02%)</title><rect x="10.5" y="309" width="0.2" height="15.0" fill="rgb(223,83,0)" rx="2" ry="2" />
<text  x="13.50" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (1 samples, 0.02%)</title><rect x="365.9" y="325" width="0.3" height="15.0" fill="rgb(226,105,16)" rx="2" ry="2" />
<text  x="368.92" y="335.5" ></text>
</g>
<g >
<title>runtime.aeshash64 (1 samples, 0.02%)</title><rect x="1189.5" y="309" width="0.3" height="15.0" fill="rgb(223,115,48)" rx="2" ry="2" />
<text  x="1192.50" y="319.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.04%)</title><rect x="262.7" y="357" width="0.5" height="15.0" fill="rgb(250,186,31)" rx="2" ry="2" />
<text  x="265.70" y="367.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.02%)</title><rect x="381.9" y="325" width="0.3" height="15.0" fill="rgb(219,148,38)" rx="2" ry="2" />
<text  x="384.92" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal_trampoline (1 samples, 0.02%)</title><rect x="365.2" y="357" width="0.2" height="15.0" fill="rgb(215,119,31)" rx="2" ry="2" />
<text  x="368.17" y="367.5" ></text>
</g>
<g >
<title>runtime.newobject (5 samples, 0.11%)</title><rect x="263.9" y="341" width="1.3" height="15.0" fill="rgb(219,228,12)" rx="2" ry="2" />
<text  x="266.95" y="351.5" ></text>
</g>
<g >
<title>runtime.findrunnable (217 samples, 4.60%)</title><rect x="739.3" y="325" width="54.3" height="15.0" fill="rgb(222,108,31)" rx="2" ry="2" />
<text  x="742.35" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (63 samples, 1.33%)</title><rect x="777.8" y="261" width="15.8" height="15.0" fill="rgb(230,166,22)" rx="2" ry="2" />
<text  x="780.84" y="271.5" ></text>
</g>
<g >
<title>reflect.directlyAssignable (1 samples, 0.02%)</title><rect x="16.5" y="229" width="0.2" height="15.0" fill="rgb(219,130,9)" rx="2" ry="2" />
<text  x="19.50" y="239.5" ></text>
</g>
<g >
<title>runtime.(*semaRoot).dequeue (1 samples, 0.02%)</title><rect x="11.7" y="229" width="0.3" height="15.0" fill="rgb(234,72,0)" rx="2" ry="2" />
<text  x="14.75" y="239.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="741.3" y="277" width="0.3" height="15.0" fill="rgb(249,44,7)" rx="2" ry="2" />
<text  x="744.35" y="287.5" ></text>
</g>
<g >
<title>runtime.findrunnable (50 samples, 1.06%)</title><rect x="368.7" y="325" width="12.5" height="15.0" fill="rgb(247,66,13)" rx="2" ry="2" />
<text  x="371.67" y="335.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.04%)</title><rect x="374.9" y="277" width="0.5" height="15.0" fill="rgb(224,7,18)" rx="2" ry="2" />
<text  x="377.92" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (13 samples, 0.28%)</title><rect x="1186.3" y="245" width="3.2" height="15.0" fill="rgb(215,104,21)" rx="2" ry="2" />
<text  x="1189.25" y="255.5" ></text>
</g>
<g >
<title>runtime.nanotime (6 samples, 0.13%)</title><rect x="741.8" y="309" width="1.5" height="15.0" fill="rgb(209,67,41)" rx="2" ry="2" />
<text  x="744.84" y="319.5" ></text>
</g>
<g >
<title>runtime.systemstack (4 samples, 0.08%)</title><rect x="366.2" y="357" width="1.0" height="15.0" fill="rgb(225,163,1)" rx="2" ry="2" />
<text  x="369.17" y="367.5" ></text>
</g>
<g >
<title>syscall.write (258 samples, 5.46%)</title><rect x="298.9" y="293" width="64.5" height="15.0" fill="rgb(220,204,35)" rx="2" ry="2" />
<text  x="301.94" y="303.5" >syscall..</text>
</g>
<g >
<title>runtime.netpoll (134 samples, 2.84%)</title><rect x="743.3" y="309" width="33.5" height="15.0" fill="rgb(206,33,18)" rx="2" ry="2" />
<text  x="746.34" y="319.5" >ru..</text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.02%)</title><rect x="19.7" y="165" width="0.3" height="15.0" fill="rgb(227,196,36)" rx="2" ry="2" />
<text  x="22.75" y="175.5" ></text>
</g>
<g >
<title>runtime.freedefer (128 samples, 2.71%)</title><rect x="266.9" y="293" width="32.0" height="15.0" fill="rgb(213,76,19)" rx="2" ry="2" />
<text  x="269.95" y="303.5" >ru..</text>
</g>
<g >
<title>runtime.(*waitq).dequeue (2 samples, 0.04%)</title><rect x="24.5" y="325" width="0.5" height="15.0" fill="rgb(216,93,1)" rx="2" ry="2" />
<text  x="27.50" y="335.5" ></text>
</g>
<g >
<title>runtime.selparkcommit (3 samples, 0.06%)</title><rect x="793.8" y="341" width="0.8" height="15.0" fill="rgb(231,142,11)" rx="2" ry="2" />
<text  x="796.83" y="351.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (654 samples, 13.85%)</title><rect x="99.0" y="325" width="163.4" height="15.0" fill="rgb(247,150,11)" rx="2" ry="2" />
<text  x="101.98" y="335.5" >internal/poll.(*FD).R..</text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.02%)</title><rect x="1186.0" y="309" width="0.3" height="15.0" fill="rgb(249,48,24)" rx="2" ry="2" />
<text  x="1189.00" y="319.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1,542 samples, 32.66%)</title><rect x="800.1" y="277" width="385.4" height="15.0" fill="rgb(251,53,8)" rx="2" ry="2" />
<text  x="803.08" y="287.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.startm (1,545 samples, 32.73%)</title><rect x="799.3" y="309" width="386.2" height="15.0" fill="rgb(221,37,5)" rx="2" ry="2" />
<text  x="802.33" y="319.5" >runtime.startm</text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="361.2" y="181" width="0.2" height="15.0" fill="rgb(247,191,35)" rx="2" ry="2" />
<text  x="364.18" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.02%)</title><rect x="18.2" y="181" width="0.3" height="15.0" fill="rgb(210,67,31)" rx="2" ry="2" />
<text  x="21.25" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (7 samples, 0.15%)</title><rect x="12.0" y="325" width="1.7" height="15.0" fill="rgb(244,14,44)" rx="2" ry="2" />
<text  x="15.00" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (4 samples, 0.08%)</title><rect x="10.7" y="277" width="1.0" height="15.0" fill="rgb(227,194,48)" rx="2" ry="2" />
<text  x="13.75" y="287.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profMap).lookup (1 samples, 0.02%)</title><rect x="1189.5" y="341" width="0.3" height="15.0" fill="rgb(229,51,33)" rx="2" ry="2" />
<text  x="1192.50" y="351.5" ></text>
</g>
<g >
<title>runtime.wirep (1 samples, 0.02%)</title><rect x="381.9" y="309" width="0.3" height="15.0" fill="rgb(247,10,37)" rx="2" ry="2" />
<text  x="384.92" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="11.7" y="309" width="0.3" height="15.0" fill="rgb(230,36,28)" rx="2" ry="2" />
<text  x="14.75" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (3 samples, 0.06%)</title><rect x="369.7" y="277" width="0.7" height="15.0" fill="rgb(246,134,29)" rx="2" ry="2" />
<text  x="372.67" y="287.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.02%)</title><rect x="738.8" y="325" width="0.3" height="15.0" fill="rgb(238,128,35)" rx="2" ry="2" />
<text  x="741.85" y="335.5" ></text>
</g>
<g >
<title>reflect.Value.Type (1 samples, 0.02%)</title><rect x="19.0" y="277" width="0.2" height="15.0" fill="rgb(252,61,16)" rx="2" ry="2" />
<text  x="22.00" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (1 samples, 0.02%)</title><rect x="18.2" y="101" width="0.3" height="15.0" fill="rgb(225,216,18)" rx="2" ry="2" />
<text  x="21.25" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mcache).releaseAll (1 samples, 0.02%)</title><rect x="738.8" y="245" width="0.3" height="15.0" fill="rgb(214,192,44)" rx="2" ry="2" />
<text  x="741.85" y="255.5" ></text>
</g>
<g >
<title>runtime.notewakeup (6 samples, 0.13%)</title><rect x="739.8" y="277" width="1.5" height="15.0" fill="rgb(226,194,2)" rx="2" ry="2" />
<text  x="742.85" y="287.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="261.2" y="133" width="0.2" height="15.0" fill="rgb(241,91,39)" rx="2" ry="2" />
<text  x="264.20" y="143.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="1189.8" y="325" width="0.2" height="15.0" fill="rgb(210,86,24)" rx="2" ry="2" />
<text  x="1192.75" y="335.5" ></text>
</g>
<g >
<title>reflect.funcLayout (1 samples, 0.02%)</title><rect x="17.2" y="245" width="0.3" height="15.0" fill="rgb(218,199,29)" rx="2" ry="2" />
<text  x="20.25" y="255.5" ></text>
</g>
<g >
<title>runtime.schedule (54 samples, 1.14%)</title><rect x="368.2" y="341" width="13.5" height="15.0" fill="rgb(211,222,54)" rx="2" ry="2" />
<text  x="371.17" y="351.5" ></text>
</g>
<g >
<title>syscall.syscall (258 samples, 5.46%)</title><rect x="298.9" y="277" width="64.5" height="15.0" fill="rgb(222,218,30)" rx="2" ry="2" />
<text  x="301.94" y="287.5" >syscall..</text>
</g>
<g >
<title>runtime.nanotime (6 samples, 0.13%)</title><rect x="794.8" y="325" width="1.5" height="15.0" fill="rgb(250,89,46)" rx="2" ry="2" />
<text  x="797.83" y="335.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.02%)</title><rect x="18.2" y="37" width="0.3" height="15.0" fill="rgb(240,115,13)" rx="2" ry="2" />
<text  x="21.25" y="47.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_fast64 (1 samples, 0.02%)</title><rect x="1189.5" y="325" width="0.3" height="15.0" fill="rgb(206,195,47)" rx="2" ry="2" />
<text  x="1192.50" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUTF8StringValue (1 samples, 0.02%)</title><rect x="14.5" y="229" width="0.2" height="15.0" fill="rgb(229,199,33)" rx="2" ry="2" />
<text  x="17.50" y="239.5" ></text>
</g>
<g >
<title>reflect.packEface (5 samples, 0.11%)</title><rect x="21.2" y="245" width="1.3" height="15.0" fill="rgb(213,5,14)" rx="2" ry="2" />
<text  x="24.25" y="255.5" ></text>
</g>
<g >
<title>runtime.handoffp (1 samples, 0.02%)</title><rect x="361.2" y="213" width="0.2" height="15.0" fill="rgb(218,46,12)" rx="2" ry="2" />
<text  x="364.18" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (2 samples, 0.04%)</title><rect x="12.5" y="261" width="0.5" height="15.0" fill="rgb(208,19,36)" rx="2" ry="2" />
<text  x="15.50" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Marshal (4 samples, 0.08%)</title><rect x="12.0" y="309" width="1.0" height="15.0" fill="rgb(239,67,42)" rx="2" ry="2" />
<text  x="15.00" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.02%)</title><rect x="24.0" y="229" width="0.2" height="15.0" fill="rgb(235,94,27)" rx="2" ry="2" />
<text  x="27.00" y="239.5" ></text>
</g>
<g >
<title>reflect.(*rtype).String (1 samples, 0.02%)</title><rect x="16.0" y="261" width="0.2" height="15.0" fill="rgb(250,141,20)" rx="2" ry="2" />
<text  x="19.00" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (3 samples, 0.06%)</title><rect x="15.0" y="293" width="0.7" height="15.0" fill="rgb(253,144,53)" rx="2" ry="2" />
<text  x="18.00" y="303.5" ></text>
</g>
<g >
<title>runtime.usleep (3 samples, 0.06%)</title><rect x="799.3" y="261" width="0.8" height="15.0" fill="rgb(208,126,34)" rx="2" ry="2" />
<text  x="802.33" y="271.5" ></text>
</g>
<g >
<title>reflect.(*rtype).AssignableTo (1 samples, 0.02%)</title><rect x="16.5" y="245" width="0.2" height="15.0" fill="rgb(234,133,37)" rx="2" ry="2" />
<text  x="19.50" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="361.2" y="165" width="0.2" height="15.0" fill="rgb(241,107,53)" rx="2" ry="2" />
<text  x="364.18" y="175.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (1 samples, 0.02%)</title><rect x="1185.5" y="325" width="0.3" height="15.0" fill="rgb(209,126,30)" rx="2" ry="2" />
<text  x="1188.50" y="335.5" ></text>
</g>
<g >
<title>runtime.stopm (1,429 samples, 30.27%)</title><rect x="381.7" y="341" width="357.1" height="15.0" fill="rgb(225,56,41)" rx="2" ry="2" />
<text  x="384.67" y="351.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.02%)</title><rect x="1185.8" y="325" width="0.2" height="15.0" fill="rgb(205,64,44)" rx="2" ry="2" />
<text  x="1188.75" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.PacketStream (7 samples, 0.15%)</title><rect x="263.4" y="357" width="1.8" height="15.0" fill="rgb(252,104,44)" rx="2" ry="2" />
<text  x="266.45" y="367.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.04%)</title><rect x="260.9" y="181" width="0.5" height="15.0" fill="rgb(239,9,7)" rx="2" ry="2" />
<text  x="263.95" y="191.5" ></text>
</g>
<g >
<title>runtime.selectgo (289 samples, 6.12%)</title><rect x="26.2" y="357" width="72.3" height="15.0" fill="rgb(254,182,13)" rx="2" ry="2" />
<text  x="29.25" y="367.5" >runtime...</text>
</g>
<g >
<title>runtime.schedule (219 samples, 4.64%)</title><rect x="739.1" y="341" width="54.7" height="15.0" fill="rgb(236,206,11)" rx="2" ry="2" />
<text  x="742.10" y="351.5" >runti..</text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="741.6" y="293" width="0.2" height="15.0" fill="rgb(246,55,3)" rx="2" ry="2" />
<text  x="744.60" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="367.9" y="309" width="0.3" height="15.0" fill="rgb(232,83,34)" rx="2" ry="2" />
<text  x="370.92" y="319.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="1185.5" y="293" width="0.3" height="15.0" fill="rgb(226,166,1)" rx="2" ry="2" />
<text  x="1188.50" y="303.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (2 samples, 0.04%)</title><rect x="361.2" y="261" width="0.5" height="15.0" fill="rgb(216,75,11)" rx="2" ry="2" />
<text  x="364.18" y="271.5" ></text>
</g>
<g >
<title>runtime.kevent (4 samples, 0.08%)</title><rect x="373.9" y="293" width="1.0" height="15.0" fill="rgb(244,20,33)" rx="2" ry="2" />
<text  x="376.92" y="303.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (7 samples, 0.15%)</title><rect x="361.7" y="245" width="1.7" height="15.0" fill="rgb(252,183,48)" rx="2" ry="2" />
<text  x="364.68" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (64 samples, 1.36%)</title><rect x="777.6" y="293" width="16.0" height="15.0" fill="rgb(232,173,32)" rx="2" ry="2" />
<text  x="780.59" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.02%)</title><rect x="11.2" y="261" width="0.3" height="15.0" fill="rgb(246,193,50)" rx="2" ry="2" />
<text  x="14.25" y="271.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.02%)</title><rect x="11.7" y="277" width="0.3" height="15.0" fill="rgb(214,118,34)" rx="2" ry="2" />
<text  x="14.75" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (1 samples, 0.02%)</title><rect x="14.5" y="277" width="0.2" height="15.0" fill="rgb(232,29,54)" rx="2" ry="2" />
<text  x="17.50" y="287.5" ></text>
</g>
<g >
<title>runtime.scanobject (2 samples, 0.04%)</title><rect x="366.7" y="309" width="0.5" height="15.0" fill="rgb(241,138,32)" rx="2" ry="2" />
<text  x="369.67" y="319.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="14.5" y="181" width="0.2" height="15.0" fill="rgb(205,29,10)" rx="2" ry="2" />
<text  x="17.50" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (42 samples, 0.89%)</title><rect x="14.0" y="341" width="10.5" height="15.0" fill="rgb(238,189,5)" rx="2" ry="2" />
<text  x="17.00" y="351.5" ></text>
</g>
<g >
<title>runtime.bgsweep (3 samples, 0.06%)</title><rect x="365.4" y="373" width="0.8" height="15.0" fill="rgb(227,202,7)" rx="2" ry="2" />
<text  x="368.42" y="383.5" ></text>
</g>
<g >
<title>runtime.semawakeup (6 samples, 0.13%)</title><rect x="739.8" y="261" width="1.5" height="15.0" fill="rgb(233,210,23)" rx="2" ry="2" />
<text  x="742.85" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="19.7" y="229" width="0.3" height="15.0" fill="rgb(228,60,43)" rx="2" ry="2" />
<text  x="22.75" y="239.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Marshal (5 samples, 0.11%)</title><rect x="22.7" y="261" width="1.3" height="15.0" fill="rgb(237,117,13)" rx="2" ry="2" />
<text  x="25.75" y="271.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.02%)</title><rect x="793.6" y="309" width="0.2" height="15.0" fill="rgb(228,122,14)" rx="2" ry="2" />
<text  x="796.58" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (57 samples, 1.21%)</title><rect x="10.2" y="357" width="14.3" height="15.0" fill="rgb(242,219,17)" rx="2" ry="2" />
<text  x="13.25" y="367.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (2 samples, 0.04%)</title><rect x="20.0" y="245" width="0.5" height="15.0" fill="rgb(224,130,40)" rx="2" ry="2" />
<text  x="23.00" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (3 samples, 0.06%)</title><rect x="776.8" y="277" width="0.8" height="15.0" fill="rgb(216,38,40)" rx="2" ry="2" />
<text  x="779.84" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (6 samples, 0.13%)</title><rect x="739.8" y="245" width="1.5" height="15.0" fill="rgb(243,108,0)" rx="2" ry="2" />
<text  x="742.85" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.02%)</title><rect x="24.0" y="245" width="0.2" height="15.0" fill="rgb(232,187,49)" rx="2" ry="2" />
<text  x="27.00" y="255.5" ></text>
</g>
<g >
<title>reflect.(*funcType).out (1 samples, 0.02%)</title><rect x="17.0" y="229" width="0.2" height="15.0" fill="rgb(219,78,8)" rx="2" ry="2" />
<text  x="20.00" y="239.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (1 samples, 0.02%)</title><rect x="1186.0" y="341" width="0.3" height="15.0" fill="rgb(254,5,50)" rx="2" ry="2" />
<text  x="1189.00" y="351.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareWrite (1 samples, 0.02%)</title><rect x="265.9" y="309" width="0.3" height="15.0" fill="rgb(242,3,39)" rx="2" ry="2" />
<text  x="268.95" y="319.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (284 samples, 6.02%)</title><rect x="27.0" y="341" width="71.0" height="15.0" fill="rgb(251,14,4)" rx="2" ry="2" />
<text  x="30.00" y="351.5" >runtime...</text>
</g>
<g >
<title>runtime.lock (2 samples, 0.04%)</title><rect x="98.0" y="325" width="0.5" height="15.0" fill="rgb(229,15,52)" rx="2" ry="2" />
<text  x="100.98" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.02%)</title><rect x="738.8" y="261" width="0.3" height="15.0" fill="rgb(220,89,13)" rx="2" ry="2" />
<text  x="741.85" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (7 samples, 0.15%)</title><rect x="10.2" y="341" width="1.8" height="15.0" fill="rgb(205,142,44)" rx="2" ry="2" />
<text  x="13.25" y="351.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="366.2" y="277" width="0.2" height="15.0" fill="rgb(220,3,39)" rx="2" ry="2" />
<text  x="369.17" y="287.5" ></text>
</g>
<g >
<title>runtime.makeslice (3 samples, 0.06%)</title><rect x="18.2" y="245" width="0.8" height="15.0" fill="rgb(211,44,39)" rx="2" ry="2" />
<text  x="21.25" y="255.5" ></text>
</g>
<g >
<title>net.(*conn).Write (393 samples, 8.32%)</title><rect x="265.2" y="357" width="98.2" height="15.0" fill="rgb(241,185,32)" rx="2" ry="2" />
<text  x="268.20" y="367.5" >net.(*conn)..</text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.02%)</title><rect x="14.5" y="213" width="0.2" height="15.0" fill="rgb(229,195,23)" rx="2" ry="2" />
<text  x="17.50" y="223.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1,545 samples, 32.73%)</title><rect x="799.3" y="341" width="386.2" height="15.0" fill="rgb(217,204,31)" rx="2" ry="2" />
<text  x="802.33" y="351.5" >runtime.entersyscallblock_handoff</text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.02%)</title><rect x="738.8" y="309" width="0.3" height="15.0" fill="rgb(236,16,16)" rx="2" ry="2" />
<text  x="741.85" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="794.6" y="293" width="0.2" height="15.0" fill="rgb(211,15,9)" rx="2" ry="2" />
<text  x="797.58" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.ReadStream (659 samples, 13.96%)</title><rect x="98.5" y="373" width="164.7" height="15.0" fill="rgb(226,117,6)" rx="2" ry="2" />
<text  x="101.48" y="383.5" >hslam.com/mgit/Mort/r..</text>
</g>
<g >
<title>runtime.send (4 samples, 0.08%)</title><rect x="25.2" y="325" width="1.0" height="15.0" fill="rgb(250,29,35)" rx="2" ry="2" />
<text  x="28.25" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.06%)</title><rect x="18.2" y="229" width="0.8" height="15.0" fill="rgb(229,59,15)" rx="2" ry="2" />
<text  x="21.25" y="239.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (1 samples, 0.02%)</title><rect x="1185.8" y="341" width="0.2" height="15.0" fill="rgb(211,177,8)" rx="2" ry="2" />
<text  x="1188.75" y="351.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.06%)</title><rect x="13.0" y="293" width="0.7" height="15.0" fill="rgb(233,216,7)" rx="2" ry="2" />
<text  x="16.00" y="303.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (393 samples, 8.32%)</title><rect x="265.2" y="341" width="98.2" height="15.0" fill="rgb(208,159,48)" rx="2" ry="2" />
<text  x="268.20" y="351.5" >net.(*netFD..</text>
</g>
<g >
<title>runtime.deductSweepCredit (1 samples, 0.02%)</title><rect x="18.2" y="165" width="0.3" height="15.0" fill="rgb(251,2,4)" rx="2" ry="2" />
<text  x="21.25" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.UnpackStream (2 samples, 0.04%)</title><rect x="98.5" y="357" width="0.5" height="15.0" fill="rgb(225,183,3)" rx="2" ry="2" />
<text  x="101.48" y="367.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="1189.8" y="309" width="0.2" height="15.0" fill="rgb(209,132,8)" rx="2" ry="2" />
<text  x="1192.75" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeBytes3 (1 samples, 0.02%)</title><rect x="15.2" y="229" width="0.3" height="15.0" fill="rgb(249,12,37)" rx="2" ry="2" />
<text  x="18.25" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (4 samples, 0.08%)</title><rect x="10.7" y="293" width="1.0" height="15.0" fill="rgb(234,59,21)" rx="2" ry="2" />
<text  x="13.75" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1,542 samples, 32.66%)</title><rect x="800.1" y="293" width="385.4" height="15.0" fill="rgb(220,190,30)" rx="2" ry="2" />
<text  x="803.08" y="303.5" >runtime.notewakeup</text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.02%)</title><rect x="738.8" y="293" width="0.3" height="15.0" fill="rgb(243,2,3)" rx="2" ry="2" />
<text  x="741.85" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (2 samples, 0.04%)</title><rect x="18.2" y="213" width="0.5" height="15.0" fill="rgb(243,42,31)" rx="2" ry="2" />
<text  x="21.25" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (1 samples, 0.02%)</title><rect x="24.0" y="261" width="0.2" height="15.0" fill="rgb(247,51,5)" rx="2" ry="2" />
<text  x="27.00" y="271.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="793.6" y="245" width="0.2" height="15.0" fill="rgb(249,159,0)" rx="2" ry="2" />
<text  x="796.58" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (34 samples, 0.72%)</title><rect x="15.7" y="309" width="8.5" height="15.0" fill="rgb(236,92,54)" rx="2" ry="2" />
<text  x="18.75" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.pointer.getPointer (1 samples, 0.02%)</title><rect x="23.7" y="213" width="0.3" height="15.0" fill="rgb(208,54,0)" rx="2" ry="2" />
<text  x="26.75" y="223.5" ></text>
</g>
<g >
<title>runtime.osyield (3 samples, 0.06%)</title><rect x="799.3" y="277" width="0.8" height="15.0" fill="rgb(229,157,31)" rx="2" ry="2" />
<text  x="802.33" y="287.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="366.9" y="293" width="0.3" height="15.0" fill="rgb(223,211,9)" rx="2" ry="2" />
<text  x="369.92" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="262.4" y="325" width="0.3" height="15.0" fill="rgb(205,171,2)" rx="2" ry="2" />
<text  x="265.45" y="335.5" ></text>
</g>
<g >
<title>runtime.mcall (1,710 samples, 36.22%)</title><rect x="367.2" y="373" width="427.4" height="15.0" fill="rgb(231,113,54)" rx="2" ry="2" />
<text  x="370.17" y="383.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="13.7" y="325" width="0.3" height="15.0" fill="rgb(206,221,3)" rx="2" ry="2" />
<text  x="16.75" y="335.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.02%)</title><rect x="366.4" y="277" width="0.3" height="15.0" fill="rgb(235,98,3)" rx="2" ry="2" />
<text  x="369.42" y="287.5" ></text>
</g>
<g >
<title>runtime.kevent (118 samples, 2.50%)</title><rect x="746.8" y="293" width="29.5" height="15.0" fill="rgb(209,186,31)" rx="2" ry="2" />
<text  x="749.84" y="303.5" >ru..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (2 samples, 0.04%)</title><rect x="15.0" y="261" width="0.5" height="15.0" fill="rgb(238,155,52)" rx="2" ry="2" />
<text  x="18.00" y="271.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (1 samples, 0.02%)</title><rect x="366.4" y="229" width="0.3" height="15.0" fill="rgb(210,92,35)" rx="2" ry="2" />
<text  x="369.42" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (1 samples, 0.02%)</title><rect x="261.9" y="245" width="0.3" height="15.0" fill="rgb(223,182,22)" rx="2" ry="2" />
<text  x="264.95" y="255.5" ></text>
</g>
<g >
<title>runtime.park_m (222 samples, 4.70%)</title><rect x="739.1" y="357" width="55.5" height="15.0" fill="rgb(227,194,34)" rx="2" ry="2" />
<text  x="742.10" y="367.5" >runti..</text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.02%)</title><rect x="366.4" y="261" width="0.3" height="15.0" fill="rgb(212,129,12)" rx="2" ry="2" />
<text  x="369.42" y="271.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (1 samples, 0.02%)</title><rect x="1186.0" y="325" width="0.3" height="15.0" fill="rgb(220,57,15)" rx="2" ry="2" />
<text  x="1189.00" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (4 samples, 0.08%)</title><rect x="264.2" y="309" width="1.0" height="15.0" fill="rgb(251,11,13)" rx="2" ry="2" />
<text  x="267.20" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mSpanList).remove (1 samples, 0.02%)</title><rect x="738.8" y="213" width="0.3" height="15.0" fill="rgb(232,213,3)" rx="2" ry="2" />
<text  x="741.85" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (6 samples, 0.13%)</title><rect x="10.2" y="325" width="1.5" height="15.0" fill="rgb(230,175,47)" rx="2" ry="2" />
<text  x="13.25" y="335.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1.1 (1 samples, 0.02%)</title><rect x="381.4" y="309" width="0.3" height="15.0" fill="rgb(217,147,12)" rx="2" ry="2" />
<text  x="384.42" y="319.5" ></text>
</g>
<g >
<title>runtime.releasem (1 samples, 0.02%)</title><rect x="363.7" y="309" width="0.2" height="15.0" fill="rgb(240,37,42)" rx="2" ry="2" />
<text  x="366.68" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (23 samples, 0.49%)</title><rect x="375.4" y="261" width="5.8" height="15.0" fill="rgb(249,165,23)" rx="2" ry="2" />
<text  x="378.42" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="1185.8" y="277" width="0.2" height="15.0" fill="rgb(239,6,49)" rx="2" ry="2" />
<text  x="1188.75" y="287.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (1 samples, 0.02%)</title><rect x="381.4" y="325" width="0.3" height="15.0" fill="rgb(219,97,35)" rx="2" ry="2" />
<text  x="384.42" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (1 samples, 0.02%)</title><rect x="14.5" y="245" width="0.2" height="15.0" fill="rgb(242,50,44)" rx="2" ry="2" />
<text  x="17.50" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="381.2" y="261" width="0.2" height="15.0" fill="rgb(250,124,35)" rx="2" ry="2" />
<text  x="384.17" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WriteStream (403 samples, 8.54%)</title><rect x="263.2" y="373" width="100.7" height="15.0" fill="rgb(212,148,51)" rx="2" ry="2" />
<text  x="266.20" y="383.5" >hslam.com/mg..</text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.02%)</title><rect x="796.3" y="325" width="0.3" height="15.0" fill="rgb(222,128,50)" rx="2" ry="2" />
<text  x="799.33" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="1189.8" y="293" width="0.2" height="15.0" fill="rgb(248,0,26)" rx="2" ry="2" />
<text  x="1192.75" y="303.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="381.2" y="277" width="0.2" height="15.0" fill="rgb(234,194,13)" rx="2" ry="2" />
<text  x="384.17" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="264.7" y="293" width="0.5" height="15.0" fill="rgb(249,178,53)" rx="2" ry="2" />
<text  x="267.70" y="303.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="263.7" y="325" width="0.2" height="15.0" fill="rgb(224,66,43)" rx="2" ry="2" />
<text  x="266.70" y="335.5" ></text>
</g>
<g >
<title>runtime.makeslice (5 samples, 0.11%)</title><rect x="19.2" y="277" width="1.3" height="15.0" fill="rgb(223,28,45)" rx="2" ry="2" />
<text  x="22.25" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.02%)</title><rect x="361.2" y="149" width="0.2" height="15.0" fill="rgb(231,93,24)" rx="2" ry="2" />
<text  x="364.18" y="159.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.02%)</title><rect x="18.2" y="149" width="0.3" height="15.0" fill="rgb(240,205,44)" rx="2" ry="2" />
<text  x="21.25" y="159.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.02%)</title><rect x="381.2" y="309" width="0.2" height="15.0" fill="rgb(222,190,43)" rx="2" ry="2" />
<text  x="384.17" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (3 samples, 0.06%)</title><rect x="367.2" y="309" width="0.7" height="15.0" fill="rgb(235,212,43)" rx="2" ry="2" />
<text  x="370.17" y="319.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="18.0" y="213" width="0.2" height="15.0" fill="rgb(208,154,32)" rx="2" ry="2" />
<text  x="21.00" y="223.5" ></text>
</g>
<g >
<title>runtime.startm (13 samples, 0.28%)</title><rect x="1186.3" y="293" width="3.2" height="15.0" fill="rgb(235,133,3)" rx="2" ry="2" />
<text  x="1189.25" y="303.5" ></text>
</g>
<g >
<title>runtime.roundupsize (1 samples, 0.02%)</title><rect x="11.2" y="229" width="0.3" height="15.0" fill="rgb(249,77,52)" rx="2" ry="2" />
<text  x="14.25" y="239.5" ></text>
</g>
<g >
<title>runtime.netpollready (2 samples, 0.04%)</title><rect x="776.3" y="293" width="0.5" height="15.0" fill="rgb(236,227,20)" rx="2" ry="2" />
<text  x="779.34" y="303.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.02%)</title><rect x="262.4" y="357" width="0.3" height="15.0" fill="rgb(217,138,31)" rx="2" ry="2" />
<text  x="265.45" y="367.5" ></text>
</g>
<g >
<title>runtime._System (3 samples, 0.06%)</title><rect x="363.9" y="373" width="0.8" height="15.0" fill="rgb(225,103,25)" rx="2" ry="2" />
<text  x="366.93" y="383.5" ></text>
</g>
<g >
<title>runtime.mcall (2 samples, 0.04%)</title><rect x="363.9" y="357" width="0.5" height="15.0" fill="rgb(233,22,19)" rx="2" ry="2" />
<text  x="366.93" y="367.5" ></text>
</g>
<g >
<title>runtime.semrelease1 (1 samples, 0.02%)</title><rect x="11.7" y="245" width="0.3" height="15.0" fill="rgb(205,19,24)" rx="2" ry="2" />
<text  x="14.75" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (7 samples, 0.15%)</title><rect x="361.7" y="261" width="1.7" height="15.0" fill="rgb(214,5,24)" rx="2" ry="2" />
<text  x="364.68" y="271.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.02%)</title><rect x="381.2" y="293" width="0.2" height="15.0" fill="rgb(214,198,51)" rx="2" ry="2" />
<text  x="384.17" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (10 samples, 0.21%)</title><rect x="1176.8" y="261" width="2.5" height="15.0" fill="rgb(252,0,48)" rx="2" ry="2" />
<text  x="1179.75" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (42 samples, 0.89%)</title><rect x="14.0" y="325" width="10.5" height="15.0" fill="rgb(218,191,41)" rx="2" ry="2" />
<text  x="17.00" y="335.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.02%)</title><rect x="264.4" y="293" width="0.3" height="15.0" fill="rgb(246,63,22)" rx="2" ry="2" />
<text  x="267.45" y="303.5" ></text>
</g>
<g >
<title>syscall.Write (258 samples, 5.46%)</title><rect x="298.9" y="309" width="64.5" height="15.0" fill="rgb(232,163,48)" rx="2" ry="2" />
<text  x="301.94" y="319.5" >syscall..</text>
</g>
<g >
<title>runtime.runqgrab (2 samples, 0.04%)</title><rect x="374.9" y="293" width="0.5" height="15.0" fill="rgb(247,142,27)" rx="2" ry="2" />
<text  x="377.92" y="303.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (4 samples, 0.08%)</title><rect x="366.2" y="341" width="1.0" height="15.0" fill="rgb(244,64,48)" rx="2" ry="2" />
<text  x="369.17" y="351.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (1 samples, 0.02%)</title><rect x="368.4" y="325" width="0.3" height="15.0" fill="rgb(250,190,10)" rx="2" ry="2" />
<text  x="371.42" y="335.5" ></text>
</g>
<g >
<title>runtime.semasleep (1,423 samples, 30.14%)</title><rect x="382.4" y="309" width="355.7" height="15.0" fill="rgb(223,136,43)" rx="2" ry="2" />
<text  x="385.42" y="319.5" >runtime.semasleep</text>
</g>
<g >
<title>reflect.(*rtype).NumOut (1 samples, 0.02%)</title><rect x="17.0" y="245" width="0.2" height="15.0" fill="rgb(249,205,36)" rx="2" ry="2" />
<text  x="20.00" y="255.5" ></text>
</g>
<g >
<title>runtime.(*gcSweepBuf).pop (1 samples, 0.02%)</title><rect x="365.4" y="341" width="0.3" height="15.0" fill="rgb(205,4,27)" rx="2" ry="2" />
<text  x="368.42" y="351.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.02%)</title><rect x="739.1" y="325" width="0.2" height="15.0" fill="rgb(222,115,47)" rx="2" ry="2" />
<text  x="742.10" y="335.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (1 samples, 0.02%)</title><rect x="366.4" y="213" width="0.3" height="15.0" fill="rgb(208,107,39)" rx="2" ry="2" />
<text  x="369.42" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (4 samples, 0.08%)</title><rect x="264.2" y="325" width="1.0" height="15.0" fill="rgb(254,101,14)" rx="2" ry="2" />
<text  x="267.20" y="335.5" ></text>
</g>
<g >
<title>runtime.resetspinning (1 samples, 0.02%)</title><rect x="793.6" y="325" width="0.2" height="15.0" fill="rgb(230,144,45)" rx="2" ry="2" />
<text  x="796.58" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (5 samples, 0.11%)</title><rect x="22.7" y="245" width="1.3" height="15.0" fill="rgb(233,2,32)" rx="2" ry="2" />
<text  x="25.75" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (5 samples, 0.11%)</title><rect x="22.7" y="229" width="1.3" height="15.0" fill="rgb(252,186,29)" rx="2" ry="2" />
<text  x="25.75" y="239.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.02%)</title><rect x="15.5" y="277" width="0.2" height="15.0" fill="rgb(223,189,28)" rx="2" ry="2" />
<text  x="18.50" y="287.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.04%)</title><rect x="264.7" y="245" width="0.5" height="15.0" fill="rgb(240,8,43)" rx="2" ry="2" />
<text  x="267.70" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="19.7" y="197" width="0.3" height="15.0" fill="rgb(210,61,17)" rx="2" ry="2" />
<text  x="22.75" y="207.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="794.6" y="325" width="0.2" height="15.0" fill="rgb(230,204,35)" rx="2" ry="2" />
<text  x="797.58" y="335.5" ></text>
</g>
<g >
<title>runtime.netpollunblock (1 samples, 0.02%)</title><rect x="776.6" y="277" width="0.2" height="15.0" fill="rgb(224,82,31)" rx="2" ry="2" />
<text  x="779.59" y="287.5" ></text>
</g>
<g >
<title>syscall.syscall (421 samples, 8.92%)</title><rect x="157.2" y="277" width="105.2" height="15.0" fill="rgb(228,146,20)" rx="2" ry="2" />
<text  x="160.22" y="287.5" >syscall.sysc..</text>
</g>
<g >
<title>runtime.duffzero (1 samples, 0.02%)</title><rect x="10.5" y="293" width="0.2" height="15.0" fill="rgb(226,30,36)" rx="2" ry="2" />
<text  x="13.50" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.04%)</title><rect x="264.7" y="277" width="0.5" height="15.0" fill="rgb(205,137,54)" rx="2" ry="2" />
<text  x="267.70" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.04%)</title><rect x="737.6" y="293" width="0.5" height="15.0" fill="rgb(215,11,4)" rx="2" ry="2" />
<text  x="740.60" y="303.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (654 samples, 13.85%)</title><rect x="99.0" y="341" width="163.4" height="15.0" fill="rgb(212,6,21)" rx="2" ry="2" />
<text  x="101.98" y="351.5" >net.(*netFD).Read</text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="15.5" y="261" width="0.2" height="15.0" fill="rgb(219,178,42)" rx="2" ry="2" />
<text  x="18.50" y="271.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.02%)</title><rect x="366.4" y="197" width="0.3" height="15.0" fill="rgb(240,103,24)" rx="2" ry="2" />
<text  x="369.42" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (1 samples, 0.02%)</title><rect x="14.5" y="309" width="0.2" height="15.0" fill="rgb(209,66,47)" rx="2" ry="2" />
<text  x="17.50" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="1185.5" y="309" width="0.3" height="15.0" fill="rgb(252,100,17)" rx="2" ry="2" />
<text  x="1188.50" y="319.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="18.7" y="213" width="0.3" height="15.0" fill="rgb(235,102,10)" rx="2" ry="2" />
<text  x="21.75" y="223.5" ></text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.02%)</title><rect x="1186.0" y="293" width="0.3" height="15.0" fill="rgb(210,197,40)" rx="2" ry="2" />
<text  x="1189.00" y="303.5" ></text>
</g>
<g >
<title>runtime.(*timersBucket).addtimerLocked (1 samples, 0.02%)</title><rect x="1189.8" y="341" width="0.2" height="15.0" fill="rgb(222,52,11)" rx="2" ry="2" />
<text  x="1192.75" y="351.5" ></text>
</g>
<g >
<title>runtime.sweepone (3 samples, 0.06%)</title><rect x="365.4" y="357" width="0.8" height="15.0" fill="rgb(221,170,46)" rx="2" ry="2" />
<text  x="368.42" y="367.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="18.0" y="229" width="0.2" height="15.0" fill="rgb(206,119,30)" rx="2" ry="2" />
<text  x="21.00" y="239.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="793.6" y="261" width="0.2" height="15.0" fill="rgb(254,157,23)" rx="2" ry="2" />
<text  x="796.58" y="271.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.02%)</title><rect x="366.2" y="309" width="0.2" height="15.0" fill="rgb(235,12,21)" rx="2" ry="2" />
<text  x="369.17" y="319.5" ></text>
</g>
<g >
<title>syscall.read (421 samples, 8.92%)</title><rect x="157.2" y="293" width="105.2" height="15.0" fill="rgb(227,90,2)" rx="2" ry="2" />
<text  x="160.22" y="303.5" >syscall.read</text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="261.2" y="165" width="0.2" height="15.0" fill="rgb(239,128,10)" rx="2" ry="2" />
<text  x="264.20" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (1 samples, 0.02%)</title><rect x="18.5" y="197" width="0.2" height="15.0" fill="rgb(211,228,22)" rx="2" ry="2" />
<text  x="21.50" y="207.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.02%)</title><rect x="361.2" y="197" width="0.2" height="15.0" fill="rgb(246,171,1)" rx="2" ry="2" />
<text  x="364.18" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (8 samples, 0.17%)</title><rect x="12.0" y="341" width="2.0" height="15.0" fill="rgb(243,163,26)" rx="2" ry="2" />
<text  x="15.00" y="351.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (391 samples, 8.28%)</title><rect x="265.7" y="325" width="97.7" height="15.0" fill="rgb(224,177,44)" rx="2" ry="2" />
<text  x="268.70" y="335.5" >internal/po..</text>
</g>
<g >
<title>all (4,721 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(251,55,52)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>runtime.stopm (64 samples, 1.36%)</title><rect x="777.6" y="309" width="16.0" height="15.0" fill="rgb(237,96,42)" rx="2" ry="2" />
<text  x="780.59" y="319.5" ></text>
</g>
<g >
<title>runtime.deferreturn (231 samples, 4.89%)</title><rect x="99.2" y="309" width="57.8" height="15.0" fill="rgb(227,161,35)" rx="2" ry="2" />
<text  x="102.23" y="319.5" >runtim..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="262.4" y="309" width="0.3" height="15.0" fill="rgb(220,229,34)" rx="2" ry="2" />
<text  x="265.45" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.02%)</title><rect x="14.5" y="261" width="0.2" height="15.0" fill="rgb(244,211,43)" rx="2" ry="2" />
<text  x="17.50" y="271.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="11.7" y="325" width="0.3" height="15.0" fill="rgb(214,155,42)" rx="2" ry="2" />
<text  x="14.75" y="335.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Name (1 samples, 0.02%)</title><rect x="16.0" y="277" width="0.2" height="15.0" fill="rgb(214,210,27)" rx="2" ry="2" />
<text  x="19.00" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (25 samples, 0.53%)</title><rect x="1179.3" y="261" width="6.2" height="15.0" fill="rgb(227,64,39)" rx="2" ry="2" />
<text  x="1182.25" y="271.5" ></text>
</g>
<g >
<title>runtime.chanrecv (2 samples, 0.04%)</title><rect x="363.4" y="341" width="0.5" height="15.0" fill="rgb(244,44,40)" rx="2" ry="2" />
<text  x="366.43" y="351.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (1 samples, 0.02%)</title><rect x="18.0" y="245" width="0.2" height="15.0" fill="rgb(237,1,45)" rx="2" ry="2" />
<text  x="21.00" y="255.5" ></text>
</g>
<g >
<title>runtime.osyield (3 samples, 0.06%)</title><rect x="369.7" y="293" width="0.7" height="15.0" fill="rgb(205,0,6)" rx="2" ry="2" />
<text  x="372.67" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.02%)</title><rect x="18.2" y="69" width="0.3" height="15.0" fill="rgb(216,111,10)" rx="2" ry="2" />
<text  x="21.25" y="79.5" ></text>
</g>
<g >
<title>runtime.goready (2 samples, 0.04%)</title><rect x="25.7" y="309" width="0.5" height="15.0" fill="rgb(221,75,20)" rx="2" ry="2" />
<text  x="28.75" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="19.7" y="245" width="0.3" height="15.0" fill="rgb(253,1,9)" rx="2" ry="2" />
<text  x="22.75" y="255.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="262.2" y="261" width="0.2" height="15.0" fill="rgb(229,112,4)" rx="2" ry="2" />
<text  x="265.20" y="271.5" ></text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.02%)</title><rect x="381.2" y="325" width="0.2" height="15.0" fill="rgb(245,10,8)" rx="2" ry="2" />
<text  x="384.17" y="335.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.02%)</title><rect x="1185.5" y="341" width="0.3" height="15.0" fill="rgb(232,218,38)" rx="2" ry="2" />
<text  x="1188.50" y="351.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.08%)</title><rect x="367.2" y="341" width="1.0" height="15.0" fill="rgb(247,2,1)" rx="2" ry="2" />
<text  x="370.17" y="351.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (2 samples, 0.04%)</title><rect x="361.2" y="229" width="0.5" height="15.0" fill="rgb(218,156,40)" rx="2" ry="2" />
<text  x="364.18" y="239.5" ></text>
</g>
<g >
<title>reflect.valueInterface (7 samples, 0.15%)</title><rect x="20.7" y="261" width="1.8" height="15.0" fill="rgb(205,143,21)" rx="2" ry="2" />
<text  x="23.75" y="271.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (2 samples, 0.04%)</title><rect x="260.9" y="229" width="0.5" height="15.0" fill="rgb(242,215,46)" rx="2" ry="2" />
<text  x="263.95" y="239.5" ></text>
</g>
<g >
<title>runtime.acquireSudog (1 samples, 0.02%)</title><rect x="363.4" y="325" width="0.3" height="15.0" fill="rgb(233,7,14)" rx="2" ry="2" />
<text  x="366.43" y="335.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (1 samples, 0.02%)</title><rect x="265.9" y="293" width="0.3" height="15.0" fill="rgb(217,137,40)" rx="2" ry="2" />
<text  x="268.95" y="303.5" ></text>
</g>
<g >
<title>runtime.notesleep (23 samples, 0.49%)</title><rect x="375.4" y="293" width="5.8" height="15.0" fill="rgb(254,41,16)" rx="2" ry="2" />
<text  x="378.42" y="303.5" ></text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.04%)</title><rect x="370.4" y="309" width="0.5" height="15.0" fill="rgb(244,63,26)" rx="2" ry="2" />
<text  x="373.42" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="262.4" y="293" width="0.3" height="15.0" fill="rgb(223,206,9)" rx="2" ry="2" />
<text  x="265.45" y="303.5" ></text>
</g>
<g >
<title>runtime.mstart (1,580 samples, 33.47%)</title><rect x="794.6" y="373" width="394.9" height="15.0" fill="rgb(252,57,28)" rx="2" ry="2" />
<text  x="797.58" y="383.5" >runtime.mstart</text>
</g>
<g >
<title>internal/poll.(*pollDesc).waitRead (1 samples, 0.02%)</title><rect x="99.0" y="309" width="0.2" height="15.0" fill="rgb(232,69,47)" rx="2" ry="2" />
<text  x="101.98" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeTCPConn (354 samples, 7.50%)</title><rect x="10.0" y="373" width="88.5" height="15.0" fill="rgb(228,217,51)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >hslam.com/..</text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="13.7" y="293" width="0.3" height="15.0" fill="rgb(244,111,50)" rx="2" ry="2" />
<text  x="16.75" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1,507 samples, 31.92%)</title><rect x="800.1" y="261" width="376.7" height="15.0" fill="rgb(241,47,35)" rx="2" ry="2" />
<text  x="803.08" y="271.5" >runtime.pthread_cond_signal</text>
</g>
<g >
<title>runtime.freedefer (231 samples, 4.89%)</title><rect x="99.2" y="293" width="57.8" height="15.0" fill="rgb(207,221,44)" rx="2" ry="2" />
<text  x="102.23" y="303.5" >runtim..</text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.02%)</title><rect x="738.8" y="229" width="0.3" height="15.0" fill="rgb(227,224,13)" rx="2" ry="2" />
<text  x="741.85" y="239.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="18.2" y="53" width="0.3" height="15.0" fill="rgb(234,188,50)" rx="2" ry="2" />
<text  x="21.25" y="63.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="365.9" y="309" width="0.3" height="15.0" fill="rgb(217,184,52)" rx="2" ry="2" />
<text  x="368.92" y="319.5" ></text>
</g>
<g >
<title>runtime.runqgrab (3 samples, 0.06%)</title><rect x="776.8" y="293" width="0.8" height="15.0" fill="rgb(251,204,14)" rx="2" ry="2" />
<text  x="779.84" y="303.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="793.3" y="245" width="0.3" height="15.0" fill="rgb(251,25,54)" rx="2" ry="2" />
<text  x="796.33" y="255.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.02%)</title><rect x="366.4" y="309" width="0.3" height="15.0" fill="rgb(217,155,1)" rx="2" ry="2" />
<text  x="369.42" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalInt32Value (1 samples, 0.02%)</title><rect x="11.5" y="261" width="0.2" height="15.0" fill="rgb(231,41,43)" rx="2" ry="2" />
<text  x="14.50" y="271.5" ></text>
</g>
<g >
<title>runtime.unlock (3 samples, 0.06%)</title><rect x="738.1" y="325" width="0.7" height="15.0" fill="rgb(250,19,31)" rx="2" ry="2" />
<text  x="741.10" y="335.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.02%)</title><rect x="738.8" y="341" width="0.3" height="15.0" fill="rgb(248,151,1)" rx="2" ry="2" />
<text  x="741.85" y="351.5" ></text>
</g>
<g >
<title>reflect.Value.Type (1 samples, 0.02%)</title><rect x="22.5" y="277" width="0.2" height="15.0" fill="rgb(224,106,34)" rx="2" ry="2" />
<text  x="25.50" y="287.5" ></text>
</g>
<g >
<title>reflect.Value.call (11 samples, 0.23%)</title><rect x="16.2" y="261" width="2.8" height="15.0" fill="rgb(214,159,35)" rx="2" ry="2" />
<text  x="19.25" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (1 samples, 0.02%)</title><rect x="18.2" y="117" width="0.3" height="15.0" fill="rgb(212,171,15)" rx="2" ry="2" />
<text  x="21.25" y="127.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.02%)</title><rect x="1185.8" y="293" width="0.2" height="15.0" fill="rgb(214,41,6)" rx="2" ry="2" />
<text  x="1188.75" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="13.7" y="309" width="0.3" height="15.0" fill="rgb(220,40,12)" rx="2" ry="2" />
<text  x="16.75" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (4 samples, 0.08%)</title><rect x="12.0" y="293" width="1.0" height="15.0" fill="rgb(209,190,51)" rx="2" ry="2" />
<text  x="15.00" y="303.5" ></text>
</g>
<g >
<title>syscall.Read (421 samples, 8.92%)</title><rect x="157.2" y="309" width="105.2" height="15.0" fill="rgb(232,55,2)" rx="2" ry="2" />
<text  x="160.22" y="319.5" >syscall.Read</text>
</g>
<g >
<title>runtime.startm (1 samples, 0.02%)</title><rect x="793.6" y="293" width="0.2" height="15.0" fill="rgb(206,157,53)" rx="2" ry="2" />
<text  x="796.58" y="303.5" ></text>
</g>
<g >
<title>reflect.typedmemclrpartial (1 samples, 0.02%)</title><rect x="17.7" y="245" width="0.3" height="15.0" fill="rgb(208,185,0)" rx="2" ry="2" />
<text  x="20.75" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="19.7" y="213" width="0.3" height="15.0" fill="rgb(209,51,17)" rx="2" ry="2" />
<text  x="22.75" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1,421 samples, 30.10%)</title><rect x="382.4" y="293" width="355.2" height="15.0" fill="rgb(252,109,23)" rx="2" ry="2" />
<text  x="385.42" y="303.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.semasleep (23 samples, 0.49%)</title><rect x="375.4" y="277" width="5.8" height="15.0" fill="rgb(239,85,6)" rx="2" ry="2" />
<text  x="378.42" y="287.5" ></text>
</g>
<g >
<title>runtime.semrelease (1 samples, 0.02%)</title><rect x="11.7" y="261" width="0.3" height="15.0" fill="rgb(232,124,19)" rx="2" ry="2" />
<text  x="14.75" y="271.5" ></text>
</g>
<g >
<title>runtime.ready (13 samples, 0.28%)</title><rect x="1186.3" y="325" width="3.2" height="15.0" fill="rgb(210,25,21)" rx="2" ry="2" />
<text  x="1189.25" y="335.5" ></text>
</g>
<g >
<title>runtime.semasleep (64 samples, 1.36%)</title><rect x="777.6" y="277" width="16.0" height="15.0" fill="rgb(231,18,34)" rx="2" ry="2" />
<text  x="780.59" y="287.5" ></text>
</g>
<g >
<title>net.(*conn).Read (654 samples, 13.85%)</title><rect x="99.0" y="357" width="163.4" height="15.0" fill="rgb(249,24,36)" rx="2" ry="2" />
<text  x="101.98" y="367.5" >net.(*conn).Read</text>
</g>
<g >
<title>runtime.gcBgMarkWorker (4 samples, 0.08%)</title><rect x="366.2" y="373" width="1.0" height="15.0" fill="rgb(207,177,2)" rx="2" ry="2" />
<text  x="369.17" y="383.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.08%)</title><rect x="369.4" y="309" width="1.0" height="15.0" fill="rgb(225,106,18)" rx="2" ry="2" />
<text  x="372.42" y="319.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="793.6" y="277" width="0.2" height="15.0" fill="rgb(216,138,14)" rx="2" ry="2" />
<text  x="796.58" y="287.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (2 samples, 0.04%)</title><rect x="260.9" y="261" width="0.5" height="15.0" fill="rgb(214,95,36)" rx="2" ry="2" />
<text  x="263.95" y="271.5" ></text>
</g>
<g >
<title>runtime.deferreturn (129 samples, 2.73%)</title><rect x="266.7" y="309" width="32.2" height="15.0" fill="rgb(238,66,53)" rx="2" ry="2" />
<text  x="269.70" y="319.5" >ru..</text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.02%)</title><rect x="1185.8" y="261" width="0.2" height="15.0" fill="rgb(223,102,34)" rx="2" ry="2" />
<text  x="1188.75" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="24.2" y="293" width="0.3" height="15.0" fill="rgb(234,114,2)" rx="2" ry="2" />
<text  x="27.25" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.02%)</title><rect x="1185.5" y="277" width="0.3" height="15.0" fill="rgb(239,129,54)" rx="2" ry="2" />
<text  x="1188.50" y="287.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.02%)</title><rect x="366.4" y="245" width="0.3" height="15.0" fill="rgb(251,224,43)" rx="2" ry="2" />
<text  x="369.42" y="255.5" ></text>
</g>
<g >
<title>runtime.runqsteal (2 samples, 0.04%)</title><rect x="374.9" y="309" width="0.5" height="15.0" fill="rgb(238,59,47)" rx="2" ry="2" />
<text  x="377.92" y="319.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.02%)</title><rect x="738.8" y="277" width="0.3" height="15.0" fill="rgb(252,32,28)" rx="2" ry="2" />
<text  x="741.85" y="287.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="14.5" y="197" width="0.2" height="15.0" fill="rgb(237,110,29)" rx="2" ry="2" />
<text  x="17.50" y="207.5" ></text>
</g>
<g >
<title>runtime.(*semaRoot).dequeue (1 samples, 0.02%)</title><rect x="264.4" y="245" width="0.3" height="15.0" fill="rgb(219,202,34)" rx="2" ry="2" />
<text  x="267.45" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (1,424 samples, 30.16%)</title><rect x="382.2" y="325" width="355.9" height="15.0" fill="rgb(213,77,2)" rx="2" ry="2" />
<text  x="385.17" y="335.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.releasep (1 samples, 0.02%)</title><rect x="361.4" y="213" width="0.3" height="15.0" fill="rgb(245,34,18)" rx="2" ry="2" />
<text  x="364.43" y="223.5" ></text>
</g>
<g >
<title>reflect.(*rtype).NumIn (1 samples, 0.02%)</title><rect x="16.7" y="245" width="0.3" height="15.0" fill="rgb(224,153,50)" rx="2" ry="2" />
<text  x="19.75" y="255.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="741.3" y="293" width="0.3" height="15.0" fill="rgb(216,147,25)" rx="2" ry="2" />
<text  x="744.35" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (1 samples, 0.02%)</title><rect x="14.5" y="293" width="0.2" height="15.0" fill="rgb(215,214,6)" rx="2" ry="2" />
<text  x="17.50" y="303.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollReset (1 samples, 0.02%)</title><rect x="265.9" y="277" width="0.3" height="15.0" fill="rgb(233,200,49)" rx="2" ry="2" />
<text  x="268.95" y="287.5" ></text>
</g>
<g >
<title>runtime.releaseSudog (1 samples, 0.02%)</title><rect x="363.7" y="325" width="0.2" height="15.0" fill="rgb(213,162,25)" rx="2" ry="2" />
<text  x="366.68" y="335.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.02%)</title><rect x="17.2" y="229" width="0.3" height="15.0" fill="rgb(218,118,24)" rx="2" ry="2" />
<text  x="20.25" y="239.5" ></text>
</g>
<g >
<title>runtime.mstart1 (19 samples, 0.40%)</title><rect x="794.6" y="357" width="4.7" height="15.0" fill="rgb(239,24,35)" rx="2" ry="2" />
<text  x="797.58" y="367.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="361.2" y="133" width="0.2" height="15.0" fill="rgb(224,3,11)" rx="2" ry="2" />
<text  x="364.18" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="19.7" y="181" width="0.3" height="15.0" fill="rgb(214,36,47)" rx="2" ry="2" />
<text  x="22.75" y="191.5" ></text>
</g>
<g >
<title>runtime/pprof.profileWriter (2 samples, 0.04%)</title><rect x="1189.5" y="373" width="0.5" height="15.0" fill="rgb(246,119,15)" rx="2" ry="2" />
<text  x="1192.50" y="383.5" ></text>
</g>
<g >
<title>runtime.convTstring (1 samples, 0.02%)</title><rect x="24.2" y="309" width="0.3" height="15.0" fill="rgb(220,59,49)" rx="2" ry="2" />
<text  x="27.25" y="319.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.02%)</title><rect x="11.2" y="245" width="0.3" height="15.0" fill="rgb(250,184,40)" rx="2" ry="2" />
<text  x="14.25" y="255.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="367.9" y="325" width="0.3" height="15.0" fill="rgb(244,143,8)" rx="2" ry="2" />
<text  x="370.92" y="335.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.02%)</title><rect x="366.4" y="293" width="0.3" height="15.0" fill="rgb(252,104,34)" rx="2" ry="2" />
<text  x="369.42" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.02%)</title><rect x="18.2" y="197" width="0.3" height="15.0" fill="rgb(251,53,5)" rx="2" ry="2" />
<text  x="21.25" y="207.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (1 samples, 0.02%)</title><rect x="381.4" y="293" width="0.3" height="15.0" fill="rgb(236,105,51)" rx="2" ry="2" />
<text  x="384.42" y="303.5" ></text>
</g>
<g >
<title>runtime.semawakeup (13 samples, 0.28%)</title><rect x="1186.3" y="261" width="3.2" height="15.0" fill="rgb(207,89,19)" rx="2" ry="2" />
<text  x="1189.25" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (4 samples, 0.08%)</title><rect x="10.7" y="309" width="1.0" height="15.0" fill="rgb(214,190,52)" rx="2" ry="2" />
<text  x="13.75" y="319.5" ></text>
</g>
<g >
<title>runtime.osyield (3 samples, 0.06%)</title><rect x="367.2" y="325" width="0.7" height="15.0" fill="rgb(213,8,19)" rx="2" ry="2" />
<text  x="370.17" y="335.5" ></text>
</g>
<g >
<title>runtime.sysmon (19 samples, 0.40%)</title><rect x="794.6" y="341" width="4.7" height="15.0" fill="rgb(245,109,13)" rx="2" ry="2" />
<text  x="797.58" y="351.5" ></text>
</g>
</g>
</svg>

