<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="342.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="325" > </text>
<g id="frames">
<g >
<title>runtime.semawakeup (124 samples, 4.68%)</title><rect x="926.5" y="197" width="55.3" height="15.0" fill="rgb(250,227,30)" rx="2" ry="2" />
<text  x="929.54" y="207.5" >runti..</text>
</g>
<g >
<title>net.IP.String (2 samples, 0.08%)</title><rect x="166.5" y="165" width="0.9" height="15.0" fill="rgb(217,147,37)" rx="2" ry="2" />
<text  x="169.47" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).ReadFrom (101 samples, 3.82%)</title><rect x="37.2" y="213" width="45.0" height="15.0" fill="rgb(248,5,21)" rx="2" ry="2" />
<text  x="40.19" y="223.5" >inte..</text>
</g>
<g >
<title>net.ipEmptyString (2 samples, 0.08%)</title><rect x="166.5" y="181" width="0.9" height="15.0" fill="rgb(240,87,35)" rx="2" ry="2" />
<text  x="169.47" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.08%)</title><rect x="981.8" y="181" width="0.9" height="15.0" fill="rgb(251,186,19)" rx="2" ry="2" />
<text  x="984.82" y="191.5" ></text>
</g>
<g >
<title>runtime.adjustframe (10 samples, 0.38%)</title><rect x="13.6" y="101" width="4.4" height="15.0" fill="rgb(234,187,21)" rx="2" ry="2" />
<text  x="16.57" y="111.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (24 samples, 0.91%)</title><rect x="10.9" y="245" width="10.7" height="15.0" fill="rgb(253,44,1)" rx="2" ry="2" />
<text  x="13.89" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.08%)</title><rect x="327.0" y="181" width="0.8" height="15.0" fill="rgb(226,196,2)" rx="2" ry="2" />
<text  x="329.96" y="191.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="27.8" y="133" width="0.5" height="15.0" fill="rgb(246,182,0)" rx="2" ry="2" />
<text  x="30.83" y="143.5" ></text>
</g>
<g >
<title>runtime.runqgrab (1 samples, 0.04%)</title><rect x="194.6" y="197" width="0.4" height="15.0" fill="rgb(221,124,8)" rx="2" ry="2" />
<text  x="197.56" y="207.5" ></text>
</g>
<g >
<title>reflect.resolveTextOff (1 samples, 0.04%)</title><rect x="27.4" y="117" width="0.4" height="15.0" fill="rgb(235,142,45)" rx="2" ry="2" />
<text  x="30.39" y="127.5" ></text>
</g>
<g >
<title>runtime.startm (39 samples, 1.47%)</title><rect x="1172.2" y="197" width="17.4" height="15.0" fill="rgb(213,68,13)" rx="2" ry="2" />
<text  x="1175.17" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Size (4 samples, 0.15%)</title><rect x="21.6" y="213" width="1.8" height="15.0" fill="rgb(238,187,5)" rx="2" ry="2" />
<text  x="24.59" y="223.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.04%)</title><rect x="32.3" y="149" width="0.4" height="15.0" fill="rgb(236,27,36)" rx="2" ry="2" />
<text  x="35.29" y="159.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="82.7" y="261" width="0.4" height="15.0" fill="rgb(245,189,24)" rx="2" ry="2" />
<text  x="85.66" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.08%)</title><rect x="167.4" y="181" width="0.9" height="15.0" fill="rgb(244,100,18)" rx="2" ry="2" />
<text  x="170.36" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Marshal (1 samples, 0.04%)</title><rect x="24.7" y="181" width="0.5" height="15.0" fill="rgb(222,161,51)" rx="2" ry="2" />
<text  x="27.71" y="191.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1,032 samples, 38.99%)</title><rect x="197.7" y="229" width="460.0" height="15.0" fill="rgb(248,148,1)" rx="2" ry="2" />
<text  x="200.68" y="239.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.convTstring (1 samples, 0.04%)</title><rect x="35.0" y="213" width="0.4" height="15.0" fill="rgb(234,16,37)" rx="2" ry="2" />
<text  x="37.96" y="223.5" ></text>
</g>
<g >
<title>runtime.strequal (1 samples, 0.04%)</title><rect x="29.2" y="101" width="0.4" height="15.0" fill="rgb(248,173,29)" rx="2" ry="2" />
<text  x="32.17" y="111.5" ></text>
</g>
<g >
<title>runtime.wakep (425 samples, 16.06%)</title><rect x="982.7" y="213" width="189.5" height="15.0" fill="rgb(243,180,39)" rx="2" ry="2" />
<text  x="985.71" y="223.5" >runtime.wakep</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.04%)</title><rect x="25.6" y="149" width="0.4" height="15.0" fill="rgb(218,78,25)" rx="2" ry="2" />
<text  x="28.60" y="159.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.04%)</title><rect x="34.5" y="165" width="0.5" height="15.0" fill="rgb(238,10,0)" rx="2" ry="2" />
<text  x="37.52" y="175.5" ></text>
</g>
<g >
<title>runtime.handoffp (121 samples, 4.57%)</title><rect x="872.6" y="229" width="53.9" height="15.0" fill="rgb(232,95,17)" rx="2" ry="2" />
<text  x="875.60" y="239.5" >runti..</text>
</g>
<g >
<title>runtime.newproc1 (39 samples, 1.47%)</title><rect x="1172.2" y="229" width="17.4" height="15.0" fill="rgb(240,15,23)" rx="2" ry="2" />
<text  x="1175.17" y="239.5" ></text>
</g>
<g >
<title>runtime.notetsleep (187 samples, 7.06%)</title><rect x="746.4" y="229" width="83.4" height="15.0" fill="rgb(209,50,38)" rx="2" ry="2" />
<text  x="749.44" y="239.5" >runtime.n..</text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.04%)</title><rect x="26.0" y="181" width="0.5" height="15.0" fill="rgb(248,218,38)" rx="2" ry="2" />
<text  x="29.05" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.04%)</title><rect x="656.4" y="165" width="0.4" height="15.0" fill="rgb(252,17,30)" rx="2" ry="2" />
<text  x="659.39" y="175.5" ></text>
</g>
<g >
<title>runtime.forEachP (2 samples, 0.08%)</title><rect x="981.8" y="229" width="0.9" height="15.0" fill="rgb(238,119,45)" rx="2" ry="2" />
<text  x="984.82" y="239.5" ></text>
</g>
<g >
<title>runtime.strequal (1 samples, 0.04%)</title><rect x="28.7" y="117" width="0.5" height="15.0" fill="rgb(234,226,23)" rx="2" ry="2" />
<text  x="31.72" y="127.5" ></text>
</g>
<g >
<title>runtime.wakep (39 samples, 1.47%)</title><rect x="1172.2" y="213" width="17.4" height="15.0" fill="rgb(216,10,2)" rx="2" ry="2" />
<text  x="1175.17" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (20 samples, 0.76%)</title><rect x="10.9" y="197" width="8.9" height="15.0" fill="rgb(244,82,48)" rx="2" ry="2" />
<text  x="13.89" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (53 samples, 2.00%)</title><rect x="657.7" y="149" width="23.7" height="15.0" fill="rgb(213,93,37)" rx="2" ry="2" />
<text  x="660.73" y="159.5" >r..</text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.04%)</title><rect x="30.1" y="133" width="0.4" height="15.0" fill="rgb(242,49,7)" rx="2" ry="2" />
<text  x="33.06" y="143.5" ></text>
</g>
<g >
<title>runtime.step (2 samples, 0.08%)</title><rect x="17.1" y="37" width="0.9" height="15.0" fill="rgb(218,67,1)" rx="2" ry="2" />
<text  x="20.13" y="47.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.04%)</title><rect x="196.3" y="229" width="0.5" height="15.0" fill="rgb(237,199,46)" rx="2" ry="2" />
<text  x="199.34" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (4 samples, 0.15%)</title><rect x="33.2" y="181" width="1.8" height="15.0" fill="rgb(210,74,10)" rx="2" ry="2" />
<text  x="36.18" y="191.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1 samples, 0.04%)</title><rect x="196.3" y="213" width="0.5" height="15.0" fill="rgb(229,1,41)" rx="2" ry="2" />
<text  x="199.34" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (25 samples, 0.94%)</title><rect x="24.3" y="245" width="11.1" height="15.0" fill="rgb(229,205,11)" rx="2" ry="2" />
<text  x="27.27" y="255.5" ></text>
</g>
<g >
<title>runtime.gosched_m (1 samples, 0.04%)</title><rect x="196.3" y="261" width="0.5" height="15.0" fill="rgb(236,190,18)" rx="2" ry="2" />
<text  x="199.34" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (4 samples, 0.15%)</title><rect x="26.9" y="197" width="1.8" height="15.0" fill="rgb(240,107,14)" rx="2" ry="2" />
<text  x="29.94" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WriteUDPConn (176 samples, 6.65%)</title><rect x="83.1" y="277" width="78.5" height="15.0" fill="rgb(253,66,2)" rx="2" ry="2" />
<text  x="86.11" y="287.5" >hslam.com..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (417 samples, 15.75%)</title><rect x="982.7" y="149" width="185.9" height="15.0" fill="rgb(241,152,22)" rx="2" ry="2" />
<text  x="985.71" y="159.5" >runtime.pthread_cond_sig..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.04%)</title><rect x="196.3" y="149" width="0.5" height="15.0" fill="rgb(227,215,14)" rx="2" ry="2" />
<text  x="199.34" y="159.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (39 samples, 1.47%)</title><rect x="1172.2" y="245" width="17.4" height="15.0" fill="rgb(208,120,10)" rx="2" ry="2" />
<text  x="1175.17" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="829.4" y="181" width="0.4" height="15.0" fill="rgb(251,81,0)" rx="2" ry="2" />
<text  x="832.36" y="191.5" ></text>
</g>
<g >
<title>reflect.Value.Call (4 samples, 0.15%)</title><rect x="26.9" y="181" width="1.8" height="15.0" fill="rgb(205,16,51)" rx="2" ry="2" />
<text  x="29.94" y="191.5" ></text>
</g>
<g >
<title>runtime.send (1 samples, 0.04%)</title><rect x="82.2" y="229" width="0.5" height="15.0" fill="rgb(241,111,45)" rx="2" ry="2" />
<text  x="85.22" y="239.5" ></text>
</g>
<g >
<title>runtime.notewakeup (425 samples, 16.06%)</title><rect x="982.7" y="181" width="189.5" height="15.0" fill="rgb(209,174,38)" rx="2" ry="2" />
<text  x="985.71" y="191.5" >runtime.notewakeup</text>
</g>
<g >
<title>net.(*UDPConn).writeTo (173 samples, 6.54%)</title><rect x="83.6" y="245" width="77.1" height="15.0" fill="rgb(248,16,2)" rx="2" ry="2" />
<text  x="86.55" y="255.5" >net.(*UD..</text>
</g>
<g >
<title>runtime.nilinterequal (1 samples, 0.04%)</title><rect x="29.2" y="133" width="0.4" height="15.0" fill="rgb(245,150,34)" rx="2" ry="2" />
<text  x="32.17" y="143.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (3 samples, 0.11%)</title><rect x="162.9" y="245" width="1.3" height="15.0" fill="rgb(209,6,42)" rx="2" ry="2" />
<text  x="165.91" y="255.5" ></text>
</g>
<g >
<title>runtime.newproc (2 samples, 0.08%)</title><rect x="167.4" y="197" width="0.9" height="15.0" fill="rgb(252,18,3)" rx="2" ry="2" />
<text  x="170.36" y="207.5" ></text>
</g>
<g >
<title>runtime.nanotime (75 samples, 2.83%)</title><rect x="201.7" y="213" width="33.4" height="15.0" fill="rgb(242,191,11)" rx="2" ry="2" />
<text  x="204.69" y="223.5" >ru..</text>
</g>
<g >
<title>runtime.exitsyscallfast (52 samples, 1.96%)</title><rect x="137.5" y="133" width="23.2" height="15.0" fill="rgb(236,97,52)" rx="2" ry="2" />
<text  x="140.50" y="143.5" >r..</text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (124 samples, 4.68%)</title><rect x="926.5" y="245" width="55.3" height="15.0" fill="rgb(233,182,49)" rx="2" ry="2" />
<text  x="929.54" y="255.5" >runti..</text>
</g>
<g >
<title>runtime.exitsyscallfast (8 samples, 0.30%)</title><rect x="78.7" y="133" width="3.5" height="15.0" fill="rgb(246,23,41)" rx="2" ry="2" />
<text  x="81.65" y="143.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.04%)</title><rect x="160.7" y="213" width="0.4" height="15.0" fill="rgb(225,111,18)" rx="2" ry="2" />
<text  x="163.68" y="223.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="828.9" y="165" width="0.5" height="15.0" fill="rgb(221,35,49)" rx="2" ry="2" />
<text  x="831.91" y="175.5" ></text>
</g>
<g >
<title>runtime.concatstrings (1 samples, 0.04%)</title><rect x="166.0" y="149" width="0.5" height="15.0" fill="rgb(219,186,13)" rx="2" ry="2" />
<text  x="169.03" y="159.5" ></text>
</g>
<g >
<title>runtime.chanrecv (2 samples, 0.08%)</title><rect x="160.7" y="245" width="0.9" height="15.0" fill="rgb(244,166,6)" rx="2" ry="2" />
<text  x="163.68" y="255.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Size (2 samples, 0.08%)</title><rect x="25.2" y="181" width="0.8" height="15.0" fill="rgb(238,209,18)" rx="2" ry="2" />
<text  x="28.16" y="191.5" ></text>
</g>
<g >
<title>main.main (68 samples, 2.57%)</title><rect x="164.2" y="261" width="30.4" height="15.0" fill="rgb(219,31,20)" rx="2" ry="2" />
<text  x="167.24" y="271.5" >ma..</text>
</g>
<g >
<title>runtime.notetsleep (2 samples, 0.08%)</title><rect x="981.8" y="213" width="0.9" height="15.0" fill="rgb(206,76,25)" rx="2" ry="2" />
<text  x="984.82" y="223.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="34.5" y="149" width="0.5" height="15.0" fill="rgb(230,166,11)" rx="2" ry="2" />
<text  x="37.52" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (39 samples, 1.47%)</title><rect x="1172.2" y="165" width="17.4" height="15.0" fill="rgb(240,196,51)" rx="2" ry="2" />
<text  x="1175.17" y="175.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (2 samples, 0.08%)</title><rect x="327.0" y="213" width="0.8" height="15.0" fill="rgb(220,217,28)" rx="2" ry="2" />
<text  x="329.96" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (2 samples, 0.08%)</title><rect x="981.8" y="197" width="0.9" height="15.0" fill="rgb(247,197,49)" rx="2" ry="2" />
<text  x="984.82" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (1 samples, 0.04%)</title><rect x="34.1" y="165" width="0.4" height="15.0" fill="rgb(205,146,7)" rx="2" ry="2" />
<text  x="37.07" y="175.5" ></text>
</g>
<g >
<title>runtime.notesleep (693 samples, 26.18%)</title><rect x="348.8" y="197" width="308.9" height="15.0" fill="rgb(213,211,23)" rx="2" ry="2" />
<text  x="351.80" y="207.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.startm (62 samples, 2.34%)</title><rect x="657.7" y="197" width="27.7" height="15.0" fill="rgb(213,116,44)" rx="2" ry="2" />
<text  x="660.73" y="207.5" >r..</text>
</g>
<g >
<title>runtime.stopm (2 samples, 0.08%)</title><rect x="195.0" y="213" width="0.9" height="15.0" fill="rgb(230,51,52)" rx="2" ry="2" />
<text  x="198.00" y="223.5" ></text>
</g>
<g >
<title>runtime.notesleep (2 samples, 0.08%)</title><rect x="195.0" y="197" width="0.9" height="15.0" fill="rgb(241,68,53)" rx="2" ry="2" />
<text  x="198.00" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalInt32Value (1 samples, 0.04%)</title><rect x="31.8" y="117" width="0.5" height="15.0" fill="rgb(220,89,29)" rx="2" ry="2" />
<text  x="34.84" y="127.5" ></text>
</g>
<g >
<title>reflect.Value.Interface (1 samples, 0.04%)</title><rect x="30.5" y="181" width="0.5" height="15.0" fill="rgb(217,24,20)" rx="2" ry="2" />
<text  x="33.51" y="191.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="23.4" y="197" width="0.4" height="15.0" fill="rgb(219,38,46)" rx="2" ry="2" />
<text  x="26.37" y="207.5" ></text>
</g>
<g >
<title>runtime.(*randomEnum).next (1 samples, 0.04%)</title><rect x="199.5" y="213" width="0.4" height="15.0" fill="rgb(233,87,53)" rx="2" ry="2" />
<text  x="202.46" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (18 samples, 0.68%)</title><rect x="26.9" y="213" width="8.1" height="15.0" fill="rgb(242,203,11)" rx="2" ry="2" />
<text  x="29.94" y="223.5" ></text>
</g>
<g >
<title>syscall.syscall6 (159 samples, 6.01%)</title><rect x="89.8" y="165" width="70.9" height="15.0" fill="rgb(237,14,31)" rx="2" ry="2" />
<text  x="92.80" y="175.5" >syscall...</text>
</g>
<g >
<title>runtime.schedule (3 samples, 0.11%)</title><rect x="194.6" y="245" width="1.3" height="15.0" fill="rgb(229,223,29)" rx="2" ry="2" />
<text  x="197.56" y="255.5" ></text>
</g>
<g >
<title>runtime.nanotime (130 samples, 4.91%)</title><rect x="688.5" y="229" width="57.9" height="15.0" fill="rgb(221,150,35)" rx="2" ry="2" />
<text  x="691.49" y="239.5" >runtim..</text>
</g>
<g >
<title>runtime.mapaccess1_fast64 (1 samples, 0.04%)</title><rect x="1189.6" y="229" width="0.4" height="15.0" fill="rgb(233,206,35)" rx="2" ry="2" />
<text  x="1192.55" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (3 samples, 0.11%)</title><rect x="980.5" y="181" width="1.3" height="15.0" fill="rgb(205,14,23)" rx="2" ry="2" />
<text  x="983.48" y="191.5" ></text>
</g>
<g >
<title>runtime.stopm (695 samples, 26.26%)</title><rect x="347.9" y="213" width="309.8" height="15.0" fill="rgb(237,187,1)" rx="2" ry="2" />
<text  x="350.91" y="223.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.04%)</title><rect x="347.9" y="197" width="0.5" height="15.0" fill="rgb(212,182,46)" rx="2" ry="2" />
<text  x="350.91" y="207.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.04%)</title><rect x="348.4" y="165" width="0.4" height="15.0" fill="rgb(230,82,35)" rx="2" ry="2" />
<text  x="351.35" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (5 samples, 0.19%)</title><rect x="29.2" y="197" width="2.2" height="15.0" fill="rgb(216,162,40)" rx="2" ry="2" />
<text  x="32.17" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (693 samples, 26.18%)</title><rect x="348.8" y="181" width="308.9" height="15.0" fill="rgb(253,36,8)" rx="2" ry="2" />
<text  x="351.80" y="191.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.deferreturn (3 samples, 0.11%)</title><rect x="88.0" y="197" width="1.4" height="15.0" fill="rgb(210,67,40)" rx="2" ry="2" />
<text  x="91.01" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (1 samples, 0.04%)</title><rect x="29.2" y="181" width="0.4" height="15.0" fill="rgb(208,99,49)" rx="2" ry="2" />
<text  x="32.17" y="191.5" ></text>
</g>
<g >
<title>runtime.kevent (115 samples, 4.34%)</title><rect x="274.8" y="197" width="51.3" height="15.0" fill="rgb(216,182,27)" rx="2" ry="2" />
<text  x="277.80" y="207.5" >runti..</text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.11%)</title><rect x="162.9" y="261" width="1.3" height="15.0" fill="rgb(248,226,47)" rx="2" ry="2" />
<text  x="165.91" y="271.5" ></text>
</g>
<g >
<title>all (2,647 samples, 100%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(227,183,27)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (9 samples, 0.34%)</title><rect x="681.4" y="149" width="4.0" height="15.0" fill="rgb(236,126,7)" rx="2" ry="2" />
<text  x="684.36" y="159.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.04%)</title><rect x="36.7" y="197" width="0.5" height="15.0" fill="rgb(222,53,35)" rx="2" ry="2" />
<text  x="39.75" y="207.5" ></text>
</g>
<g >
<title>net.ipToSockaddr (1 samples, 0.04%)</title><rect x="83.6" y="213" width="0.4" height="15.0" fill="rgb(243,221,1)" rx="2" ry="2" />
<text  x="86.55" y="223.5" ></text>
</g>
<g >
<title>runtime.runqgrab (45 samples, 1.70%)</title><rect x="327.8" y="197" width="20.1" height="15.0" fill="rgb(210,128,45)" rx="2" ry="2" />
<text  x="330.85" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (20 samples, 0.76%)</title><rect x="10.9" y="213" width="8.9" height="15.0" fill="rgb(225,34,29)" rx="2" ry="2" />
<text  x="13.89" y="223.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="655.9" y="149" width="0.5" height="15.0" fill="rgb(213,43,48)" rx="2" ry="2" />
<text  x="658.95" y="159.5" ></text>
</g>
<g >
<title>runtime.acquireSudog (1 samples, 0.04%)</title><rect x="160.7" y="229" width="0.4" height="15.0" fill="rgb(240,12,49)" rx="2" ry="2" />
<text  x="163.68" y="239.5" ></text>
</g>
<g >
<title>runtime.concatstring4 (1 samples, 0.04%)</title><rect x="166.0" y="165" width="0.5" height="15.0" fill="rgb(214,79,28)" rx="2" ry="2" />
<text  x="169.03" y="175.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.04%)</title><rect x="29.2" y="149" width="0.4" height="15.0" fill="rgb(253,62,35)" rx="2" ry="2" />
<text  x="32.17" y="159.5" ></text>
</g>
<g >
<title>runtime.wakep (62 samples, 2.34%)</title><rect x="657.7" y="213" width="27.7" height="15.0" fill="rgb(225,162,46)" rx="2" ry="2" />
<text  x="660.73" y="223.5" >r..</text>
</g>
<g >
<title>runtime.duffcopy (1 samples, 0.04%)</title><rect x="23.8" y="229" width="0.5" height="15.0" fill="rgb(214,67,46)" rx="2" ry="2" />
<text  x="26.82" y="239.5" ></text>
</g>
<g >
<title>reflect.Value.Type (1 samples, 0.04%)</title><rect x="31.0" y="181" width="0.4" height="15.0" fill="rgb(244,49,27)" rx="2" ry="2" />
<text  x="33.95" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (1 samples, 0.04%)</title><rect x="27.8" y="69" width="0.5" height="15.0" fill="rgb(225,156,24)" rx="2" ry="2" />
<text  x="30.83" y="79.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.04%)</title><rect x="23.4" y="213" width="0.4" height="15.0" fill="rgb(221,225,19)" rx="2" ry="2" />
<text  x="26.37" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="30.1" y="149" width="0.4" height="15.0" fill="rgb(229,3,20)" rx="2" ry="2" />
<text  x="33.06" y="159.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (2 samples, 0.08%)</title><rect x="160.7" y="261" width="0.9" height="15.0" fill="rgb(244,130,30)" rx="2" ry="2" />
<text  x="163.68" y="271.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).wait (1 samples, 0.04%)</title><rect x="39.0" y="181" width="0.4" height="15.0" fill="rgb(212,120,53)" rx="2" ry="2" />
<text  x="41.98" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (121 samples, 4.57%)</title><rect x="872.6" y="197" width="53.9" height="15.0" fill="rgb(237,178,38)" rx="2" ry="2" />
<text  x="875.60" y="207.5" >runti..</text>
</g>
<g >
<title>reflect.New (2 samples, 0.08%)</title><rect x="29.6" y="181" width="0.9" height="15.0" fill="rgb(252,126,7)" rx="2" ry="2" />
<text  x="32.61" y="191.5" ></text>
</g>
<g >
<title>runtime.gentraceback (14 samples, 0.53%)</title><rect x="13.6" y="117" width="6.2" height="15.0" fill="rgb(252,44,25)" rx="2" ry="2" />
<text  x="16.57" y="127.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profMap).lookup (1 samples, 0.04%)</title><rect x="1189.6" y="245" width="0.4" height="15.0" fill="rgb(227,4,20)" rx="2" ry="2" />
<text  x="1192.55" y="255.5" ></text>
</g>
<g >
<title>net.(*UDPConn).readFrom (101 samples, 3.82%)</title><rect x="37.2" y="245" width="45.0" height="15.0" fill="rgb(241,39,39)" rx="2" ry="2" />
<text  x="40.19" y="255.5" >net...</text>
</g>
<g >
<title>runtime.pthread_cond_wait_trampoline (1 samples, 0.04%)</title><rect x="162.0" y="261" width="0.5" height="15.0" fill="rgb(219,127,19)" rx="2" ry="2" />
<text  x="165.01" y="271.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.04%)</title><rect x="28.7" y="165" width="0.5" height="15.0" fill="rgb(221,185,36)" rx="2" ry="2" />
<text  x="31.72" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (1 samples, 0.04%)</title><rect x="31.8" y="133" width="0.5" height="15.0" fill="rgb(209,182,53)" rx="2" ry="2" />
<text  x="34.84" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (5 samples, 0.19%)</title><rect x="24.7" y="213" width="2.2" height="15.0" fill="rgb(206,6,48)" rx="2" ry="2" />
<text  x="27.71" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.04%)</title><rect x="27.8" y="101" width="0.5" height="15.0" fill="rgb(253,112,26)" rx="2" ry="2" />
<text  x="30.83" y="111.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.04%)</title><rect x="28.3" y="149" width="0.4" height="15.0" fill="rgb(248,182,18)" rx="2" ry="2" />
<text  x="31.28" y="159.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="29.2" y="165" width="0.4" height="15.0" fill="rgb(223,53,39)" rx="2" ry="2" />
<text  x="32.17" y="175.5" ></text>
</g>
<g >
<title>runtime.startm (121 samples, 4.57%)</title><rect x="872.6" y="213" width="53.9" height="15.0" fill="rgb(214,80,11)" rx="2" ry="2" />
<text  x="875.60" y="223.5" >runti..</text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.04%)</title><rect x="23.4" y="181" width="0.4" height="15.0" fill="rgb(251,66,29)" rx="2" ry="2" />
<text  x="26.37" y="191.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (121 samples, 4.57%)</title><rect x="872.6" y="245" width="53.9" height="15.0" fill="rgb(246,110,24)" rx="2" ry="2" />
<text  x="875.60" y="255.5" >runti..</text>
</g>
<g >
<title>runtime.osyield (3 samples, 0.11%)</title><rect x="199.9" y="197" width="1.3" height="15.0" fill="rgb(214,161,23)" rx="2" ry="2" />
<text  x="202.91" y="207.5" ></text>
</g>
<g >
<title>runtime.goexit0 (1 samples, 0.04%)</title><rect x="195.9" y="261" width="0.4" height="15.0" fill="rgb(244,14,52)" rx="2" ry="2" />
<text  x="198.89" y="271.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.04%)</title><rect x="197.2" y="229" width="0.5" height="15.0" fill="rgb(228,151,37)" rx="2" ry="2" />
<text  x="200.23" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (2 samples, 0.08%)</title><rect x="656.8" y="165" width="0.9" height="15.0" fill="rgb(227,220,4)" rx="2" ry="2" />
<text  x="659.84" y="175.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.04%)</title><rect x="21.1" y="197" width="0.5" height="15.0" fill="rgb(237,24,7)" rx="2" ry="2" />
<text  x="24.14" y="207.5" ></text>
</g>
<g >
<title>runtime.sysmon (418 samples, 15.79%)</title><rect x="686.3" y="245" width="186.3" height="15.0" fill="rgb(225,116,38)" rx="2" ry="2" />
<text  x="689.26" y="255.5" >runtime.sysmon</text>
</g>
<g >
<title>runtime.exitsyscall (8 samples, 0.30%)</title><rect x="78.7" y="149" width="3.5" height="15.0" fill="rgb(235,137,49)" rx="2" ry="2" />
<text  x="81.65" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (4 samples, 0.15%)</title><rect x="19.8" y="213" width="1.8" height="15.0" fill="rgb(237,197,52)" rx="2" ry="2" />
<text  x="22.81" y="223.5" ></text>
</g>
<g >
<title>runtime.chansend1 (1 samples, 0.04%)</title><rect x="36.7" y="261" width="0.5" height="15.0" fill="rgb(212,12,54)" rx="2" ry="2" />
<text  x="39.75" y="271.5" ></text>
</g>
<g >
<title>runtime.(*guintptr).cas (1 samples, 0.04%)</title><rect x="685.8" y="213" width="0.5" height="15.0" fill="rgb(236,207,18)" rx="2" ry="2" />
<text  x="688.81" y="223.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (1 samples, 0.04%)</title><rect x="137.0" y="149" width="0.5" height="15.0" fill="rgb(222,221,38)" rx="2" ry="2" />
<text  x="140.05" y="159.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.04%)</title><rect x="201.2" y="197" width="0.5" height="15.0" fill="rgb(230,51,22)" rx="2" ry="2" />
<text  x="204.24" y="207.5" ></text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.08%)</title><rect x="35.9" y="229" width="0.8" height="15.0" fill="rgb(248,83,19)" rx="2" ry="2" />
<text  x="38.86" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (20 samples, 0.76%)</title><rect x="10.9" y="229" width="8.9" height="15.0" fill="rgb(223,122,15)" rx="2" ry="2" />
<text  x="13.89" y="239.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (59 samples, 2.23%)</title><rect x="10.4" y="261" width="26.3" height="15.0" fill="rgb(254,38,49)" rx="2" ry="2" />
<text  x="13.45" y="271.5" >h..</text>
</g>
<g >
<title>runtime.netpollcheckerr (1 samples, 0.04%)</title><rect x="39.0" y="149" width="0.4" height="15.0" fill="rgb(217,113,48)" rx="2" ry="2" />
<text  x="41.98" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (62 samples, 2.34%)</title><rect x="657.7" y="165" width="27.7" height="15.0" fill="rgb(241,21,53)" rx="2" ry="2" />
<text  x="660.73" y="175.5" >r..</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.04%)</title><rect x="196.3" y="165" width="0.5" height="15.0" fill="rgb(219,213,22)" rx="2" ry="2" />
<text  x="199.34" y="175.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.08%)</title><rect x="35.9" y="245" width="0.8" height="15.0" fill="rgb(205,126,7)" rx="2" ry="2" />
<text  x="38.86" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (2 samples, 0.08%)</title><rect x="25.2" y="165" width="0.8" height="15.0" fill="rgb(251,171,7)" rx="2" ry="2" />
<text  x="28.16" y="175.5" ></text>
</g>
<g >
<title>runtime.gostringnocopy (1 samples, 0.04%)</title><rect x="195.9" y="213" width="0.4" height="15.0" fill="rgb(229,18,44)" rx="2" ry="2" />
<text  x="198.89" y="223.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithRequest).XXX_Unmarshal (1 samples, 0.04%)</title><rect x="31.8" y="165" width="0.5" height="15.0" fill="rgb(215,161,19)" rx="2" ry="2" />
<text  x="34.84" y="175.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ArgsDecode (3 samples, 0.11%)</title><rect x="31.4" y="197" width="1.3" height="15.0" fill="rgb(249,11,44)" rx="2" ry="2" />
<text  x="34.40" y="207.5" ></text>
</g>
<g >
<title>runtime.send (1 samples, 0.04%)</title><rect x="36.7" y="229" width="0.5" height="15.0" fill="rgb(205,121,11)" rx="2" ry="2" />
<text  x="39.75" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.04%)</title><rect x="34.1" y="149" width="0.4" height="15.0" fill="rgb(241,99,42)" rx="2" ry="2" />
<text  x="37.07" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (1 samples, 0.04%)</title><rect x="31.8" y="181" width="0.5" height="15.0" fill="rgb(246,64,48)" rx="2" ry="2" />
<text  x="34.84" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (118 samples, 4.46%)</title><rect x="926.5" y="181" width="52.6" height="15.0" fill="rgb(248,36,20)" rx="2" ry="2" />
<text  x="929.54" y="191.5" >runti..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalInt32Value (17 samples, 0.64%)</title><rect x="12.2" y="165" width="7.6" height="15.0" fill="rgb(223,30,33)" rx="2" ry="2" />
<text  x="15.23" y="175.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.15%)</title><rect x="199.9" y="213" width="1.8" height="15.0" fill="rgb(208,163,13)" rx="2" ry="2" />
<text  x="202.91" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (3 samples, 0.11%)</title><rect x="22.0" y="197" width="1.4" height="15.0" fill="rgb(208,225,18)" rx="2" ry="2" />
<text  x="25.04" y="207.5" ></text>
</g>
<g >
<title>runtime.libcCall (2 samples, 0.08%)</title><rect x="656.8" y="149" width="0.9" height="15.0" fill="rgb(232,109,6)" rx="2" ry="2" />
<text  x="659.84" y="159.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="776.8" y="197" width="0.4" height="15.0" fill="rgb(253,93,19)" rx="2" ry="2" />
<text  x="779.75" y="207.5" ></text>
</g>
<g >
<title>runtime.getStackMap (6 samples, 0.23%)</title><rect x="15.3" y="85" width="2.7" height="15.0" fill="rgb(214,210,21)" rx="2" ry="2" />
<text  x="18.35" y="95.5" ></text>
</g>
<g >
<title>runtime.runqsteal (45 samples, 1.70%)</title><rect x="327.8" y="213" width="20.1" height="15.0" fill="rgb(245,72,41)" rx="2" ry="2" />
<text  x="330.85" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="81.8" y="117" width="0.4" height="15.0" fill="rgb(212,39,2)" rx="2" ry="2" />
<text  x="84.77" y="127.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (2 samples, 0.08%)</title><rect x="20.3" y="197" width="0.8" height="15.0" fill="rgb(216,50,43)" rx="2" ry="2" />
<text  x="23.25" y="207.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.04%)</title><rect x="348.4" y="181" width="0.4" height="15.0" fill="rgb(250,29,29)" rx="2" ry="2" />
<text  x="351.35" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.04%)</title><rect x="327.0" y="165" width="0.4" height="15.0" fill="rgb(249,208,48)" rx="2" ry="2" />
<text  x="329.96" y="175.5" ></text>
</g>
<g >
<title>syscall.Sendto (160 samples, 6.04%)</title><rect x="89.4" y="197" width="71.3" height="15.0" fill="rgb(217,224,9)" rx="2" ry="2" />
<text  x="92.35" y="207.5" >syscall...</text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1 samples, 0.04%)</title><rect x="137.0" y="117" width="0.5" height="15.0" fill="rgb(234,62,12)" rx="2" ry="2" />
<text  x="140.05" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (3 samples, 0.11%)</title><rect x="979.1" y="181" width="1.4" height="15.0" fill="rgb(244,154,9)" rx="2" ry="2" />
<text  x="982.14" y="191.5" ></text>
</g>
<g >
<title>runtime.chansend1 (1 samples, 0.04%)</title><rect x="82.2" y="261" width="0.5" height="15.0" fill="rgb(225,70,0)" rx="2" ry="2" />
<text  x="85.22" y="271.5" ></text>
</g>
<g >
<title>runtime.isSystemGoroutine (1 samples, 0.04%)</title><rect x="167.8" y="133" width="0.5" height="15.0" fill="rgb(222,100,31)" rx="2" ry="2" />
<text  x="170.81" y="143.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (2 samples, 0.08%)</title><rect x="29.6" y="165" width="0.9" height="15.0" fill="rgb(240,126,14)" rx="2" ry="2" />
<text  x="32.61" y="175.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (52 samples, 1.96%)</title><rect x="137.5" y="149" width="23.2" height="15.0" fill="rgb(253,48,6)" rx="2" ry="2" />
<text  x="140.50" y="159.5" >r..</text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.11%)</title><rect x="162.9" y="213" width="1.3" height="15.0" fill="rgb(220,104,20)" rx="2" ry="2" />
<text  x="165.91" y="223.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="779.4" y="181" width="0.5" height="15.0" fill="rgb(235,92,1)" rx="2" ry="2" />
<text  x="782.43" y="191.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (425 samples, 16.06%)</title><rect x="982.7" y="245" width="189.5" height="15.0" fill="rgb(208,10,7)" rx="2" ry="2" />
<text  x="985.71" y="255.5" >runtime.goready.func1</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.04%)</title><rect x="33.6" y="133" width="0.5" height="15.0" fill="rgb(208,137,1)" rx="2" ry="2" />
<text  x="36.63" y="143.5" ></text>
</g>
<g >
<title>runtime.notewakeup (39 samples, 1.47%)</title><rect x="1172.2" y="181" width="17.4" height="15.0" fill="rgb(221,44,53)" rx="2" ry="2" />
<text  x="1175.17" y="191.5" ></text>
</g>
<g >
<title>runtime.efaceeq (1 samples, 0.04%)</title><rect x="28.7" y="133" width="0.5" height="15.0" fill="rgb(239,132,18)" rx="2" ry="2" />
<text  x="31.72" y="143.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.pointer.isNil (1 samples, 0.04%)</title><rect x="22.5" y="165" width="0.4" height="15.0" fill="rgb(221,32,31)" rx="2" ry="2" />
<text  x="25.48" y="175.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (2 samples, 0.08%)</title><rect x="195.0" y="165" width="0.9" height="15.0" fill="rgb(247,172,46)" rx="2" ry="2" />
<text  x="198.00" y="175.5" ></text>
</g>
<g >
<title>reflect.valueInterface (1 samples, 0.04%)</title><rect x="30.5" y="165" width="0.5" height="15.0" fill="rgb(239,22,46)" rx="2" ry="2" />
<text  x="33.51" y="175.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.04%)</title><rect x="35.4" y="245" width="0.5" height="15.0" fill="rgb(235,142,27)" rx="2" ry="2" />
<text  x="38.41" y="255.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollWait (1 samples, 0.04%)</title><rect x="39.0" y="165" width="0.4" height="15.0" fill="rgb(237,129,43)" rx="2" ry="2" />
<text  x="41.98" y="175.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.04%)</title><rect x="32.3" y="165" width="0.4" height="15.0" fill="rgb(215,124,12)" rx="2" ry="2" />
<text  x="35.29" y="175.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (117 samples, 4.42%)</title><rect x="872.6" y="165" width="52.2" height="15.0" fill="rgb(208,167,16)" rx="2" ry="2" />
<text  x="875.60" y="175.5" >runti..</text>
</g>
<g >
<title>runtime.selectgo (59 samples, 2.23%)</title><rect x="168.3" y="197" width="26.3" height="15.0" fill="rgb(214,21,11)" rx="2" ry="2" />
<text  x="171.25" y="207.5" >r..</text>
</g>
<g >
<title>runtime.asmcgocall (3 samples, 0.11%)</title><rect x="161.6" y="277" width="1.3" height="15.0" fill="rgb(237,81,52)" rx="2" ry="2" />
<text  x="164.57" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (6 samples, 0.23%)</title><rect x="1169.5" y="149" width="2.7" height="15.0" fill="rgb(217,115,2)" rx="2" ry="2" />
<text  x="1172.49" y="159.5" ></text>
</g>
<g >
<title>runtime/pprof.profileWriter (1 samples, 0.04%)</title><rect x="1189.6" y="277" width="0.4" height="15.0" fill="rgb(239,175,10)" rx="2" ry="2" />
<text  x="1192.55" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (690 samples, 26.07%)</title><rect x="348.8" y="165" width="307.6" height="15.0" fill="rgb(251,58,17)" rx="2" ry="2" />
<text  x="351.80" y="175.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.semasleep (118 samples, 4.46%)</title><rect x="777.2" y="197" width="52.6" height="15.0" fill="rgb(228,28,34)" rx="2" ry="2" />
<text  x="780.20" y="207.5" >runti..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.decodeVarint (1 samples, 0.04%)</title><rect x="31.8" y="101" width="0.5" height="15.0" fill="rgb(231,164,38)" rx="2" ry="2" />
<text  x="34.84" y="111.5" ></text>
</g>
<g >
<title>runtime.semawakeup (425 samples, 16.06%)</title><rect x="982.7" y="165" width="189.5" height="15.0" fill="rgb(243,207,23)" rx="2" ry="2" />
<text  x="985.71" y="175.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.pthread_mutex_lock_trampoline (1 samples, 0.04%)</title><rect x="162.5" y="261" width="0.4" height="15.0" fill="rgb(210,215,10)" rx="2" ry="2" />
<text  x="165.46" y="271.5" ></text>
</g>
<g >
<title>net.(*UDPAddr).sockaddr (1 samples, 0.04%)</title><rect x="83.6" y="229" width="0.4" height="15.0" fill="rgb(214,173,7)" rx="2" ry="2" />
<text  x="86.55" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (2 samples, 0.08%)</title><rect x="22.0" y="181" width="0.9" height="15.0" fill="rgb(243,206,39)" rx="2" ry="2" />
<text  x="25.04" y="191.5" ></text>
</g>
<g >
<title>runtime.nanotime_trampoline (1 samples, 0.04%)</title><rect x="161.6" y="261" width="0.4" height="15.0" fill="rgb(220,56,12)" rx="2" ry="2" />
<text  x="164.57" y="271.5" ></text>
</g>
<g >
<title>runtime.newobject (4 samples, 0.15%)</title><rect x="19.8" y="229" width="1.8" height="15.0" fill="rgb(253,171,50)" rx="2" ry="2" />
<text  x="22.81" y="239.5" ></text>
</g>
<g >
<title>runtime.assertE2I (1 samples, 0.04%)</title><rect x="32.3" y="181" width="0.4" height="15.0" fill="rgb(216,150,38)" rx="2" ry="2" />
<text  x="35.29" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeUDPConn (61 samples, 2.30%)</title><rect x="10.0" y="277" width="27.2" height="15.0" fill="rgb(225,54,47)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >h..</text>
</g>
<g >
<title>runtime.notewakeup (124 samples, 4.68%)</title><rect x="926.5" y="213" width="55.3" height="15.0" fill="rgb(240,9,15)" rx="2" ry="2" />
<text  x="929.54" y="223.5" >runti..</text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.04%)</title><rect x="81.8" y="101" width="0.4" height="15.0" fill="rgb(245,78,40)" rx="2" ry="2" />
<text  x="84.77" y="111.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.04%)</title><rect x="166.0" y="133" width="0.5" height="15.0" fill="rgb(218,143,44)" rx="2" ry="2" />
<text  x="169.03" y="143.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.08%)</title><rect x="327.0" y="197" width="0.8" height="15.0" fill="rgb(223,11,6)" rx="2" ry="2" />
<text  x="329.96" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (38 samples, 1.44%)</title><rect x="1172.2" y="149" width="16.9" height="15.0" fill="rgb(226,5,17)" rx="2" ry="2" />
<text  x="1175.17" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="28.3" y="133" width="0.4" height="15.0" fill="rgb(223,66,21)" rx="2" ry="2" />
<text  x="31.28" y="143.5" ></text>
</g>
<g >
<title>runtime.park_m (1,098 samples, 41.48%)</title><rect x="196.8" y="261" width="489.5" height="15.0" fill="rgb(222,40,54)" rx="2" ry="2" />
<text  x="199.79" y="271.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.pidleput (2 samples, 0.08%)</title><rect x="326.1" y="213" width="0.9" height="15.0" fill="rgb(222,198,28)" rx="2" ry="2" />
<text  x="329.06" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (5 samples, 0.19%)</title><rect x="21.6" y="229" width="2.2" height="15.0" fill="rgb(212,87,48)" rx="2" ry="2" />
<text  x="24.59" y="239.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.04%)</title><rect x="196.3" y="181" width="0.5" height="15.0" fill="rgb(237,1,10)" rx="2" ry="2" />
<text  x="199.34" y="191.5" ></text>
</g>
<g >
<title>runtime.aeshash64 (1 samples, 0.04%)</title><rect x="1189.6" y="213" width="0.4" height="15.0" fill="rgb(242,74,30)" rx="2" ry="2" />
<text  x="1192.55" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (1 samples, 0.04%)</title><rect x="22.9" y="181" width="0.5" height="15.0" fill="rgb(232,138,32)" rx="2" ry="2" />
<text  x="25.93" y="191.5" ></text>
</g>
<g >
<title>syscall.anyToSockaddr (2 samples, 0.08%)</title><rect x="40.8" y="181" width="0.9" height="15.0" fill="rgb(208,45,30)" rx="2" ry="2" />
<text  x="43.76" y="191.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.04%)</title><rect x="28.7" y="181" width="0.5" height="15.0" fill="rgb(240,188,45)" rx="2" ry="2" />
<text  x="31.72" y="191.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).WriteTo (172 samples, 6.50%)</title><rect x="84.0" y="213" width="76.7" height="15.0" fill="rgb(226,119,53)" rx="2" ry="2" />
<text  x="87.00" y="223.5" >internal..</text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="325.6" y="181" width="0.5" height="15.0" fill="rgb(244,159,29)" rx="2" ry="2" />
<text  x="328.62" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Marshal (1 samples, 0.04%)</title><rect x="33.6" y="165" width="0.5" height="15.0" fill="rgb(239,100,40)" rx="2" ry="2" />
<text  x="36.63" y="175.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (2 samples, 0.08%)</title><rect x="18.9" y="101" width="0.9" height="15.0" fill="rgb(244,61,9)" rx="2" ry="2" />
<text  x="21.92" y="111.5" ></text>
</g>
<g >
<title>runtime.main (68 samples, 2.57%)</title><rect x="164.2" y="277" width="30.4" height="15.0" fill="rgb(227,175,12)" rx="2" ry="2" />
<text  x="167.24" y="287.5" >ru..</text>
</g>
<g >
<title>syscall.sendto (159 samples, 6.01%)</title><rect x="89.8" y="181" width="70.9" height="15.0" fill="rgb(218,49,12)" rx="2" ry="2" />
<text  x="92.80" y="191.5" >syscall...</text>
</g>
<g >
<title>runtime.(*_type).textOff (1 samples, 0.04%)</title><rect x="27.4" y="101" width="0.4" height="15.0" fill="rgb(240,149,29)" rx="2" ry="2" />
<text  x="30.39" y="111.5" ></text>
</g>
<g >
<title>net.(*UDPConn).WriteToUDP (173 samples, 6.54%)</title><rect x="83.6" y="261" width="77.1" height="15.0" fill="rgb(249,32,6)" rx="2" ry="2" />
<text  x="86.55" y="271.5" >net.(*UD..</text>
</g>
<g >
<title>runtime.adjustpointers (2 samples, 0.08%)</title><rect x="14.5" y="85" width="0.8" height="15.0" fill="rgb(225,22,21)" rx="2" ry="2" />
<text  x="17.46" y="95.5" ></text>
</g>
<g >
<title>runtime.findnull (1 samples, 0.04%)</title><rect x="195.9" y="197" width="0.4" height="15.0" fill="rgb(209,8,17)" rx="2" ry="2" />
<text  x="198.89" y="207.5" ></text>
</g>
<g >
<title>net.(*UDPConn).ReadFromUDP (101 samples, 3.82%)</title><rect x="37.2" y="261" width="45.0" height="15.0" fill="rgb(253,196,4)" rx="2" ry="2" />
<text  x="40.19" y="271.5" >net...</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*Arith).Multiply (1 samples, 0.04%)</title><rect x="26.9" y="149" width="0.5" height="15.0" fill="rgb(241,22,38)" rx="2" ry="2" />
<text  x="29.94" y="159.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profileBuilder).addCPUData (1 samples, 0.04%)</title><rect x="1189.6" y="261" width="0.4" height="15.0" fill="rgb(206,88,0)" rx="2" ry="2" />
<text  x="1192.55" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (19 samples, 0.72%)</title><rect x="11.3" y="181" width="8.5" height="15.0" fill="rgb(217,153,47)" rx="2" ry="2" />
<text  x="14.34" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="327.4" y="165" width="0.4" height="15.0" fill="rgb(242,43,35)" rx="2" ry="2" />
<text  x="330.40" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.04%)</title><rect x="33.6" y="149" width="0.5" height="15.0" fill="rgb(234,146,46)" rx="2" ry="2" />
<text  x="36.63" y="159.5" ></text>
</g>
<g >
<title>syscall.recvfrom (91 samples, 3.44%)</title><rect x="41.7" y="181" width="40.5" height="15.0" fill="rgb(232,64,30)" rx="2" ry="2" />
<text  x="44.65" y="191.5" >sys..</text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.04%)</title><rect x="26.5" y="197" width="0.4" height="15.0" fill="rgb(212,88,19)" rx="2" ry="2" />
<text  x="29.49" y="207.5" ></text>
</g>
<g >
<title>runtime.step (2 samples, 0.08%)</title><rect x="18.9" y="69" width="0.9" height="15.0" fill="rgb(232,171,31)" rx="2" ry="2" />
<text  x="21.92" y="79.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (5 samples, 0.19%)</title><rect x="32.7" y="197" width="2.3" height="15.0" fill="rgb(238,207,25)" rx="2" ry="2" />
<text  x="35.74" y="207.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (58 samples, 2.19%)</title><rect x="168.3" y="181" width="25.8" height="15.0" fill="rgb(223,108,21)" rx="2" ry="2" />
<text  x="171.25" y="191.5" >r..</text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (2 samples, 0.08%)</title><rect x="981.8" y="245" width="0.9" height="15.0" fill="rgb(208,222,41)" rx="2" ry="2" />
<text  x="984.82" y="255.5" ></text>
</g>
<g >
<title>memeqbody (1 samples, 0.04%)</title><rect x="29.2" y="85" width="0.4" height="15.0" fill="rgb(217,168,18)" rx="2" ry="2" />
<text  x="32.17" y="95.5" ></text>
</g>
<g >
<title>runtime.newstack (15 samples, 0.57%)</title><rect x="13.1" y="149" width="6.7" height="15.0" fill="rgb(222,139,35)" rx="2" ry="2" />
<text  x="16.12" y="159.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.08%)</title><rect x="195.0" y="181" width="0.9" height="15.0" fill="rgb(238,64,1)" rx="2" ry="2" />
<text  x="198.00" y="191.5" ></text>
</g>
<g >
<title>runtime.semawakeup (121 samples, 4.57%)</title><rect x="872.6" y="181" width="53.9" height="15.0" fill="rgb(251,23,20)" rx="2" ry="2" />
<text  x="875.60" y="191.5" >runti..</text>
</g>
<g >
<title>runtime.goready (1 samples, 0.04%)</title><rect x="82.2" y="213" width="0.5" height="15.0" fill="rgb(219,220,42)" rx="2" ry="2" />
<text  x="85.22" y="223.5" ></text>
</g>
<g >
<title>runtime.pcvalue (3 samples, 0.11%)</title><rect x="16.7" y="53" width="1.3" height="15.0" fill="rgb(250,208,12)" rx="2" ry="2" />
<text  x="19.69" y="63.5" ></text>
</g>
<g >
<title>runtime.handoffp (1 samples, 0.04%)</title><rect x="137.0" y="101" width="0.5" height="15.0" fill="rgb(238,50,43)" rx="2" ry="2" />
<text  x="140.05" y="111.5" ></text>
</g>
<g >
<title>runtime.mstart (1,129 samples, 42.65%)</title><rect x="686.3" y="277" width="503.3" height="15.0" fill="rgb(229,28,14)" rx="2" ry="2" />
<text  x="689.26" y="287.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1189.1" y="149" width="0.5" height="15.0" fill="rgb(223,66,2)" rx="2" ry="2" />
<text  x="1192.11" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="166.9" y="133" width="0.5" height="15.0" fill="rgb(244,60,11)" rx="2" ry="2" />
<text  x="169.92" y="143.5" ></text>
</g>
<g >
<title>runtime.chansend.func1 (1 samples, 0.04%)</title><rect x="36.7" y="213" width="0.5" height="15.0" fill="rgb(208,119,47)" rx="2" ry="2" />
<text  x="39.75" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.decodeVarint (2 samples, 0.08%)</title><rect x="12.2" y="149" width="0.9" height="15.0" fill="rgb(208,104,38)" rx="2" ry="2" />
<text  x="15.23" y="159.5" ></text>
</g>
<g >
<title>reflect.methodReceiver (2 samples, 0.08%)</title><rect x="27.4" y="149" width="0.9" height="15.0" fill="rgb(227,225,6)" rx="2" ry="2" />
<text  x="30.39" y="159.5" ></text>
</g>
<g >
<title>runtime.funcname (1 samples, 0.04%)</title><rect x="195.9" y="229" width="0.4" height="15.0" fill="rgb(228,214,41)" rx="2" ry="2" />
<text  x="198.89" y="239.5" ></text>
</g>
<g >
<title>runtime.usleep (3 samples, 0.11%)</title><rect x="199.9" y="181" width="1.3" height="15.0" fill="rgb(228,182,15)" rx="2" ry="2" />
<text  x="202.91" y="191.5" ></text>
</g>
<g >
<title>runtime.findfunc (2 samples, 0.08%)</title><rect x="18.0" y="101" width="0.9" height="15.0" fill="rgb(252,14,39)" rx="2" ry="2" />
<text  x="21.02" y="111.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (25 samples, 0.94%)</title><rect x="24.3" y="229" width="11.1" height="15.0" fill="rgb(213,144,34)" rx="2" ry="2" />
<text  x="27.27" y="239.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (2 samples, 0.08%)</title><rect x="167.4" y="165" width="0.9" height="15.0" fill="rgb(245,183,23)" rx="2" ry="2" />
<text  x="170.36" y="175.5" ></text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.04%)</title><rect x="167.8" y="117" width="0.5" height="15.0" fill="rgb(212,75,6)" rx="2" ry="2" />
<text  x="170.81" y="127.5" ></text>
</g>
<g >
<title>net.(*UDPAddr).String (3 samples, 0.11%)</title><rect x="166.0" y="197" width="1.4" height="15.0" fill="rgb(212,70,30)" rx="2" ry="2" />
<text  x="169.03" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="26.5" y="181" width="0.4" height="15.0" fill="rgb(244,89,4)" rx="2" ry="2" />
<text  x="29.49" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (1 samples, 0.04%)</title><rect x="27.8" y="85" width="0.5" height="15.0" fill="rgb(226,164,51)" rx="2" ry="2" />
<text  x="30.83" y="95.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*UDPListener).Serve (68 samples, 2.57%)</title><rect x="164.2" y="213" width="30.4" height="15.0" fill="rgb(218,155,1)" rx="2" ry="2" />
<text  x="167.24" y="223.5" >hs..</text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.04%)</title><rect x="39.4" y="197" width="0.5" height="15.0" fill="rgb(214,88,5)" rx="2" ry="2" />
<text  x="42.42" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (711 samples, 26.86%)</title><rect x="872.6" y="261" width="317.0" height="15.0" fill="rgb(254,40,4)" rx="2" ry="2" />
<text  x="875.60" y="271.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.releaseSudog (1 samples, 0.04%)</title><rect x="194.1" y="181" width="0.5" height="15.0" fill="rgb(214,110,5)" rx="2" ry="2" />
<text  x="197.11" y="191.5" ></text>
</g>
<g >
<title>runtime.releaseSudog (1 samples, 0.04%)</title><rect x="161.1" y="229" width="0.5" height="15.0" fill="rgb(248,67,28)" rx="2" ry="2" />
<text  x="164.12" y="239.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.04%)</title><rect x="194.6" y="181" width="0.4" height="15.0" fill="rgb(205,33,23)" rx="2" ry="2" />
<text  x="197.56" y="191.5" ></text>
</g>
<g >
<title>runtime.schedule (1,098 samples, 41.48%)</title><rect x="196.8" y="245" width="489.5" height="15.0" fill="rgb(244,50,54)" rx="2" ry="2" />
<text  x="199.79" y="255.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.netpoll (204 samples, 7.71%)</title><rect x="235.1" y="213" width="91.0" height="15.0" fill="rgb(234,148,8)" rx="2" ry="2" />
<text  x="238.12" y="223.5" >runtime.ne..</text>
</g>
<g >
<title>runtime.chansend (1 samples, 0.04%)</title><rect x="82.2" y="245" width="0.5" height="15.0" fill="rgb(213,213,50)" rx="2" ry="2" />
<text  x="85.22" y="255.5" ></text>
</g>
<g >
<title>runtime.ready (425 samples, 16.06%)</title><rect x="982.7" y="229" width="189.5" height="15.0" fill="rgb(250,178,26)" rx="2" ry="2" />
<text  x="985.71" y="239.5" >runtime.ready</text>
</g>
<g >
<title>runtime.notewakeup (62 samples, 2.34%)</title><rect x="657.7" y="181" width="27.7" height="15.0" fill="rgb(243,194,36)" rx="2" ry="2" />
<text  x="660.73" y="191.5" >r..</text>
</g>
<g >
<title>net.JoinHostPort (1 samples, 0.04%)</title><rect x="166.0" y="181" width="0.5" height="15.0" fill="rgb(222,218,51)" rx="2" ry="2" />
<text  x="169.03" y="191.5" ></text>
</g>
<g >
<title>runtime.heapBits.next (1 samples, 0.04%)</title><rect x="163.8" y="197" width="0.4" height="15.0" fill="rgb(207,200,5)" rx="2" ry="2" />
<text  x="166.80" y="207.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.04%)</title><rect x="196.3" y="245" width="0.5" height="15.0" fill="rgb(214,219,8)" rx="2" ry="2" />
<text  x="199.34" y="255.5" ></text>
</g>
<g >
<title>runtime.isSystemGoroutine (1 samples, 0.04%)</title><rect x="195.9" y="245" width="0.4" height="15.0" fill="rgb(249,118,53)" rx="2" ry="2" />
<text  x="198.89" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="137.0" y="133" width="0.5" height="15.0" fill="rgb(213,201,23)" rx="2" ry="2" />
<text  x="140.05" y="143.5" ></text>
</g>
<g >
<title>runtime.usleep (45 samples, 1.70%)</title><rect x="327.8" y="181" width="20.1" height="15.0" fill="rgb(233,83,22)" rx="2" ry="2" />
<text  x="330.85" y="191.5" ></text>
</g>
<g >
<title>runtime.runqget (2 samples, 0.08%)</title><rect x="685.4" y="229" width="0.9" height="15.0" fill="rgb(250,89,33)" rx="2" ry="2" />
<text  x="688.37" y="239.5" ></text>
</g>
<g >
<title>runtime.findrunnable (3 samples, 0.11%)</title><rect x="194.6" y="229" width="1.3" height="15.0" fill="rgb(232,219,11)" rx="2" ry="2" />
<text  x="197.56" y="239.5" ></text>
</g>
<g >
<title>runtime.startm (425 samples, 16.06%)</title><rect x="982.7" y="197" width="189.5" height="15.0" fill="rgb(232,10,12)" rx="2" ry="2" />
<text  x="985.71" y="207.5" >runtime.startm</text>
</g>
<g >
<title>runtime.exitsyscall0 (3 samples, 0.11%)</title><rect x="194.6" y="261" width="1.3" height="15.0" fill="rgb(207,197,31)" rx="2" ry="2" />
<text  x="197.56" y="271.5" ></text>
</g>
<g >
<title>runtime.pcvalue (2 samples, 0.08%)</title><rect x="18.9" y="85" width="0.9" height="15.0" fill="rgb(243,198,16)" rx="2" ry="2" />
<text  x="21.92" y="95.5" ></text>
</g>
<g >
<title>runtime.chansend (1 samples, 0.04%)</title><rect x="36.7" y="245" width="0.5" height="15.0" fill="rgb(212,200,4)" rx="2" ry="2" />
<text  x="39.75" y="255.5" ></text>
</g>
<g >
<title>syscall.Recvfrom (95 samples, 3.59%)</title><rect x="39.9" y="197" width="42.3" height="15.0" fill="rgb(226,40,13)" rx="2" ry="2" />
<text  x="42.87" y="207.5" >sys..</text>
</g>
<g >
<title>runtime.gcBgMarkWorker (3 samples, 0.11%)</title><rect x="162.9" y="277" width="1.3" height="15.0" fill="rgb(230,107,15)" rx="2" ry="2" />
<text  x="165.91" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (111 samples, 4.19%)</title><rect x="779.9" y="181" width="49.5" height="15.0" fill="rgb(205,129,7)" rx="2" ry="2" />
<text  x="782.88" y="191.5" >runt..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (1 samples, 0.04%)</title><rect x="28.7" y="197" width="0.5" height="15.0" fill="rgb(230,131,16)" rx="2" ry="2" />
<text  x="31.72" y="207.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (124 samples, 4.68%)</title><rect x="926.5" y="229" width="55.3" height="15.0" fill="rgb(250,76,2)" rx="2" ry="2" />
<text  x="929.54" y="239.5" >runti..</text>
</g>
<g >
<title>runtime.copystack (14 samples, 0.53%)</title><rect x="13.6" y="133" width="6.2" height="15.0" fill="rgb(231,224,54)" rx="2" ry="2" />
<text  x="16.57" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ListenAndServe (68 samples, 2.57%)</title><rect x="164.2" y="229" width="30.4" height="15.0" fill="rgb(210,173,3)" rx="2" ry="2" />
<text  x="167.24" y="239.5" >hs..</text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.08%)</title><rect x="1168.6" y="149" width="0.9" height="15.0" fill="rgb(225,139,48)" rx="2" ry="2" />
<text  x="1171.60" y="159.5" ></text>
</g>
<g >
<title>runtime.nilinterequal (1 samples, 0.04%)</title><rect x="28.7" y="149" width="0.5" height="15.0" fill="rgb(235,134,33)" rx="2" ry="2" />
<text  x="31.72" y="159.5" ></text>
</g>
<g >
<title>reflect.Value.call (4 samples, 0.15%)</title><rect x="26.9" y="165" width="1.8" height="15.0" fill="rgb(217,169,50)" rx="2" ry="2" />
<text  x="29.94" y="175.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (3 samples, 0.11%)</title><rect x="16.7" y="69" width="1.3" height="15.0" fill="rgb(235,46,25)" rx="2" ry="2" />
<text  x="19.69" y="79.5" ></text>
</g>
<g >
<title>runtime.runqsteal (1 samples, 0.04%)</title><rect x="194.6" y="213" width="0.4" height="15.0" fill="rgb(245,8,3)" rx="2" ry="2" />
<text  x="197.56" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="35.0" y="197" width="0.4" height="15.0" fill="rgb(227,112,11)" rx="2" ry="2" />
<text  x="37.96" y="207.5" ></text>
</g>
<g >
<title>net.(*netFD).readFrom (101 samples, 3.82%)</title><rect x="37.2" y="229" width="45.0" height="15.0" fill="rgb(236,59,25)" rx="2" ry="2" />
<text  x="40.19" y="239.5" >net...</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="27.8" y="117" width="0.5" height="15.0" fill="rgb(224,97,51)" rx="2" ry="2" />
<text  x="30.83" y="127.5" ></text>
</g>
<g >
<title>net.(*netFD).writeTo (172 samples, 6.50%)</title><rect x="84.0" y="229" width="76.7" height="15.0" fill="rgb(227,133,30)" rx="2" ry="2" />
<text  x="87.00" y="239.5" >net.(*ne..</text>
</g>
<g >
<title>runtime.lock (1 samples, 0.04%)</title><rect x="348.4" y="197" width="0.4" height="15.0" fill="rgb(251,32,8)" rx="2" ry="2" />
<text  x="351.35" y="207.5" ></text>
</g>
<g >
<title>runtime.efaceeq (1 samples, 0.04%)</title><rect x="29.2" y="117" width="0.4" height="15.0" fill="rgb(240,56,52)" rx="2" ry="2" />
<text  x="32.17" y="127.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (119 samples, 4.50%)</title><rect x="776.8" y="213" width="53.0" height="15.0" fill="rgb(226,59,12)" rx="2" ry="2" />
<text  x="779.75" y="223.5" >runti..</text>
</g>
<g >
<title>runtime.mcall (1,103 samples, 41.67%)</title><rect x="194.6" y="277" width="491.7" height="15.0" fill="rgb(244,100,34)" rx="2" ry="2" />
<text  x="197.56" y="287.5" >runtime.mcall</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.04%)</title><rect x="31.8" y="149" width="0.5" height="15.0" fill="rgb(206,25,50)" rx="2" ry="2" />
<text  x="34.84" y="159.5" ></text>
</g>
<g >
<title>runtime.newproc1 (2 samples, 0.08%)</title><rect x="167.4" y="149" width="0.9" height="15.0" fill="rgb(211,16,44)" rx="2" ry="2" />
<text  x="170.36" y="159.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.04%)</title><rect x="196.3" y="197" width="0.5" height="15.0" fill="rgb(221,94,45)" rx="2" ry="2" />
<text  x="199.34" y="207.5" ></text>
</g>
<g >
<title>syscall.syscall6 (91 samples, 3.44%)</title><rect x="41.7" y="165" width="40.5" height="15.0" fill="rgb(235,130,53)" rx="2" ry="2" />
<text  x="44.65" y="175.5" >sys..</text>
</g>
<g >
<title>internal/poll.(*pollDesc).waitRead (1 samples, 0.04%)</title><rect x="39.0" y="197" width="0.4" height="15.0" fill="rgb(252,62,22)" rx="2" ry="2" />
<text  x="41.98" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenAndServe (68 samples, 2.57%)</title><rect x="164.2" y="245" width="30.4" height="15.0" fill="rgb(244,172,22)" rx="2" ry="2" />
<text  x="167.24" y="255.5" >hs..</text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.04%)</title><rect x="166.9" y="149" width="0.5" height="15.0" fill="rgb(251,181,25)" rx="2" ry="2" />
<text  x="169.92" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrain (3 samples, 0.11%)</title><rect x="162.9" y="229" width="1.3" height="15.0" fill="rgb(219,57,24)" rx="2" ry="2" />
<text  x="165.91" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (1 samples, 0.04%)</title><rect x="81.8" y="85" width="0.4" height="15.0" fill="rgb(207,58,5)" rx="2" ry="2" />
<text  x="84.77" y="95.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.04%)</title><rect x="872.2" y="213" width="0.4" height="15.0" fill="rgb(240,88,18)" rx="2" ry="2" />
<text  x="875.15" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.04%)</title><rect x="34.1" y="133" width="0.4" height="15.0" fill="rgb(236,53,44)" rx="2" ry="2" />
<text  x="37.07" y="143.5" ></text>
</g>
<g >
<title>runtime.mstart1 (418 samples, 15.79%)</title><rect x="686.3" y="261" width="186.3" height="15.0" fill="rgb(250,73,23)" rx="2" ry="2" />
<text  x="689.26" y="271.5" >runtime.mstart1</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.ReadUDPConn (103 samples, 3.89%)</title><rect x="37.2" y="277" width="45.9" height="15.0" fill="rgb(212,52,53)" rx="2" ry="2" />
<text  x="40.19" y="287.5" >hsla..</text>
</g>
<g >
<title>runtime.resetspinning (62 samples, 2.34%)</title><rect x="657.7" y="229" width="27.7" height="15.0" fill="rgb(205,0,19)" rx="2" ry="2" />
<text  x="660.73" y="239.5" >r..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="26.0" y="165" width="0.5" height="15.0" fill="rgb(225,153,22)" rx="2" ry="2" />
<text  x="29.05" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (4 samples, 0.15%)</title><rect x="24.7" y="197" width="1.8" height="15.0" fill="rgb(254,74,37)" rx="2" ry="2" />
<text  x="27.71" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (4 samples, 0.15%)</title><rect x="924.8" y="165" width="1.7" height="15.0" fill="rgb(205,19,47)" rx="2" ry="2" />
<text  x="927.76" y="175.5" ></text>
</g>
<g >
<title>reflect.(*rtype).textOff (1 samples, 0.04%)</title><rect x="27.4" y="133" width="0.4" height="15.0" fill="rgb(241,128,1)" rx="2" ry="2" />
<text  x="30.39" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (2 samples, 0.08%)</title><rect x="981.8" y="165" width="0.9" height="15.0" fill="rgb(237,95,8)" rx="2" ry="2" />
<text  x="984.82" y="175.5" ></text>
</g>
<g >
<title>runtime.usleep (96 samples, 3.63%)</title><rect x="829.8" y="229" width="42.8" height="15.0" fill="rgb(237,75,30)" rx="2" ry="2" />
<text  x="832.80" y="239.5" >runt..</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (6 samples, 0.23%)</title><rect x="21.6" y="245" width="2.7" height="15.0" fill="rgb(235,57,24)" rx="2" ry="2" />
<text  x="24.59" y="255.5" ></text>
</g>
</g>
</svg>

