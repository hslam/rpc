<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>runtime.chansend1 (2 samples, 0.04%)</title><rect x="158.6" y="357" width="0.5" height="15.0" fill="rgb(213,220,46)" rx="2" ry="2" />
<text  x="161.56" y="367.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="766.9" y="277" width="0.2" height="15.0" fill="rgb(254,41,25)" rx="2" ry="2" />
<text  x="769.87" y="287.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="157.5" y="165" width="0.3" height="15.0" fill="rgb(229,91,0)" rx="2" ry="2" />
<text  x="160.50" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (4 samples, 0.09%)</title><rect x="335.2" y="341" width="1.1" height="15.0" fill="rgb(244,100,16)" rx="2" ry="2" />
<text  x="338.24" y="351.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Unmarshal (1 samples, 0.02%)</title><rect x="260.7" y="229" width="0.3" height="15.0" fill="rgb(238,129,20)" rx="2" ry="2" />
<text  x="263.70" y="239.5" ></text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.02%)</title><rect x="709.3" y="293" width="0.3" height="15.0" fill="rgb(234,21,21)" rx="2" ry="2" />
<text  x="712.30" y="303.5" ></text>
</g>
<g >
<title>runtime.freedefer (103 samples, 2.32%)</title><rect x="165.2" y="229" width="27.3" height="15.0" fill="rgb(228,53,32)" rx="2" ry="2" />
<text  x="168.19" y="239.5" >r..</text>
</g>
<g >
<title>runtime.runqgrab (2 samples, 0.04%)</title><rect x="345.9" y="293" width="0.5" height="15.0" fill="rgb(249,39,29)" rx="2" ry="2" />
<text  x="348.85" y="303.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="1180.7" y="293" width="0.3" height="15.0" fill="rgb(205,29,43)" rx="2" ry="2" />
<text  x="1183.71" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.02%)</title><rect x="269.2" y="117" width="0.3" height="15.0" fill="rgb(251,88,21)" rx="2" ry="2" />
<text  x="272.19" y="127.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.02%)</title><rect x="264.7" y="165" width="0.2" height="15.0" fill="rgb(252,115,25)" rx="2" ry="2" />
<text  x="267.68" y="175.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="256.2" y="101" width="0.3" height="15.0" fill="rgb(209,46,42)" rx="2" ry="2" />
<text  x="259.19" y="111.5" ></text>
</g>
<g >
<title>runtime.sysmon (19 samples, 0.43%)</title><rect x="761.8" y="341" width="5.1" height="15.0" fill="rgb(207,185,3)" rx="2" ry="2" />
<text  x="764.83" y="351.5" ></text>
</g>
<g >
<title>runtime.gopark (1 samples, 0.02%)</title><rect x="12.1" y="133" width="0.3" height="15.0" fill="rgb(208,228,39)" rx="2" ry="2" />
<text  x="15.12" y="143.5" ></text>
</g>
<g >
<title>all (4,448 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(218,157,54)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (2 samples, 0.04%)</title><rect x="336.3" y="341" width="0.5" height="15.0" fill="rgb(237,25,27)" rx="2" ry="2" />
<text  x="339.30" y="351.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (8 samples, 0.18%)</title><rect x="256.5" y="197" width="2.1" height="15.0" fill="rgb(240,210,20)" rx="2" ry="2" />
<text  x="259.45" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Decode (5 samples, 0.11%)</title><rect x="260.2" y="261" width="1.3" height="15.0" fill="rgb(250,78,15)" rx="2" ry="2" />
<text  x="263.17" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="761.8" y="309" width="0.3" height="15.0" fill="rgb(224,43,22)" rx="2" ry="2" />
<text  x="764.83" y="319.5" ></text>
</g>
<g >
<title>net.(*conn).Write (355 samples, 7.98%)</title><rect x="164.4" y="293" width="94.2" height="15.0" fill="rgb(230,220,14)" rx="2" ry="2" />
<text  x="167.40" y="303.5" >net.(*conn)..</text>
</g>
<g >
<title>net.(*conn).Read (540 samples, 12.14%)</title><rect x="11.3" y="245" width="143.3" height="15.0" fill="rgb(231,11,35)" rx="2" ry="2" />
<text  x="14.33" y="255.5" >net.(*conn).Read</text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (33 samples, 0.74%)</title><rect x="1172.0" y="261" width="8.7" height="15.0" fill="rgb(229,199,19)" rx="2" ry="2" />
<text  x="1174.96" y="271.5" ></text>
</g>
<g >
<title>runtime.scanstack (2 samples, 0.04%)</title><rect x="336.3" y="261" width="0.5" height="15.0" fill="rgb(209,207,51)" rx="2" ry="2" />
<text  x="339.30" y="271.5" ></text>
</g>
<g >
<title>runtime.runqgrab (5 samples, 0.11%)</title><rect x="746.4" y="293" width="1.4" height="15.0" fill="rgb(208,148,12)" rx="2" ry="2" />
<text  x="749.44" y="303.5" ></text>
</g>
<g >
<title>syscall.Write (249 samples, 5.60%)</title><rect x="192.5" y="245" width="66.1" height="15.0" fill="rgb(208,150,15)" rx="2" ry="2" />
<text  x="195.52" y="255.5" >syscall..</text>
</g>
<g >
<title>runtime.notewakeup (1,552 samples, 34.89%)</title><rect x="769.0" y="293" width="411.7" height="15.0" fill="rgb(250,29,10)" rx="2" ry="2" />
<text  x="771.99" y="303.5" >runtime.notewakeup</text>
</g>
<g >
<title>runtime.step (2 samples, 0.04%)</title><rect x="336.3" y="149" width="0.5" height="15.0" fill="rgb(225,194,49)" rx="2" ry="2" />
<text  x="339.30" y="159.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="263.9" y="101" width="0.2" height="15.0" fill="rgb(216,206,20)" rx="2" ry="2" />
<text  x="266.88" y="111.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WriteConn (379 samples, 8.52%)</title><rect x="159.1" y="373" width="100.5" height="15.0" fill="rgb(231,215,15)" rx="2" ry="2" />
<text  x="162.09" y="383.5" >hslam.com/mg..</text>
</g>
<g >
<title>net.(*netFD).Write (354 samples, 7.96%)</title><rect x="164.7" y="277" width="93.9" height="15.0" fill="rgb(206,18,35)" rx="2" ry="2" />
<text  x="167.66" y="287.5" >net.(*netFD..</text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (5 samples, 0.11%)</title><rect x="156.4" y="181" width="1.4" height="15.0" fill="rgb(246,174,8)" rx="2" ry="2" />
<text  x="159.44" y="191.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (2 samples, 0.04%)</title><rect x="1180.7" y="325" width="0.5" height="15.0" fill="rgb(205,154,22)" rx="2" ry="2" />
<text  x="1183.71" y="335.5" ></text>
</g>
<g >
<title>runtime.freedefer (186 samples, 4.18%)</title><rect x="12.7" y="181" width="49.3" height="15.0" fill="rgb(226,90,11)" rx="2" ry="2" />
<text  x="15.65" y="191.5" >runt..</text>
</g>
<g >
<title>sync.(*entry).load (1 samples, 0.02%)</title><rect x="270.5" y="181" width="0.3" height="15.0" fill="rgb(213,17,46)" rx="2" ry="2" />
<text  x="273.51" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (2 samples, 0.04%)</title><rect x="157.0" y="85" width="0.5" height="15.0" fill="rgb(215,23,23)" rx="2" ry="2" />
<text  x="159.97" y="95.5" ></text>
</g>
<g >
<title>runtime.handoffp (1 samples, 0.02%)</title><rect x="153.0" y="101" width="0.3" height="15.0" fill="rgb(231,2,36)" rx="2" ry="2" />
<text  x="155.99" y="111.5" ></text>
</g>
<g >
<title>runtime.netpoll (21 samples, 0.47%)</title><rect x="340.3" y="309" width="5.6" height="15.0" fill="rgb(220,186,46)" rx="2" ry="2" />
<text  x="343.28" y="319.5" ></text>
</g>
<g >
<title>runtime.kevent (8 samples, 0.18%)</title><rect x="343.7" y="293" width="2.2" height="15.0" fill="rgb(232,75,7)" rx="2" ry="2" />
<text  x="346.73" y="303.5" ></text>
</g>
<g >
<title>runtime.pcvalue (2 samples, 0.04%)</title><rect x="336.3" y="165" width="0.5" height="15.0" fill="rgb(233,12,8)" rx="2" ry="2" />
<text  x="339.30" y="175.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Align (1 samples, 0.02%)</title><rect x="267.6" y="165" width="0.3" height="15.0" fill="rgb(248,88,12)" rx="2" ry="2" />
<text  x="270.59" y="175.5" ></text>
</g>
<g >
<title>runtime.nanotime (7 samples, 0.16%)</title><rect x="762.1" y="325" width="1.8" height="15.0" fill="rgb(215,167,11)" rx="2" ry="2" />
<text  x="765.09" y="335.5" ></text>
</g>
<g >
<title>runtime.stopm (26 samples, 0.58%)</title><rect x="346.4" y="309" width="6.9" height="15.0" fill="rgb(205,142,18)" rx="2" ry="2" />
<text  x="349.38" y="319.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (1 samples, 0.02%)</title><rect x="155.1" y="181" width="0.3" height="15.0" fill="rgb(244,77,52)" rx="2" ry="2" />
<text  x="158.11" y="191.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (26 samples, 0.58%)</title><rect x="1183.1" y="341" width="6.9" height="15.0" fill="rgb(213,63,27)" rx="2" ry="2" />
<text  x="1186.10" y="351.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).SetWriteDeadline (5 samples, 0.11%)</title><rect x="163.1" y="261" width="1.3" height="15.0" fill="rgb(231,210,45)" rx="2" ry="2" />
<text  x="166.07" y="271.5" ></text>
</g>
<g >
<title>runtime.usleep (6 samples, 0.13%)</title><rect x="767.1" y="261" width="1.6" height="15.0" fill="rgb(220,88,38)" rx="2" ry="2" />
<text  x="770.13" y="271.5" ></text>
</g>
<g >
<title>runtime.goready (1 samples, 0.02%)</title><rect x="274.0" y="229" width="0.2" height="15.0" fill="rgb(254,84,45)" rx="2" ry="2" />
<text  x="276.96" y="239.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="1180.7" y="277" width="0.3" height="15.0" fill="rgb(236,3,33)" rx="2" ry="2" />
<text  x="1183.71" y="287.5" ></text>
</g>
<g >
<title>net.(*conn).SetWriteDeadline (8 samples, 0.18%)</title><rect x="162.3" y="293" width="2.1" height="15.0" fill="rgb(240,201,51)" rx="2" ry="2" />
<text  x="165.28" y="303.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.02%)</title><rect x="155.4" y="229" width="0.2" height="15.0" fill="rgb(226,29,17)" rx="2" ry="2" />
<text  x="158.38" y="239.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.04%)</title><rect x="760.8" y="277" width="0.5" height="15.0" fill="rgb(220,96,9)" rx="2" ry="2" />
<text  x="763.76" y="287.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="262.3" y="149" width="0.3" height="15.0" fill="rgb(211,84,38)" rx="2" ry="2" />
<text  x="265.29" y="159.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="265.2" y="197" width="0.3" height="15.0" fill="rgb(208,93,36)" rx="2" ry="2" />
<text  x="268.21" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).ServeRPC (51 samples, 1.15%)</title><rect x="259.9" y="277" width="13.5" height="15.0" fill="rgb(209,206,32)" rx="2" ry="2" />
<text  x="262.90" y="287.5" ></text>
</g>
<g >
<title>syscall.read (348 samples, 7.82%)</title><rect x="62.3" y="181" width="92.3" height="15.0" fill="rgb(234,26,8)" rx="2" ry="2" />
<text  x="65.26" y="191.5" >syscall.read</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).Handler (39 samples, 0.88%)</title><rect x="262.6" y="245" width="10.3" height="15.0" fill="rgb(213,209,31)" rx="2" ry="2" />
<text  x="265.55" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (2 samples, 0.04%)</title><rect x="335.8" y="309" width="0.5" height="15.0" fill="rgb(213,122,29)" rx="2" ry="2" />
<text  x="338.77" y="319.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="766.9" y="293" width="0.2" height="15.0" fill="rgb(228,121,43)" rx="2" ry="2" />
<text  x="769.87" y="303.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="269.2" y="53" width="0.3" height="15.0" fill="rgb(221,219,10)" rx="2" ry="2" />
<text  x="272.19" y="63.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="158.0" y="245" width="0.3" height="15.0" fill="rgb(251,103,2)" rx="2" ry="2" />
<text  x="161.03" y="255.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="272.1" y="165" width="0.3" height="15.0" fill="rgb(219,159,48)" rx="2" ry="2" />
<text  x="275.10" y="175.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (1 samples, 0.02%)</title><rect x="1181.2" y="341" width="0.3" height="15.0" fill="rgb(211,210,43)" rx="2" ry="2" />
<text  x="1184.25" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (5 samples, 0.11%)</title><rect x="156.4" y="197" width="1.4" height="15.0" fill="rgb(254,88,4)" rx="2" ry="2" />
<text  x="159.44" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*Arith).Multiply (1 samples, 0.02%)</title><rect x="267.3" y="165" width="0.3" height="15.0" fill="rgb(206,225,38)" rx="2" ry="2" />
<text  x="270.33" y="175.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="761.6" y="277" width="0.2" height="15.0" fill="rgb(230,223,32)" rx="2" ry="2" />
<text  x="764.56" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).HandleRPC (39 samples, 0.88%)</title><rect x="262.6" y="261" width="10.3" height="15.0" fill="rgb(207,118,44)" rx="2" ry="2" />
<text  x="265.55" y="271.5" ></text>
</g>
<g >
<title>runtime.notesleep (48 samples, 1.08%)</title><rect x="747.8" y="293" width="12.7" height="15.0" fill="rgb(251,136,30)" rx="2" ry="2" />
<text  x="750.77" y="303.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.02%)</title><rect x="336.0" y="245" width="0.3" height="15.0" fill="rgb(253,142,46)" rx="2" ry="2" />
<text  x="339.04" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (26 samples, 0.58%)</title><rect x="1183.1" y="245" width="6.9" height="15.0" fill="rgb(247,221,4)" rx="2" ry="2" />
<text  x="1186.10" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="155.1" y="245" width="0.3" height="15.0" fill="rgb(250,114,38)" rx="2" ry="2" />
<text  x="158.11" y="255.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="766.9" y="309" width="0.2" height="15.0" fill="rgb(216,71,9)" rx="2" ry="2" />
<text  x="769.87" y="319.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (2 samples, 0.04%)</title><rect x="336.3" y="293" width="0.5" height="15.0" fill="rgb(250,3,25)" rx="2" ry="2" />
<text  x="339.30" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (1 samples, 0.02%)</title><rect x="262.0" y="197" width="0.3" height="15.0" fill="rgb(247,210,16)" rx="2" ry="2" />
<text  x="265.02" y="207.5" ></text>
</g>
<g >
<title>runtime.globrunqget (1 samples, 0.02%)</title><rect x="339.0" y="309" width="0.2" height="15.0" fill="rgb(221,191,44)" rx="2" ry="2" />
<text  x="341.96" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ServeWSConn (271 samples, 6.09%)</title><rect x="259.6" y="293" width="71.9" height="15.0" fill="rgb(209,213,32)" rx="2" ry="2" />
<text  x="262.64" y="303.5" >hslam.co..</text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="268.9" y="117" width="0.3" height="15.0" fill="rgb(227,164,43)" rx="2" ry="2" />
<text  x="271.92" y="127.5" ></text>
</g>
<g >
<title>runtime.notewakeup (26 samples, 0.58%)</title><rect x="1183.1" y="277" width="6.9" height="15.0" fill="rgb(235,195,51)" rx="2" ry="2" />
<text  x="1186.10" y="287.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (2 samples, 0.04%)</title><rect x="336.3" y="373" width="0.5" height="15.0" fill="rgb(239,179,49)" rx="2" ry="2" />
<text  x="339.30" y="383.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1 samples, 0.02%)</title><rect x="153.0" y="117" width="0.3" height="15.0" fill="rgb(234,125,9)" rx="2" ry="2" />
<text  x="155.99" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcSweepBuf).push (1 samples, 0.02%)</title><rect x="335.2" y="325" width="0.3" height="15.0" fill="rgb(205,35,24)" rx="2" ry="2" />
<text  x="338.24" y="335.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.02%)</title><rect x="761.6" y="325" width="0.2" height="15.0" fill="rgb(228,168,43)" rx="2" ry="2" />
<text  x="764.56" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="262.3" y="165" width="0.3" height="15.0" fill="rgb(250,128,1)" rx="2" ry="2" />
<text  x="265.29" y="175.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (213 samples, 4.79%)</title><rect x="274.5" y="261" width="56.5" height="15.0" fill="rgb(222,174,31)" rx="2" ry="2" />
<text  x="277.49" y="271.5" >runti..</text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.04%)</title><rect x="261.0" y="181" width="0.5" height="15.0" fill="rgb(241,221,37)" rx="2" ry="2" />
<text  x="263.96" y="191.5" ></text>
</g>
<g >
<title>runtime.forEachP (3 samples, 0.07%)</title><rect x="1181.5" y="325" width="0.8" height="15.0" fill="rgb(219,158,33)" rx="2" ry="2" />
<text  x="1184.51" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="261.0" y="229" width="0.5" height="15.0" fill="rgb(234,163,49)" rx="2" ry="2" />
<text  x="263.96" y="239.5" ></text>
</g>
<g >
<title>runtime.lock (7 samples, 0.16%)</title><rect x="767.1" y="293" width="1.9" height="15.0" fill="rgb(220,113,8)" rx="2" ry="2" />
<text  x="770.13" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (4 samples, 0.09%)</title><rect x="156.4" y="149" width="1.1" height="15.0" fill="rgb(225,220,7)" rx="2" ry="2" />
<text  x="159.44" y="159.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Server).CallService (25 samples, 0.56%)</title><rect x="265.7" y="229" width="6.7" height="15.0" fill="rgb(251,68,46)" rx="2" ry="2" />
<text  x="268.74" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (1,403 samples, 31.54%)</title><rect x="336.8" y="357" width="372.2" height="15.0" fill="rgb(252,20,27)" rx="2" ry="2" />
<text  x="339.83" y="367.5" >runtime.exitsyscall0</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.02%)</title><rect x="263.9" y="149" width="0.2" height="15.0" fill="rgb(242,66,2)" rx="2" ry="2" />
<text  x="266.88" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.02%)</title><rect x="708.5" y="293" width="0.3" height="15.0" fill="rgb(229,174,34)" rx="2" ry="2" />
<text  x="711.50" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="262.3" y="181" width="0.3" height="15.0" fill="rgb(247,116,46)" rx="2" ry="2" />
<text  x="265.29" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="353.5" y="277" width="0.3" height="15.0" fill="rgb(250,210,4)" rx="2" ry="2" />
<text  x="356.55" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.04%)</title><rect x="1182.3" y="277" width="0.5" height="15.0" fill="rgb(237,158,43)" rx="2" ry="2" />
<text  x="1185.31" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (2 samples, 0.04%)</title><rect x="157.0" y="101" width="0.5" height="15.0" fill="rgb(227,15,47)" rx="2" ry="2" />
<text  x="159.97" y="111.5" ></text>
</g>
<g >
<title>runtime.goparkunlock (1 samples, 0.02%)</title><rect x="259.1" y="325" width="0.3" height="15.0" fill="rgb(219,38,13)" rx="2" ry="2" />
<text  x="262.11" y="335.5" ></text>
</g>
<g >
<title>runtime.runqsteal (5 samples, 0.11%)</title><rect x="746.4" y="309" width="1.4" height="15.0" fill="rgb(219,10,26)" rx="2" ry="2" />
<text  x="749.44" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (5 samples, 0.11%)</title><rect x="746.4" y="277" width="1.4" height="15.0" fill="rgb(206,43,28)" rx="2" ry="2" />
<text  x="749.44" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="353.5" y="293" width="0.3" height="15.0" fill="rgb(247,66,6)" rx="2" ry="2" />
<text  x="356.55" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="1182.8" y="309" width="0.3" height="15.0" fill="rgb(238,206,47)" rx="2" ry="2" />
<text  x="1185.84" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.02%)</title><rect x="766.9" y="341" width="0.2" height="15.0" fill="rgb(233,13,15)" rx="2" ry="2" />
<text  x="769.87" y="351.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (5 samples, 0.11%)</title><rect x="151.9" y="149" width="1.4" height="15.0" fill="rgb(214,177,47)" rx="2" ry="2" />
<text  x="154.93" y="159.5" ></text>
</g>
<g >
<title>runtime.chansend (2 samples, 0.04%)</title><rect x="158.6" y="341" width="0.5" height="15.0" fill="rgb(206,50,9)" rx="2" ry="2" />
<text  x="161.56" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="768.7" y="261" width="0.3" height="15.0" fill="rgb(219,217,45)" rx="2" ry="2" />
<text  x="771.72" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (3 samples, 0.07%)</title><rect x="1181.5" y="261" width="0.8" height="15.0" fill="rgb(247,109,34)" rx="2" ry="2" />
<text  x="1184.51" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="155.1" y="229" width="0.3" height="15.0" fill="rgb(215,5,27)" rx="2" ry="2" />
<text  x="158.11" y="239.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.02%)</title><rect x="272.1" y="181" width="0.3" height="15.0" fill="rgb(214,41,32)" rx="2" ry="2" />
<text  x="275.10" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (1 samples, 0.02%)</title><rect x="260.7" y="197" width="0.3" height="15.0" fill="rgb(247,186,53)" rx="2" ry="2" />
<text  x="263.70" y="207.5" ></text>
</g>
<g >
<title>runtime.selectgo (216 samples, 4.86%)</title><rect x="274.2" y="277" width="57.3" height="15.0" fill="rgb(237,147,26)" rx="2" ry="2" />
<text  x="277.23" y="287.5" >runtim..</text>
</g>
<g >
<title>runtime.wbBufFlush (1 samples, 0.02%)</title><rect x="155.1" y="197" width="0.3" height="15.0" fill="rgb(234,37,14)" rx="2" ry="2" />
<text  x="158.11" y="207.5" ></text>
</g>
<g >
<title>runtime.semrelease1 (1 samples, 0.02%)</title><rect x="154.8" y="229" width="0.3" height="15.0" fill="rgb(254,145,17)" rx="2" ry="2" />
<text  x="157.85" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.02%)</title><rect x="265.5" y="149" width="0.2" height="15.0" fill="rgb(245,137,17)" rx="2" ry="2" />
<text  x="268.47" y="159.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (2 samples, 0.04%)</title><rect x="255.9" y="165" width="0.6" height="15.0" fill="rgb(246,74,32)" rx="2" ry="2" />
<text  x="258.92" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.02%)</title><rect x="269.2" y="85" width="0.3" height="15.0" fill="rgb(236,207,41)" rx="2" ry="2" />
<text  x="272.19" y="95.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.04%)</title><rect x="339.2" y="309" width="0.6" height="15.0" fill="rgb(216,136,31)" rx="2" ry="2" />
<text  x="342.22" y="319.5" ></text>
</g>
<g >
<title>runtime.(*semaRoot).dequeue (1 samples, 0.02%)</title><rect x="154.8" y="213" width="0.3" height="15.0" fill="rgb(238,1,3)" rx="2" ry="2" />
<text  x="157.85" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (7 samples, 0.16%)</title><rect x="263.1" y="213" width="1.8" height="15.0" fill="rgb(217,56,52)" rx="2" ry="2" />
<text  x="266.08" y="223.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).wait (4 samples, 0.09%)</title><rect x="11.6" y="181" width="1.1" height="15.0" fill="rgb(210,114,28)" rx="2" ry="2" />
<text  x="14.59" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (4 samples, 0.09%)</title><rect x="271.3" y="197" width="1.1" height="15.0" fill="rgb(214,62,3)" rx="2" ry="2" />
<text  x="274.31" y="207.5" ></text>
</g>
<g >
<title>runtime.newobject (3 samples, 0.07%)</title><rect x="154.6" y="309" width="0.8" height="15.0" fill="rgb(223,206,33)" rx="2" ry="2" />
<text  x="157.58" y="319.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.04%)</title><rect x="255.9" y="133" width="0.6" height="15.0" fill="rgb(213,100,31)" rx="2" ry="2" />
<text  x="258.92" y="143.5" ></text>
</g>
<g >
<title>reflect.unsafe_New (1 samples, 0.02%)</title><rect x="269.2" y="165" width="0.3" height="15.0" fill="rgb(249,175,2)" rx="2" ry="2" />
<text  x="272.19" y="175.5" ></text>
</g>
<g >
<title>runtime.goready (1 samples, 0.02%)</title><rect x="158.8" y="309" width="0.3" height="15.0" fill="rgb(233,53,53)" rx="2" ry="2" />
<text  x="161.83" y="319.5" ></text>
</g>
<g >
<title>runtime.semawakeup (5 samples, 0.11%)</title><rect x="710.1" y="261" width="1.3" height="15.0" fill="rgb(206,22,35)" rx="2" ry="2" />
<text  x="713.09" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (26 samples, 0.58%)</title><rect x="346.4" y="261" width="6.9" height="15.0" fill="rgb(232,197,1)" rx="2" ry="2" />
<text  x="349.38" y="271.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="761.8" y="325" width="0.3" height="15.0" fill="rgb(240,133,6)" rx="2" ry="2" />
<text  x="764.83" y="335.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (2 samples, 0.04%)</title><rect x="353.3" y="325" width="0.5" height="15.0" fill="rgb(223,91,19)" rx="2" ry="2" />
<text  x="356.28" y="335.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.02%)</title><rect x="1181.2" y="277" width="0.3" height="15.0" fill="rgb(222,182,24)" rx="2" ry="2" />
<text  x="1184.25" y="287.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.02%)</title><rect x="263.9" y="133" width="0.2" height="15.0" fill="rgb(217,69,38)" rx="2" ry="2" />
<text  x="266.88" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrain (1 samples, 0.02%)</title><rect x="1181.2" y="325" width="0.3" height="15.0" fill="rgb(213,210,36)" rx="2" ry="2" />
<text  x="1184.25" y="335.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (2 samples, 0.04%)</title><rect x="336.3" y="229" width="0.5" height="15.0" fill="rgb(232,155,3)" rx="2" ry="2" />
<text  x="339.30" y="239.5" ></text>
</g>
<g >
<title>runtime.lock (6 samples, 0.13%)</title><rect x="336.8" y="341" width="1.6" height="15.0" fill="rgb(254,51,18)" rx="2" ry="2" />
<text  x="339.83" y="351.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (4 samples, 0.09%)</title><rect x="153.3" y="149" width="1.0" height="15.0" fill="rgb(235,90,22)" rx="2" ry="2" />
<text  x="156.26" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (3 samples, 0.07%)</title><rect x="261.8" y="245" width="0.8" height="15.0" fill="rgb(212,87,9)" rx="2" ry="2" />
<text  x="264.76" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.02%)</title><rect x="766.9" y="325" width="0.2" height="15.0" fill="rgb(225,5,29)" rx="2" ry="2" />
<text  x="769.87" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (4 samples, 0.09%)</title><rect x="156.4" y="165" width="1.1" height="15.0" fill="rgb(214,22,47)" rx="2" ry="2" />
<text  x="159.44" y="175.5" ></text>
</g>
<g >
<title>runtime.chansend1 (2 samples, 0.04%)</title><rect x="161.7" y="277" width="0.6" height="15.0" fill="rgb(220,15,11)" rx="2" ry="2" />
<text  x="164.74" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="256.2" y="85" width="0.3" height="15.0" fill="rgb(235,5,46)" rx="2" ry="2" />
<text  x="259.19" y="95.5" ></text>
</g>
<g >
<title>runtime.runqsteal (2 samples, 0.04%)</title><rect x="345.9" y="309" width="0.5" height="15.0" fill="rgb(232,36,47)" rx="2" ry="2" />
<text  x="348.85" y="319.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock (2 samples, 0.04%)</title><rect x="255.9" y="197" width="0.6" height="15.0" fill="rgb(209,31,26)" rx="2" ry="2" />
<text  x="258.92" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (58 samples, 1.30%)</title><rect x="338.4" y="341" width="15.4" height="15.0" fill="rgb(223,28,29)" rx="2" ry="2" />
<text  x="341.43" y="351.5" ></text>
</g>
<g >
<title>runtime.fastrand (1 samples, 0.02%)</title><rect x="331.3" y="245" width="0.2" height="15.0" fill="rgb(241,72,44)" rx="2" ry="2" />
<text  x="334.26" y="255.5" ></text>
</g>
<g >
<title>runtime.resolveTypeOff (1 samples, 0.02%)</title><rect x="271.0" y="133" width="0.3" height="15.0" fill="rgb(227,100,44)" rx="2" ry="2" />
<text  x="274.04" y="143.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (1 samples, 0.02%)</title><rect x="270.5" y="213" width="0.3" height="15.0" fill="rgb(207,19,17)" rx="2" ry="2" />
<text  x="273.51" y="223.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (3 samples, 0.07%)</title><rect x="268.1" y="149" width="0.8" height="15.0" fill="rgb(220,127,10)" rx="2" ry="2" />
<text  x="271.12" y="159.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.02%)</title><rect x="157.5" y="149" width="0.3" height="15.0" fill="rgb(254,190,35)" rx="2" ry="2" />
<text  x="160.50" y="159.5" ></text>
</g>
<g >
<title>runtime.schedule (195 samples, 4.38%)</title><rect x="709.6" y="341" width="51.7" height="15.0" fill="rgb(225,154,14)" rx="2" ry="2" />
<text  x="712.56" y="351.5" >runti..</text>
</g>
<g >
<title>runtime.gcMarkDone.func1.1 (1 samples, 0.02%)</title><rect x="353.3" y="309" width="0.2" height="15.0" fill="rgb(239,219,48)" rx="2" ry="2" />
<text  x="356.28" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.02%)</title><rect x="264.9" y="165" width="0.3" height="15.0" fill="rgb(211,127,39)" rx="2" ry="2" />
<text  x="267.94" y="175.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="1181.0" y="293" width="0.2" height="15.0" fill="rgb(210,174,27)" rx="2" ry="2" />
<text  x="1183.98" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.04%)</title><rect x="760.8" y="293" width="0.5" height="15.0" fill="rgb(240,211,53)" rx="2" ry="2" />
<text  x="763.76" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="265.5" y="197" width="0.2" height="15.0" fill="rgb(206,136,29)" rx="2" ry="2" />
<text  x="268.47" y="207.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).WriteMessage (372 samples, 8.36%)</title><rect x="160.4" y="341" width="98.7" height="15.0" fill="rgb(237,129,13)" rx="2" ry="2" />
<text  x="163.42" y="351.5" >github.com/..</text>
</g>
<g >
<title>net.(*netFD).SetWriteDeadline (5 samples, 0.11%)</title><rect x="163.1" y="277" width="1.3" height="15.0" fill="rgb(215,91,1)" rx="2" ry="2" />
<text  x="166.07" y="287.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*messageWriter).flushFrame (370 samples, 8.32%)</title><rect x="160.9" y="325" width="98.2" height="15.0" fill="rgb(217,121,4)" rx="2" ry="2" />
<text  x="163.95" y="335.5" >github.com/..</text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.02%)</title><rect x="760.5" y="325" width="0.3" height="15.0" fill="rgb(254,3,50)" rx="2" ry="2" />
<text  x="763.50" y="335.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1 samples, 0.02%)</title><rect x="709.3" y="309" width="0.3" height="15.0" fill="rgb(233,226,36)" rx="2" ry="2" />
<text  x="712.30" y="319.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (2 samples, 0.04%)</title><rect x="336.3" y="181" width="0.5" height="15.0" fill="rgb(248,82,54)" rx="2" ry="2" />
<text  x="339.30" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="262.3" y="133" width="0.3" height="15.0" fill="rgb(212,221,30)" rx="2" ry="2" />
<text  x="265.29" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrain (2 samples, 0.04%)</title><rect x="336.3" y="325" width="0.5" height="15.0" fill="rgb(205,200,53)" rx="2" ry="2" />
<text  x="339.30" y="335.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.02%)</title><rect x="709.3" y="325" width="0.3" height="15.0" fill="rgb(212,5,45)" rx="2" ry="2" />
<text  x="712.30" y="335.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.02%)</title><rect x="274.0" y="181" width="0.2" height="15.0" fill="rgb(219,172,18)" rx="2" ry="2" />
<text  x="276.96" y="191.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).write (370 samples, 8.32%)</title><rect x="160.9" y="309" width="98.2" height="15.0" fill="rgb(231,220,1)" rx="2" ry="2" />
<text  x="163.95" y="319.5" >github.com/..</text>
</g>
<g >
<title>runtime.netpollcheckerr (1 samples, 0.02%)</title><rect x="12.4" y="149" width="0.3" height="15.0" fill="rgb(242,41,5)" rx="2" ry="2" />
<text  x="15.39" y="159.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (2 samples, 0.04%)</title><rect x="269.7" y="165" width="0.5" height="15.0" fill="rgb(207,6,38)" rx="2" ry="2" />
<text  x="272.72" y="175.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="258.8" y="261" width="0.3" height="15.0" fill="rgb(252,73,26)" rx="2" ry="2" />
<text  x="261.84" y="271.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).grow (1 samples, 0.02%)</title><rect x="155.4" y="277" width="0.2" height="15.0" fill="rgb(239,210,25)" rx="2" ry="2" />
<text  x="158.38" y="287.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (2 samples, 0.04%)</title><rect x="156.4" y="133" width="0.6" height="15.0" fill="rgb(243,181,39)" rx="2" ry="2" />
<text  x="159.44" y="143.5" ></text>
</g>
<g >
<title>runtime.fastrandn (1 samples, 0.02%)</title><rect x="331.3" y="261" width="0.2" height="15.0" fill="rgb(219,88,10)" rx="2" ry="2" />
<text  x="334.26" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="268.9" y="133" width="0.3" height="15.0" fill="rgb(219,48,37)" rx="2" ry="2" />
<text  x="271.92" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock_trampoline (1 samples, 0.02%)</title><rect x="333.1" y="357" width="0.3" height="15.0" fill="rgb(218,98,32)" rx="2" ry="2" />
<text  x="336.12" y="367.5" ></text>
</g>
<g >
<title>runtime.releasep (1 samples, 0.02%)</title><rect x="746.2" y="309" width="0.2" height="15.0" fill="rgb(217,138,26)" rx="2" ry="2" />
<text  x="749.17" y="319.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (2 samples, 0.04%)</title><rect x="1182.3" y="325" width="0.5" height="15.0" fill="rgb(215,59,14)" rx="2" ry="2" />
<text  x="1185.31" y="335.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="339.5" y="277" width="0.3" height="15.0" fill="rgb(219,118,18)" rx="2" ry="2" />
<text  x="342.49" y="287.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="1180.7" y="309" width="0.3" height="15.0" fill="rgb(207,227,8)" rx="2" ry="2" />
<text  x="1183.71" y="319.5" ></text>
</g>
<g >
<title>runtime.mcall (1 samples, 0.02%)</title><rect x="332.1" y="357" width="0.2" height="15.0" fill="rgb(207,49,38)" rx="2" ry="2" />
<text  x="335.06" y="367.5" ></text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.02%)</title><rect x="709.3" y="277" width="0.3" height="15.0" fill="rgb(249,20,15)" rx="2" ry="2" />
<text  x="712.30" y="287.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (539 samples, 12.12%)</title><rect x="11.6" y="213" width="143.0" height="15.0" fill="rgb(215,156,30)" rx="2" ry="2" />
<text  x="14.59" y="223.5" >internal/poll.(*FD..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (1,513 samples, 34.02%)</title><rect x="769.0" y="261" width="401.4" height="15.0" fill="rgb(253,73,4)" rx="2" ry="2" />
<text  x="771.99" y="271.5" >runtime.pthread_cond_signal</text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="761.6" y="245" width="0.2" height="15.0" fill="rgb(215,58,41)" rx="2" ry="2" />
<text  x="764.56" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (4 samples, 0.09%)</title><rect x="263.6" y="181" width="1.1" height="15.0" fill="rgb(211,79,39)" rx="2" ry="2" />
<text  x="266.62" y="191.5" ></text>
</g>
<g >
<title>runtime.scanobject (2 samples, 0.04%)</title><rect x="261.0" y="133" width="0.5" height="15.0" fill="rgb(247,170,7)" rx="2" ry="2" />
<text  x="263.96" y="143.5" ></text>
</g>
<g >
<title>syscall.syscall (249 samples, 5.60%)</title><rect x="192.5" y="213" width="66.1" height="15.0" fill="rgb(209,162,47)" rx="2" ry="2" />
<text  x="195.52" y="223.5" >syscall..</text>
</g>
<g >
<title>runtime.mstart1 (19 samples, 0.43%)</title><rect x="761.8" y="357" width="5.1" height="15.0" fill="rgb(230,24,45)" rx="2" ry="2" />
<text  x="764.83" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mheap).setSpans (1 samples, 0.02%)</title><rect x="157.2" y="69" width="0.3" height="15.0" fill="rgb(219,217,49)" rx="2" ry="2" />
<text  x="160.23" y="79.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (1 samples, 0.02%)</title><rect x="158.0" y="261" width="0.3" height="15.0" fill="rgb(205,133,29)" rx="2" ry="2" />
<text  x="161.03" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="263.9" y="117" width="0.2" height="15.0" fill="rgb(231,102,15)" rx="2" ry="2" />
<text  x="266.88" y="127.5" ></text>
</g>
<g >
<title>time.(*Time).nsec (1 samples, 0.02%)</title><rect x="164.1" y="213" width="0.3" height="15.0" fill="rgb(244,149,25)" rx="2" ry="2" />
<text  x="167.13" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (2 samples, 0.04%)</title><rect x="261.8" y="213" width="0.5" height="15.0" fill="rgb(242,42,30)" rx="2" ry="2" />
<text  x="264.76" y="223.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.02%)</title><rect x="272.1" y="149" width="0.3" height="15.0" fill="rgb(250,226,48)" rx="2" ry="2" />
<text  x="275.10" y="159.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.02%)</title><rect x="336.0" y="229" width="0.3" height="15.0" fill="rgb(208,141,43)" rx="2" ry="2" />
<text  x="339.04" y="239.5" ></text>
</g>
<g >
<title>runtime.chanrecv (2 samples, 0.04%)</title><rect x="259.1" y="341" width="0.5" height="15.0" fill="rgb(252,105,5)" rx="2" ry="2" />
<text  x="262.11" y="351.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="709.0" y="325" width="0.3" height="15.0" fill="rgb(231,209,20)" rx="2" ry="2" />
<text  x="712.03" y="335.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (2 samples, 0.04%)</title><rect x="336.3" y="213" width="0.5" height="15.0" fill="rgb(205,224,29)" rx="2" ry="2" />
<text  x="339.30" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="262.3" y="213" width="0.3" height="15.0" fill="rgb(231,135,34)" rx="2" ry="2" />
<text  x="265.29" y="223.5" ></text>
</g>
<g >
<title>reflect.methodReceiver (1 samples, 0.02%)</title><rect x="268.9" y="165" width="0.3" height="15.0" fill="rgb(216,213,23)" rx="2" ry="2" />
<text  x="271.92" y="175.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.04%)</title><rect x="261.0" y="165" width="0.5" height="15.0" fill="rgb(233,197,32)" rx="2" ry="2" />
<text  x="263.96" y="175.5" ></text>
</g>
<g >
<title>runtime.stopm (48 samples, 1.08%)</title><rect x="747.8" y="309" width="12.7" height="15.0" fill="rgb(238,27,25)" rx="2" ry="2" />
<text  x="750.77" y="319.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (1 samples, 0.02%)</title><rect x="155.1" y="165" width="0.3" height="15.0" fill="rgb(226,229,31)" rx="2" ry="2" />
<text  x="158.11" y="175.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.02%)</title><rect x="155.4" y="245" width="0.2" height="15.0" fill="rgb(244,137,2)" rx="2" ry="2" />
<text  x="158.38" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (2 samples, 0.04%)</title><rect x="1180.7" y="341" width="0.5" height="15.0" fill="rgb(250,216,38)" rx="2" ry="2" />
<text  x="1183.71" y="351.5" ></text>
</g>
<g >
<title>runtime.nanotime (9 samples, 0.20%)</title><rect x="711.7" y="309" width="2.4" height="15.0" fill="rgb(229,203,15)" rx="2" ry="2" />
<text  x="714.69" y="319.5" ></text>
</g>
<g >
<title>runtime.makeslice (6 samples, 0.13%)</title><rect x="156.4" y="245" width="1.6" height="15.0" fill="rgb(250,171,11)" rx="2" ry="2" />
<text  x="159.44" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.02%)</title><rect x="269.2" y="69" width="0.3" height="15.0" fill="rgb(238,224,35)" rx="2" ry="2" />
<text  x="272.19" y="79.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="158.3" y="341" width="0.3" height="15.0" fill="rgb(218,133,16)" rx="2" ry="2" />
<text  x="161.30" y="351.5" ></text>
</g>
<g >
<title>runtime.memhash (1 samples, 0.02%)</title><rect x="268.7" y="85" width="0.2" height="15.0" fill="rgb(254,193,17)" rx="2" ry="2" />
<text  x="271.66" y="95.5" ></text>
</g>
<g >
<title>runtime.chansend (2 samples, 0.04%)</title><rect x="161.7" y="261" width="0.6" height="15.0" fill="rgb(246,160,43)" rx="2" ry="2" />
<text  x="164.74" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (2 samples, 0.04%)</title><rect x="335.8" y="277" width="0.5" height="15.0" fill="rgb(234,11,26)" rx="2" ry="2" />
<text  x="338.77" y="287.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (1 samples, 0.02%)</title><rect x="353.3" y="293" width="0.2" height="15.0" fill="rgb(208,82,23)" rx="2" ry="2" />
<text  x="356.28" y="303.5" ></text>
</g>
<g >
<title>runtime.semasleep (26 samples, 0.58%)</title><rect x="346.4" y="277" width="6.9" height="15.0" fill="rgb(234,100,19)" rx="2" ry="2" />
<text  x="349.38" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="353.5" y="309" width="0.3" height="15.0" fill="rgb(226,14,4)" rx="2" ry="2" />
<text  x="356.55" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WSConn.Read (560 samples, 12.59%)</title><rect x="10.0" y="357" width="148.6" height="15.0" fill="rgb(219,129,43)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >hslam.com/mgit/Mor..</text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.02%)</title><rect x="269.2" y="101" width="0.3" height="15.0" fill="rgb(240,76,25)" rx="2" ry="2" />
<text  x="272.19" y="111.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Response).Encode (3 samples, 0.07%)</title><rect x="264.9" y="229" width="0.8" height="15.0" fill="rgb(228,31,6)" rx="2" ry="2" />
<text  x="267.94" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="269.2" y="149" width="0.3" height="15.0" fill="rgb(227,155,53)" rx="2" ry="2" />
<text  x="272.19" y="159.5" ></text>
</g>
<g >
<title>runtime.startm (5 samples, 0.11%)</title><rect x="710.1" y="293" width="1.3" height="15.0" fill="rgb(240,78,19)" rx="2" ry="2" />
<text  x="713.09" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="274.0" y="213" width="0.2" height="15.0" fill="rgb(233,164,16)" rx="2" ry="2" />
<text  x="276.96" y="223.5" ></text>
</g>
<g >
<title>runtime.(*_type).typeOff (1 samples, 0.02%)</title><rect x="271.0" y="149" width="0.3" height="15.0" fill="rgb(222,2,14)" rx="2" ry="2" />
<text  x="274.04" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="335.8" y="293" width="0.5" height="15.0" fill="rgb(233,177,30)" rx="2" ry="2" />
<text  x="338.77" y="303.5" ></text>
</g>
<g >
<title>runtime.funcPC (1 samples, 0.02%)</title><rect x="154.3" y="149" width="0.3" height="15.0" fill="rgb(230,60,54)" rx="2" ry="2" />
<text  x="157.32" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (2 samples, 0.04%)</title><rect x="264.9" y="213" width="0.6" height="15.0" fill="rgb(252,102,21)" rx="2" ry="2" />
<text  x="267.94" y="223.5" ></text>
</g>
<g >
<title>runtime.nilinterhash (1 samples, 0.02%)</title><rect x="268.7" y="117" width="0.2" height="15.0" fill="rgb(231,224,41)" rx="2" ry="2" />
<text  x="271.66" y="127.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="711.4" y="309" width="0.3" height="15.0" fill="rgb(217,28,13)" rx="2" ry="2" />
<text  x="714.42" y="319.5" ></text>
</g>
<g >
<title>runtime.wakep (26 samples, 0.58%)</title><rect x="1183.1" y="309" width="6.9" height="15.0" fill="rgb(222,226,1)" rx="2" ry="2" />
<text  x="1186.10" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="761.8" y="293" width="0.3" height="15.0" fill="rgb(231,211,52)" rx="2" ry="2" />
<text  x="764.83" y="303.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="711.4" y="293" width="0.3" height="15.0" fill="rgb(224,24,53)" rx="2" ry="2" />
<text  x="714.42" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).XXX_Marshal (2 samples, 0.04%)</title><rect x="261.8" y="229" width="0.5" height="15.0" fill="rgb(227,85,25)" rx="2" ry="2" />
<text  x="264.76" y="239.5" ></text>
</g>
<g >
<title>runtime.semasleep (1,337 samples, 30.06%)</title><rect x="354.3" y="309" width="354.7" height="15.0" fill="rgb(253,176,37)" rx="2" ry="2" />
<text  x="357.34" y="319.5" >runtime.semasleep</text>
</g>
<g >
<title>bytes.(*Buffer).grow (9 samples, 0.20%)</title><rect x="155.6" y="277" width="2.4" height="15.0" fill="rgb(237,228,8)" rx="2" ry="2" />
<text  x="158.64" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Request).Decode (7 samples, 0.16%)</title><rect x="263.1" y="229" width="1.8" height="15.0" fill="rgb(228,61,28)" rx="2" ry="2" />
<text  x="266.08" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.02%)</title><rect x="155.1" y="213" width="0.3" height="15.0" fill="rgb(212,35,48)" rx="2" ry="2" />
<text  x="158.11" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (4 samples, 0.09%)</title><rect x="263.6" y="165" width="1.1" height="15.0" fill="rgb(241,142,17)" rx="2" ry="2" />
<text  x="266.62" y="175.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (3 samples, 0.07%)</title><rect x="1181.5" y="293" width="0.8" height="15.0" fill="rgb(248,44,45)" rx="2" ry="2" />
<text  x="1184.51" y="303.5" ></text>
</g>
<g >
<title>runtime.semasleep (48 samples, 1.08%)</title><rect x="747.8" y="277" width="12.7" height="15.0" fill="rgb(235,229,8)" rx="2" ry="2" />
<text  x="750.77" y="287.5" ></text>
</g>
<g >
<title>runtime.netpollready (2 samples, 0.04%)</title><rect x="745.6" y="293" width="0.6" height="15.0" fill="rgb(247,58,36)" rx="2" ry="2" />
<text  x="748.64" y="303.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.02%)</title><rect x="262.3" y="85" width="0.3" height="15.0" fill="rgb(234,95,41)" rx="2" ry="2" />
<text  x="265.29" y="95.5" ></text>
</g>
<g >
<title>runtime.chanrecv (2 samples, 0.04%)</title><rect x="258.6" y="277" width="0.5" height="15.0" fill="rgb(207,162,46)" rx="2" ry="2" />
<text  x="261.57" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="255.9" y="181" width="0.6" height="15.0" fill="rgb(242,107,2)" rx="2" ry="2" />
<text  x="258.92" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="760.5" y="309" width="0.3" height="15.0" fill="rgb(246,192,32)" rx="2" ry="2" />
<text  x="763.50" y="319.5" ></text>
</g>
<g >
<title>runtime.kevent (104 samples, 2.34%)</title><rect x="718.1" y="293" width="27.5" height="15.0" fill="rgb(246,134,44)" rx="2" ry="2" />
<text  x="721.05" y="303.5" >r..</text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.02%)</title><rect x="255.9" y="101" width="0.3" height="15.0" fill="rgb(231,94,14)" rx="2" ry="2" />
<text  x="258.92" y="111.5" ></text>
</g>
<g >
<title>runtime.semawakeup (26 samples, 0.58%)</title><rect x="1183.1" y="261" width="6.9" height="15.0" fill="rgb(233,218,43)" rx="2" ry="2" />
<text  x="1186.10" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.04%)</title><rect x="261.0" y="213" width="0.5" height="15.0" fill="rgb(219,158,46)" rx="2" ry="2" />
<text  x="263.96" y="223.5" ></text>
</g>
<g >
<title>syscall.syscall (348 samples, 7.82%)</title><rect x="62.3" y="165" width="92.3" height="15.0" fill="rgb(249,227,46)" rx="2" ry="2" />
<text  x="65.26" y="175.5" >syscall.sys..</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*messageReader).Read (1 samples, 0.02%)</title><rect x="158.0" y="277" width="0.3" height="15.0" fill="rgb(251,207,6)" rx="2" ry="2" />
<text  x="161.03" y="287.5" ></text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (1,559 samples, 35.05%)</title><rect x="767.1" y="341" width="413.6" height="15.0" fill="rgb(243,132,15)" rx="2" ry="2" />
<text  x="770.13" y="351.5" >runtime.entersyscallblock_handoff</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (1 samples, 0.02%)</title><rect x="264.9" y="149" width="0.3" height="15.0" fill="rgb(233,75,13)" rx="2" ry="2" />
<text  x="267.94" y="159.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.02%)</title><rect x="270.5" y="197" width="0.3" height="15.0" fill="rgb(244,63,11)" rx="2" ry="2" />
<text  x="273.51" y="207.5" ></text>
</g>
<g >
<title>runtime.makeslice (3 samples, 0.07%)</title><rect x="269.7" y="197" width="0.8" height="15.0" fill="rgb(234,73,4)" rx="2" ry="2" />
<text  x="272.72" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="1182.8" y="293" width="0.3" height="15.0" fill="rgb(240,197,1)" rx="2" ry="2" />
<text  x="1185.84" y="303.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="761.3" y="325" width="0.3" height="15.0" fill="rgb(250,147,17)" rx="2" ry="2" />
<text  x="764.29" y="335.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollWait (4 samples, 0.09%)</title><rect x="11.6" y="165" width="1.1" height="15.0" fill="rgb(247,131,44)" rx="2" ry="2" />
<text  x="14.59" y="175.5" ></text>
</g>
<g >
<title>runtime.acquireSudog (1 samples, 0.02%)</title><rect x="331.0" y="261" width="0.3" height="15.0" fill="rgb(241,215,10)" rx="2" ry="2" />
<text  x="334.00" y="271.5" ></text>
</g>
<g >
<title>reflect.Value.assignTo (1 samples, 0.02%)</title><rect x="267.9" y="165" width="0.2" height="15.0" fill="rgb(223,109,23)" rx="2" ry="2" />
<text  x="270.86" y="175.5" ></text>
</g>
<g >
<title>syscall.write (249 samples, 5.60%)</title><rect x="192.5" y="229" width="66.1" height="15.0" fill="rgb(227,78,22)" rx="2" ry="2" />
<text  x="195.52" y="239.5" >syscall..</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).write.func1 (2 samples, 0.04%)</title><rect x="161.7" y="293" width="0.6" height="15.0" fill="rgb(234,123,50)" rx="2" ry="2" />
<text  x="164.74" y="303.5" ></text>
</g>
<g >
<title>runtime.selparkcommit (1 samples, 0.02%)</title><rect x="761.3" y="341" width="0.3" height="15.0" fill="rgb(220,88,2)" rx="2" ry="2" />
<text  x="764.29" y="351.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).advanceFrame (543 samples, 12.21%)</title><rect x="10.5" y="309" width="144.1" height="15.0" fill="rgb(207,201,6)" rx="2" ry="2" />
<text  x="13.53" y="319.5" >github.com/gorilla..</text>
</g>
<g >
<title>runtime.netpoll (121 samples, 2.72%)</title><rect x="714.1" y="309" width="32.1" height="15.0" fill="rgb(211,91,1)" rx="2" ry="2" />
<text  x="717.07" y="319.5" >ru..</text>
</g>
<g >
<title>runtime.getStackMap (2 samples, 0.04%)</title><rect x="336.3" y="197" width="0.5" height="15.0" fill="rgb(221,181,50)" rx="2" ry="2" />
<text  x="339.30" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFuncIn (2 samples, 0.04%)</title><rect x="270.8" y="213" width="0.5" height="15.0" fill="rgb(246,145,45)" rx="2" ry="2" />
<text  x="273.78" y="223.5" ></text>
</g>
<g >
<title>runtime.deferreturn (103 samples, 2.32%)</title><rect x="165.2" y="245" width="27.3" height="15.0" fill="rgb(215,194,24)" rx="2" ry="2" />
<text  x="168.19" y="255.5" >r..</text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.02%)</title><rect x="260.7" y="165" width="0.3" height="15.0" fill="rgb(247,174,54)" rx="2" ry="2" />
<text  x="263.70" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBoolValueNoZero (1 samples, 0.02%)</title><rect x="261.8" y="181" width="0.2" height="15.0" fill="rgb(227,163,38)" rx="2" ry="2" />
<text  x="264.76" y="191.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.WSConn.Write (372 samples, 8.36%)</title><rect x="160.4" y="357" width="98.7" height="15.0" fill="rgb(248,5,35)" rx="2" ry="2" />
<text  x="163.42" y="367.5" >hslam.com/m..</text>
</g>
<g >
<title>internal/poll.setDeadlineImpl (4 samples, 0.09%)</title><rect x="163.3" y="245" width="1.1" height="15.0" fill="rgb(231,165,24)" rx="2" ry="2" />
<text  x="166.34" y="255.5" ></text>
</g>
<g >
<title>time.Time.IsZero (1 samples, 0.02%)</title><rect x="164.1" y="229" width="0.3" height="15.0" fill="rgb(245,27,40)" rx="2" ry="2" />
<text  x="167.13" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (1 samples, 0.02%)</title><rect x="260.7" y="181" width="0.3" height="15.0" fill="rgb(212,28,1)" rx="2" ry="2" />
<text  x="263.70" y="191.5" ></text>
</g>
<g >
<title>bytes.makeSlice (9 samples, 0.20%)</title><rect x="155.6" y="261" width="2.4" height="15.0" fill="rgb(219,80,33)" rx="2" ry="2" />
<text  x="158.64" y="271.5" ></text>
</g>
<g >
<title>runtime.gosched_m (2 samples, 0.04%)</title><rect x="709.0" y="357" width="0.6" height="15.0" fill="rgb(253,27,10)" rx="2" ry="2" />
<text  x="712.03" y="367.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (1 samples, 0.02%)</title><rect x="274.0" y="197" width="0.2" height="15.0" fill="rgb(228,90,20)" rx="2" ry="2" />
<text  x="276.96" y="207.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (1 samples, 0.02%)</title><rect x="160.7" y="309" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="163.68" y="319.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="1181.2" y="261" width="0.3" height="15.0" fill="rgb(223,123,48)" rx="2" ry="2" />
<text  x="1184.25" y="271.5" ></text>
</g>
<g >
<title>runtime.semrelease (1 samples, 0.02%)</title><rect x="154.8" y="245" width="0.3" height="15.0" fill="rgb(227,187,33)" rx="2" ry="2" />
<text  x="157.85" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.04%)</title><rect x="1182.3" y="293" width="0.5" height="15.0" fill="rgb(252,147,24)" rx="2" ry="2" />
<text  x="1185.31" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Msg).Reset (2 samples, 0.04%)</title><rect x="260.2" y="229" width="0.5" height="15.0" fill="rgb(215,177,51)" rx="2" ry="2" />
<text  x="263.17" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUTF8StringValue (2 samples, 0.04%)</title><rect x="264.1" y="149" width="0.6" height="15.0" fill="rgb(210,137,24)" rx="2" ry="2" />
<text  x="267.15" y="159.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="269.5" y="133" width="0.2" height="15.0" fill="rgb(233,19,39)" rx="2" ry="2" />
<text  x="272.45" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="153.0" y="133" width="0.3" height="15.0" fill="rgb(217,44,50)" rx="2" ry="2" />
<text  x="155.99" y="143.5" ></text>
</g>
<g >
<title>runtime.sweepone (11 samples, 0.25%)</title><rect x="333.4" y="357" width="2.9" height="15.0" fill="rgb(233,96,49)" rx="2" ry="2" />
<text  x="336.39" y="367.5" ></text>
</g>
<g >
<title>sync.(*Map).Load (1 samples, 0.02%)</title><rect x="270.8" y="181" width="0.2" height="15.0" fill="rgb(230,38,22)" rx="2" ry="2" />
<text  x="273.78" y="191.5" ></text>
</g>
<g >
<title>reflect.funcLayout (3 samples, 0.07%)</title><rect x="268.1" y="165" width="0.8" height="15.0" fill="rgb(244,141,54)" rx="2" ry="2" />
<text  x="271.12" y="175.5" ></text>
</g>
<g >
<title>runtime.runqput (1 samples, 0.02%)</title><rect x="274.0" y="165" width="0.2" height="15.0" fill="rgb(232,186,12)" rx="2" ry="2" />
<text  x="276.96" y="175.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (1 samples, 0.02%)</title><rect x="162.0" y="245" width="0.3" height="15.0" fill="rgb(229,92,0)" rx="2" ry="2" />
<text  x="165.01" y="255.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Discard (2 samples, 0.04%)</title><rect x="10.5" y="277" width="0.6" height="15.0" fill="rgb(249,75,13)" rx="2" ry="2" />
<text  x="13.53" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (5 samples, 0.11%)</title><rect x="337.1" y="309" width="1.3" height="15.0" fill="rgb(248,217,31)" rx="2" ry="2" />
<text  x="340.10" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="269.7" y="181" width="0.8" height="15.0" fill="rgb(211,12,27)" rx="2" ry="2" />
<text  x="272.72" y="191.5" ></text>
</g>
<g >
<title>runtime.gentraceback (2 samples, 0.04%)</title><rect x="336.3" y="245" width="0.5" height="15.0" fill="rgb(220,157,7)" rx="2" ry="2" />
<text  x="339.30" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.04%)</title><rect x="760.8" y="261" width="0.5" height="15.0" fill="rgb(225,124,2)" rx="2" ry="2" />
<text  x="763.76" y="271.5" ></text>
</g>
<g >
<title>net/http.HandlerFunc.ServeHTTP (271 samples, 6.09%)</title><rect x="259.6" y="325" width="71.9" height="15.0" fill="rgb(230,194,38)" rx="2" ry="2" />
<text  x="262.64" y="335.5" >net/http..</text>
</g>
<g >
<title>reflect.Value.Type (1 samples, 0.02%)</title><rect x="271.0" y="197" width="0.3" height="15.0" fill="rgb(244,76,34)" rx="2" ry="2" />
<text  x="274.04" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="265.5" y="165" width="0.2" height="15.0" fill="rgb(212,106,28)" rx="2" ry="2" />
<text  x="268.47" y="175.5" ></text>
</g>
<g >
<title>net/http.(*conn).serve (271 samples, 6.09%)</title><rect x="259.6" y="373" width="71.9" height="15.0" fill="rgb(214,122,6)" rx="2" ry="2" />
<text  x="262.64" y="383.5" >net/http..</text>
</g>
<g >
<title>runtime.ready (26 samples, 0.58%)</title><rect x="1183.1" y="325" width="6.9" height="15.0" fill="rgb(251,160,34)" rx="2" ry="2" />
<text  x="1186.10" y="335.5" ></text>
</g>
<g >
<title>runtime.mcall (1,601 samples, 35.99%)</title><rect x="336.8" y="373" width="424.8" height="15.0" fill="rgb(248,97,48)" rx="2" ry="2" />
<text  x="339.83" y="383.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="272.4" y="213" width="0.5" height="15.0" fill="rgb(216,15,14)" rx="2" ry="2" />
<text  x="275.37" y="223.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.02%)</title><rect x="354.1" y="325" width="0.2" height="15.0" fill="rgb(228,221,34)" rx="2" ry="2" />
<text  x="357.08" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (6 samples, 0.13%)</title><rect x="156.4" y="229" width="1.6" height="15.0" fill="rgb(246,107,6)" rx="2" ry="2" />
<text  x="159.44" y="239.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.02%)</title><rect x="153.0" y="85" width="0.3" height="15.0" fill="rgb(210,199,15)" rx="2" ry="2" />
<text  x="155.99" y="95.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.04%)</title><rect x="261.0" y="149" width="0.5" height="15.0" fill="rgb(230,195,34)" rx="2" ry="2" />
<text  x="263.96" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1,552 samples, 34.89%)</title><rect x="769.0" y="277" width="411.7" height="15.0" fill="rgb(238,66,37)" rx="2" ry="2" />
<text  x="771.99" y="287.5" >runtime.semawakeup</text>
</g>
<g >
<title>runtime.gopreempt_m (1 samples, 0.02%)</title><rect x="761.6" y="341" width="0.2" height="15.0" fill="rgb(230,206,15)" rx="2" ry="2" />
<text  x="764.56" y="351.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.02%)</title><rect x="768.7" y="277" width="0.3" height="15.0" fill="rgb(241,71,53)" rx="2" ry="2" />
<text  x="771.72" y="287.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (1 samples, 0.02%)</title><rect x="270.8" y="165" width="0.2" height="15.0" fill="rgb(207,62,50)" rx="2" ry="2" />
<text  x="273.78" y="175.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.02%)</title><rect x="164.9" y="229" width="0.3" height="15.0" fill="rgb(247,15,22)" rx="2" ry="2" />
<text  x="167.93" y="239.5" ></text>
</g>
<g >
<title>runtime.handoffp (2 samples, 0.04%)</title><rect x="255.9" y="149" width="0.6" height="15.0" fill="rgb(212,124,42)" rx="2" ry="2" />
<text  x="258.92" y="159.5" ></text>
</g>
<g >
<title>runtime.netpollunblock (2 samples, 0.04%)</title><rect x="745.6" y="277" width="0.6" height="15.0" fill="rgb(242,129,7)" rx="2" ry="2" />
<text  x="748.64" y="287.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.02%)</title><rect x="272.4" y="197" width="0.2" height="15.0" fill="rgb(242,139,23)" rx="2" ry="2" />
<text  x="275.37" y="207.5" ></text>
</g>
<g >
<title>runtime.mstart (1,614 samples, 36.29%)</title><rect x="761.8" y="373" width="428.2" height="15.0" fill="rgb(245,214,2)" rx="2" ry="2" />
<text  x="764.83" y="383.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.(*gQueue).pop (1 samples, 0.02%)</title><rect x="339.0" y="293" width="0.2" height="15.0" fill="rgb(251,185,24)" rx="2" ry="2" />
<text  x="341.96" y="303.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).XXX_Unmarshal (4 samples, 0.09%)</title><rect x="263.6" y="197" width="1.1" height="15.0" fill="rgb(224,31,35)" rx="2" ry="2" />
<text  x="266.62" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Response).XXX_Marshal (1 samples, 0.02%)</title><rect x="264.9" y="197" width="0.3" height="15.0" fill="rgb(245,94,7)" rx="2" ry="2" />
<text  x="267.94" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/examples/example/pb/service.(*ArithResponse).XXX_Size (3 samples, 0.07%)</title><rect x="271.3" y="181" width="0.8" height="15.0" fill="rgb(252,188,41)" rx="2" ry="2" />
<text  x="274.31" y="191.5" ></text>
</g>
<g >
<title>runtime.osyield (5 samples, 0.11%)</title><rect x="337.1" y="325" width="1.3" height="15.0" fill="rgb(210,41,13)" rx="2" ry="2" />
<text  x="340.10" y="335.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (2 samples, 0.04%)</title><rect x="709.0" y="341" width="0.6" height="15.0" fill="rgb(245,106,32)" rx="2" ry="2" />
<text  x="712.03" y="351.5" ></text>
</g>
<g >
<title>runtime.osyield (6 samples, 0.13%)</title><rect x="767.1" y="277" width="1.6" height="15.0" fill="rgb(248,201,45)" rx="2" ry="2" />
<text  x="770.13" y="287.5" ></text>
</g>
<g >
<title>runtime.chanrecv1 (2 samples, 0.04%)</title><rect x="258.6" y="293" width="0.5" height="15.0" fill="rgb(242,173,26)" rx="2" ry="2" />
<text  x="261.57" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (1,595 samples, 35.86%)</title><rect x="766.9" y="357" width="423.1" height="15.0" fill="rgb(206,229,7)" rx="2" ry="2" />
<text  x="769.87" y="367.5" >runtime.systemstack</text>
</g>
<g >
<title>io/ioutil.readAll (11 samples, 0.25%)</title><rect x="155.4" y="309" width="2.9" height="15.0" fill="rgb(227,226,10)" rx="2" ry="2" />
<text  x="158.38" y="319.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="268.9" y="149" width="0.3" height="15.0" fill="rgb(218,59,15)" rx="2" ry="2" />
<text  x="271.92" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.02%)</title><rect x="261.8" y="197" width="0.2" height="15.0" fill="rgb(221,218,3)" rx="2" ry="2" />
<text  x="264.76" y="207.5" ></text>
</g>
<g >
<title>runtime.bgsweep (11 samples, 0.25%)</title><rect x="333.4" y="373" width="2.9" height="15.0" fill="rgb(219,12,6)" rx="2" ry="2" />
<text  x="336.39" y="383.5" ></text>
</g>
<g >
<title>runtime.newobject (2 samples, 0.04%)</title><rect x="261.0" y="245" width="0.5" height="15.0" fill="rgb(215,123,30)" rx="2" ry="2" />
<text  x="263.96" y="255.5" ></text>
</g>
<g >
<title>runtime._System (3 samples, 0.07%)</title><rect x="331.5" y="373" width="0.8" height="15.0" fill="rgb(222,142,11)" rx="2" ry="2" />
<text  x="334.53" y="383.5" ></text>
</g>
<g >
<title>runtime.scang (2 samples, 0.04%)</title><rect x="336.3" y="277" width="0.5" height="15.0" fill="rgb(209,119,21)" rx="2" ry="2" />
<text  x="339.30" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (10 samples, 0.22%)</title><rect x="764.2" y="325" width="2.7" height="15.0" fill="rgb(209,133,18)" rx="2" ry="2" />
<text  x="767.21" y="335.5" ></text>
</g>
<g >
<title>runtime.save (1 samples, 0.02%)</title><rect x="152.7" y="133" width="0.3" height="15.0" fill="rgb(215,62,13)" rx="2" ry="2" />
<text  x="155.72" y="143.5" ></text>
</g>
<g >
<title>runtime.markroot (2 samples, 0.04%)</title><rect x="336.3" y="309" width="0.5" height="15.0" fill="rgb(216,159,27)" rx="2" ry="2" />
<text  x="339.30" y="319.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="264.4" y="101" width="0.3" height="15.0" fill="rgb(225,152,27)" rx="2" ry="2" />
<text  x="267.41" y="111.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.02%)</title><rect x="154.8" y="261" width="0.3" height="15.0" fill="rgb(234,202,26)" rx="2" ry="2" />
<text  x="157.85" y="271.5" ></text>
</g>
<g >
<title>runtime.stopm (1,339 samples, 30.10%)</title><rect x="353.8" y="341" width="355.2" height="15.0" fill="rgb(222,227,27)" rx="2" ry="2" />
<text  x="356.81" y="351.5" >runtime.stopm</text>
</g>
<g >
<title>net/http.(*ServeMux).ServeHTTP (271 samples, 6.09%)</title><rect x="259.6" y="341" width="71.9" height="15.0" fill="rgb(234,151,5)" rx="2" ry="2" />
<text  x="262.64" y="351.5" >net/http..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1,335 samples, 30.01%)</title><rect x="354.3" y="293" width="354.2" height="15.0" fill="rgb(250,172,12)" rx="2" ry="2" />
<text  x="357.34" y="303.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.handoffp (1,559 samples, 35.05%)</title><rect x="767.1" y="325" width="413.6" height="15.0" fill="rgb(228,2,40)" rx="2" ry="2" />
<text  x="770.13" y="335.5" >runtime.handoffp</text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.04%)</title><rect x="264.1" y="117" width="0.6" height="15.0" fill="rgb(207,141,40)" rx="2" ry="2" />
<text  x="267.15" y="127.5" ></text>
</g>
<g >
<title>runtime.gogo (2 samples, 0.04%)</title><rect x="331.5" y="357" width="0.6" height="15.0" fill="rgb(239,64,11)" rx="2" ry="2" />
<text  x="334.53" y="367.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="255.9" y="117" width="0.3" height="15.0" fill="rgb(211,174,1)" rx="2" ry="2" />
<text  x="258.92" y="127.5" ></text>
</g>
<g >
<title>runtime.chansend (3 samples, 0.07%)</title><rect x="273.4" y="261" width="0.8" height="15.0" fill="rgb(221,135,26)" rx="2" ry="2" />
<text  x="276.43" y="271.5" ></text>
</g>
<g >
<title>runtime.gcStart.func2 (1 samples, 0.02%)</title><rect x="1182.8" y="341" width="0.3" height="15.0" fill="rgb(252,90,1)" rx="2" ry="2" />
<text  x="1185.84" y="351.5" ></text>
</g>
<g >
<title>runtime.injectglist (5 samples, 0.11%)</title><rect x="710.1" y="309" width="1.3" height="15.0" fill="rgb(207,47,11)" rx="2" ry="2" />
<text  x="713.09" y="319.5" ></text>
</g>
<g >
<title>runtime.notesleep (26 samples, 0.58%)</title><rect x="346.4" y="293" width="6.9" height="15.0" fill="rgb(224,226,31)" rx="2" ry="2" />
<text  x="349.38" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (2 samples, 0.04%)</title><rect x="335.8" y="261" width="0.5" height="15.0" fill="rgb(229,114,47)" rx="2" ry="2" />
<text  x="338.77" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (1 samples, 0.02%)</title><rect x="260.7" y="213" width="0.3" height="15.0" fill="rgb(241,224,39)" rx="2" ry="2" />
<text  x="263.70" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="256.2" y="117" width="0.3" height="15.0" fill="rgb(252,48,21)" rx="2" ry="2" />
<text  x="259.19" y="127.5" ></text>
</g>
<g >
<title>runtime.notetsleep (3 samples, 0.07%)</title><rect x="1181.5" y="309" width="0.8" height="15.0" fill="rgb(243,28,50)" rx="2" ry="2" />
<text  x="1184.51" y="319.5" ></text>
</g>
<g >
<title>runtime.mapaccess2 (2 samples, 0.04%)</title><rect x="268.4" y="133" width="0.5" height="15.0" fill="rgb(251,146,29)" rx="2" ry="2" />
<text  x="271.39" y="143.5" ></text>
</g>
<g >
<title>reflect.Value.call (12 samples, 0.27%)</title><rect x="266.5" y="181" width="3.2" height="15.0" fill="rgb(219,215,31)" rx="2" ry="2" />
<text  x="269.53" y="191.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.02%)</title><rect x="763.9" y="325" width="0.3" height="15.0" fill="rgb(234,150,17)" rx="2" ry="2" />
<text  x="766.95" y="335.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).waitRead (4 samples, 0.09%)</title><rect x="11.6" y="197" width="1.1" height="15.0" fill="rgb(226,6,31)" rx="2" ry="2" />
<text  x="14.59" y="207.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/protocol.ReadConn (562 samples, 12.63%)</title><rect x="10.0" y="373" width="149.1" height="15.0" fill="rgb(210,208,13)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >hslam.com/mgit/Mort..</text>
</g>
<g >
<title>runtime.markBits.isMarked (1 samples, 0.02%)</title><rect x="261.2" y="101" width="0.3" height="15.0" fill="rgb(221,108,29)" rx="2" ry="2" />
<text  x="264.23" y="111.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (4 samples, 0.09%)</title><rect x="153.3" y="133" width="1.0" height="15.0" fill="rgb(224,142,23)" rx="2" ry="2" />
<text  x="156.26" y="143.5" ></text>
</g>
<g >
<title>syscall.Read (349 samples, 7.85%)</title><rect x="62.0" y="197" width="92.6" height="15.0" fill="rgb(251,54,7)" rx="2" ry="2" />
<text  x="65.00" y="207.5" >syscall.Read</text>
</g>
<g >
<title>runtime.(*mcache).nextFree (5 samples, 0.11%)</title><rect x="156.4" y="213" width="1.4" height="15.0" fill="rgb(243,66,15)" rx="2" ry="2" />
<text  x="159.44" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (2 samples, 0.04%)</title><rect x="1182.3" y="341" width="0.5" height="15.0" fill="rgb(240,130,18)" rx="2" ry="2" />
<text  x="1185.31" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mSpanList).remove (1 samples, 0.02%)</title><rect x="335.5" y="309" width="0.3" height="15.0" fill="rgb(232,91,51)" rx="2" ry="2" />
<text  x="338.51" y="319.5" ></text>
</g>
<g >
<title>runtime.convTstring (2 samples, 0.04%)</title><rect x="272.4" y="229" width="0.5" height="15.0" fill="rgb(213,134,26)" rx="2" ry="2" />
<text  x="275.37" y="239.5" ></text>
</g>
<g >
<title>runtime.greyobject (2 samples, 0.04%)</title><rect x="261.0" y="117" width="0.5" height="15.0" fill="rgb(234,205,48)" rx="2" ry="2" />
<text  x="263.96" y="127.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.02%)</title><rect x="270.2" y="165" width="0.3" height="15.0" fill="rgb(226,59,28)" rx="2" ry="2" />
<text  x="273.25" y="175.5" ></text>
</g>
<g >
<title>runtime.startm (1,559 samples, 35.05%)</title><rect x="767.1" y="309" width="413.6" height="15.0" fill="rgb(217,49,12)" rx="2" ry="2" />
<text  x="770.13" y="319.5" >runtime.startm</text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.02%)</title><rect x="264.7" y="181" width="0.2" height="15.0" fill="rgb(214,33,25)" rx="2" ry="2" />
<text  x="267.68" y="191.5" ></text>
</g>
<g >
<title>runtime.newstack (1 samples, 0.02%)</title><rect x="761.6" y="357" width="0.2" height="15.0" fill="rgb(217,67,27)" rx="2" ry="2" />
<text  x="764.56" y="367.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (2 samples, 0.04%)</title><rect x="259.1" y="357" width="0.5" height="15.0" fill="rgb(206,50,14)" rx="2" ry="2" />
<text  x="262.11" y="367.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="262.3" y="229" width="0.3" height="15.0" fill="rgb(245,118,48)" rx="2" ry="2" />
<text  x="265.29" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.04%)</title><rect x="154.8" y="277" width="0.6" height="15.0" fill="rgb(240,172,0)" rx="2" ry="2" />
<text  x="157.85" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="336.3" y="357" width="0.5" height="15.0" fill="rgb(227,203,42)" rx="2" ry="2" />
<text  x="339.30" y="367.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.02%)</title><rect x="264.9" y="181" width="0.3" height="15.0" fill="rgb(222,228,27)" rx="2" ry="2" />
<text  x="267.94" y="191.5" ></text>
</g>
<g >
<title>runtime.spanOf (1 samples, 0.02%)</title><rect x="157.0" y="37" width="0.2" height="15.0" fill="rgb(231,31,47)" rx="2" ry="2" />
<text  x="159.97" y="47.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.04%)</title><rect x="1182.3" y="309" width="0.5" height="15.0" fill="rgb(241,75,4)" rx="2" ry="2" />
<text  x="1185.31" y="319.5" ></text>
</g>
<g >
<title>runtime.notesleep (1,337 samples, 30.06%)</title><rect x="354.3" y="325" width="354.7" height="15.0" fill="rgb(217,164,10)" rx="2" ry="2" />
<text  x="357.34" y="335.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.04%)</title><rect x="339.8" y="309" width="0.5" height="15.0" fill="rgb(247,137,33)" rx="2" ry="2" />
<text  x="342.75" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="262.3" y="197" width="0.3" height="15.0" fill="rgb(215,110,41)" rx="2" ry="2" />
<text  x="265.29" y="207.5" ></text>
</g>
<g >
<title>runtime.send (1 samples, 0.02%)</title><rect x="158.8" y="325" width="0.3" height="15.0" fill="rgb(254,82,35)" rx="2" ry="2" />
<text  x="161.83" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="1181.0" y="277" width="0.2" height="15.0" fill="rgb(250,69,36)" rx="2" ry="2" />
<text  x="1183.98" y="287.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.04%)</title><rect x="155.9" y="245" width="0.5" height="15.0" fill="rgb(219,200,49)" rx="2" ry="2" />
<text  x="158.91" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (48 samples, 1.08%)</title><rect x="747.8" y="261" width="12.7" height="15.0" fill="rgb(240,94,34)" rx="2" ry="2" />
<text  x="750.77" y="271.5" ></text>
</g>
<g >
<title>runtime.execute (1 samples, 0.02%)</title><rect x="709.8" y="325" width="0.3" height="15.0" fill="rgb(241,212,11)" rx="2" ry="2" />
<text  x="712.83" y="335.5" ></text>
</g>
<g >
<title>runtime.deferreturn (186 samples, 4.18%)</title><rect x="12.7" y="197" width="49.3" height="15.0" fill="rgb(243,51,35)" rx="2" ry="2" />
<text  x="15.65" y="207.5" >runt..</text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.02%)</title><rect x="1181.0" y="309" width="0.2" height="15.0" fill="rgb(225,223,12)" rx="2" ry="2" />
<text  x="1183.98" y="319.5" ></text>
</g>
<g >
<title>runtime.resetspinning (2 samples, 0.04%)</title><rect x="760.8" y="325" width="0.5" height="15.0" fill="rgb(233,166,17)" rx="2" ry="2" />
<text  x="763.76" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.02%)</title><rect x="265.5" y="181" width="0.2" height="15.0" fill="rgb(242,113,34)" rx="2" ry="2" />
<text  x="268.47" y="191.5" ></text>
</g>
<g >
<title>runtime.send (2 samples, 0.04%)</title><rect x="273.7" y="245" width="0.5" height="15.0" fill="rgb(220,48,38)" rx="2" ry="2" />
<text  x="276.70" y="255.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (4 samples, 0.09%)</title><rect x="332.3" y="373" width="1.1" height="15.0" fill="rgb(239,60,5)" rx="2" ry="2" />
<text  x="335.32" y="383.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).ReadFrom (10 samples, 0.22%)</title><rect x="155.6" y="293" width="2.7" height="15.0" fill="rgb(235,216,3)" rx="2" ry="2" />
<text  x="158.64" y="303.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).ReadMessage (558 samples, 12.54%)</title><rect x="10.3" y="341" width="148.0" height="15.0" fill="rgb(254,181,5)" rx="2" ry="2" />
<text  x="13.27" y="351.5" >github.com/gorilla..</text>
</g>
<g >
<title>runtime.wakep (2 samples, 0.04%)</title><rect x="760.8" y="309" width="0.5" height="15.0" fill="rgb(209,91,21)" rx="2" ry="2" />
<text  x="763.76" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (5 samples, 0.11%)</title><rect x="710.1" y="277" width="1.3" height="15.0" fill="rgb(248,109,12)" rx="2" ry="2" />
<text  x="713.09" y="287.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (539 samples, 12.12%)</title><rect x="11.6" y="229" width="143.0" height="15.0" fill="rgb(226,134,15)" rx="2" ry="2" />
<text  x="14.59" y="239.5" >net.(*netFD).Read</text>
</g>
<g >
<title>runtime.exitsyscallfast (8 samples, 0.18%)</title><rect x="256.5" y="181" width="2.1" height="15.0" fill="rgb(225,9,29)" rx="2" ry="2" />
<text  x="259.45" y="191.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (1 samples, 0.02%)</title><rect x="1182.8" y="325" width="0.3" height="15.0" fill="rgb(241,82,30)" rx="2" ry="2" />
<text  x="1185.84" y="335.5" ></text>
</g>
<g >
<title>io/ioutil.ReadAll (11 samples, 0.25%)</title><rect x="155.4" y="325" width="2.9" height="15.0" fill="rgb(238,6,17)" rx="2" ry="2" />
<text  x="158.38" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.(*Msg).Encode (4 samples, 0.09%)</title><rect x="261.5" y="261" width="1.1" height="15.0" fill="rgb(207,132,42)" rx="2" ry="2" />
<text  x="264.49" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.02%)</title><rect x="711.4" y="277" width="0.3" height="15.0" fill="rgb(217,62,53)" rx="2" ry="2" />
<text  x="714.42" y="287.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).Call (18 samples, 0.40%)</title><rect x="265.7" y="213" width="4.8" height="15.0" fill="rgb(241,24,26)" rx="2" ry="2" />
<text  x="268.74" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (3 samples, 0.07%)</title><rect x="1181.5" y="341" width="0.8" height="15.0" fill="rgb(228,15,24)" rx="2" ry="2" />
<text  x="1184.51" y="351.5" ></text>
</g>
<g >
<title>runtime.netpollblock (3 samples, 0.07%)</title><rect x="11.6" y="149" width="0.8" height="15.0" fill="rgb(226,35,46)" rx="2" ry="2" />
<text  x="14.59" y="159.5" ></text>
</g>
<g >
<title>runtime.deferproc (2 samples, 0.04%)</title><rect x="272.9" y="261" width="0.5" height="15.0" fill="rgb(207,202,51)" rx="2" ry="2" />
<text  x="275.90" y="271.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="273.4" y="245" width="0.3" height="15.0" fill="rgb(237,45,2)" rx="2" ry="2" />
<text  x="276.43" y="255.5" ></text>
</g>
<g >
<title>reflect.(*rtype).Name (1 samples, 0.02%)</title><rect x="266.3" y="197" width="0.2" height="15.0" fill="rgb(227,57,52)" rx="2" ry="2" />
<text  x="269.27" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.02%)</title><rect x="761.6" y="309" width="0.2" height="15.0" fill="rgb(215,226,39)" rx="2" ry="2" />
<text  x="764.56" y="319.5" ></text>
</g>
<g >
<title>runtime.findrunnable (54 samples, 1.21%)</title><rect x="339.0" y="325" width="14.3" height="15.0" fill="rgb(242,143,40)" rx="2" ry="2" />
<text  x="341.96" y="335.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ListenWS.func1 (271 samples, 6.09%)</title><rect x="259.6" y="309" width="71.9" height="15.0" fill="rgb(213,38,34)" rx="2" ry="2" />
<text  x="262.64" y="319.5" >hslam.co..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (2 samples, 0.04%)</title><rect x="271.6" y="149" width="0.5" height="15.0" fill="rgb(242,222,13)" rx="2" ry="2" />
<text  x="274.57" y="159.5" ></text>
</g>
<g >
<title>reflect.(*rtype).String (1 samples, 0.02%)</title><rect x="266.3" y="181" width="0.2" height="15.0" fill="rgb(205,211,7)" rx="2" ry="2" />
<text  x="269.27" y="191.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.07%)</title><rect x="154.6" y="293" width="0.8" height="15.0" fill="rgb(209,212,25)" rx="2" ry="2" />
<text  x="157.58" y="303.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.04%)</title><rect x="264.1" y="133" width="0.6" height="15.0" fill="rgb(215,66,28)" rx="2" ry="2" />
<text  x="267.15" y="143.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="157.8" y="213" width="0.2" height="15.0" fill="rgb(231,1,15)" rx="2" ry="2" />
<text  x="160.77" y="223.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.02%)</title><rect x="1181.2" y="245" width="0.3" height="15.0" fill="rgb(252,43,10)" rx="2" ry="2" />
<text  x="1184.25" y="255.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.02%)</title><rect x="269.5" y="149" width="0.2" height="15.0" fill="rgb(237,164,42)" rx="2" ry="2" />
<text  x="272.45" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.04%)</title><rect x="760.8" y="245" width="0.5" height="15.0" fill="rgb(215,9,35)" rx="2" ry="2" />
<text  x="763.76" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (2 samples, 0.04%)</title><rect x="157.0" y="117" width="0.5" height="15.0" fill="rgb(210,202,15)" rx="2" ry="2" />
<text  x="159.97" y="127.5" ></text>
</g>
<g >
<title>runtime.park_m (196 samples, 4.41%)</title><rect x="709.6" y="357" width="52.0" height="15.0" fill="rgb(224,60,39)" rx="2" ry="2" />
<text  x="712.56" y="367.5" >runti..</text>
</g>
<g >
<title>runtime.chansend1 (3 samples, 0.07%)</title><rect x="273.4" y="277" width="0.8" height="15.0" fill="rgb(219,20,29)" rx="2" ry="2" />
<text  x="276.43" y="287.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.02%)</title><rect x="269.5" y="165" width="0.2" height="15.0" fill="rgb(218,5,47)" rx="2" ry="2" />
<text  x="272.45" y="175.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (541 samples, 12.16%)</title><rect x="11.1" y="277" width="143.5" height="15.0" fill="rgb(235,7,13)" rx="2" ry="2" />
<text  x="14.06" y="287.5" >bufio.(*Reader).Peek</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).read (543 samples, 12.21%)</title><rect x="10.5" y="293" width="144.1" height="15.0" fill="rgb(207,218,13)" rx="2" ry="2" />
<text  x="13.53" y="303.5" >github.com/gorilla..</text>
</g>
<g >
<title>runtime.aeshashbody (1 samples, 0.02%)</title><rect x="268.7" y="69" width="0.2" height="15.0" fill="rgb(242,179,49)" rx="2" ry="2" />
<text  x="271.66" y="79.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (354 samples, 7.96%)</title><rect x="164.7" y="261" width="93.9" height="15.0" fill="rgb(243,52,14)" rx="2" ry="2" />
<text  x="167.66" y="271.5" >internal/po..</text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).prepWrite (1 samples, 0.02%)</title><rect x="160.7" y="325" width="0.2" height="15.0" fill="rgb(253,114,38)" rx="2" ry="2" />
<text  x="163.68" y="335.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.02%)</title><rect x="164.9" y="245" width="0.3" height="15.0" fill="rgb(226,205,34)" rx="2" ry="2" />
<text  x="167.93" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (5 samples, 0.11%)</title><rect x="710.1" y="245" width="1.3" height="15.0" fill="rgb(238,55,30)" rx="2" ry="2" />
<text  x="713.09" y="255.5" ></text>
</g>
<g >
<title>reflect.(*rtype).typeOff (1 samples, 0.02%)</title><rect x="271.0" y="181" width="0.3" height="15.0" fill="rgb(238,65,25)" rx="2" ry="2" />
<text  x="274.04" y="191.5" ></text>
</g>
<g >
<title>runtime.startm (26 samples, 0.58%)</title><rect x="1183.1" y="293" width="6.9" height="15.0" fill="rgb(235,177,34)" rx="2" ry="2" />
<text  x="1186.10" y="303.5" ></text>
</g>
<g >
<title>reflect.Value.Call (12 samples, 0.27%)</title><rect x="266.5" y="197" width="3.2" height="15.0" fill="rgb(248,14,37)" rx="2" ry="2" />
<text  x="269.53" y="207.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_fast32 (1 samples, 0.02%)</title><rect x="271.0" y="117" width="0.3" height="15.0" fill="rgb(223,0,43)" rx="2" ry="2" />
<text  x="274.04" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="261.0" y="197" width="0.5" height="15.0" fill="rgb(246,151,24)" rx="2" ry="2" />
<text  x="263.96" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="760.5" y="293" width="0.3" height="15.0" fill="rgb(236,11,11)" rx="2" ry="2" />
<text  x="763.50" y="303.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.02%)</title><rect x="265.5" y="213" width="0.2" height="15.0" fill="rgb(208,179,50)" rx="2" ry="2" />
<text  x="268.47" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.02%)</title><rect x="157.0" y="69" width="0.2" height="15.0" fill="rgb(218,9,11)" rx="2" ry="2" />
<text  x="159.97" y="79.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (6 samples, 0.13%)</title><rect x="1170.4" y="261" width="1.6" height="15.0" fill="rgb(232,64,3)" rx="2" ry="2" />
<text  x="1173.37" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="708.8" y="293" width="0.2" height="15.0" fill="rgb(241,43,33)" rx="2" ry="2" />
<text  x="711.77" y="303.5" ></text>
</g>
<g >
<title>net/http.serverHandler.ServeHTTP (271 samples, 6.09%)</title><rect x="259.6" y="357" width="71.9" height="15.0" fill="rgb(252,45,12)" rx="2" ry="2" />
<text  x="262.64" y="367.5" >net/http..</text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.02%)</title><rect x="1181.2" y="293" width="0.3" height="15.0" fill="rgb(246,208,42)" rx="2" ry="2" />
<text  x="1184.25" y="303.5" ></text>
</g>
<g >
<title>runtime.findrunnable (190 samples, 4.27%)</title><rect x="710.1" y="325" width="50.4" height="15.0" fill="rgb(227,47,35)" rx="2" ry="2" />
<text  x="713.09" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.memhash128 (1 samples, 0.02%)</title><rect x="268.7" y="101" width="0.2" height="15.0" fill="rgb(206,123,22)" rx="2" ry="2" />
<text  x="271.66" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="155.1" y="261" width="0.3" height="15.0" fill="rgb(249,148,44)" rx="2" ry="2" />
<text  x="158.11" y="271.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.02%)</title><rect x="259.4" y="325" width="0.2" height="15.0" fill="rgb(217,200,6)" rx="2" ry="2" />
<text  x="262.37" y="335.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.02%)</title><rect x="262.3" y="117" width="0.3" height="15.0" fill="rgb(227,58,12)" rx="2" ry="2" />
<text  x="265.29" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.02%)</title><rect x="269.2" y="133" width="0.3" height="15.0" fill="rgb(213,13,41)" rx="2" ry="2" />
<text  x="272.19" y="143.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.02%)</title><rect x="272.6" y="197" width="0.3" height="15.0" fill="rgb(240,72,41)" rx="2" ry="2" />
<text  x="275.63" y="207.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.02%)</title><rect x="339.5" y="293" width="0.3" height="15.0" fill="rgb(225,189,5)" rx="2" ry="2" />
<text  x="342.49" y="303.5" ></text>
</g>
<g >
<title>runtime.gopark (1 samples, 0.02%)</title><rect x="259.1" y="309" width="0.3" height="15.0" fill="rgb(230,218,51)" rx="2" ry="2" />
<text  x="262.11" y="319.5" ></text>
</g>
<g >
<title>reflect.resolveTypeOff (1 samples, 0.02%)</title><rect x="271.0" y="165" width="0.3" height="15.0" fill="rgb(218,54,34)" rx="2" ry="2" />
<text  x="274.04" y="175.5" ></text>
</g>
<g >
<title>runtime.add (1 samples, 0.02%)</title><rect x="264.7" y="149" width="0.2" height="15.0" fill="rgb(240,1,51)" rx="2" ry="2" />
<text  x="267.68" y="159.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.04%)</title><rect x="345.9" y="277" width="0.5" height="15.0" fill="rgb(205,26,42)" rx="2" ry="2" />
<text  x="348.85" y="287.5" ></text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.02%)</title><rect x="273.2" y="245" width="0.2" height="15.0" fill="rgb(238,94,12)" rx="2" ry="2" />
<text  x="276.17" y="255.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.02%)</title><rect x="1181.2" y="309" width="0.3" height="15.0" fill="rgb(237,4,41)" rx="2" ry="2" />
<text  x="1184.25" y="319.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/funcs.(*Funcs).GetFunc (1 samples, 0.02%)</title><rect x="270.8" y="197" width="0.2" height="15.0" fill="rgb(248,153,24)" rx="2" ry="2" />
<text  x="273.78" y="207.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).Grow (1 samples, 0.02%)</title><rect x="155.4" y="293" width="0.2" height="15.0" fill="rgb(236,17,35)" rx="2" ry="2" />
<text  x="158.38" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="153.0" y="69" width="0.3" height="15.0" fill="rgb(217,140,23)" rx="2" ry="2" />
<text  x="155.99" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce (1 samples, 0.02%)</title><rect x="335.8" y="245" width="0.2" height="15.0" fill="rgb(218,131,13)" rx="2" ry="2" />
<text  x="338.77" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="157.0" y="133" width="0.5" height="15.0" fill="rgb(249,156,46)" rx="2" ry="2" />
<text  x="159.97" y="143.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.02%)</title><rect x="761.6" y="261" width="0.2" height="15.0" fill="rgb(213,84,8)" rx="2" ry="2" />
<text  x="764.56" y="271.5" ></text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc/pb.(*Request).Reset (2 samples, 0.04%)</title><rect x="263.1" y="197" width="0.5" height="15.0" fill="rgb(211,182,24)" rx="2" ry="2" />
<text  x="266.08" y="207.5" ></text>
</g>
<g >
<title>bytes.makeSlice (1 samples, 0.02%)</title><rect x="155.4" y="261" width="0.2" height="15.0" fill="rgb(219,157,26)" rx="2" ry="2" />
<text  x="158.38" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (3 samples, 0.07%)</title><rect x="260.2" y="245" width="0.8" height="15.0" fill="rgb(229,53,28)" rx="2" ry="2" />
<text  x="263.17" y="255.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (541 samples, 12.16%)</title><rect x="11.1" y="261" width="143.5" height="15.0" fill="rgb(240,202,31)" rx="2" ry="2" />
<text  x="14.06" y="271.5" >bufio.(*Reader).fill</text>
</g>
<g >
<title>hslam.com/mgit/Mort/rpc.ReplyEncode (4 samples, 0.09%)</title><rect x="271.3" y="213" width="1.1" height="15.0" fill="rgb(245,10,2)" rx="2" ry="2" />
<text  x="274.31" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (3 samples, 0.07%)</title><rect x="335.5" y="325" width="0.8" height="15.0" fill="rgb(224,40,23)" rx="2" ry="2" />
<text  x="338.51" y="335.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.02%)</title><rect x="262.3" y="101" width="0.3" height="15.0" fill="rgb(237,10,32)" rx="2" ry="2" />
<text  x="265.29" y="111.5" ></text>
</g>
<g >
<title>runtime.morestack (1 samples, 0.02%)</title><rect x="761.6" y="373" width="0.2" height="15.0" fill="rgb(229,134,34)" rx="2" ry="2" />
<text  x="764.56" y="383.5" ></text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.04%)</title><rect x="155.9" y="229" width="0.5" height="15.0" fill="rgb(220,95,14)" rx="2" ry="2" />
<text  x="158.91" y="239.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.02%)</title><rect x="264.7" y="197" width="0.2" height="15.0" fill="rgb(215,92,54)" rx="2" ry="2" />
<text  x="267.68" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.07%)</title><rect x="1181.5" y="277" width="0.8" height="15.0" fill="rgb(211,206,13)" rx="2" ry="2" />
<text  x="1184.51" y="287.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="152.5" y="133" width="0.2" height="15.0" fill="rgb(209,175,37)" rx="2" ry="2" />
<text  x="155.46" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce (1 samples, 0.02%)</title><rect x="157.0" y="53" width="0.2" height="15.0" fill="rgb(208,102,54)" rx="2" ry="2" />
<text  x="159.97" y="63.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="1182.8" y="277" width="0.3" height="15.0" fill="rgb(209,22,54)" rx="2" ry="2" />
<text  x="1185.84" y="287.5" ></text>
</g>
<g >
<title>github.com/gorilla/websocket.(*Conn).NextReader (547 samples, 12.30%)</title><rect x="10.3" y="325" width="145.1" height="15.0" fill="rgb(223,151,30)" rx="2" ry="2" />
<text  x="13.27" y="335.5" >github.com/gorilla..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (3 samples, 0.07%)</title><rect x="271.3" y="165" width="0.8" height="15.0" fill="rgb(244,143,45)" rx="2" ry="2" />
<text  x="274.31" y="175.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (1 samples, 0.02%)</title><rect x="761.6" y="293" width="0.2" height="15.0" fill="rgb(254,68,42)" rx="2" ry="2" />
<text  x="764.56" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.02%)</title><rect x="265.5" y="133" width="0.2" height="15.0" fill="rgb(239,217,33)" rx="2" ry="2" />
<text  x="268.47" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.02%)</title><rect x="760.5" y="277" width="0.3" height="15.0" fill="rgb(222,191,17)" rx="2" ry="2" />
<text  x="763.50" y="287.5" ></text>
</g>
</g>
</svg>

