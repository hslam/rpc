<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>runtime.pageIndexOf (1 samples, 0.03%)</title><rect x="298.2" y="165" width="0.3" height="15.0" fill="rgb(233,74,49)" rx="2" ry="2" />
<text  x="301.22" y="175.5" ></text>
</g>
<g >
<title>runtime.ready (2 samples, 0.05%)</title><rect x="429.5" y="261" width="0.7" height="15.0" fill="rgb(217,114,19)" rx="2" ry="2" />
<text  x="432.54" y="271.5" ></text>
</g>
<g >
<title>runtime.pageIndexOf (1 samples, 0.03%)</title><rect x="447.7" y="213" width="0.3" height="15.0" fill="rgb(229,169,10)" rx="2" ry="2" />
<text  x="450.72" y="223.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.03%)</title><rect x="938.8" y="309" width="0.3" height="15.0" fill="rgb(213,88,24)" rx="2" ry="2" />
<text  x="941.77" y="319.5" ></text>
</g>
<g >
<title>runtime.step (3 samples, 0.08%)</title><rect x="476.4" y="197" width="0.9" height="15.0" fill="rgb(241,101,26)" rx="2" ry="2" />
<text  x="479.39" y="207.5" ></text>
</g>
<g >
<title>runtime.newobject (37 samples, 0.97%)</title><rect x="303.2" y="325" width="11.4" height="15.0" fill="rgb(241,74,2)" rx="2" ry="2" />
<text  x="306.15" y="335.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="289.3" y="293" width="0.3" height="15.0" fill="rgb(251,49,26)" rx="2" ry="2" />
<text  x="292.28" y="303.5" ></text>
</g>
<g >
<title>runtime.selectgo (2 samples, 0.05%)</title><rect x="113.0" y="357" width="0.6" height="15.0" fill="rgb(238,87,14)" rx="2" ry="2" />
<text  x="115.96" y="367.5" ></text>
</g>
<g >
<title>runtime.heapBits.initSpan (1 samples, 0.03%)</title><rect x="83.4" y="197" width="0.3" height="15.0" fill="rgb(243,46,8)" rx="2" ry="2" />
<text  x="86.36" y="207.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (4 samples, 0.10%)</title><rect x="207.6" y="261" width="1.2" height="15.0" fill="rgb(239,167,48)" rx="2" ry="2" />
<text  x="210.59" y="271.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeue (7 samples, 0.18%)</title><rect x="14.6" y="277" width="2.2" height="15.0" fill="rgb(209,228,31)" rx="2" ry="2" />
<text  x="17.62" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.03%)</title><rect x="205.4" y="213" width="0.3" height="15.0" fill="rgb(235,63,13)" rx="2" ry="2" />
<text  x="208.43" y="223.5" ></text>
</g>
<g >
<title>runtime.usleep (78 samples, 2.04%)</title><rect x="914.7" y="325" width="24.1" height="15.0" fill="rgb(236,79,34)" rx="2" ry="2" />
<text  x="917.73" y="335.5" >r..</text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.03%)</title><rect x="344.1" y="293" width="0.4" height="15.0" fill="rgb(247,112,11)" rx="2" ry="2" />
<text  x="347.15" y="303.5" ></text>
</g>
<g >
<title>runtime.freedefer (7 samples, 0.18%)</title><rect x="171.2" y="277" width="2.2" height="15.0" fill="rgb(214,99,28)" rx="2" ry="2" />
<text  x="174.22" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.03%)</title><rect x="938.8" y="325" width="0.3" height="15.0" fill="rgb(224,181,35)" rx="2" ry="2" />
<text  x="941.77" y="335.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Response).XXX_Unmarshal (10 samples, 0.26%)</title><rect x="100.3" y="293" width="3.1" height="15.0" fill="rgb(206,99,44)" rx="2" ry="2" />
<text  x="103.32" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.03%)</title><rect x="437.5" y="309" width="0.4" height="15.0" fill="rgb(223,84,18)" rx="2" ry="2" />
<text  x="440.55" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (7 samples, 0.18%)</title><rect x="23.3" y="261" width="2.1" height="15.0" fill="rgb(211,120,10)" rx="2" ry="2" />
<text  x="26.25" y="271.5" ></text>
</g>
<g >
<title>runtime.usleep (4 samples, 0.10%)</title><rect x="181.1" y="213" width="1.2" height="15.0" fill="rgb(237,153,39)" rx="2" ry="2" />
<text  x="184.08" y="223.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (4 samples, 0.10%)</title><rect x="453.9" y="325" width="1.2" height="15.0" fill="rgb(243,158,52)" rx="2" ry="2" />
<text  x="456.89" y="335.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="437.5" y="245" width="0.4" height="15.0" fill="rgb(247,36,7)" rx="2" ry="2" />
<text  x="440.55" y="255.5" ></text>
</g>
<g >
<title>runtime.deferreturn (30 samples, 0.78%)</title><rect x="368.5" y="341" width="9.2" height="15.0" fill="rgb(252,104,36)" rx="2" ry="2" />
<text  x="371.50" y="351.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (6 samples, 0.16%)</title><rect x="287.1" y="293" width="1.9" height="15.0" fill="rgb(220,24,1)" rx="2" ry="2" />
<text  x="290.12" y="303.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.03%)</title><rect x="129.0" y="245" width="0.3" height="15.0" fill="rgb(229,147,51)" rx="2" ry="2" />
<text  x="131.99" y="255.5" ></text>
</g>
<g >
<title>runtime.runqput (2 samples, 0.05%)</title><rect x="21.4" y="197" width="0.6" height="15.0" fill="rgb(246,100,45)" rx="2" ry="2" />
<text  x="24.41" y="207.5" ></text>
</g>
<g >
<title>runtime.scang (15 samples, 0.39%)</title><rect x="440.6" y="213" width="4.7" height="15.0" fill="rgb(231,162,25)" rx="2" ry="2" />
<text  x="443.63" y="223.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (3 samples, 0.08%)</title><rect x="127.1" y="261" width="1.0" height="15.0" fill="rgb(232,101,11)" rx="2" ry="2" />
<text  x="130.14" y="271.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (1 samples, 0.03%)</title><rect x="482.9" y="197" width="0.3" height="15.0" fill="rgb(236,168,30)" rx="2" ry="2" />
<text  x="485.86" y="207.5" ></text>
</g>
<g >
<title>runtime.notesleep (27 samples, 0.71%)</title><rect x="861.1" y="261" width="8.3" height="15.0" fill="rgb(215,169,45)" rx="2" ry="2" />
<text  x="864.09" y="271.5" ></text>
</g>
<g >
<title>sync.runtime_nanotime (5 samples, 0.13%)</title><rect x="178.6" y="277" width="1.6" height="15.0" fill="rgb(214,203,12)" rx="2" ry="2" />
<text  x="181.62" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (27 samples, 0.71%)</title><rect x="869.4" y="261" width="8.3" height="15.0" fill="rgb(207,55,22)" rx="2" ry="2" />
<text  x="872.41" y="271.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.03%)</title><rect x="296.7" y="149" width="0.3" height="15.0" fill="rgb(247,83,21)" rx="2" ry="2" />
<text  x="299.68" y="159.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.03%)</title><rect x="47.9" y="277" width="0.3" height="15.0" fill="rgb(215,227,29)" rx="2" ry="2" />
<text  x="50.92" y="287.5" ></text>
</g>
<g >
<title>runtime.(*randomOrder).start (1 samples, 0.03%)</title><rect x="506.6" y="309" width="0.3" height="15.0" fill="rgb(213,198,21)" rx="2" ry="2" />
<text  x="509.60" y="319.5" ></text>
</g>
<g >
<title>math/rand.(*lockedSource).Int63 (45 samples, 1.18%)</title><rect x="378.1" y="293" width="13.8" height="15.0" fill="rgb(249,216,54)" rx="2" ry="2" />
<text  x="381.06" y="303.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (6 samples, 0.16%)</title><rect x="310.5" y="293" width="1.9" height="15.0" fill="rgb(241,132,51)" rx="2" ry="2" />
<text  x="313.55" y="303.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/protocol.PacketStream (3 samples, 0.08%)</title><rect x="128.7" y="357" width="0.9" height="15.0" fill="rgb(233,56,5)" rx="2" ry="2" />
<text  x="131.68" y="367.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (2 samples, 0.05%)</title><rect x="92.6" y="261" width="0.6" height="15.0" fill="rgb(251,60,12)" rx="2" ry="2" />
<text  x="95.61" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (1 samples, 0.03%)</title><rect x="50.1" y="165" width="0.3" height="15.0" fill="rgb(213,107,47)" rx="2" ry="2" />
<text  x="53.07" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (22 samples, 0.57%)</title><rect x="28.5" y="261" width="6.8" height="15.0" fill="rgb(206,118,42)" rx="2" ry="2" />
<text  x="31.50" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (723 samples, 18.89%)</title><rect x="619.1" y="277" width="222.9" height="15.0" fill="rgb(213,160,34)" rx="2" ry="2" />
<text  x="622.11" y="287.5" >runtime.semasleep</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (1 samples, 0.03%)</title><rect x="83.7" y="309" width="0.3" height="15.0" fill="rgb(245,34,51)" rx="2" ry="2" />
<text  x="86.67" y="319.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.03%)</title><rect x="50.1" y="325" width="0.3" height="15.0" fill="rgb(252,162,7)" rx="2" ry="2" />
<text  x="53.07" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.03%)</title><rect x="50.1" y="309" width="0.3" height="15.0" fill="rgb(229,120,50)" rx="2" ry="2" />
<text  x="53.07" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (3 samples, 0.08%)</title><rect x="94.8" y="261" width="0.9" height="15.0" fill="rgb(209,76,25)" rx="2" ry="2" />
<text  x="97.77" y="271.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.03%)</title><rect x="858.6" y="261" width="0.3" height="15.0" fill="rgb(246,195,47)" rx="2" ry="2" />
<text  x="861.63" y="271.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Batch).Ticker (127 samples, 3.32%)</title><rect x="11.2" y="341" width="39.2" height="15.0" fill="rgb(225,46,17)" rx="2" ry="2" />
<text  x="14.23" y="351.5" >hsl..</text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="128.7" y="325" width="0.6" height="15.0" fill="rgb(231,32,9)" rx="2" ry="2" />
<text  x="131.68" y="335.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.08%)</title><rect x="309.6" y="213" width="0.9" height="15.0" fill="rgb(227,116,29)" rx="2" ry="2" />
<text  x="312.62" y="223.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (1 samples, 0.03%)</title><rect x="314.2" y="277" width="0.4" height="15.0" fill="rgb(207,168,29)" rx="2" ry="2" />
<text  x="317.25" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1034.6" y="261" width="0.3" height="15.0" fill="rgb(209,165,4)" rx="2" ry="2" />
<text  x="1037.64" y="271.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.03%)</title><rect x="108.6" y="133" width="0.3" height="15.0" fill="rgb(234,55,5)" rx="2" ry="2" />
<text  x="111.64" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.03%)</title><rect x="1189.7" y="293" width="0.3" height="15.0" fill="rgb(252,82,36)" rx="2" ry="2" />
<text  x="1192.69" y="303.5" ></text>
</g>
<g >
<title>runtime.lock (13 samples, 0.34%)</title><rect x="60.2" y="325" width="4.1" height="15.0" fill="rgb(231,131,48)" rx="2" ry="2" />
<text  x="63.25" y="335.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (32 samples, 0.84%)</title><rect x="474.2" y="293" width="9.9" height="15.0" fill="rgb(224,20,11)" rx="2" ry="2" />
<text  x="477.23" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.03%)</title><rect x="437.5" y="277" width="0.4" height="15.0" fill="rgb(243,210,34)" rx="2" ry="2" />
<text  x="440.55" y="287.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (49 samples, 1.28%)</title><rect x="473.3" y="373" width="15.1" height="15.0" fill="rgb(225,5,50)" rx="2" ry="2" />
<text  x="476.31" y="383.5" ></text>
</g>
<g >
<title>runtime.binarySearchTree (1 samples, 0.03%)</title><rect x="440.6" y="165" width="0.3" height="15.0" fill="rgb(221,97,3)" rx="2" ry="2" />
<text  x="443.63" y="175.5" ></text>
</g>
<g >
<title>runtime.deferreturn (10 samples, 0.26%)</title><rect x="51.6" y="341" width="3.1" height="15.0" fill="rgb(253,161,49)" rx="2" ry="2" />
<text  x="54.61" y="351.5" ></text>
</g>
<g >
<title>runtime.(*stackScanState).addObject (1 samples, 0.03%)</title><rect x="297.9" y="85" width="0.3" height="15.0" fill="rgb(231,54,52)" rx="2" ry="2" />
<text  x="300.91" y="95.5" ></text>
</g>
<g >
<title>runtime.mallocgc (9 samples, 0.24%)</title><rect x="94.2" y="277" width="2.7" height="15.0" fill="rgb(253,47,43)" rx="2" ry="2" />
<text  x="97.15" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.03%)</title><rect x="110.8" y="261" width="0.3" height="15.0" fill="rgb(210,178,16)" rx="2" ry="2" />
<text  x="113.80" y="271.5" ></text>
</g>
<g >
<title>runtime.runqgrab (1 samples, 0.03%)</title><rect x="494.9" y="277" width="0.3" height="15.0" fill="rgb(233,116,20)" rx="2" ry="2" />
<text  x="497.89" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce (4 samples, 0.10%)</title><rect x="471.8" y="245" width="1.2" height="15.0" fill="rgb(225,207,28)" rx="2" ry="2" />
<text  x="474.77" y="255.5" ></text>
</g>
<g >
<title>runtime.newdefer (3 samples, 0.08%)</title><rect x="168.8" y="277" width="0.9" height="15.0" fill="rgb(237,115,30)" rx="2" ry="2" />
<text  x="171.75" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.pointer.getPointer (1 samples, 0.03%)</title><rect x="201.1" y="229" width="0.3" height="15.0" fill="rgb(233,92,7)" rx="2" ry="2" />
<text  x="204.12" y="239.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.03%)</title><rect x="391.6" y="229" width="0.3" height="15.0" fill="rgb(233,28,53)" rx="2" ry="2" />
<text  x="394.62" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="112.6" y="277" width="0.4" height="15.0" fill="rgb(252,138,50)" rx="2" ry="2" />
<text  x="115.65" y="287.5" ></text>
</g>
<g >
<title>math/rand.Int31n (46 samples, 1.20%)</title><rect x="377.7" y="357" width="14.2" height="15.0" fill="rgb(245,41,33)" rx="2" ry="2" />
<text  x="380.75" y="367.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Batch).run.func1.1 (156 samples, 4.08%)</title><rect x="10.9" y="357" width="48.1" height="15.0" fill="rgb(232,111,44)" rx="2" ry="2" />
<text  x="13.92" y="367.5" >hsla..</text>
</g>
<g >
<title>runtime.findObject (3 samples, 0.08%)</title><rect x="486.6" y="293" width="0.9" height="15.0" fill="rgb(211,205,43)" rx="2" ry="2" />
<text  x="489.56" y="303.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.03%)</title><rect x="496.1" y="277" width="0.3" height="15.0" fill="rgb(208,17,18)" rx="2" ry="2" />
<text  x="499.12" y="287.5" ></text>
</g>
<g >
<title>runtime.chansend (28 samples, 0.73%)</title><rect x="69.2" y="293" width="8.6" height="15.0" fill="rgb(235,212,46)" rx="2" ry="2" />
<text  x="72.18" y="303.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (8 samples, 0.21%)</title><rect x="55.3" y="341" width="2.5" height="15.0" fill="rgb(221,117,39)" rx="2" ry="2" />
<text  x="58.31" y="351.5" ></text>
</g>
<g >
<title>runtime.procyield (3 samples, 0.08%)</title><rect x="177.7" y="261" width="0.9" height="15.0" fill="rgb(251,119,31)" rx="2" ry="2" />
<text  x="180.69" y="271.5" ></text>
</g>
<g >
<title>runtime.gcFlushBgCredit (1 samples, 0.03%)</title><rect x="1044.5" y="309" width="0.3" height="15.0" fill="rgb(245,172,17)" rx="2" ry="2" />
<text  x="1047.50" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (2 samples, 0.05%)</title><rect x="296.7" y="277" width="0.6" height="15.0" fill="rgb(210,74,54)" rx="2" ry="2" />
<text  x="299.68" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (67 samples, 1.75%)</title><rect x="186.9" y="293" width="20.7" height="15.0" fill="rgb(240,188,9)" rx="2" ry="2" />
<text  x="189.94" y="303.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Msg).XXX_Marshal (1 samples, 0.03%)</title><rect x="83.7" y="293" width="0.3" height="15.0" fill="rgb(226,62,13)" rx="2" ry="2" />
<text  x="86.67" y="303.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="110.8" y="213" width="0.3" height="15.0" fill="rgb(252,47,31)" rx="2" ry="2" />
<text  x="113.80" y="223.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Batch).XXX_Marshal (2 samples, 0.05%)</title><rect x="25.7" y="293" width="0.6" height="15.0" fill="rgb(244,9,12)" rx="2" ry="2" />
<text  x="28.72" y="303.5" ></text>
</g>
<g >
<title>runtime.makeslice (10 samples, 0.26%)</title><rect x="93.8" y="293" width="3.1" height="15.0" fill="rgb(207,213,34)" rx="2" ry="2" />
<text  x="96.85" y="303.5" ></text>
</g>
<g >
<title>runtime.freedefer (2 samples, 0.05%)</title><rect x="113.6" y="293" width="0.6" height="15.0" fill="rgb(221,156,34)" rx="2" ry="2" />
<text  x="116.57" y="303.5" ></text>
</g>
<g >
<title>runtime.semrelease1 (9 samples, 0.24%)</title><rect x="181.1" y="261" width="2.8" height="15.0" fill="rgb(234,208,52)" rx="2" ry="2" />
<text  x="184.08" y="271.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.03%)</title><rect x="938.8" y="277" width="0.3" height="15.0" fill="rgb(208,110,14)" rx="2" ry="2" />
<text  x="941.77" y="287.5" ></text>
</g>
<g >
<title>runtime.casgstatus (8 samples, 0.21%)</title><rect x="496.4" y="341" width="2.5" height="15.0" fill="rgb(217,19,4)" rx="2" ry="2" />
<text  x="499.43" y="351.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.03%)</title><rect x="1189.7" y="309" width="0.3" height="15.0" fill="rgb(246,75,26)" rx="2" ry="2" />
<text  x="1192.69" y="319.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (25 samples, 0.65%)</title><rect x="135.8" y="357" width="7.7" height="15.0" fill="rgb(252,71,46)" rx="2" ry="2" />
<text  x="138.77" y="367.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.03%)</title><rect x="473.0" y="309" width="0.3" height="15.0" fill="rgb(241,35,33)" rx="2" ry="2" />
<text  x="476.00" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (7 samples, 0.18%)</title><rect x="850.6" y="245" width="2.2" height="15.0" fill="rgb(238,180,5)" rx="2" ry="2" />
<text  x="853.61" y="255.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.03%)</title><rect x="491.2" y="309" width="0.3" height="15.0" fill="rgb(211,219,41)" rx="2" ry="2" />
<text  x="494.19" y="319.5" ></text>
</g>
<g >
<title>runtime.newobject (18 samples, 0.47%)</title><rect x="105.3" y="309" width="5.5" height="15.0" fill="rgb(254,48,4)" rx="2" ry="2" />
<text  x="108.25" y="319.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.05%)</title><rect x="86.4" y="229" width="0.7" height="15.0" fill="rgb(221,90,47)" rx="2" ry="2" />
<text  x="89.45" y="239.5" ></text>
</g>
<g >
<title>runtime.lock (167 samples, 4.36%)</title><rect x="228.6" y="293" width="51.4" height="15.0" fill="rgb(240,24,15)" rx="2" ry="2" />
<text  x="231.55" y="303.5" >runti..</text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.05%)</title><rect x="95.7" y="229" width="0.6" height="15.0" fill="rgb(219,27,27)" rx="2" ry="2" />
<text  x="98.69" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).pickFreeSpan (1 samples, 0.03%)</title><rect x="50.1" y="149" width="0.3" height="15.0" fill="rgb(250,128,50)" rx="2" ry="2" />
<text  x="53.07" y="159.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*BatchCodec).Encode (2 samples, 0.05%)</title><rect x="25.7" y="325" width="0.6" height="15.0" fill="rgb(224,186,35)" rx="2" ry="2" />
<text  x="28.72" y="335.5" ></text>
</g>
<g >
<title>runtime.send (2 samples, 0.05%)</title><rect x="280.0" y="293" width="0.6" height="15.0" fill="rgb(229,141,41)" rx="2" ry="2" />
<text  x="283.03" y="303.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.03%)</title><rect x="104.9" y="229" width="0.4" height="15.0" fill="rgb(243,94,12)" rx="2" ry="2" />
<text  x="107.94" y="239.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.03%)</title><rect x="129.0" y="213" width="0.3" height="15.0" fill="rgb(232,172,23)" rx="2" ry="2" />
<text  x="131.99" y="223.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (5 samples, 0.13%)</title><rect x="442.2" y="117" width="1.5" height="15.0" fill="rgb(246,90,28)" rx="2" ry="2" />
<text  x="445.17" y="127.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.03%)</title><rect x="1044.2" y="277" width="0.3" height="15.0" fill="rgb(213,16,44)" rx="2" ry="2" />
<text  x="1047.20" y="287.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (2 samples, 0.05%)</title><rect x="302.5" y="277" width="0.7" height="15.0" fill="rgb(251,25,30)" rx="2" ry="2" />
<text  x="305.53" y="287.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (6 samples, 0.16%)</title><rect x="205.7" y="245" width="1.9" height="15.0" fill="rgb(230,55,10)" rx="2" ry="2" />
<text  x="208.74" y="255.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Batch).Ticker.func1 (39 samples, 1.02%)</title><rect x="68.9" y="325" width="12.0" height="15.0" fill="rgb(224,176,18)" rx="2" ry="2" />
<text  x="71.88" y="335.5" ></text>
</g>
<g >
<title>runtime.chansend.func1 (2 samples, 0.05%)</title><rect x="280.0" y="277" width="0.6" height="15.0" fill="rgb(224,46,51)" rx="2" ry="2" />
<text  x="283.03" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.03%)</title><rect x="491.5" y="245" width="0.3" height="15.0" fill="rgb(223,1,28)" rx="2" ry="2" />
<text  x="494.49" y="255.5" ></text>
</g>
<g >
<title>runtime.scanstack (32 samples, 0.84%)</title><rect x="474.2" y="261" width="9.9" height="15.0" fill="rgb(222,120,45)" rx="2" ry="2" />
<text  x="477.23" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (4 samples, 0.10%)</title><rect x="843.5" y="277" width="1.3" height="15.0" fill="rgb(209,100,38)" rx="2" ry="2" />
<text  x="846.52" y="287.5" ></text>
</g>
<g >
<title>runtime.scanblock (2 samples, 0.05%)</title><rect x="481.9" y="197" width="0.7" height="15.0" fill="rgb(252,30,40)" rx="2" ry="2" />
<text  x="484.94" y="207.5" ></text>
</g>
<g >
<title>runtime.runqsteal (1 samples, 0.03%)</title><rect x="494.9" y="293" width="0.3" height="15.0" fill="rgb(240,136,38)" rx="2" ry="2" />
<text  x="497.89" y="303.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Request).XXX_Size (8 samples, 0.21%)</title><rect x="35.3" y="293" width="2.4" height="15.0" fill="rgb(240,174,6)" rx="2" ry="2" />
<text  x="38.28" y="303.5" ></text>
</g>
<g >
<title>runtime.scanblock (3 samples, 0.08%)</title><rect x="443.7" y="133" width="0.9" height="15.0" fill="rgb(222,58,31)" rx="2" ry="2" />
<text  x="446.71" y="143.5" ></text>
</g>
<g >
<title>runtime.runqgrab (303 samples, 7.92%)</title><rect x="525.7" y="293" width="93.4" height="15.0" fill="rgb(233,144,11)" rx="2" ry="2" />
<text  x="528.71" y="303.5" >runtime.run..</text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*client).call (705 samples, 18.42%)</title><rect x="149.0" y="341" width="217.3" height="15.0" fill="rgb(228,53,15)" rx="2" ry="2" />
<text  x="152.02" y="351.5" >hslam.com/git/x/rpc.(*client..</text>
</g>
<g >
<title>runtime.exitsyscall (1 samples, 0.03%)</title><rect x="135.2" y="261" width="0.3" height="15.0" fill="rgb(248,11,39)" rx="2" ry="2" />
<text  x="138.15" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (3 samples, 0.08%)</title><rect x="94.8" y="229" width="0.9" height="15.0" fill="rgb(224,150,17)" rx="2" ry="2" />
<text  x="97.77" y="239.5" ></text>
</g>
<g >
<title>runtime.notetsleep (6 samples, 0.16%)</title><rect x="1155.5" y="325" width="1.8" height="15.0" fill="rgb(229,171,32)" rx="2" ry="2" />
<text  x="1158.48" y="335.5" ></text>
</g>
<g >
<title>time.(*Time).nsec (1 samples, 0.03%)</title><rect x="464.7" y="341" width="0.3" height="15.0" fill="rgb(245,227,19)" rx="2" ry="2" />
<text  x="467.68" y="351.5" ></text>
</g>
<g >
<title>runtime.releaseSudog (1 samples, 0.03%)</title><rect x="141.6" y="325" width="0.3" height="15.0" fill="rgb(215,171,52)" rx="2" ry="2" />
<text  x="144.62" y="335.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (6 samples, 0.16%)</title><rect x="1155.5" y="341" width="1.8" height="15.0" fill="rgb(223,172,54)" rx="2" ry="2" />
<text  x="1158.48" y="351.5" ></text>
</g>
<g >
<title>runtime.pcvalue (9 samples, 0.24%)</title><rect x="479.2" y="165" width="2.7" height="15.0" fill="rgb(208,221,26)" rx="2" ry="2" />
<text  x="482.16" y="175.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.05%)</title><rect x="72.9" y="277" width="0.6" height="15.0" fill="rgb(230,144,30)" rx="2" ry="2" />
<text  x="75.88" y="287.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.03%)</title><rect x="96.0" y="181" width="0.3" height="15.0" fill="rgb(248,124,11)" rx="2" ry="2" />
<text  x="99.00" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.05%)</title><rect x="842.9" y="277" width="0.6" height="15.0" fill="rgb(231,221,7)" rx="2" ry="2" />
<text  x="845.90" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="437.5" y="261" width="0.4" height="15.0" fill="rgb(225,119,24)" rx="2" ry="2" />
<text  x="440.55" y="271.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.03%)</title><rect x="473.3" y="309" width="0.3" height="15.0" fill="rgb(241,96,7)" rx="2" ry="2" />
<text  x="476.31" y="319.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="141.9" y="309" width="0.3" height="15.0" fill="rgb(229,10,2)" rx="2" ry="2" />
<text  x="144.93" y="319.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (10 samples, 0.26%)</title><rect x="441.6" y="165" width="3.0" height="15.0" fill="rgb(240,120,24)" rx="2" ry="2" />
<text  x="444.56" y="175.5" ></text>
</g>
<g >
<title>runtime.growslice (3 samples, 0.08%)</title><rect x="80.9" y="229" width="0.9" height="15.0" fill="rgb(245,52,35)" rx="2" ry="2" />
<text  x="83.90" y="239.5" ></text>
</g>
<g >
<title>runtime.ready (7 samples, 0.18%)</title><rect x="75.4" y="213" width="2.1" height="15.0" fill="rgb(225,153,40)" rx="2" ry="2" />
<text  x="78.35" y="223.5" ></text>
</g>
<g >
<title>runtime.shrinkstack (1 samples, 0.03%)</title><rect x="444.9" y="181" width="0.4" height="15.0" fill="rgb(217,174,34)" rx="2" ry="2" />
<text  x="447.95" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (720 samples, 18.81%)</title><rect x="619.4" y="261" width="222.0" height="15.0" fill="rgb(254,193,50)" rx="2" ry="2" />
<text  x="622.42" y="271.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.03%)</title><rect x="111.1" y="293" width="0.3" height="15.0" fill="rgb(251,29,12)" rx="2" ry="2" />
<text  x="114.11" y="303.5" ></text>
</g>
<g >
<title>runtime.markBits.isMarked (1 samples, 0.03%)</title><rect x="483.2" y="213" width="0.3" height="15.0" fill="rgb(249,44,33)" rx="2" ry="2" />
<text  x="486.17" y="223.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (8 samples, 0.21%)</title><rect x="19.6" y="229" width="2.4" height="15.0" fill="rgb(254,25,41)" rx="2" ry="2" />
<text  x="22.56" y="239.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.10%)</title><rect x="506.9" y="309" width="1.2" height="15.0" fill="rgb(221,94,15)" rx="2" ry="2" />
<text  x="509.91" y="319.5" ></text>
</g>
<g >
<title>runtime.handoffp (310 samples, 8.10%)</title><rect x="939.4" y="325" width="95.5" height="15.0" fill="rgb(235,177,25)" rx="2" ry="2" />
<text  x="942.39" y="335.5" >runtime.han..</text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.03%)</title><rect x="49.5" y="261" width="0.3" height="15.0" fill="rgb(232,12,39)" rx="2" ry="2" />
<text  x="52.46" y="271.5" ></text>
</g>
<g >
<title>runtime.notesleep (4 samples, 0.10%)</title><rect x="490.0" y="293" width="1.2" height="15.0" fill="rgb(249,57,8)" rx="2" ry="2" />
<text  x="492.95" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendUTF8StringValueNoZero (7 samples, 0.18%)</title><rect x="87.1" y="245" width="2.1" height="15.0" fill="rgb(237,16,8)" rx="2" ry="2" />
<text  x="90.06" y="255.5" ></text>
</g>
<g >
<title>runtime.binarySearchTree (1 samples, 0.03%)</title><rect x="474.2" y="197" width="0.3" height="15.0" fill="rgb(239,114,0)" rx="2" ry="2" />
<text  x="477.23" y="207.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.03%)</title><rect x="110.5" y="197" width="0.3" height="15.0" fill="rgb(252,88,2)" rx="2" ry="2" />
<text  x="113.49" y="207.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Unlock (4 samples, 0.10%)</title><rect x="57.8" y="341" width="1.2" height="15.0" fill="rgb(234,45,8)" rx="2" ry="2" />
<text  x="60.78" y="351.5" ></text>
</g>
<g >
<title>runtime.makechan (64 samples, 1.67%)</title><rect x="283.4" y="325" width="19.8" height="15.0" fill="rgb(235,142,22)" rx="2" ry="2" />
<text  x="286.42" y="335.5" ></text>
</g>
<g >
<title>runtime.mcall (1,201 samples, 31.37%)</title><rect x="488.4" y="373" width="370.2" height="15.0" fill="rgb(231,89,33)" rx="2" ry="2" />
<text  x="491.41" y="383.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.heapBitsSetType (8 samples, 0.21%)</title><rect x="298.5" y="277" width="2.5" height="15.0" fill="rgb(214,85,5)" rx="2" ry="2" />
<text  x="301.53" y="287.5" ></text>
</g>
<g >
<title>runtime.getStackMap (14 samples, 0.37%)</title><rect x="477.6" y="197" width="4.3" height="15.0" fill="rgb(220,59,32)" rx="2" ry="2" />
<text  x="480.62" y="207.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeue (11 samples, 0.29%)</title><rect x="69.5" y="277" width="3.4" height="15.0" fill="rgb(235,201,8)" rx="2" ry="2" />
<text  x="72.49" y="287.5" ></text>
</g>
<g >
<title>runtime.stopm (9 samples, 0.24%)</title><rect x="491.8" y="341" width="2.8" height="15.0" fill="rgb(239,52,7)" rx="2" ry="2" />
<text  x="494.80" y="351.5" ></text>
</g>
<g >
<title>runtime.heapBitsForAddr (1 samples, 0.03%)</title><rect x="300.7" y="261" width="0.3" height="15.0" fill="rgb(205,127,39)" rx="2" ry="2" />
<text  x="303.68" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.03%)</title><rect x="108.6" y="229" width="0.3" height="15.0" fill="rgb(248,44,20)" rx="2" ry="2" />
<text  x="111.64" y="239.5" ></text>
</g>
<g >
<title>runtime.heapBitsForAddr (3 samples, 0.08%)</title><rect x="98.2" y="261" width="0.9" height="15.0" fill="rgb(221,190,53)" rx="2" ry="2" />
<text  x="101.16" y="271.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (1 samples, 0.03%)</title><rect x="111.4" y="341" width="0.3" height="15.0" fill="rgb(254,228,4)" rx="2" ry="2" />
<text  x="114.42" y="351.5" ></text>
</g>
<g >
<title>runtime.typedmemclr (3 samples, 0.08%)</title><rect x="64.6" y="325" width="0.9" height="15.0" fill="rgb(245,34,53)" rx="2" ry="2" />
<text  x="67.56" y="335.5" ></text>
</g>
<g >
<title>runtime.(*semaRoot).queue (1 samples, 0.03%)</title><rect x="386.7" y="229" width="0.3" height="15.0" fill="rgb(212,165,28)" rx="2" ry="2" />
<text  x="389.69" y="239.5" ></text>
</g>
<g >
<title>math/rand.(*rngSource).Int63 (7 samples, 0.18%)</title><rect x="382.4" y="277" width="2.1" height="15.0" fill="rgb(252,177,1)" rx="2" ry="2" />
<text  x="385.37" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="490.9" y="261" width="0.3" height="15.0" fill="rgb(212,181,46)" rx="2" ry="2" />
<text  x="493.88" y="271.5" ></text>
</g>
<g >
<title>runtime.walltime (17 samples, 0.44%)</title><rect x="459.4" y="325" width="5.3" height="15.0" fill="rgb(227,227,16)" rx="2" ry="2" />
<text  x="462.44" y="335.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (3 samples, 0.08%)</title><rect x="1059.0" y="293" width="0.9" height="15.0" fill="rgb(241,10,30)" rx="2" ry="2" />
<text  x="1061.99" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (3 samples, 0.08%)</title><rect x="307.8" y="181" width="0.9" height="15.0" fill="rgb(231,20,45)" rx="2" ry="2" />
<text  x="310.77" y="191.5" ></text>
</g>
<g >
<title>runtime.scanstack (15 samples, 0.39%)</title><rect x="440.6" y="197" width="4.7" height="15.0" fill="rgb(225,153,48)" rx="2" ry="2" />
<text  x="443.63" y="207.5" ></text>
</g>
<g >
<title>runtime.osyield (7 samples, 0.18%)</title><rect x="139.2" y="309" width="2.1" height="15.0" fill="rgb(214,6,49)" rx="2" ry="2" />
<text  x="142.16" y="319.5" ></text>
</g>
<g >
<title>runtime.newdefer (4 samples, 0.10%)</title><rect x="50.4" y="325" width="1.2" height="15.0" fill="rgb(217,169,45)" rx="2" ry="2" />
<text  x="53.38" y="335.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Batch).run.func1 (184 samples, 4.81%)</title><rect x="10.0" y="373" width="56.7" height="15.0" fill="rgb(221,83,34)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >hslam...</text>
</g>
<g >
<title>runtime.libcCall (3 samples, 0.08%)</title><rect x="163.2" y="213" width="0.9" height="15.0" fill="rgb(248,173,18)" rx="2" ry="2" />
<text  x="166.20" y="223.5" ></text>
</g>
<g >
<title>sync.runtime_Semrelease (9 samples, 0.24%)</title><rect x="181.1" y="277" width="2.8" height="15.0" fill="rgb(230,99,54)" rx="2" ry="2" />
<text  x="184.08" y="287.5" ></text>
</g>
<g >
<title>runtime.gcStart.func2 (1 samples, 0.03%)</title><rect x="1059.9" y="341" width="0.3" height="15.0" fill="rgb(226,160,23)" rx="2" ry="2" />
<text  x="1062.92" y="351.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.03%)</title><rect x="491.2" y="165" width="0.3" height="15.0" fill="rgb(246,6,44)" rx="2" ry="2" />
<text  x="494.19" y="175.5" ></text>
</g>
<g >
<title>runtime.(*guintptr).cas (1 samples, 0.03%)</title><rect x="21.7" y="181" width="0.3" height="15.0" fill="rgb(248,85,44)" rx="2" ry="2" />
<text  x="24.71" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="135.2" y="229" width="0.3" height="15.0" fill="rgb(217,133,40)" rx="2" ry="2" />
<text  x="138.15" y="239.5" ></text>
</g>
<g >
<title>runtime.typedmemclr (1 samples, 0.03%)</title><rect x="141.9" y="325" width="0.3" height="15.0" fill="rgb(207,116,13)" rx="2" ry="2" />
<text  x="144.93" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.03%)</title><rect x="491.2" y="277" width="0.3" height="15.0" fill="rgb(221,61,40)" rx="2" ry="2" />
<text  x="494.19" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (2 samples, 0.05%)</title><rect x="25.7" y="277" width="0.6" height="15.0" fill="rgb(219,178,5)" rx="2" ry="2" />
<text  x="28.72" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.03%)</title><rect x="50.1" y="277" width="0.3" height="15.0" fill="rgb(223,14,1)" rx="2" ry="2" />
<text  x="53.07" y="287.5" ></text>
</g>
<g >
<title>runtime.selectgo (168 samples, 4.39%)</title><rect x="314.6" y="325" width="51.7" height="15.0" fill="rgb(235,15,48)" rx="2" ry="2" />
<text  x="317.56" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.timerproc (105 samples, 2.74%)</title><rect x="1157.3" y="373" width="32.4" height="15.0" fill="rgb(210,18,34)" rx="2" ry="2" />
<text  x="1160.32" y="383.5" >ru..</text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.03%)</title><rect x="108.6" y="197" width="0.3" height="15.0" fill="rgb(232,152,15)" rx="2" ry="2" />
<text  x="111.64" y="207.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.03%)</title><rect x="129.0" y="197" width="0.3" height="15.0" fill="rgb(245,123,23)" rx="2" ry="2" />
<text  x="131.99" y="207.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="128.4" y="341" width="0.3" height="15.0" fill="rgb(250,228,22)" rx="2" ry="2" />
<text  x="131.37" y="351.5" ></text>
</g>
<g >
<title>runtime.setprofilebucket (1 samples, 0.03%)</title><rect x="314.2" y="229" width="0.4" height="15.0" fill="rgb(206,124,26)" rx="2" ry="2" />
<text  x="317.25" y="239.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.ReplyDecode (60 samples, 1.57%)</title><rect x="208.8" y="325" width="18.5" height="15.0" fill="rgb(229,178,52)" rx="2" ry="2" />
<text  x="211.82" y="335.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Request).Encode (52 samples, 1.36%)</title><rect x="26.6" y="325" width="16.1" height="15.0" fill="rgb(244,1,27)" rx="2" ry="2" />
<text  x="29.65" y="335.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.03%)</title><rect x="429.2" y="293" width="0.3" height="15.0" fill="rgb(214,190,40)" rx="2" ry="2" />
<text  x="432.23" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (6 samples, 0.16%)</title><rect x="471.1" y="293" width="1.9" height="15.0" fill="rgb(242,150,12)" rx="2" ry="2" />
<text  x="474.15" y="303.5" ></text>
</g>
<g >
<title>runtime.ready (309 samples, 8.07%)</title><rect x="1060.2" y="325" width="95.3" height="15.0" fill="rgb(230,5,15)" rx="2" ry="2" />
<text  x="1063.22" y="335.5" >runtime.ready</text>
</g>
<g >
<title>runtime.send (15 samples, 0.39%)</title><rect x="18.0" y="277" width="4.6" height="15.0" fill="rgb(222,190,41)" rx="2" ry="2" />
<text  x="21.01" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (42 samples, 1.10%)</title><rect x="84.0" y="309" width="12.9" height="15.0" fill="rgb(229,186,6)" rx="2" ry="2" />
<text  x="86.98" y="319.5" ></text>
</g>
<g >
<title>runtime.goready (2 samples, 0.05%)</title><rect x="429.5" y="309" width="0.7" height="15.0" fill="rgb(251,21,7)" rx="2" ry="2" />
<text  x="432.54" y="319.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (3 samples, 0.08%)</title><rect x="448.0" y="213" width="1.0" height="15.0" fill="rgb(239,23,49)" rx="2" ry="2" />
<text  x="451.03" y="223.5" ></text>
</g>
<g >
<title>runtime.semasleep (6 samples, 0.16%)</title><rect x="1155.5" y="293" width="1.8" height="15.0" fill="rgb(237,14,37)" rx="2" ry="2" />
<text  x="1158.48" y="303.5" ></text>
</g>
<g >
<title>runtime.heapBits.bits (1 samples, 0.03%)</title><rect x="310.2" y="197" width="0.3" height="15.0" fill="rgb(223,2,20)" rx="2" ry="2" />
<text  x="313.24" y="207.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (27 samples, 0.71%)</title><rect x="869.4" y="293" width="8.3" height="15.0" fill="rgb(246,159,35)" rx="2" ry="2" />
<text  x="872.41" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="24.5" y="213" width="0.6" height="15.0" fill="rgb(237,94,53)" rx="2" ry="2" />
<text  x="27.49" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (5 samples, 0.13%)</title><rect x="307.2" y="229" width="1.5" height="15.0" fill="rgb(250,148,13)" rx="2" ry="2" />
<text  x="310.16" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (20 samples, 0.52%)</title><rect x="188.2" y="261" width="6.1" height="15.0" fill="rgb(246,106,44)" rx="2" ry="2" />
<text  x="191.17" y="271.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (1 samples, 0.03%)</title><rect x="288.4" y="277" width="0.3" height="15.0" fill="rgb(219,210,10)" rx="2" ry="2" />
<text  x="291.35" y="287.5" ></text>
</g>
<g >
<title>runtime.gogo (4 samples, 0.10%)</title><rect x="465.3" y="357" width="1.2" height="15.0" fill="rgb(205,32,20)" rx="2" ry="2" />
<text  x="468.29" y="367.5" ></text>
</g>
<g >
<title>runtime.(*stackScanState).addObject (1 samples, 0.03%)</title><rect x="441.6" y="133" width="0.3" height="15.0" fill="rgb(253,110,4)" rx="2" ry="2" />
<text  x="444.56" y="143.5" ></text>
</g>
<g >
<title>runtime.ready (8 samples, 0.21%)</title><rect x="19.6" y="213" width="2.4" height="15.0" fill="rgb(209,210,35)" rx="2" ry="2" />
<text  x="22.56" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (1 samples, 0.03%)</title><rect x="26.3" y="261" width="0.3" height="15.0" fill="rgb(240,69,16)" rx="2" ry="2" />
<text  x="29.34" y="271.5" ></text>
</g>
<g >
<title>runtime.mstart (907 samples, 23.69%)</title><rect x="877.7" y="373" width="279.6" height="15.0" fill="rgb(208,217,23)" rx="2" ry="2" />
<text  x="880.74" y="383.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.runqgrab (3 samples, 0.08%)</title><rect x="489.0" y="293" width="1.0" height="15.0" fill="rgb(240,54,14)" rx="2" ry="2" />
<text  x="492.03" y="303.5" ></text>
</g>
<g >
<title>runtime.resetspinning (1 samples, 0.03%)</title><rect x="491.5" y="325" width="0.3" height="15.0" fill="rgb(235,142,24)" rx="2" ry="2" />
<text  x="494.49" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.03%)</title><rect x="110.8" y="277" width="0.3" height="15.0" fill="rgb(216,69,4)" rx="2" ry="2" />
<text  x="113.80" y="287.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.03%)</title><rect x="129.0" y="277" width="0.3" height="15.0" fill="rgb(223,33,40)" rx="2" ry="2" />
<text  x="131.99" y="287.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.03%)</title><rect x="297.9" y="197" width="0.3" height="15.0" fill="rgb(221,175,19)" rx="2" ry="2" />
<text  x="300.91" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.SizeVarint (1 samples, 0.03%)</title><rect x="92.3" y="229" width="0.3" height="15.0" fill="rgb(228,161,16)" rx="2" ry="2" />
<text  x="95.30" y="239.5" ></text>
</g>
<g >
<title>sync.runtime_doSpin (1 samples, 0.03%)</title><rect x="57.2" y="325" width="0.3" height="15.0" fill="rgb(214,208,53)" rx="2" ry="2" />
<text  x="60.16" y="335.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.05%)</title><rect x="22.0" y="245" width="0.6" height="15.0" fill="rgb(232,117,50)" rx="2" ry="2" />
<text  x="25.02" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcache).releaseAll (1 samples, 0.03%)</title><rect x="860.8" y="229" width="0.3" height="15.0" fill="rgb(221,80,2)" rx="2" ry="2" />
<text  x="863.78" y="239.5" ></text>
</g>
<g >
<title>runtime.procyield (5 samples, 0.13%)</title><rect x="182.3" y="229" width="1.6" height="15.0" fill="rgb(233,94,6)" rx="2" ry="2" />
<text  x="185.31" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.05%)</title><rect x="297.9" y="261" width="0.6" height="15.0" fill="rgb(216,184,36)" rx="2" ry="2" />
<text  x="300.91" y="271.5" ></text>
</g>
<g >
<title>runtime.puintptr.ptr (1 samples, 0.03%)</title><rect x="525.4" y="309" width="0.3" height="15.0" fill="rgb(243,145,39)" rx="2" ry="2" />
<text  x="528.40" y="319.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.03%)</title><rect x="26.0" y="229" width="0.3" height="15.0" fill="rgb(220,70,33)" rx="2" ry="2" />
<text  x="29.03" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.03%)</title><rect x="41.4" y="245" width="0.4" height="15.0" fill="rgb(225,179,8)" rx="2" ry="2" />
<text  x="44.44" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.05%)</title><rect x="438.2" y="261" width="0.6" height="15.0" fill="rgb(209,204,38)" rx="2" ry="2" />
<text  x="441.17" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.03%)</title><rect x="205.4" y="133" width="0.3" height="15.0" fill="rgb(216,59,16)" rx="2" ry="2" />
<text  x="208.43" y="143.5" ></text>
</g>
<g >
<title>net.(*conn).Write (19 samples, 0.50%)</title><rect x="129.6" y="357" width="5.9" height="15.0" fill="rgb(225,166,1)" rx="2" ry="2" />
<text  x="132.60" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.03%)</title><rect x="296.7" y="165" width="0.3" height="15.0" fill="rgb(217,118,42)" rx="2" ry="2" />
<text  x="299.68" y="175.5" ></text>
</g>
<g >
<title>runtime.markroot (15 samples, 0.39%)</title><rect x="440.6" y="245" width="4.7" height="15.0" fill="rgb(238,9,1)" rx="2" ry="2" />
<text  x="443.63" y="255.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.03%)</title><rect x="95.7" y="133" width="0.3" height="15.0" fill="rgb(227,221,9)" rx="2" ry="2" />
<text  x="98.69" y="143.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/examples/example/pb/service.(*ArithResponse).XXX_Unmarshal (33 samples, 0.86%)</title><rect x="213.4" y="277" width="10.2" height="15.0" fill="rgb(213,116,32)" rx="2" ry="2" />
<text  x="216.45" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (1 samples, 0.03%)</title><rect x="83.7" y="245" width="0.3" height="15.0" fill="rgb(223,117,3)" rx="2" ry="2" />
<text  x="86.67" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.03%)</title><rect x="939.1" y="341" width="0.3" height="15.0" fill="rgb(247,115,31)" rx="2" ry="2" />
<text  x="942.08" y="351.5" ></text>
</g>
<g >
<title>runtime.mallocgc (15 samples, 0.39%)</title><rect x="106.2" y="293" width="4.6" height="15.0" fill="rgb(207,210,47)" rx="2" ry="2" />
<text  x="109.18" y="303.5" ></text>
</g>
<g >
<title>runtime.libcCall (6 samples, 0.16%)</title><rect x="462.8" y="309" width="1.9" height="15.0" fill="rgb(217,180,52)" rx="2" ry="2" />
<text  x="465.83" y="319.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.03%)</title><rect x="473.9" y="293" width="0.3" height="15.0" fill="rgb(221,138,8)" rx="2" ry="2" />
<text  x="476.92" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).find (1 samples, 0.03%)</title><rect x="50.1" y="133" width="0.3" height="15.0" fill="rgb(249,96,22)" rx="2" ry="2" />
<text  x="53.07" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.03%)</title><rect x="879.3" y="293" width="0.3" height="15.0" fill="rgb(211,45,5)" rx="2" ry="2" />
<text  x="882.28" y="303.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="312.4" y="293" width="0.3" height="15.0" fill="rgb(215,117,29)" rx="2" ry="2" />
<text  x="315.40" y="303.5" ></text>
</g>
<g >
<title>runtime.netpoll (49 samples, 1.28%)</title><rect x="510.0" y="309" width="15.1" height="15.0" fill="rgb(238,219,28)" rx="2" ry="2" />
<text  x="512.99" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.03%)</title><rect x="50.1" y="261" width="0.3" height="15.0" fill="rgb(253,136,44)" rx="2" ry="2" />
<text  x="53.07" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (5 samples, 0.13%)</title><rect x="81.8" y="261" width="1.6" height="15.0" fill="rgb(205,191,41)" rx="2" ry="2" />
<text  x="84.82" y="271.5" ></text>
</g>
<g >
<title>runtime.chansend1 (28 samples, 0.73%)</title><rect x="69.2" y="309" width="8.6" height="15.0" fill="rgb(245,185,16)" rx="2" ry="2" />
<text  x="72.18" y="319.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.03%)</title><rect x="95.7" y="165" width="0.3" height="15.0" fill="rgb(205,10,53)" rx="2" ry="2" />
<text  x="98.69" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="41.4" y="213" width="0.4" height="15.0" fill="rgb(232,68,4)" rx="2" ry="2" />
<text  x="44.44" y="223.5" ></text>
</g>
<g >
<title>syscall.Read (45 samples, 1.18%)</title><rect x="114.2" y="309" width="13.9" height="15.0" fill="rgb(227,147,12)" rx="2" ry="2" />
<text  x="117.19" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (2 samples, 0.05%)</title><rect x="95.1" y="149" width="0.6" height="15.0" fill="rgb(252,57,48)" rx="2" ry="2" />
<text  x="98.08" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="110.8" y="293" width="0.3" height="15.0" fill="rgb(254,27,17)" rx="2" ry="2" />
<text  x="113.80" y="303.5" ></text>
</g>
<g >
<title>runtime.cansemacquire (1 samples, 0.03%)</title><rect x="387.0" y="229" width="0.3" height="15.0" fill="rgb(208,170,54)" rx="2" ry="2" />
<text  x="390.00" y="239.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Multiplex).run.func1 (1 samples, 0.03%)</title><rect x="112.6" y="373" width="0.4" height="15.0" fill="rgb(217,139,51)" rx="2" ry="2" />
<text  x="115.65" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.03%)</title><rect x="83.4" y="245" width="0.3" height="15.0" fill="rgb(224,96,0)" rx="2" ry="2" />
<text  x="86.36" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.03%)</title><rect x="32.2" y="229" width="0.3" height="15.0" fill="rgb(251,198,10)" rx="2" ry="2" />
<text  x="35.19" y="239.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.03%)</title><rect x="491.5" y="277" width="0.3" height="15.0" fill="rgb(213,53,30)" rx="2" ry="2" />
<text  x="494.49" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.03%)</title><rect x="95.1" y="117" width="0.3" height="15.0" fill="rgb(252,165,53)" rx="2" ry="2" />
<text  x="98.08" y="127.5" ></text>
</g>
<g >
<title>runtime.releaseSudog (5 samples, 0.13%)</title><rect x="349.7" y="309" width="1.5" height="15.0" fill="rgb(208,146,26)" rx="2" ry="2" />
<text  x="352.70" y="319.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Request).XXX_Marshal (18 samples, 0.47%)</title><rect x="84.3" y="293" width="5.5" height="15.0" fill="rgb(243,227,34)" rx="2" ry="2" />
<text  x="87.29" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (6 samples, 0.16%)</title><rect x="471.1" y="309" width="1.9" height="15.0" fill="rgb(214,60,47)" rx="2" ry="2" />
<text  x="474.15" y="319.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (2 samples, 0.05%)</title><rect x="99.1" y="277" width="0.6" height="15.0" fill="rgb(249,29,18)" rx="2" ry="2" />
<text  x="102.09" y="287.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.03%)</title><rect x="129.3" y="341" width="0.3" height="15.0" fill="rgb(222,227,7)" rx="2" ry="2" />
<text  x="132.29" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (309 samples, 8.07%)</title><rect x="939.4" y="261" width="95.2" height="15.0" fill="rgb(217,166,30)" rx="2" ry="2" />
<text  x="942.39" y="271.5" >runtime.pth..</text>
</g>
<g >
<title>runtime.forEachP (3 samples, 0.08%)</title><rect x="1059.0" y="325" width="0.9" height="15.0" fill="rgb(246,151,16)" rx="2" ry="2" />
<text  x="1061.99" y="335.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (30 samples, 0.78%)</title><rect x="1034.9" y="325" width="9.3" height="15.0" fill="rgb(236,53,51)" rx="2" ry="2" />
<text  x="1037.95" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.03%)</title><rect x="939.1" y="325" width="0.3" height="15.0" fill="rgb(214,10,24)" rx="2" ry="2" />
<text  x="942.08" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (27 samples, 0.71%)</title><rect x="869.4" y="245" width="8.3" height="15.0" fill="rgb(237,126,53)" rx="2" ry="2" />
<text  x="872.41" y="255.5" ></text>
</g>
<g >
<title>runtime.gcParkAssist (2 samples, 0.05%)</title><rect x="438.2" y="309" width="0.6" height="15.0" fill="rgb(242,188,48)" rx="2" ry="2" />
<text  x="441.17" y="319.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.03%)</title><rect x="491.5" y="261" width="0.3" height="15.0" fill="rgb(226,142,2)" rx="2" ry="2" />
<text  x="494.49" y="271.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.03%)</title><rect x="39.6" y="261" width="0.3" height="15.0" fill="rgb(235,169,47)" rx="2" ry="2" />
<text  x="42.59" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.03%)</title><rect x="1044.2" y="341" width="0.3" height="15.0" fill="rgb(232,84,50)" rx="2" ry="2" />
<text  x="1047.20" y="351.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="49.5" y="197" width="0.3" height="15.0" fill="rgb(250,148,14)" rx="2" ry="2" />
<text  x="52.46" y="207.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.03%)</title><rect x="860.8" y="261" width="0.3" height="15.0" fill="rgb(234,39,22)" rx="2" ry="2" />
<text  x="863.78" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.03%)</title><rect x="496.1" y="261" width="0.3" height="15.0" fill="rgb(221,220,12)" rx="2" ry="2" />
<text  x="499.12" y="271.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.03%)</title><rect x="45.8" y="197" width="0.3" height="15.0" fill="rgb(205,114,27)" rx="2" ry="2" />
<text  x="48.76" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (47 samples, 1.23%)</title><rect x="210.4" y="293" width="14.5" height="15.0" fill="rgb(227,100,9)" rx="2" ry="2" />
<text  x="213.37" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.atomicLoadMarshalInfo (1 samples, 0.03%)</title><rect x="92.9" y="245" width="0.3" height="15.0" fill="rgb(241,76,34)" rx="2" ry="2" />
<text  x="95.92" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (8 samples, 0.21%)</title><rect x="19.6" y="245" width="2.4" height="15.0" fill="rgb(228,193,23)" rx="2" ry="2" />
<text  x="22.56" y="255.5" ></text>
</g>
<g >
<title>runtime.procyield (2 samples, 0.05%)</title><rect x="63.6" y="309" width="0.7" height="15.0" fill="rgb(221,12,10)" rx="2" ry="2" />
<text  x="66.64" y="319.5" ></text>
</g>
<g >
<title>syscall.write (19 samples, 0.50%)</title><rect x="129.6" y="293" width="5.9" height="15.0" fill="rgb(227,53,50)" rx="2" ry="2" />
<text  x="132.60" y="303.5" ></text>
</g>
<g >
<title>runtime.bgsweep (10 samples, 0.26%)</title><rect x="470.2" y="373" width="3.1" height="15.0" fill="rgb(220,135,3)" rx="2" ry="2" />
<text  x="473.22" y="383.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (2 samples, 0.05%)</title><rect x="113.0" y="341" width="0.6" height="15.0" fill="rgb(226,172,10)" rx="2" ry="2" />
<text  x="115.96" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (9 samples, 0.24%)</title><rect x="491.8" y="293" width="2.8" height="15.0" fill="rgb(213,144,8)" rx="2" ry="2" />
<text  x="494.80" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (19 samples, 0.50%)</title><rect x="196.2" y="245" width="5.8" height="15.0" fill="rgb(212,52,27)" rx="2" ry="2" />
<text  x="199.19" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (3 samples, 0.08%)</title><rect x="94.8" y="213" width="0.9" height="15.0" fill="rgb(209,26,23)" rx="2" ry="2" />
<text  x="97.77" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.pointer.getPointer (1 samples, 0.03%)</title><rect x="35.0" y="245" width="0.3" height="15.0" fill="rgb(217,177,33)" rx="2" ry="2" />
<text  x="37.97" y="255.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (3 samples, 0.08%)</title><rect x="448.0" y="229" width="1.0" height="15.0" fill="rgb(232,132,54)" rx="2" ry="2" />
<text  x="451.03" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.03%)</title><rect x="54.7" y="325" width="0.3" height="15.0" fill="rgb(245,73,18)" rx="2" ry="2" />
<text  x="57.70" y="335.5" ></text>
</g>
<g >
<title>runtime.newobject (4 samples, 0.10%)</title><rect x="185.4" y="293" width="1.2" height="15.0" fill="rgb(210,23,15)" rx="2" ry="2" />
<text  x="188.40" y="303.5" ></text>
</g>
<g >
<title>syscall.Write (19 samples, 0.50%)</title><rect x="129.6" y="309" width="5.9" height="15.0" fill="rgb(225,218,27)" rx="2" ry="2" />
<text  x="132.60" y="319.5" ></text>
</g>
<g >
<title>runtime.readvarint (1 samples, 0.03%)</title><rect x="441.2" y="117" width="0.4" height="15.0" fill="rgb(251,154,21)" rx="2" ry="2" />
<text  x="444.25" y="127.5" ></text>
</g>
<g >
<title>runtime.goparkunlock (1 samples, 0.03%)</title><rect x="387.3" y="229" width="0.3" height="15.0" fill="rgb(239,52,29)" rx="2" ry="2" />
<text  x="390.30" y="239.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (2 samples, 0.05%)</title><rect x="41.8" y="277" width="0.6" height="15.0" fill="rgb(216,31,30)" rx="2" ry="2" />
<text  x="44.75" y="287.5" ></text>
</g>
<g >
<title>sync.runtime_Semrelease (3 samples, 0.08%)</title><rect x="391.0" y="261" width="0.9" height="15.0" fill="rgb(243,34,23)" rx="2" ry="2" />
<text  x="394.00" y="271.5" ></text>
</g>
<g >
<title>runtime.selectgo (3 samples, 0.08%)</title><rect x="111.7" y="357" width="0.9" height="15.0" fill="rgb(252,46,9)" rx="2" ry="2" />
<text  x="114.72" y="367.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="50.1" y="213" width="0.3" height="15.0" fill="rgb(254,55,31)" rx="2" ry="2" />
<text  x="53.07" y="223.5" ></text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.03%)</title><rect x="440.9" y="165" width="0.3" height="15.0" fill="rgb(248,196,0)" rx="2" ry="2" />
<text  x="443.94" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (25 samples, 0.65%)</title><rect x="215.9" y="261" width="7.7" height="15.0" fill="rgb(223,15,2)" rx="2" ry="2" />
<text  x="218.91" y="271.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.03%)</title><rect x="25.4" y="277" width="0.3" height="15.0" fill="rgb(213,77,17)" rx="2" ry="2" />
<text  x="28.41" y="287.5" ></text>
</g>
<g >
<title>runtime.unlock (3 samples, 0.08%)</title><rect x="18.3" y="245" width="0.9" height="15.0" fill="rgb(240,140,29)" rx="2" ry="2" />
<text  x="21.32" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeVarint64ValueNoZero (2 samples, 0.05%)</title><rect x="92.0" y="245" width="0.6" height="15.0" fill="rgb(219,120,54)" rx="2" ry="2" />
<text  x="95.00" y="255.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.03%)</title><rect x="95.7" y="181" width="0.3" height="15.0" fill="rgb(226,29,20)" rx="2" ry="2" />
<text  x="98.69" y="191.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (1 samples, 0.03%)</title><rect x="104.9" y="261" width="0.4" height="15.0" fill="rgb(237,23,10)" rx="2" ry="2" />
<text  x="107.94" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.08%)</title><rect x="45.4" y="213" width="1.0" height="15.0" fill="rgb(228,151,28)" rx="2" ry="2" />
<text  x="48.45" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (1 samples, 0.03%)</title><rect x="83.7" y="277" width="0.3" height="15.0" fill="rgb(233,188,27)" rx="2" ry="2" />
<text  x="86.67" y="287.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (3 samples, 0.08%)</title><rect x="309.6" y="229" width="0.9" height="15.0" fill="rgb(231,50,12)" rx="2" ry="2" />
<text  x="312.62" y="239.5" ></text>
</g>
<g >
<title>runtime.semasleep (35 samples, 0.91%)</title><rect x="903.9" y="293" width="10.8" height="15.0" fill="rgb(210,78,42)" rx="2" ry="2" />
<text  x="906.94" y="303.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (5 samples, 0.13%)</title><rect x="312.7" y="293" width="1.5" height="15.0" fill="rgb(232,179,19)" rx="2" ry="2" />
<text  x="315.71" y="303.5" ></text>
</g>
<g >
<title>runtime.acquireSudog (1 samples, 0.03%)</title><rect x="137.0" y="325" width="0.3" height="15.0" fill="rgb(239,170,24)" rx="2" ry="2" />
<text  x="140.00" y="335.5" ></text>
</g>
<g >
<title>runtime.notewakeup (309 samples, 8.07%)</title><rect x="1060.2" y="277" width="95.3" height="15.0" fill="rgb(254,5,0)" rx="2" ry="2" />
<text  x="1063.22" y="287.5" >runtime.not..</text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="296.7" y="213" width="0.3" height="15.0" fill="rgb(227,45,11)" rx="2" ry="2" />
<text  x="299.68" y="223.5" ></text>
</g>
<g >
<title>runtime.runqput (1 samples, 0.03%)</title><rect x="77.2" y="197" width="0.3" height="15.0" fill="rgb(246,199,47)" rx="2" ry="2" />
<text  x="80.20" y="207.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="213.1" y="245" width="0.3" height="15.0" fill="rgb(251,101,16)" rx="2" ry="2" />
<text  x="216.14" y="255.5" ></text>
</g>
<g >
<title>sync.runtime_SemacquireMutex (3 samples, 0.08%)</title><rect x="386.7" y="261" width="0.9" height="15.0" fill="rgb(220,42,36)" rx="2" ry="2" />
<text  x="389.69" y="271.5" ></text>
</g>
<g >
<title>runtime.getStackMap (6 samples, 0.16%)</title><rect x="441.9" y="133" width="1.8" height="15.0" fill="rgb(207,157,47)" rx="2" ry="2" />
<text  x="444.87" y="143.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (1 samples, 0.03%)</title><rect x="104.9" y="293" width="0.4" height="15.0" fill="rgb(239,180,0)" rx="2" ry="2" />
<text  x="107.94" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (43 samples, 1.12%)</title><rect x="26.6" y="309" width="13.3" height="15.0" fill="rgb(245,200,28)" rx="2" ry="2" />
<text  x="29.65" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (1 samples, 0.03%)</title><rect x="860.8" y="197" width="0.3" height="15.0" fill="rgb(252,87,4)" rx="2" ry="2" />
<text  x="863.78" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (9 samples, 0.24%)</title><rect x="491.8" y="309" width="2.8" height="15.0" fill="rgb(209,0,0)" rx="2" ry="2" />
<text  x="494.80" y="319.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Request).XXX_Marshal (24 samples, 0.63%)</title><rect x="27.9" y="293" width="7.4" height="15.0" fill="rgb(210,59,38)" rx="2" ry="2" />
<text  x="30.88" y="303.5" ></text>
</g>
<g >
<title>runtime.pcvalue (6 samples, 0.16%)</title><rect x="475.5" y="213" width="1.8" height="15.0" fill="rgb(223,163,48)" rx="2" ry="2" />
<text  x="478.46" y="223.5" ></text>
</g>
<g >
<title>gosave (2 samples, 0.05%)</title><rect x="163.5" y="181" width="0.6" height="15.0" fill="rgb(226,65,16)" rx="2" ry="2" />
<text  x="166.51" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.03%)</title><rect x="841.4" y="261" width="0.3" height="15.0" fill="rgb(220,213,36)" rx="2" ry="2" />
<text  x="844.36" y="271.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.03%)</title><rect x="297.9" y="165" width="0.3" height="15.0" fill="rgb(227,25,27)" rx="2" ry="2" />
<text  x="300.91" y="175.5" ></text>
</g>
<g >
<title>runtime.libcCall (2 samples, 0.05%)</title><rect x="458.8" y="309" width="0.6" height="15.0" fill="rgb(232,216,49)" rx="2" ry="2" />
<text  x="461.82" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (9 samples, 0.24%)</title><rect x="1040.8" y="277" width="2.8" height="15.0" fill="rgb(223,207,31)" rx="2" ry="2" />
<text  x="1043.80" y="287.5" ></text>
</g>
<g >
<title>runtime.gentraceback (26 samples, 0.68%)</title><rect x="474.5" y="245" width="8.1" height="15.0" fill="rgb(224,172,5)" rx="2" ry="2" />
<text  x="477.54" y="255.5" ></text>
</g>
<g >
<title>runtime.growslice (5 samples, 0.13%)</title><rect x="101.9" y="229" width="1.5" height="15.0" fill="rgb(209,70,46)" rx="2" ry="2" />
<text  x="104.86" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (27 samples, 0.71%)</title><rect x="861.1" y="229" width="8.3" height="15.0" fill="rgb(213,155,13)" rx="2" ry="2" />
<text  x="864.09" y="239.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.03%)</title><rect x="83.1" y="229" width="0.3" height="15.0" fill="rgb(244,152,27)" rx="2" ry="2" />
<text  x="86.06" y="239.5" ></text>
</g>
<g >
<title>runtime.deferproc (1 samples, 0.03%)</title><rect x="22.6" y="309" width="0.3" height="15.0" fill="rgb(239,23,20)" rx="2" ry="2" />
<text  x="25.64" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (6 samples, 0.16%)</title><rect x="307.2" y="293" width="1.8" height="15.0" fill="rgb(237,206,51)" rx="2" ry="2" />
<text  x="310.16" y="303.5" ></text>
</g>
<g >
<title>sync.runtime_doSpin (1 samples, 0.03%)</title><rect x="111.4" y="325" width="0.3" height="15.0" fill="rgb(247,199,33)" rx="2" ry="2" />
<text  x="114.42" y="335.5" ></text>
</g>
<g >
<title>runtime.nanotime (6 samples, 0.16%)</title><rect x="457.6" y="325" width="1.8" height="15.0" fill="rgb(234,4,35)" rx="2" ry="2" />
<text  x="460.59" y="335.5" ></text>
</g>
<g >
<title>runtime.systemstack (47 samples, 1.23%)</title><rect x="473.9" y="357" width="14.5" height="15.0" fill="rgb(231,57,12)" rx="2" ry="2" />
<text  x="476.92" y="367.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.03%)</title><rect x="22.9" y="293" width="0.4" height="15.0" fill="rgb(238,81,32)" rx="2" ry="2" />
<text  x="25.95" y="303.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Msg).XXX_Size (1 samples, 0.03%)</title><rect x="26.3" y="293" width="0.3" height="15.0" fill="rgb(229,130,16)" rx="2" ry="2" />
<text  x="29.34" y="303.5" ></text>
</g>
<g >
<title>runtime.chansend (132 samples, 3.45%)</title><rect x="392.2" y="341" width="40.7" height="15.0" fill="rgb(228,225,3)" rx="2" ry="2" />
<text  x="395.24" y="351.5" >run..</text>
</g>
<g >
<title>runtime.wakep (309 samples, 8.07%)</title><rect x="1060.2" y="309" width="95.3" height="15.0" fill="rgb(236,188,33)" rx="2" ry="2" />
<text  x="1063.22" y="319.5" >runtime.wakep</text>
</g>
<g >
<title>runtime.(*mTreap).insert (2 samples, 0.05%)</title><rect x="471.1" y="245" width="0.7" height="15.0" fill="rgb(236,98,18)" rx="2" ry="2" />
<text  x="474.15" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (6 samples, 0.16%)</title><rect x="61.8" y="293" width="1.8" height="15.0" fill="rgb(237,79,39)" rx="2" ry="2" />
<text  x="64.79" y="303.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Unlock (12 samples, 0.31%)</title><rect x="180.2" y="293" width="3.7" height="15.0" fill="rgb(239,168,31)" rx="2" ry="2" />
<text  x="183.16" y="303.5" ></text>
</g>
<g >
<title>runtime.scanobject (14 samples, 0.37%)</title><rect x="484.1" y="309" width="4.3" height="15.0" fill="rgb(241,21,12)" rx="2" ry="2" />
<text  x="487.10" y="319.5" ></text>
</g>
<g >
<title>runtime.profilealloc (1 samples, 0.03%)</title><rect x="314.2" y="293" width="0.4" height="15.0" fill="rgb(223,43,5)" rx="2" ry="2" />
<text  x="317.25" y="303.5" ></text>
</g>
<g >
<title>runtime.unlock (10 samples, 0.26%)</title><rect x="855.5" y="325" width="3.1" height="15.0" fill="rgb(219,117,33)" rx="2" ry="2" />
<text  x="858.54" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.03%)</title><rect x="128.1" y="293" width="0.3" height="15.0" fill="rgb(224,74,46)" rx="2" ry="2" />
<text  x="131.06" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.03%)</title><rect x="81.5" y="213" width="0.3" height="15.0" fill="rgb(222,112,9)" rx="2" ry="2" />
<text  x="84.52" y="223.5" ></text>
</g>
<g >
<title>runtime.gentraceback (12 samples, 0.31%)</title><rect x="440.9" y="181" width="3.7" height="15.0" fill="rgb(242,3,50)" rx="2" ry="2" />
<text  x="443.94" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (13 samples, 0.34%)</title><rect x="219.6" y="245" width="4.0" height="15.0" fill="rgb(237,92,13)" rx="2" ry="2" />
<text  x="222.61" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (18 samples, 0.47%)</title><rect x="1035.3" y="277" width="5.5" height="15.0" fill="rgb(212,60,15)" rx="2" ry="2" />
<text  x="1038.26" y="287.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.03%)</title><rect x="473.6" y="357" width="0.3" height="15.0" fill="rgb(252,78,0)" rx="2" ry="2" />
<text  x="476.62" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (3 samples, 0.08%)</title><rect x="307.8" y="197" width="0.9" height="15.0" fill="rgb(234,132,13)" rx="2" ry="2" />
<text  x="310.77" y="207.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.03%)</title><rect x="25.1" y="213" width="0.3" height="15.0" fill="rgb(214,194,9)" rx="2" ry="2" />
<text  x="28.10" y="223.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (2 samples, 0.05%)</title><rect x="64.9" y="309" width="0.6" height="15.0" fill="rgb(250,87,48)" rx="2" ry="2" />
<text  x="67.87" y="319.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.03%)</title><rect x="444.6" y="181" width="0.3" height="15.0" fill="rgb(238,215,1)" rx="2" ry="2" />
<text  x="447.64" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcSweepBuf).pop (1 samples, 0.03%)</title><rect x="470.5" y="341" width="0.3" height="15.0" fill="rgb(220,70,41)" rx="2" ry="2" />
<text  x="473.53" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.03%)</title><rect x="280.3" y="229" width="0.3" height="15.0" fill="rgb(235,30,36)" rx="2" ry="2" />
<text  x="283.34" y="239.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.03%)</title><rect x="1044.2" y="293" width="0.3" height="15.0" fill="rgb(244,196,52)" rx="2" ry="2" />
<text  x="1047.20" y="303.5" ></text>
</g>
<g >
<title>math/rand.(*rngSource).Uint64 (4 samples, 0.10%)</title><rect x="383.3" y="261" width="1.2" height="15.0" fill="rgb(229,104,24)" rx="2" ry="2" />
<text  x="386.30" y="271.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Batch).Ticker.func1 (31 samples, 0.81%)</title><rect x="13.7" y="325" width="9.6" height="15.0" fill="rgb(233,182,37)" rx="2" ry="2" />
<text  x="16.70" y="335.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (5 samples, 0.13%)</title><rect x="97.5" y="277" width="1.6" height="15.0" fill="rgb(230,216,22)" rx="2" ry="2" />
<text  x="100.54" y="287.5" ></text>
</g>
<g >
<title>runtime.sellock (39 samples, 1.02%)</title><rect x="351.2" y="309" width="12.1" height="15.0" fill="rgb(210,63,52)" rx="2" ry="2" />
<text  x="354.24" y="319.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.03%)</title><rect x="141.3" y="309" width="0.3" height="15.0" fill="rgb(252,84,33)" rx="2" ry="2" />
<text  x="144.32" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="128.7" y="309" width="0.3" height="15.0" fill="rgb(235,123,9)" rx="2" ry="2" />
<text  x="131.68" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (302 samples, 7.89%)</title><rect x="526.0" y="277" width="93.1" height="15.0" fill="rgb(253,89,2)" rx="2" ry="2" />
<text  x="529.02" y="287.5" >runtime.usl..</text>
</g>
<g >
<title>runtime.walltime (13 samples, 0.34%)</title><rect x="164.1" y="229" width="4.0" height="15.0" fill="rgb(211,97,43)" rx="2" ry="2" />
<text  x="167.13" y="239.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.03%)</title><rect x="858.6" y="277" width="0.3" height="15.0" fill="rgb(233,73,10)" rx="2" ry="2" />
<text  x="861.63" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce.func1 (2 samples, 0.05%)</title><rect x="472.4" y="229" width="0.6" height="15.0" fill="rgb(239,124,4)" rx="2" ry="2" />
<text  x="475.38" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendUTF8StringValueNoZero (10 samples, 0.26%)</title><rect x="31.3" y="245" width="3.1" height="15.0" fill="rgb(250,52,23)" rx="2" ry="2" />
<text  x="34.27" y="255.5" ></text>
</g>
<g >
<title>runtime.mstart1 (198 samples, 5.17%)</title><rect x="877.7" y="357" width="61.1" height="15.0" fill="rgb(207,112,39)" rx="2" ry="2" />
<text  x="880.74" y="367.5" >runtim..</text>
</g>
<g >
<title>runtime.newdefer (1 samples, 0.03%)</title><rect x="22.6" y="293" width="0.3" height="15.0" fill="rgb(235,149,24)" rx="2" ry="2" />
<text  x="25.64" y="303.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Msg).Encode (1 samples, 0.03%)</title><rect x="26.3" y="325" width="0.3" height="15.0" fill="rgb(232,71,15)" rx="2" ry="2" />
<text  x="29.34" y="335.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.03%)</title><rect x="129.0" y="229" width="0.3" height="15.0" fill="rgb(226,197,19)" rx="2" ry="2" />
<text  x="131.99" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrain (47 samples, 1.23%)</title><rect x="473.9" y="325" width="14.5" height="15.0" fill="rgb(231,77,0)" rx="2" ry="2" />
<text  x="476.92" y="335.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="307.5" y="213" width="0.3" height="15.0" fill="rgb(243,3,7)" rx="2" ry="2" />
<text  x="310.47" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.03%)</title><rect x="491.2" y="245" width="0.3" height="15.0" fill="rgb(230,165,3)" rx="2" ry="2" />
<text  x="494.19" y="255.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.05%)</title><rect x="852.8" y="309" width="0.6" height="15.0" fill="rgb(233,17,14)" rx="2" ry="2" />
<text  x="855.77" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).pickFreeSpan (1 samples, 0.03%)</title><rect x="95.4" y="117" width="0.3" height="15.0" fill="rgb(235,77,34)" rx="2" ry="2" />
<text  x="98.39" y="127.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.03%)</title><rect x="483.2" y="229" width="0.3" height="15.0" fill="rgb(252,190,26)" rx="2" ry="2" />
<text  x="486.17" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.03%)</title><rect x="24.8" y="197" width="0.3" height="15.0" fill="rgb(219,54,26)" rx="2" ry="2" />
<text  x="27.80" y="207.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (3 samples, 0.08%)</title><rect x="202.0" y="277" width="1.0" height="15.0" fill="rgb(215,66,41)" rx="2" ry="2" />
<text  x="205.04" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (2 samples, 0.05%)</title><rect x="95.1" y="165" width="0.6" height="15.0" fill="rgb(220,164,8)" rx="2" ry="2" />
<text  x="98.08" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarintS32ValueNoZero (9 samples, 0.24%)</title><rect x="191.3" y="229" width="2.7" height="15.0" fill="rgb(248,170,2)" rx="2" ry="2" />
<text  x="194.25" y="239.5" ></text>
</g>
<g >
<title>runtime.chansend1 (182 samples, 4.75%)</title><rect x="227.3" y="325" width="56.1" height="15.0" fill="rgb(217,15,11)" rx="2" ry="2" />
<text  x="230.32" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.03%)</title><rect x="298.2" y="181" width="0.3" height="15.0" fill="rgb(245,217,29)" rx="2" ry="2" />
<text  x="301.22" y="191.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func4 (3 samples, 0.08%)</title><rect x="1059.0" y="341" width="0.9" height="15.0" fill="rgb(235,16,23)" rx="2" ry="2" />
<text  x="1061.99" y="351.5" ></text>
</g>
<g >
<title>runtime.(*guintptr).cas (1 samples, 0.03%)</title><rect x="429.8" y="229" width="0.4" height="15.0" fill="rgb(246,57,25)" rx="2" ry="2" />
<text  x="432.84" y="239.5" ></text>
</g>
<g >
<title>runtime.puintptr.ptr (1 samples, 0.03%)</title><rect x="173.1" y="261" width="0.3" height="15.0" fill="rgb(243,215,21)" rx="2" ry="2" />
<text  x="176.07" y="271.5" ></text>
</g>
<g >
<title>runtime.getitab (5 samples, 0.13%)</title><rect x="103.4" y="277" width="1.5" height="15.0" fill="rgb(216,49,52)" rx="2" ry="2" />
<text  x="106.40" y="287.5" ></text>
</g>
<g >
<title>hslam.com/git/x/idgenerator.GetTime (26 samples, 0.68%)</title><rect x="160.1" y="293" width="8.0" height="15.0" fill="rgb(222,175,28)" rx="2" ry="2" />
<text  x="163.12" y="303.5" ></text>
</g>
<g >
<title>runtime.(*lfstack).push (1 samples, 0.03%)</title><rect x="129.0" y="149" width="0.3" height="15.0" fill="rgb(216,114,47)" rx="2" ry="2" />
<text  x="131.99" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesSlice (6 samples, 0.16%)</title><rect x="23.6" y="245" width="1.8" height="15.0" fill="rgb(221,211,40)" rx="2" ry="2" />
<text  x="26.56" y="255.5" ></text>
</g>
<g >
<title>sync.runtime_nanotime (1 samples, 0.03%)</title><rect x="57.5" y="325" width="0.3" height="15.0" fill="rgb(237,213,40)" rx="2" ry="2" />
<text  x="60.47" y="335.5" ></text>
</g>
<g >
<title>runtime.heapBitsForAddr (1 samples, 0.03%)</title><rect x="451.7" y="309" width="0.3" height="15.0" fill="rgb(235,119,48)" rx="2" ry="2" />
<text  x="454.73" y="319.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*BatchCodec).Encode (6 samples, 0.16%)</title><rect x="81.8" y="325" width="1.9" height="15.0" fill="rgb(226,45,33)" rx="2" ry="2" />
<text  x="84.82" y="335.5" ></text>
</g>
<g >
<title>runtime.findrunnable (4 samples, 0.10%)</title><rect x="494.9" y="309" width="1.2" height="15.0" fill="rgb(219,202,50)" rx="2" ry="2" />
<text  x="497.89" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).removeNode (1 samples, 0.03%)</title><rect x="472.7" y="197" width="0.3" height="15.0" fill="rgb(253,145,29)" rx="2" ry="2" />
<text  x="475.69" y="207.5" ></text>
</g>
<g >
<title>time.now (28 samples, 0.73%)</title><rect x="456.0" y="341" width="8.7" height="15.0" fill="rgb(216,137,25)" rx="2" ry="2" />
<text  x="459.04" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.03%)</title><rect x="860.8" y="101" width="0.3" height="15.0" fill="rgb(254,50,35)" rx="2" ry="2" />
<text  x="863.78" y="111.5" ></text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.03%)</title><rect x="488.7" y="293" width="0.3" height="15.0" fill="rgb(243,20,35)" rx="2" ry="2" />
<text  x="491.72" y="303.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.03%)</title><rect x="1044.5" y="229" width="0.3" height="15.0" fill="rgb(233,159,14)" rx="2" ry="2" />
<text  x="1047.50" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (33 samples, 0.86%)</title><rect x="293.0" y="293" width="10.2" height="15.0" fill="rgb(234,99,7)" rx="2" ry="2" />
<text  x="295.98" y="303.5" ></text>
</g>
<g >
<title>runtime.chansend1 (27 samples, 0.71%)</title><rect x="14.3" y="309" width="8.3" height="15.0" fill="rgb(242,139,52)" rx="2" ry="2" />
<text  x="17.32" y="319.5" ></text>
</g>
<g >
<title>time.Now (22 samples, 0.57%)</title><rect x="161.4" y="261" width="6.7" height="15.0" fill="rgb(247,218,24)" rx="2" ry="2" />
<text  x="164.35" y="271.5" ></text>
</g>
<g >
<title>runtime.itabHashFunc (1 samples, 0.03%)</title><rect x="224.5" y="229" width="0.4" height="15.0" fill="rgb(210,186,18)" rx="2" ry="2" />
<text  x="227.55" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (3 samples, 0.08%)</title><rect x="80.9" y="261" width="0.9" height="15.0" fill="rgb(208,171,54)" rx="2" ry="2" />
<text  x="83.90" y="271.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (1 samples, 0.03%)</title><rect x="1059.9" y="325" width="0.3" height="15.0" fill="rgb(245,174,53)" rx="2" ry="2" />
<text  x="1062.92" y="335.5" ></text>
</g>
<g >
<title>runtime.unlock (2 samples, 0.05%)</title><rect x="1043.6" y="309" width="0.6" height="15.0" fill="rgb(236,69,7)" rx="2" ry="2" />
<text  x="1046.58" y="319.5" ></text>
</g>
<g >
<title>runtime.runqput (1 samples, 0.03%)</title><rect x="429.8" y="245" width="0.4" height="15.0" fill="rgb(223,97,38)" rx="2" ry="2" />
<text  x="432.84" y="255.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.03%)</title><rect x="64.3" y="309" width="0.3" height="15.0" fill="rgb(237,61,24)" rx="2" ry="2" />
<text  x="67.25" y="319.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.FuncsCodec (1 samples, 0.03%)</title><rect x="209.7" y="309" width="0.4" height="15.0" fill="rgb(251,143,8)" rx="2" ry="2" />
<text  x="212.75" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (6 samples, 0.16%)</title><rect x="471.1" y="261" width="1.9" height="15.0" fill="rgb(243,147,32)" rx="2" ry="2" />
<text  x="474.15" y="271.5" ></text>
</g>
<g >
<title>runtime.osyield (6 samples, 0.16%)</title><rect x="61.8" y="309" width="1.8" height="15.0" fill="rgb(247,82,4)" rx="2" ry="2" />
<text  x="64.79" y="319.5" ></text>
</g>
<g >
<title>runtime.deferproc (4 samples, 0.10%)</title><rect x="50.4" y="341" width="1.2" height="15.0" fill="rgb(236,24,17)" rx="2" ry="2" />
<text  x="53.38" y="351.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.03%)</title><rect x="46.1" y="197" width="0.3" height="15.0" fill="rgb(206,158,31)" rx="2" ry="2" />
<text  x="49.07" y="207.5" ></text>
</g>
<g >
<title>runtime.chansend.func1 (2 samples, 0.05%)</title><rect x="74.7" y="261" width="0.7" height="15.0" fill="rgb(215,121,11)" rx="2" ry="2" />
<text  x="77.73" y="271.5" ></text>
</g>
<g >
<title>hslam.com/git/x/idgenerator.(*IDGen).autoIncreament (85 samples, 2.22%)</title><rect x="157.7" y="309" width="26.2" height="15.0" fill="rgb(231,26,6)" rx="2" ry="2" />
<text  x="160.65" y="319.5" >h..</text>
</g>
<g >
<title>runtime.(*mspan).sweep (1 samples, 0.03%)</title><rect x="491.2" y="229" width="0.3" height="15.0" fill="rgb(230,222,12)" rx="2" ry="2" />
<text  x="494.19" y="239.5" ></text>
</g>
<g >
<title>runtime.findrunnable (1,095 samples, 28.61%)</title><rect x="505.4" y="325" width="337.5" height="15.0" fill="rgb(230,174,54)" rx="2" ry="2" />
<text  x="508.37" y="335.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.05%)</title><rect x="95.1" y="181" width="0.6" height="15.0" fill="rgb(212,120,13)" rx="2" ry="2" />
<text  x="98.08" y="191.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (17 samples, 0.44%)</title><rect x="477.3" y="229" width="5.3" height="15.0" fill="rgb(254,68,49)" rx="2" ry="2" />
<text  x="480.31" y="239.5" ></text>
</g>
<g >
<title>runtime.findObject (3 samples, 0.08%)</title><rect x="448.0" y="197" width="1.0" height="15.0" fill="rgb(233,162,35)" rx="2" ry="2" />
<text  x="451.03" y="207.5" ></text>
</g>
<g >
<title>time.now (21 samples, 0.55%)</title><rect x="161.7" y="245" width="6.4" height="15.0" fill="rgb(206,224,44)" rx="2" ry="2" />
<text  x="164.66" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.decodeVarint (1 samples, 0.03%)</title><rect x="47.6" y="229" width="0.3" height="15.0" fill="rgb(245,58,12)" rx="2" ry="2" />
<text  x="50.61" y="239.5" ></text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.03%)</title><rect x="491.2" y="325" width="0.3" height="15.0" fill="rgb(226,49,41)" rx="2" ry="2" />
<text  x="494.19" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.03%)</title><rect x="860.8" y="149" width="0.3" height="15.0" fill="rgb(236,156,15)" rx="2" ry="2" />
<text  x="863.78" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (15 samples, 0.39%)</title><rect x="84.9" y="261" width="4.6" height="15.0" fill="rgb(230,223,19)" rx="2" ry="2" />
<text  x="87.91" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).find (1 samples, 0.03%)</title><rect x="308.4" y="133" width="0.3" height="15.0" fill="rgb(236,188,36)" rx="2" ry="2" />
<text  x="311.39" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.03%)</title><rect x="499.8" y="293" width="0.3" height="15.0" fill="rgb(222,205,33)" rx="2" ry="2" />
<text  x="502.82" y="303.5" ></text>
</g>
<g >
<title>runtime.semrelease1 (2 samples, 0.05%)</title><rect x="391.3" y="245" width="0.6" height="15.0" fill="rgb(224,168,10)" rx="2" ry="2" />
<text  x="394.31" y="255.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.03%)</title><rect x="853.4" y="309" width="0.3" height="15.0" fill="rgb(226,121,39)" rx="2" ry="2" />
<text  x="856.39" y="319.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Batch).run (149 samples, 3.89%)</title><rect x="66.7" y="373" width="45.9" height="15.0" fill="rgb(244,153,30)" rx="2" ry="2" />
<text  x="69.72" y="383.5" >hsla..</text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.03%)</title><rect x="47.9" y="261" width="0.3" height="15.0" fill="rgb(246,42,42)" rx="2" ry="2" />
<text  x="50.92" y="271.5" ></text>
</g>
<g >
<title>runtime.add (1 samples, 0.03%)</title><rect x="39.0" y="245" width="0.3" height="15.0" fill="rgb(235,186,22)" rx="2" ry="2" />
<text  x="41.98" y="255.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="128.7" y="229" width="0.3" height="15.0" fill="rgb(205,131,39)" rx="2" ry="2" />
<text  x="131.68" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (1 samples, 0.03%)</title><rect x="491.2" y="197" width="0.3" height="15.0" fill="rgb(214,164,1)" rx="2" ry="2" />
<text  x="494.19" y="207.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.03%)</title><rect x="129.0" y="309" width="0.3" height="15.0" fill="rgb(222,100,7)" rx="2" ry="2" />
<text  x="131.99" y="319.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (3 samples, 0.08%)</title><rect x="111.7" y="341" width="0.9" height="15.0" fill="rgb(216,142,11)" rx="2" ry="2" />
<text  x="114.72" y="351.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.03%)</title><rect x="308.7" y="245" width="0.3" height="15.0" fill="rgb(211,76,31)" rx="2" ry="2" />
<text  x="311.70" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (33 samples, 0.86%)</title><rect x="438.8" y="293" width="10.2" height="15.0" fill="rgb(218,190,39)" rx="2" ry="2" />
<text  x="441.78" y="303.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.05%)</title><rect x="176.8" y="213" width="0.6" height="15.0" fill="rgb(219,53,53)" rx="2" ry="2" />
<text  x="179.77" y="223.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.05%)</title><rect x="176.8" y="245" width="0.6" height="15.0" fill="rgb(226,207,18)" rx="2" ry="2" />
<text  x="179.77" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (6 samples, 0.16%)</title><rect x="307.2" y="261" width="1.8" height="15.0" fill="rgb(239,177,49)" rx="2" ry="2" />
<text  x="310.16" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (17 samples, 0.44%)</title><rect x="42.7" y="277" width="5.2" height="15.0" fill="rgb(248,133,21)" rx="2" ry="2" />
<text  x="45.68" y="287.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (4 samples, 0.10%)</title><rect x="103.7" y="261" width="1.2" height="15.0" fill="rgb(242,42,11)" rx="2" ry="2" />
<text  x="106.71" y="271.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.03%)</title><rect x="135.2" y="213" width="0.3" height="15.0" fill="rgb(212,185,10)" rx="2" ry="2" />
<text  x="138.15" y="223.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Batch).Ticker.func1.1 (1 samples, 0.03%)</title><rect x="14.0" y="309" width="0.3" height="15.0" fill="rgb(254,14,9)" rx="2" ry="2" />
<text  x="17.01" y="319.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.03%)</title><rect x="1034.9" y="309" width="0.4" height="15.0" fill="rgb(228,196,27)" rx="2" ry="2" />
<text  x="1037.95" y="319.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (2 samples, 0.05%)</title><rect x="1044.5" y="341" width="0.6" height="15.0" fill="rgb(226,217,52)" rx="2" ry="2" />
<text  x="1047.50" y="351.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.03%)</title><rect x="24.8" y="165" width="0.3" height="15.0" fill="rgb(231,211,6)" rx="2" ry="2" />
<text  x="27.80" y="175.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.FuncsCodec (4 samples, 0.10%)</title><rect x="185.4" y="309" width="1.2" height="15.0" fill="rgb(223,161,42)" rx="2" ry="2" />
<text  x="188.40" y="319.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="103.1" y="213" width="0.3" height="15.0" fill="rgb(233,44,7)" rx="2" ry="2" />
<text  x="106.09" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (25 samples, 0.65%)</title><rect x="845.1" y="261" width="7.7" height="15.0" fill="rgb(252,228,39)" rx="2" ry="2" />
<text  x="848.06" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.03%)</title><rect x="432.6" y="293" width="0.3" height="15.0" fill="rgb(236,179,36)" rx="2" ry="2" />
<text  x="435.62" y="303.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.03%)</title><rect x="112.6" y="309" width="0.4" height="15.0" fill="rgb(209,71,53)" rx="2" ry="2" />
<text  x="115.65" y="319.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.03%)</title><rect x="54.7" y="341" width="0.3" height="15.0" fill="rgb(228,107,40)" rx="2" ry="2" />
<text  x="57.70" y="351.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.03%)</title><rect x="860.8" y="213" width="0.3" height="15.0" fill="rgb(229,24,45)" rx="2" ry="2" />
<text  x="863.78" y="223.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*TCPConn).handle.func1 (2 samples, 0.05%)</title><rect x="113.0" y="373" width="0.6" height="15.0" fill="rgb(236,81,16)" rx="2" ry="2" />
<text  x="115.96" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (1 samples, 0.03%)</title><rect x="491.2" y="181" width="0.3" height="15.0" fill="rgb(227,25,53)" rx="2" ry="2" />
<text  x="494.19" y="191.5" ></text>
</g>
<g >
<title>runtime.sendDirect (1 samples, 0.03%)</title><rect x="77.5" y="261" width="0.3" height="15.0" fill="rgb(226,159,44)" rx="2" ry="2" />
<text  x="80.51" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="112.6" y="213" width="0.4" height="15.0" fill="rgb(218,43,16)" rx="2" ry="2" />
<text  x="115.65" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (5 samples, 0.13%)</title><rect x="48.2" y="293" width="1.6" height="15.0" fill="rgb(252,109,19)" rx="2" ry="2" />
<text  x="51.22" y="303.5" ></text>
</g>
<g >
<title>runtime.usleep (136 samples, 3.55%)</title><rect x="231.6" y="261" width="42.0" height="15.0" fill="rgb(220,52,40)" rx="2" ry="2" />
<text  x="234.64" y="271.5" >run..</text>
</g>
<g >
<title>hslam.com/git/x/rpc/examples/example/pb/service.(*ArithRequest).XXX_Marshal (21 samples, 0.55%)</title><rect x="187.9" y="277" width="6.4" height="15.0" fill="rgb(242,120,27)" rx="2" ry="2" />
<text  x="190.86" y="287.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.03%)</title><rect x="83.4" y="277" width="0.3" height="15.0" fill="rgb(220,112,21)" rx="2" ry="2" />
<text  x="86.36" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.03%)</title><rect x="860.8" y="117" width="0.3" height="15.0" fill="rgb(242,84,18)" rx="2" ry="2" />
<text  x="863.78" y="127.5" ></text>
</g>
<g >
<title>runtime.freedefer (6 samples, 0.16%)</title><rect x="79.0" y="293" width="1.9" height="15.0" fill="rgb(240,102,9)" rx="2" ry="2" />
<text  x="82.05" y="303.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (9 samples, 0.24%)</title><rect x="449.3" y="325" width="2.7" height="15.0" fill="rgb(222,70,51)" rx="2" ry="2" />
<text  x="452.26" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.05%)</title><rect x="95.7" y="261" width="0.6" height="15.0" fill="rgb(211,106,32)" rx="2" ry="2" />
<text  x="98.69" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.03%)</title><rect x="853.4" y="277" width="0.3" height="15.0" fill="rgb(235,197,46)" rx="2" ry="2" />
<text  x="856.39" y="287.5" ></text>
</g>
<g >
<title>runtime.notesleep (9 samples, 0.24%)</title><rect x="491.8" y="325" width="2.8" height="15.0" fill="rgb(210,217,6)" rx="2" ry="2" />
<text  x="494.80" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (2 samples, 0.05%)</title><rect x="495.2" y="245" width="0.6" height="15.0" fill="rgb(233,95,32)" rx="2" ry="2" />
<text  x="498.19" y="255.5" ></text>
</g>
<g >
<title>runtime.releasem (1 samples, 0.03%)</title><rect x="455.1" y="325" width="0.3" height="15.0" fill="rgb(222,205,43)" rx="2" ry="2" />
<text  x="458.12" y="335.5" ></text>
</g>
<g >
<title>runtime.selparkcommit (11 samples, 0.29%)</title><rect x="855.2" y="341" width="3.4" height="15.0" fill="rgb(218,131,2)" rx="2" ry="2" />
<text  x="858.24" y="351.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.05%)</title><rect x="176.8" y="229" width="0.6" height="15.0" fill="rgb(230,153,33)" rx="2" ry="2" />
<text  x="179.77" y="239.5" ></text>
</g>
<g >
<title>runtime.runqsteal (303 samples, 7.92%)</title><rect x="525.7" y="309" width="93.4" height="15.0" fill="rgb(230,114,33)" rx="2" ry="2" />
<text  x="528.71" y="319.5" >runtime.run..</text>
</g>
<g >
<title>runtime.runqget (5 samples, 0.13%)</title><rect x="853.7" y="325" width="1.5" height="15.0" fill="rgb(229,105,45)" rx="2" ry="2" />
<text  x="856.69" y="335.5" ></text>
</g>
<g >
<title>runtime.lock (9 samples, 0.24%)</title><rect x="181.1" y="245" width="2.8" height="15.0" fill="rgb(239,156,23)" rx="2" ry="2" />
<text  x="184.08" y="255.5" ></text>
</g>
<g >
<title>runtime.runqsteal (3 samples, 0.08%)</title><rect x="489.0" y="309" width="1.0" height="15.0" fill="rgb(212,79,23)" rx="2" ry="2" />
<text  x="492.03" y="319.5" ></text>
</g>
<g >
<title>runtime.getitab (2 samples, 0.05%)</title><rect x="38.7" y="277" width="0.6" height="15.0" fill="rgb(227,206,10)" rx="2" ry="2" />
<text  x="41.67" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (17 samples, 0.44%)</title><rect x="84.6" y="277" width="5.2" height="15.0" fill="rgb(242,17,53)" rx="2" ry="2" />
<text  x="87.60" y="287.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.03%)</title><rect x="349.4" y="293" width="0.3" height="15.0" fill="rgb(216,175,5)" rx="2" ry="2" />
<text  x="352.39" y="303.5" ></text>
</g>
<g >
<title>main.main.func2 (26 samples, 0.68%)</title><rect x="135.5" y="373" width="8.0" height="15.0" fill="rgb(210,74,53)" rx="2" ry="2" />
<text  x="138.46" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (8 samples, 0.21%)</title><rect x="470.8" y="341" width="2.5" height="15.0" fill="rgb(221,190,41)" rx="2" ry="2" />
<text  x="473.84" y="351.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.03%)</title><rect x="491.5" y="293" width="0.3" height="15.0" fill="rgb(219,7,33)" rx="2" ry="2" />
<text  x="494.49" y="303.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (3 samples, 0.08%)</title><rect x="463.8" y="293" width="0.9" height="15.0" fill="rgb(246,165,9)" rx="2" ry="2" />
<text  x="466.75" y="303.5" ></text>
</g>
<g >
<title>runtime.heapBitsForAddr (1 samples, 0.03%)</title><rect x="288.7" y="277" width="0.3" height="15.0" fill="rgb(208,159,17)" rx="2" ry="2" />
<text  x="291.66" y="287.5" ></text>
</g>
<g >
<title>runtime.acquirem (2 samples, 0.05%)</title><rect x="297.3" y="277" width="0.6" height="15.0" fill="rgb(237,68,45)" rx="2" ry="2" />
<text  x="300.29" y="287.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.03%)</title><rect x="135.2" y="165" width="0.3" height="15.0" fill="rgb(234,162,2)" rx="2" ry="2" />
<text  x="138.15" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (47 samples, 1.23%)</title><rect x="113.6" y="325" width="14.5" height="15.0" fill="rgb(244,174,49)" rx="2" ry="2" />
<text  x="116.57" y="335.5" ></text>
</g>
<g >
<title>runtime.startm (25 samples, 0.65%)</title><rect x="845.1" y="293" width="7.7" height="15.0" fill="rgb(224,73,54)" rx="2" ry="2" />
<text  x="848.06" y="303.5" ></text>
</g>
<g >
<title>runtime.callers (1 samples, 0.03%)</title><rect x="110.5" y="245" width="0.3" height="15.0" fill="rgb(251,135,54)" rx="2" ry="2" />
<text  x="113.49" y="255.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.03%)</title><rect x="1044.5" y="261" width="0.3" height="15.0" fill="rgb(205,198,43)" rx="2" ry="2" />
<text  x="1047.50" y="271.5" ></text>
</g>
<g >
<title>runtime.heapBits.bits (1 samples, 0.03%)</title><rect x="487.8" y="293" width="0.3" height="15.0" fill="rgb(247,180,43)" rx="2" ry="2" />
<text  x="490.80" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.03%)</title><rect x="83.7" y="229" width="0.3" height="15.0" fill="rgb(218,68,47)" rx="2" ry="2" />
<text  x="86.67" y="239.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.03%)</title><rect x="441.2" y="133" width="0.4" height="15.0" fill="rgb(238,191,5)" rx="2" ry="2" />
<text  x="444.25" y="143.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (2 samples, 0.05%)</title><rect x="96.3" y="261" width="0.6" height="15.0" fill="rgb(205,175,21)" rx="2" ry="2" />
<text  x="99.31" y="271.5" ></text>
</g>
<g >
<title>runtime.growslice (2 samples, 0.05%)</title><rect x="128.1" y="357" width="0.6" height="15.0" fill="rgb(234,4,48)" rx="2" ry="2" />
<text  x="131.06" y="367.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.03%)</title><rect x="482.2" y="181" width="0.4" height="15.0" fill="rgb(241,93,45)" rx="2" ry="2" />
<text  x="485.25" y="191.5" ></text>
</g>
<g >
<title>runtime.getitab (4 samples, 0.10%)</title><rect x="223.6" y="261" width="1.3" height="15.0" fill="rgb(224,2,35)" rx="2" ry="2" />
<text  x="226.62" y="271.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.05%)</title><rect x="438.2" y="277" width="0.6" height="15.0" fill="rgb(225,87,21)" rx="2" ry="2" />
<text  x="441.17" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (4 samples, 0.10%)</title><rect x="843.5" y="261" width="1.3" height="15.0" fill="rgb(228,181,48)" rx="2" ry="2" />
<text  x="846.52" y="271.5" ></text>
</g>
<g >
<title>runtime.notewakeup (25 samples, 0.65%)</title><rect x="845.1" y="277" width="7.7" height="15.0" fill="rgb(220,178,47)" rx="2" ry="2" />
<text  x="848.06" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.03%)</title><rect x="112.6" y="261" width="0.4" height="15.0" fill="rgb(232,110,40)" rx="2" ry="2" />
<text  x="115.65" y="271.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.03%)</title><rect x="1034.9" y="293" width="0.4" height="15.0" fill="rgb(208,48,28)" rx="2" ry="2" />
<text  x="1037.95" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.03%)</title><rect x="429.2" y="261" width="0.3" height="15.0" fill="rgb(211,79,3)" rx="2" ry="2" />
<text  x="432.23" y="271.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Batch).run.func2 (146 samples, 3.81%)</title><rect x="66.7" y="357" width="45.0" height="15.0" fill="rgb(212,0,3)" rx="2" ry="2" />
<text  x="69.72" y="367.5" >hsla..</text>
</g>
<g >
<title>runtime._System (7 samples, 0.18%)</title><rect x="465.3" y="373" width="2.2" height="15.0" fill="rgb(218,219,45)" rx="2" ry="2" />
<text  x="468.29" y="383.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/examples/example/pb/service.(*ArithRequest).XXX_Size (25 samples, 0.65%)</title><rect x="194.3" y="277" width="7.7" height="15.0" fill="rgb(228,149,7)" rx="2" ry="2" />
<text  x="197.34" y="287.5" ></text>
</g>
<g >
<title>runtime.(*waitq).enqueue (3 samples, 0.08%)</title><rect x="342.3" y="309" width="0.9" height="15.0" fill="rgb(206,160,46)" rx="2" ry="2" />
<text  x="345.30" y="319.5" ></text>
</g>
<g >
<title>unicode/utf8.ValidString (5 samples, 0.13%)</title><rect x="32.8" y="229" width="1.6" height="15.0" fill="rgb(218,126,35)" rx="2" ry="2" />
<text  x="35.81" y="239.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="94.8" y="181" width="0.3" height="15.0" fill="rgb(245,155,0)" rx="2" ry="2" />
<text  x="97.77" y="191.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (33 samples, 0.86%)</title><rect x="438.8" y="277" width="10.2" height="15.0" fill="rgb(231,11,19)" rx="2" ry="2" />
<text  x="441.78" y="287.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.05%)</title><rect x="297.9" y="229" width="0.6" height="15.0" fill="rgb(242,199,18)" rx="2" ry="2" />
<text  x="300.91" y="239.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.03%)</title><rect x="47.9" y="293" width="0.3" height="15.0" fill="rgb(242,154,7)" rx="2" ry="2" />
<text  x="50.92" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.03%)</title><rect x="1189.7" y="325" width="0.3" height="15.0" fill="rgb(220,180,25)" rx="2" ry="2" />
<text  x="1192.69" y="335.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.03%)</title><rect x="853.4" y="293" width="0.3" height="15.0" fill="rgb(252,14,23)" rx="2" ry="2" />
<text  x="856.39" y="303.5" ></text>
</g>
<g >
<title>runtime.notetsleepg (95 samples, 2.48%)</title><rect x="1160.4" y="357" width="29.3" height="15.0" fill="rgb(233,3,0)" rx="2" ry="2" />
<text  x="1163.41" y="367.5" >ru..</text>
</g>
<g >
<title>runtime.nanotime (37 samples, 0.97%)</title><rect x="1160.7" y="325" width="11.4" height="15.0" fill="rgb(227,18,50)" rx="2" ry="2" />
<text  x="1163.72" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (4 samples, 0.10%)</title><rect x="85.8" y="245" width="1.3" height="15.0" fill="rgb(241,35,2)" rx="2" ry="2" />
<text  x="88.83" y="255.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.05%)</title><rect x="495.2" y="261" width="0.6" height="15.0" fill="rgb(253,25,42)" rx="2" ry="2" />
<text  x="498.19" y="271.5" ></text>
</g>
<g >
<title>unicode/utf8.ValidString (5 samples, 0.13%)</title><rect x="87.7" y="229" width="1.5" height="15.0" fill="rgb(215,41,50)" rx="2" ry="2" />
<text  x="90.68" y="239.5" ></text>
</g>
<g >
<title>runtime.heapBitsForAddr (1 samples, 0.03%)</title><rect x="109.9" y="261" width="0.3" height="15.0" fill="rgb(228,180,4)" rx="2" ry="2" />
<text  x="112.87" y="271.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (3 samples, 0.08%)</title><rect x="430.2" y="325" width="0.9" height="15.0" fill="rgb(233,117,13)" rx="2" ry="2" />
<text  x="433.15" y="335.5" ></text>
</g>
<g >
<title>runtime.heapBits.isPointer (1 samples, 0.03%)</title><rect x="212.8" y="229" width="0.3" height="15.0" fill="rgb(211,53,51)" rx="2" ry="2" />
<text  x="215.83" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.05%)</title><rect x="95.7" y="245" width="0.6" height="15.0" fill="rgb(226,154,3)" rx="2" ry="2" />
<text  x="98.69" y="255.5" ></text>
</g>
<g >
<title>runtime.binarySearchTree (1 samples, 0.03%)</title><rect x="474.2" y="229" width="0.3" height="15.0" fill="rgb(225,185,0)" rx="2" ry="2" />
<text  x="477.23" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.03%)</title><rect x="938.8" y="341" width="0.3" height="15.0" fill="rgb(237,29,38)" rx="2" ry="2" />
<text  x="941.77" y="351.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.03%)</title><rect x="296.7" y="133" width="0.3" height="15.0" fill="rgb(228,66,38)" rx="2" ry="2" />
<text  x="299.68" y="143.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.03%)</title><rect x="108.6" y="181" width="0.3" height="15.0" fill="rgb(223,203,49)" rx="2" ry="2" />
<text  x="111.64" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="449.0" y="309" width="0.3" height="15.0" fill="rgb(232,16,50)" rx="2" ry="2" />
<text  x="451.96" y="319.5" ></text>
</g>
<g >
<title>runtime.goready (9 samples, 0.24%)</title><rect x="19.2" y="261" width="2.8" height="15.0" fill="rgb(232,48,35)" rx="2" ry="2" />
<text  x="22.25" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.SizeVarint (1 samples, 0.03%)</title><rect x="201.7" y="213" width="0.3" height="15.0" fill="rgb(224,160,1)" rx="2" ry="2" />
<text  x="204.73" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (2 samples, 0.05%)</title><rect x="296.7" y="229" width="0.6" height="15.0" fill="rgb(217,133,27)" rx="2" ry="2" />
<text  x="299.68" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (20 samples, 0.52%)</title><rect x="488.4" y="357" width="6.2" height="15.0" fill="rgb(215,16,41)" rx="2" ry="2" />
<text  x="491.41" y="367.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.sizeVarintS32ValueNoZero (2 samples, 0.05%)</title><rect x="201.4" y="229" width="0.6" height="15.0" fill="rgb(245,71,20)" rx="2" ry="2" />
<text  x="204.43" y="239.5" ></text>
</g>
<g >
<title>sync.runtime_SemacquireMutex (5 samples, 0.13%)</title><rect x="175.8" y="277" width="1.6" height="15.0" fill="rgb(217,229,42)" rx="2" ry="2" />
<text  x="178.84" y="287.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.03%)</title><rect x="1044.2" y="309" width="0.3" height="15.0" fill="rgb(223,28,37)" rx="2" ry="2" />
<text  x="1047.20" y="319.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (1 samples, 0.03%)</title><rect x="95.7" y="53" width="0.3" height="15.0" fill="rgb(205,65,17)" rx="2" ry="2" />
<text  x="98.69" y="63.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.03%)</title><rect x="491.2" y="149" width="0.3" height="15.0" fill="rgb(253,75,21)" rx="2" ry="2" />
<text  x="494.19" y="159.5" ></text>
</g>
<g >
<title>runtime.chansend.func1 (1 samples, 0.03%)</title><rect x="429.2" y="309" width="0.3" height="15.0" fill="rgb(236,126,30)" rx="2" ry="2" />
<text  x="432.23" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.05%)</title><rect x="95.7" y="213" width="0.6" height="15.0" fill="rgb(246,31,34)" rx="2" ry="2" />
<text  x="98.69" y="223.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Response).Decode (36 samples, 0.94%)</title><rect x="99.7" y="325" width="11.1" height="15.0" fill="rgb(216,66,22)" rx="2" ry="2" />
<text  x="102.70" y="335.5" ></text>
</g>
<g >
<title>runtime.procyield (23 samples, 0.60%)</title><rect x="421.5" y="309" width="7.1" height="15.0" fill="rgb(247,92,51)" rx="2" ry="2" />
<text  x="424.52" y="319.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Response).Decode (23 samples, 0.60%)</title><rect x="42.7" y="325" width="7.1" height="15.0" fill="rgb(217,212,43)" rx="2" ry="2" />
<text  x="45.68" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.03%)</title><rect x="1044.5" y="213" width="0.3" height="15.0" fill="rgb(205,216,29)" rx="2" ry="2" />
<text  x="1047.50" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.03%)</title><rect x="41.4" y="229" width="0.4" height="15.0" fill="rgb(214,216,10)" rx="2" ry="2" />
<text  x="44.44" y="239.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (5 samples, 0.13%)</title><rect x="225.8" y="261" width="1.5" height="15.0" fill="rgb(241,131,19)" rx="2" ry="2" />
<text  x="228.78" y="271.5" ></text>
</g>
<g >
<title>runtime.getempty (1 samples, 0.03%)</title><rect x="473.9" y="277" width="0.3" height="15.0" fill="rgb(220,41,10)" rx="2" ry="2" />
<text  x="476.92" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).removeNode (1 samples, 0.03%)</title><rect x="95.4" y="101" width="0.3" height="15.0" fill="rgb(240,3,16)" rx="2" ry="2" />
<text  x="98.39" y="111.5" ></text>
</g>
<g >
<title>hslam.com/git/x/idgenerator.GetTimestampMilli (22 samples, 0.57%)</title><rect x="161.4" y="277" width="6.7" height="15.0" fill="rgb(225,55,31)" rx="2" ry="2" />
<text  x="164.35" y="287.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="128.1" y="245" width="0.3" height="15.0" fill="rgb(237,228,46)" rx="2" ry="2" />
<text  x="131.06" y="255.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeue (2 samples, 0.05%)</title><rect x="334.6" y="309" width="0.6" height="15.0" fill="rgb(231,64,27)" rx="2" ry="2" />
<text  x="337.59" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.03%)</title><rect x="102.8" y="213" width="0.3" height="15.0" fill="rgb(235,30,5)" rx="2" ry="2" />
<text  x="105.78" y="223.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*client).Call (749 samples, 19.57%)</title><rect x="146.9" y="357" width="230.8" height="15.0" fill="rgb(248,209,8)" rx="2" ry="2" />
<text  x="149.87" y="367.5" >hslam.com/git/x/rpc.(*client)...</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="473.3" y="341" width="0.3" height="15.0" fill="rgb(235,216,22)" rx="2" ry="2" />
<text  x="476.31" y="351.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (10 samples, 0.26%)</title><rect x="384.5" y="277" width="3.1" height="15.0" fill="rgb(241,191,14)" rx="2" ry="2" />
<text  x="387.53" y="287.5" ></text>
</g>
<g >
<title>runtime.freedefer (8 samples, 0.21%)</title><rect x="52.2" y="325" width="2.5" height="15.0" fill="rgb(253,54,18)" rx="2" ry="2" />
<text  x="55.23" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (6 samples, 0.16%)</title><rect x="858.9" y="245" width="1.9" height="15.0" fill="rgb(240,199,38)" rx="2" ry="2" />
<text  x="861.93" y="255.5" ></text>
</g>
<g >
<title>runtime.sweepone (10 samples, 0.26%)</title><rect x="470.2" y="357" width="3.1" height="15.0" fill="rgb(213,65,49)" rx="2" ry="2" />
<text  x="473.22" y="367.5" ></text>
</g>
<g >
<title>runtime.stopm (28 samples, 0.73%)</title><rect x="860.8" y="277" width="8.6" height="15.0" fill="rgb(230,186,0)" rx="2" ry="2" />
<text  x="863.78" y="287.5" ></text>
</g>
<g >
<title>runtime.binarySearchTree (1 samples, 0.03%)</title><rect x="440.6" y="149" width="0.3" height="15.0" fill="rgb(237,63,35)" rx="2" ry="2" />
<text  x="443.63" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (8 samples, 0.21%)</title><rect x="44.2" y="245" width="2.5" height="15.0" fill="rgb(217,224,25)" rx="2" ry="2" />
<text  x="47.22" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.03%)</title><rect x="432.6" y="309" width="0.3" height="15.0" fill="rgb(217,146,9)" rx="2" ry="2" />
<text  x="435.62" y="319.5" ></text>
</g>
<g >
<title>runtime.nanotime (6 samples, 0.16%)</title><rect x="508.1" y="309" width="1.9" height="15.0" fill="rgb(240,139,32)" rx="2" ry="2" />
<text  x="511.14" y="319.5" ></text>
</g>
<g >
<title>runtime.semawakeup (6 samples, 0.16%)</title><rect x="858.9" y="261" width="1.9" height="15.0" fill="rgb(251,82,29)" rx="2" ry="2" />
<text  x="861.93" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="205.4" y="165" width="0.3" height="15.0" fill="rgb(248,7,10)" rx="2" ry="2" />
<text  x="208.43" y="175.5" ></text>
</g>
<g >
<title>runtime.semawakeup (27 samples, 0.71%)</title><rect x="1035.3" y="293" width="8.3" height="15.0" fill="rgb(209,127,35)" rx="2" ry="2" />
<text  x="1038.26" y="303.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.03%)</title><rect x="428.6" y="309" width="0.3" height="15.0" fill="rgb(218,10,47)" rx="2" ry="2" />
<text  x="431.61" y="319.5" ></text>
</g>
<g >
<title>runtime.lock (14 samples, 0.37%)</title><rect x="137.3" y="325" width="4.3" height="15.0" fill="rgb(233,43,44)" rx="2" ry="2" />
<text  x="140.31" y="335.5" ></text>
</g>
<g >
<title>runtime.libcCall (3 samples, 0.08%)</title><rect x="167.2" y="213" width="0.9" height="15.0" fill="rgb(221,139,46)" rx="2" ry="2" />
<text  x="170.21" y="223.5" ></text>
</g>
<g >
<title>runtime.freespecial (1 samples, 0.03%)</title><rect x="473.0" y="325" width="0.3" height="15.0" fill="rgb(234,137,14)" rx="2" ry="2" />
<text  x="476.00" y="335.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytes3 (3 samples, 0.08%)</title><rect x="30.3" y="245" width="1.0" height="15.0" fill="rgb(208,21,22)" rx="2" ry="2" />
<text  x="33.34" y="255.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc.func1 (1 samples, 0.03%)</title><rect x="314.2" y="245" width="0.4" height="15.0" fill="rgb(242,203,2)" rx="2" ry="2" />
<text  x="317.25" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.03%)</title><rect x="1034.9" y="277" width="0.4" height="15.0" fill="rgb(254,125,7)" rx="2" ry="2" />
<text  x="1037.95" y="287.5" ></text>
</g>
<g >
<title>runtime.nanotime (68 samples, 1.78%)</title><rect x="879.6" y="325" width="20.9" height="15.0" fill="rgb(221,182,28)" rx="2" ry="2" />
<text  x="882.59" y="335.5" ></text>
</g>
<g >
<title>runtime.gcWriteBarrier (1 samples, 0.03%)</title><rect x="104.9" y="309" width="0.4" height="15.0" fill="rgb(233,37,9)" rx="2" ry="2" />
<text  x="107.94" y="319.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.03%)</title><rect x="25.4" y="309" width="0.3" height="15.0" fill="rgb(208,149,33)" rx="2" ry="2" />
<text  x="28.41" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (90 samples, 2.35%)</title><rect x="393.8" y="293" width="27.7" height="15.0" fill="rgb(233,225,53)" rx="2" ry="2" />
<text  x="396.78" y="303.5" >r..</text>
</g>
<g >
<title>runtime.unlock (3 samples, 0.08%)</title><rect x="842.0" y="309" width="0.9" height="15.0" fill="rgb(242,10,23)" rx="2" ry="2" />
<text  x="844.98" y="319.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.03%)</title><rect x="96.0" y="165" width="0.3" height="15.0" fill="rgb(246,150,21)" rx="2" ry="2" />
<text  x="99.00" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (7 samples, 0.18%)</title><rect x="23.3" y="277" width="2.1" height="15.0" fill="rgb(220,106,48)" rx="2" ry="2" />
<text  x="26.25" y="287.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="112.6" y="197" width="0.4" height="15.0" fill="rgb(225,80,18)" rx="2" ry="2" />
<text  x="115.65" y="207.5" ></text>
</g>
<g >
<title>runtime.shrinkstack (1 samples, 0.03%)</title><rect x="483.5" y="245" width="0.3" height="15.0" fill="rgb(246,181,43)" rx="2" ry="2" />
<text  x="486.48" y="255.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (45 samples, 1.18%)</title><rect x="1045.1" y="293" width="13.9" height="15.0" fill="rgb(214,5,23)" rx="2" ry="2" />
<text  x="1048.12" y="303.5" ></text>
</g>
<g >
<title>runtime.schedule (62 samples, 1.62%)</title><rect x="858.6" y="309" width="19.1" height="15.0" fill="rgb(241,140,32)" rx="2" ry="2" />
<text  x="861.63" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (1 samples, 0.03%)</title><rect x="491.2" y="213" width="0.3" height="15.0" fill="rgb(250,227,7)" rx="2" ry="2" />
<text  x="494.19" y="223.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (3 samples, 0.08%)</title><rect x="852.8" y="325" width="0.9" height="15.0" fill="rgb(250,61,25)" rx="2" ry="2" />
<text  x="855.77" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.03%)</title><rect x="112.6" y="293" width="0.4" height="15.0" fill="rgb(220,170,53)" rx="2" ry="2" />
<text  x="115.65" y="303.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Unlock (14 samples, 0.37%)</title><rect x="387.6" y="277" width="4.3" height="15.0" fill="rgb(249,137,51)" rx="2" ry="2" />
<text  x="390.61" y="287.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (1 samples, 0.03%)</title><rect x="104.9" y="245" width="0.4" height="15.0" fill="rgb(214,14,24)" rx="2" ry="2" />
<text  x="107.94" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.pointer.isNil (1 samples, 0.03%)</title><rect x="91.7" y="245" width="0.3" height="15.0" fill="rgb(231,131,17)" rx="2" ry="2" />
<text  x="94.69" y="255.5" ></text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.05%)</title><rect x="39.3" y="293" width="0.6" height="15.0" fill="rgb(208,199,15)" rx="2" ry="2" />
<text  x="42.28" y="303.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/protocol.ReadStream (49 samples, 1.28%)</title><rect x="113.6" y="373" width="15.1" height="15.0" fill="rgb(206,64,40)" rx="2" ry="2" />
<text  x="116.57" y="383.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (9 samples, 0.24%)</title><rect x="289.6" y="293" width="2.8" height="15.0" fill="rgb(217,220,23)" rx="2" ry="2" />
<text  x="292.59" y="303.5" ></text>
</g>
<g >
<title>runtime.binarySearchTree (1 samples, 0.03%)</title><rect x="474.2" y="213" width="0.3" height="15.0" fill="rgb(242,198,36)" rx="2" ry="2" />
<text  x="477.23" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.03%)</title><rect x="205.4" y="149" width="0.3" height="15.0" fill="rgb(210,143,36)" rx="2" ry="2" />
<text  x="208.43" y="159.5" ></text>
</g>
<g >
<title>runtime.makeSpanClass (1 samples, 0.03%)</title><rect x="301.0" y="277" width="0.3" height="15.0" fill="rgb(241,138,50)" rx="2" ry="2" />
<text  x="303.99" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.05%)</title><rect x="842.9" y="293" width="0.6" height="15.0" fill="rgb(226,227,38)" rx="2" ry="2" />
<text  x="845.90" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (23 samples, 0.60%)</title><rect x="28.2" y="277" width="7.1" height="15.0" fill="rgb(205,30,12)" rx="2" ry="2" />
<text  x="31.19" y="287.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.05%)</title><rect x="297.9" y="245" width="0.6" height="15.0" fill="rgb(220,9,48)" rx="2" ry="2" />
<text  x="300.91" y="255.5" ></text>
</g>
<g >
<title>runtime.casgstatus (2 samples, 0.05%)</title><rect x="76.6" y="197" width="0.6" height="15.0" fill="rgb(205,138,54)" rx="2" ry="2" />
<text  x="79.58" y="207.5" ></text>
</g>
<g >
<title>runtime.stopm (723 samples, 18.89%)</title><rect x="619.1" y="309" width="222.9" height="15.0" fill="rgb(242,31,14)" rx="2" ry="2" />
<text  x="622.11" y="319.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.puintptr.ptr (1 samples, 0.03%)</title><rect x="80.6" y="277" width="0.3" height="15.0" fill="rgb(227,184,30)" rx="2" ry="2" />
<text  x="83.59" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.03%)</title><rect x="50.1" y="245" width="0.3" height="15.0" fill="rgb(209,12,27)" rx="2" ry="2" />
<text  x="53.07" y="255.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Msg).Encode (1 samples, 0.03%)</title><rect x="83.7" y="325" width="0.3" height="15.0" fill="rgb(228,77,24)" rx="2" ry="2" />
<text  x="86.67" y="335.5" ></text>
</g>
<g >
<title>runtime.osyield (136 samples, 3.55%)</title><rect x="231.6" y="277" width="42.0" height="15.0" fill="rgb(243,135,31)" rx="2" ry="2" />
<text  x="234.64" y="287.5" >run..</text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.03%)</title><rect x="112.6" y="229" width="0.4" height="15.0" fill="rgb(246,55,50)" rx="2" ry="2" />
<text  x="115.65" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.03%)</title><rect x="87.4" y="229" width="0.3" height="15.0" fill="rgb(251,62,2)" rx="2" ry="2" />
<text  x="90.37" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.atomicLoadMarshalInfo (1 samples, 0.03%)</title><rect x="37.4" y="245" width="0.3" height="15.0" fill="rgb(232,115,34)" rx="2" ry="2" />
<text  x="40.43" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.05%)</title><rect x="852.8" y="293" width="0.6" height="15.0" fill="rgb(215,95,29)" rx="2" ry="2" />
<text  x="855.77" y="303.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.03%)</title><rect x="494.6" y="325" width="0.3" height="15.0" fill="rgb(231,144,7)" rx="2" ry="2" />
<text  x="497.58" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (3 samples, 0.08%)</title><rect x="1059.0" y="261" width="0.9" height="15.0" fill="rgb(237,80,10)" rx="2" ry="2" />
<text  x="1061.99" y="271.5" ></text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.03%)</title><rect x="1044.8" y="293" width="0.3" height="15.0" fill="rgb(238,9,46)" rx="2" ry="2" />
<text  x="1047.81" y="303.5" ></text>
</g>
<g >
<title>runtime.deferreturn (1 samples, 0.03%)</title><rect x="22.9" y="309" width="0.4" height="15.0" fill="rgb(210,149,31)" rx="2" ry="2" />
<text  x="25.95" y="319.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.03%)</title><rect x="111.4" y="309" width="0.3" height="15.0" fill="rgb(220,68,39)" rx="2" ry="2" />
<text  x="114.42" y="319.5" ></text>
</g>
<g >
<title>runtime.gcWriteBarrier (1 samples, 0.03%)</title><rect x="78.4" y="277" width="0.3" height="15.0" fill="rgb(247,151,17)" rx="2" ry="2" />
<text  x="81.43" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.pointer.getPointer (1 samples, 0.03%)</title><rect x="194.0" y="229" width="0.3" height="15.0" fill="rgb(209,14,21)" rx="2" ry="2" />
<text  x="197.03" y="239.5" ></text>
</g>
<g >
<title>runtime.semacquire1 (3 samples, 0.08%)</title><rect x="386.7" y="245" width="0.9" height="15.0" fill="rgb(214,89,0)" rx="2" ry="2" />
<text  x="389.69" y="255.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.03%)</title><rect x="108.6" y="165" width="0.3" height="15.0" fill="rgb(240,136,1)" rx="2" ry="2" />
<text  x="111.64" y="175.5" ></text>
</g>
<g >
<title>runtime.heapBits.initSpan (1 samples, 0.03%)</title><rect x="297.0" y="213" width="0.3" height="15.0" fill="rgb(243,113,16)" rx="2" ry="2" />
<text  x="299.99" y="223.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.03%)</title><rect x="108.6" y="117" width="0.3" height="15.0" fill="rgb(237,34,29)" rx="2" ry="2" />
<text  x="111.64" y="127.5" ></text>
</g>
<g >
<title>runtime.newobject (33 samples, 0.86%)</title><rect x="293.0" y="309" width="10.2" height="15.0" fill="rgb(215,175,47)" rx="2" ry="2" />
<text  x="295.98" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (1 samples, 0.03%)</title><rect x="89.5" y="261" width="0.3" height="15.0" fill="rgb(241,64,1)" rx="2" ry="2" />
<text  x="92.53" y="271.5" ></text>
</g>
<g >
<title>runtime.step (6 samples, 0.16%)</title><rect x="480.1" y="149" width="1.8" height="15.0" fill="rgb(224,143,38)" rx="2" ry="2" />
<text  x="483.09" y="159.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (7 samples, 0.18%)</title><rect x="75.4" y="229" width="2.1" height="15.0" fill="rgb(233,80,50)" rx="2" ry="2" />
<text  x="78.35" y="239.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (94 samples, 2.46%)</title><rect x="1160.7" y="341" width="29.0" height="15.0" fill="rgb(211,197,31)" rx="2" ry="2" />
<text  x="1163.72" y="351.5" >ru..</text>
</g>
<g >
<title>runtime.(*gcSweepBuf).push (1 samples, 0.03%)</title><rect x="307.8" y="165" width="0.3" height="15.0" fill="rgb(254,139,9)" rx="2" ry="2" />
<text  x="310.77" y="175.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (6 samples, 0.16%)</title><rect x="81.8" y="309" width="1.9" height="15.0" fill="rgb(215,161,19)" rx="2" ry="2" />
<text  x="84.82" y="319.5" ></text>
</g>
<g >
<title>runtime.procyield (19 samples, 0.50%)</title><rect x="273.6" y="277" width="5.8" height="15.0" fill="rgb(239,42,3)" rx="2" ry="2" />
<text  x="276.56" y="287.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.03%)</title><rect x="449.0" y="261" width="0.3" height="15.0" fill="rgb(226,90,49)" rx="2" ry="2" />
<text  x="451.96" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (3 samples, 0.08%)</title><rect x="80.9" y="309" width="0.9" height="15.0" fill="rgb(249,28,43)" rx="2" ry="2" />
<text  x="83.90" y="319.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (4 samples, 0.10%)</title><rect x="301.3" y="277" width="1.2" height="15.0" fill="rgb(206,188,38)" rx="2" ry="2" />
<text  x="304.30" y="287.5" ></text>
</g>
<g >
<title>runtime.notesleep (723 samples, 18.89%)</title><rect x="619.1" y="293" width="222.9" height="15.0" fill="rgb(206,14,10)" rx="2" ry="2" />
<text  x="622.11" y="303.5" >runtime.notesleep</text>
</g>
<g >
<title>main.work (1,044 samples, 27.27%)</title><rect x="143.5" y="373" width="321.8" height="15.0" fill="rgb(207,201,1)" rx="2" ry="2" />
<text  x="146.47" y="383.5" >main.work</text>
</g>
<g >
<title>runtime.entersyscallblock_handoff (310 samples, 8.10%)</title><rect x="939.4" y="341" width="95.5" height="15.0" fill="rgb(242,132,54)" rx="2" ry="2" />
<text  x="942.39" y="351.5" >runtime.ent..</text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.05%)</title><rect x="1043.6" y="293" width="0.6" height="15.0" fill="rgb(252,10,40)" rx="2" ry="2" />
<text  x="1046.58" y="303.5" ></text>
</g>
<g >
<title>runtime.gcstopm (6 samples, 0.16%)</title><rect x="842.9" y="325" width="1.9" height="15.0" fill="rgb(246,87,41)" rx="2" ry="2" />
<text  x="845.90" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcache).releaseAll (1 samples, 0.03%)</title><rect x="491.2" y="261" width="0.3" height="15.0" fill="rgb(224,136,53)" rx="2" ry="2" />
<text  x="494.19" y="271.5" ></text>
</g>
<g >
<title>runtime.notetsleep (46 samples, 1.20%)</title><rect x="900.5" y="325" width="14.2" height="15.0" fill="rgb(223,59,39)" rx="2" ry="2" />
<text  x="903.55" y="335.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (1 samples, 0.03%)</title><rect x="65.5" y="325" width="0.3" height="15.0" fill="rgb(234,173,29)" rx="2" ry="2" />
<text  x="68.49" y="335.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="841.7" y="261" width="0.3" height="15.0" fill="rgb(233,120,15)" rx="2" ry="2" />
<text  x="844.67" y="271.5" ></text>
</g>
<g >
<title>runtime.getempty (1 samples, 0.03%)</title><rect x="444.0" y="101" width="0.3" height="15.0" fill="rgb(221,195,42)" rx="2" ry="2" />
<text  x="447.02" y="111.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Batch).XXX_Unmarshal (7 samples, 0.18%)</title><rect x="23.3" y="293" width="2.1" height="15.0" fill="rgb(217,227,40)" rx="2" ry="2" />
<text  x="26.25" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint64ValueNoZero (2 samples, 0.05%)</title><rect x="34.4" y="245" width="0.6" height="15.0" fill="rgb(212,90,15)" rx="2" ry="2" />
<text  x="37.35" y="255.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.03%)</title><rect x="444.3" y="117" width="0.3" height="15.0" fill="rgb(251,89,28)" rx="2" ry="2" />
<text  x="447.33" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="129.0" y="293" width="0.3" height="15.0" fill="rgb(217,146,6)" rx="2" ry="2" />
<text  x="131.99" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (3 samples, 0.08%)</title><rect x="80.9" y="277" width="0.9" height="15.0" fill="rgb(225,95,7)" rx="2" ry="2" />
<text  x="83.90" y="287.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (10 samples, 0.26%)</title><rect x="441.6" y="149" width="3.0" height="15.0" fill="rgb(231,178,5)" rx="2" ry="2" />
<text  x="444.56" y="159.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (25 samples, 0.65%)</title><rect x="194.3" y="261" width="7.7" height="15.0" fill="rgb(235,109,12)" rx="2" ry="2" />
<text  x="197.34" y="271.5" ></text>
</g>
<g >
<title>syscall.syscall (45 samples, 1.18%)</title><rect x="114.2" y="277" width="13.9" height="15.0" fill="rgb(241,168,25)" rx="2" ry="2" />
<text  x="117.19" y="287.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.03%)</title><rect x="128.1" y="341" width="0.3" height="15.0" fill="rgb(227,99,38)" rx="2" ry="2" />
<text  x="131.06" y="351.5" ></text>
</g>
<g >
<title>runtime.send (4 samples, 0.10%)</title><rect x="428.9" y="325" width="1.3" height="15.0" fill="rgb(253,15,46)" rx="2" ry="2" />
<text  x="431.92" y="335.5" ></text>
</g>
<g >
<title>runtime.acquirem (2 samples, 0.05%)</title><rect x="309.0" y="293" width="0.6" height="15.0" fill="rgb(239,152,53)" rx="2" ry="2" />
<text  x="312.01" y="303.5" ></text>
</g>
<g >
<title>runtime.step (4 samples, 0.10%)</title><rect x="442.5" y="85" width="1.2" height="15.0" fill="rgb(231,208,19)" rx="2" ry="2" />
<text  x="445.48" y="95.5" ></text>
</g>
<g >
<title>runtime.releasem (2 samples, 0.05%)</title><rect x="292.4" y="293" width="0.6" height="15.0" fill="rgb(216,90,20)" rx="2" ry="2" />
<text  x="295.36" y="303.5" ></text>
</g>
<g >
<title>runtime.(*semaRoot).dequeue (1 samples, 0.03%)</title><rect x="391.3" y="229" width="0.3" height="15.0" fill="rgb(233,176,45)" rx="2" ry="2" />
<text  x="394.31" y="239.5" ></text>
</g>
<g >
<title>math/rand.(*Rand).Int31 (45 samples, 1.18%)</title><rect x="378.1" y="325" width="13.8" height="15.0" fill="rgb(227,97,0)" rx="2" ry="2" />
<text  x="381.06" y="335.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="108.6" y="261" width="0.3" height="15.0" fill="rgb(214,30,15)" rx="2" ry="2" />
<text  x="111.64" y="271.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.03%)</title><rect x="441.2" y="149" width="0.4" height="15.0" fill="rgb(209,49,37)" rx="2" ry="2" />
<text  x="444.25" y="159.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (6 samples, 0.16%)</title><rect x="452.0" y="325" width="1.9" height="15.0" fill="rgb(229,65,17)" rx="2" ry="2" />
<text  x="455.04" y="335.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (6 samples, 0.16%)</title><rect x="475.5" y="229" width="1.8" height="15.0" fill="rgb(241,162,26)" rx="2" ry="2" />
<text  x="478.46" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.03%)</title><rect x="428.6" y="293" width="0.3" height="15.0" fill="rgb(249,25,4)" rx="2" ry="2" />
<text  x="431.61" y="303.5" ></text>
</g>
<g >
<title>runtime.growslice (3 samples, 0.08%)</title><rect x="24.5" y="229" width="0.9" height="15.0" fill="rgb(243,16,23)" rx="2" ry="2" />
<text  x="27.49" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.03%)</title><rect x="83.4" y="229" width="0.3" height="15.0" fill="rgb(207,125,30)" rx="2" ry="2" />
<text  x="86.36" y="239.5" ></text>
</g>
<g >
<title>runtime.goready (7 samples, 0.18%)</title><rect x="75.4" y="261" width="2.1" height="15.0" fill="rgb(213,150,40)" rx="2" ry="2" />
<text  x="78.35" y="271.5" ></text>
</g>
<g >
<title>runtime.readvarint (2 samples, 0.05%)</title><rect x="476.7" y="181" width="0.6" height="15.0" fill="rgb(226,26,31)" rx="2" ry="2" />
<text  x="479.70" y="191.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.03%)</title><rect x="487.5" y="293" width="0.3" height="15.0" fill="rgb(217,82,53)" rx="2" ry="2" />
<text  x="490.49" y="303.5" ></text>
</g>
<g >
<title>math/rand.(*Rand).Int63 (45 samples, 1.18%)</title><rect x="378.1" y="309" width="13.8" height="15.0" fill="rgb(212,85,29)" rx="2" ry="2" />
<text  x="381.06" y="319.5" ></text>
</g>
<g >
<title>runtime.setMNoWB (1 samples, 0.03%)</title><rect x="498.9" y="325" width="0.3" height="15.0" fill="rgb(240,4,14)" rx="2" ry="2" />
<text  x="501.89" y="335.5" ></text>
</g>
<g >
<title>runtime.semawakeup (309 samples, 8.07%)</title><rect x="1060.2" y="261" width="95.3" height="15.0" fill="rgb(251,98,30)" rx="2" ry="2" />
<text  x="1063.22" y="271.5" >runtime.sem..</text>
</g>
<g >
<title>runtime.notesleep (2 samples, 0.05%)</title><rect x="495.2" y="277" width="0.6" height="15.0" fill="rgb(249,180,26)" rx="2" ry="2" />
<text  x="498.19" y="287.5" ></text>
</g>
<g >
<title>runtime.unlock (4 samples, 0.10%)</title><rect x="142.2" y="325" width="1.3" height="15.0" fill="rgb(214,176,7)" rx="2" ry="2" />
<text  x="145.24" y="335.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (3 samples, 0.08%)</title><rect x="163.2" y="197" width="0.9" height="15.0" fill="rgb(224,49,21)" rx="2" ry="2" />
<text  x="166.20" y="207.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (15 samples, 0.39%)</title><rect x="100.3" y="309" width="4.6" height="15.0" fill="rgb(212,162,52)" rx="2" ry="2" />
<text  x="103.32" y="319.5" ></text>
</g>
<g >
<title>runtime.semasleep (57 samples, 1.49%)</title><rect x="1172.1" y="325" width="17.6" height="15.0" fill="rgb(230,175,16)" rx="2" ry="2" />
<text  x="1175.12" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (2 samples, 0.05%)</title><rect x="296.7" y="245" width="0.6" height="15.0" fill="rgb(240,112,40)" rx="2" ry="2" />
<text  x="299.68" y="255.5" ></text>
</g>
<g >
<title>runtime.send (14 samples, 0.37%)</title><rect x="73.5" y="277" width="4.3" height="15.0" fill="rgb(241,10,32)" rx="2" ry="2" />
<text  x="76.50" y="287.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.03%)</title><rect x="447.1" y="229" width="0.3" height="15.0" fill="rgb(241,74,47)" rx="2" ry="2" />
<text  x="450.11" y="239.5" ></text>
</g>
<g >
<title>runtime.selunlock (10 samples, 0.26%)</title><rect x="363.3" y="309" width="3.0" height="15.0" fill="rgb(232,186,32)" rx="2" ry="2" />
<text  x="366.26" y="319.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.03%)</title><rect x="41.4" y="197" width="0.4" height="15.0" fill="rgb(217,160,39)" rx="2" ry="2" />
<text  x="44.44" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (27 samples, 0.71%)</title><rect x="861.1" y="245" width="8.3" height="15.0" fill="rgb(225,38,26)" rx="2" ry="2" />
<text  x="864.09" y="255.5" ></text>
</g>
<g >
<title>runtime.finishsweep_m (1 samples, 0.03%)</title><rect x="449.0" y="277" width="0.3" height="15.0" fill="rgb(210,126,51)" rx="2" ry="2" />
<text  x="451.96" y="287.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.03%)</title><rect x="42.4" y="277" width="0.3" height="15.0" fill="rgb(236,176,42)" rx="2" ry="2" />
<text  x="45.37" y="287.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (309 samples, 8.07%)</title><rect x="1060.2" y="341" width="95.3" height="15.0" fill="rgb(227,105,18)" rx="2" ry="2" />
<text  x="1063.22" y="351.5" >runtime.gor..</text>
</g>
<g >
<title>runtime.getitab (5 samples, 0.13%)</title><rect x="225.8" y="277" width="1.5" height="15.0" fill="rgb(243,173,43)" rx="2" ry="2" />
<text  x="228.78" y="287.5" ></text>
</g>
<g >
<title>runtime.sysmon (198 samples, 5.17%)</title><rect x="877.7" y="341" width="61.1" height="15.0" fill="rgb(232,152,30)" rx="2" ry="2" />
<text  x="880.74" y="351.5" >runtim..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.getMessageMarshalInfo (1 samples, 0.03%)</title><rect x="37.4" y="261" width="0.3" height="15.0" fill="rgb(217,196,18)" rx="2" ry="2" />
<text  x="40.43" y="271.5" ></text>
</g>
<g >
<title>runtime.gopark (16 samples, 0.42%)</title><rect x="344.8" y="309" width="4.9" height="15.0" fill="rgb(225,202,21)" rx="2" ry="2" />
<text  x="347.76" y="319.5" ></text>
</g>
<g >
<title>runtime.forEachP (45 samples, 1.18%)</title><rect x="1045.1" y="325" width="13.9" height="15.0" fill="rgb(221,25,50)" rx="2" ry="2" />
<text  x="1048.12" y="335.5" ></text>
</g>
<g >
<title>runtime.tracebackdefers (1 samples, 0.03%)</title><rect x="483.8" y="245" width="0.3" height="15.0" fill="rgb(209,183,8)" rx="2" ry="2" />
<text  x="486.79" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (35 samples, 0.91%)</title><rect x="903.9" y="277" width="10.8" height="15.0" fill="rgb(206,221,26)" rx="2" ry="2" />
<text  x="906.94" y="287.5" ></text>
</g>
<g >
<title>syscall.read (45 samples, 1.18%)</title><rect x="114.2" y="293" width="13.9" height="15.0" fill="rgb(236,187,49)" rx="2" ry="2" />
<text  x="117.19" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (18 samples, 0.47%)</title><rect x="42.7" y="309" width="5.5" height="15.0" fill="rgb(226,116,5)" rx="2" ry="2" />
<text  x="45.68" y="319.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (1 samples, 0.03%)</title><rect x="98.8" y="245" width="0.3" height="15.0" fill="rgb(222,115,16)" rx="2" ry="2" />
<text  x="101.78" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.03%)</title><rect x="280.3" y="245" width="0.3" height="15.0" fill="rgb(218,56,39)" rx="2" ry="2" />
<text  x="283.34" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (33 samples, 0.86%)</title><rect x="438.8" y="309" width="10.2" height="15.0" fill="rgb(207,63,30)" rx="2" ry="2" />
<text  x="441.78" y="319.5" ></text>
</g>
<g >
<title>runtime.nanotime (8 samples, 0.21%)</title><rect x="161.7" y="229" width="2.4" height="15.0" fill="rgb(219,228,50)" rx="2" ry="2" />
<text  x="164.66" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.03%)</title><rect x="128.7" y="293" width="0.3" height="15.0" fill="rgb(236,39,26)" rx="2" ry="2" />
<text  x="131.68" y="303.5" ></text>
</g>
<g >
<title>runtime.(*guintptr).cas (1 samples, 0.03%)</title><rect x="77.2" y="181" width="0.3" height="15.0" fill="rgb(226,163,42)" rx="2" ry="2" />
<text  x="80.20" y="191.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (1 samples, 0.03%)</title><rect x="95.7" y="85" width="0.3" height="15.0" fill="rgb(229,44,16)" rx="2" ry="2" />
<text  x="98.69" y="95.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (8 samples, 0.21%)</title><rect x="35.3" y="277" width="2.4" height="15.0" fill="rgb(221,5,53)" rx="2" ry="2" />
<text  x="38.28" y="287.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.03%)</title><rect x="110.2" y="277" width="0.3" height="15.0" fill="rgb(225,25,28)" rx="2" ry="2" />
<text  x="113.18" y="287.5" ></text>
</g>
<g >
<title>runtime.fastrand (1 samples, 0.03%)</title><rect x="344.5" y="293" width="0.3" height="15.0" fill="rgb(243,176,54)" rx="2" ry="2" />
<text  x="347.46" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint64ValueNoZero (1 samples, 0.03%)</title><rect x="89.2" y="245" width="0.3" height="15.0" fill="rgb(251,26,47)" rx="2" ry="2" />
<text  x="92.22" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1155.2" y="245" width="0.3" height="15.0" fill="rgb(243,73,3)" rx="2" ry="2" />
<text  x="1158.17" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (6 samples, 0.16%)</title><rect x="1155.5" y="277" width="1.8" height="15.0" fill="rgb(254,41,31)" rx="2" ry="2" />
<text  x="1158.48" y="287.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeueSudoG (23 samples, 0.60%)</title><rect x="335.2" y="309" width="7.1" height="15.0" fill="rgb(232,177,20)" rx="2" ry="2" />
<text  x="338.21" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="110.8" y="229" width="0.3" height="15.0" fill="rgb(209,115,32)" rx="2" ry="2" />
<text  x="113.80" y="239.5" ></text>
</g>
<g >
<title>runtime.notetsleep (3 samples, 0.08%)</title><rect x="1059.0" y="309" width="0.9" height="15.0" fill="rgb(239,215,35)" rx="2" ry="2" />
<text  x="1061.99" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="50.1" y="229" width="0.3" height="15.0" fill="rgb(231,6,29)" rx="2" ry="2" />
<text  x="53.07" y="239.5" ></text>
</g>
<g >
<title>runtime.usleep (4 samples, 0.10%)</title><rect x="878.0" y="293" width="1.3" height="15.0" fill="rgb(238,43,20)" rx="2" ry="2" />
<text  x="881.05" y="303.5" ></text>
</g>
<g >
<title>runtime.greyobject (2 samples, 0.05%)</title><rect x="447.4" y="229" width="0.6" height="15.0" fill="rgb(207,9,41)" rx="2" ry="2" />
<text  x="450.41" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (35 samples, 0.91%)</title><rect x="438.2" y="325" width="10.8" height="15.0" fill="rgb(233,156,23)" rx="2" ry="2" />
<text  x="441.17" y="335.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (30 samples, 0.78%)</title><rect x="1034.9" y="341" width="9.3" height="15.0" fill="rgb(235,213,13)" rx="2" ry="2" />
<text  x="1037.95" y="351.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).putFast (1 samples, 0.03%)</title><rect x="447.4" y="213" width="0.3" height="15.0" fill="rgb(235,2,34)" rx="2" ry="2" />
<text  x="450.41" y="223.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Multiplex).run.func1.1.1 (1 samples, 0.03%)</title><rect x="112.6" y="341" width="0.4" height="15.0" fill="rgb(241,73,21)" rx="2" ry="2" />
<text  x="115.65" y="351.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.ArgsEncode (81 samples, 2.12%)</title><rect x="183.9" y="325" width="24.9" height="15.0" fill="rgb(220,38,13)" rx="2" ry="2" />
<text  x="186.86" y="335.5" >h..</text>
</g>
<g >
<title>runtime.usleep (3 samples, 0.08%)</title><rect x="489.0" y="277" width="1.0" height="15.0" fill="rgb(218,128,17)" rx="2" ry="2" />
<text  x="492.03" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.03%)</title><rect x="110.8" y="245" width="0.3" height="15.0" fill="rgb(212,204,19)" rx="2" ry="2" />
<text  x="113.80" y="255.5" ></text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.03%)</title><rect x="377.4" y="325" width="0.3" height="15.0" fill="rgb(224,196,11)" rx="2" ry="2" />
<text  x="380.44" y="335.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.05%)</title><rect x="842.9" y="309" width="0.6" height="15.0" fill="rgb(242,88,46)" rx="2" ry="2" />
<text  x="845.90" y="319.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (3 samples, 0.08%)</title><rect x="127.1" y="245" width="1.0" height="15.0" fill="rgb(208,56,27)" rx="2" ry="2" />
<text  x="130.14" y="255.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.ProtoCodec.Decode (56 samples, 1.46%)</title><rect x="210.1" y="309" width="17.2" height="15.0" fill="rgb(248,127,13)" rx="2" ry="2" />
<text  x="213.06" y="319.5" ></text>
</g>
<g >
<title>runtime.parkunlock_c (2 samples, 0.05%)</title><rect x="499.5" y="341" width="0.6" height="15.0" fill="rgb(209,48,15)" rx="2" ry="2" />
<text  x="502.51" y="351.5" ></text>
</g>
<g >
<title>runtime.lock (117 samples, 3.06%)</title><rect x="392.9" y="325" width="36.0" height="15.0" fill="rgb(221,210,53)" rx="2" ry="2" />
<text  x="395.85" y="335.5" >run..</text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (3 samples, 0.08%)</title><rect x="309.6" y="261" width="0.9" height="15.0" fill="rgb(235,188,4)" rx="2" ry="2" />
<text  x="312.62" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytesSlice (2 samples, 0.05%)</title><rect x="25.7" y="245" width="0.6" height="15.0" fill="rgb(251,75,49)" rx="2" ry="2" />
<text  x="28.72" y="255.5" ></text>
</g>
<g >
<title>runtime.unlock (6 samples, 0.16%)</title><rect x="431.1" y="325" width="1.8" height="15.0" fill="rgb(234,99,40)" rx="2" ry="2" />
<text  x="434.08" y="335.5" ></text>
</g>
<g >
<title>all (3,828 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(210,73,49)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.05%)</title><rect x="66.1" y="293" width="0.6" height="15.0" fill="rgb(242,187,54)" rx="2" ry="2" />
<text  x="69.10" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (45 samples, 1.18%)</title><rect x="1045.1" y="261" width="13.9" height="15.0" fill="rgb(240,63,5)" rx="2" ry="2" />
<text  x="1048.12" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.03%)</title><rect x="49.5" y="229" width="0.3" height="15.0" fill="rgb(230,127,42)" rx="2" ry="2" />
<text  x="52.46" y="239.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.03%)</title><rect x="1044.5" y="277" width="0.3" height="15.0" fill="rgb(212,59,3)" rx="2" ry="2" />
<text  x="1047.50" y="287.5" ></text>
</g>
<g >
<title>runtime.gomcache (1 samples, 0.03%)</title><rect x="97.2" y="277" width="0.3" height="15.0" fill="rgb(252,101,11)" rx="2" ry="2" />
<text  x="100.24" y="287.5" ></text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.05%)</title><rect x="110.8" y="325" width="0.6" height="15.0" fill="rgb(215,133,15)" rx="2" ry="2" />
<text  x="113.80" y="335.5" ></text>
</g>
<g >
<title>runtime.sendDirect (2 samples, 0.05%)</title><rect x="22.0" y="261" width="0.6" height="15.0" fill="rgb(217,220,13)" rx="2" ry="2" />
<text  x="25.02" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="128.1" y="325" width="0.3" height="15.0" fill="rgb(209,190,47)" rx="2" ry="2" />
<text  x="131.06" y="335.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.03%)</title><rect x="437.9" y="325" width="0.3" height="15.0" fill="rgb(236,181,2)" rx="2" ry="2" />
<text  x="440.86" y="335.5" ></text>
</g>
<g >
<title>runtime.chansend (180 samples, 4.70%)</title><rect x="227.9" y="309" width="55.5" height="15.0" fill="rgb(206,52,17)" rx="2" ry="2" />
<text  x="230.94" y="319.5" >runti..</text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.05%)</title><rect x="506.9" y="293" width="0.6" height="15.0" fill="rgb(213,163,11)" rx="2" ry="2" />
<text  x="509.91" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.03%)</title><rect x="25.4" y="293" width="0.3" height="15.0" fill="rgb(247,175,38)" rx="2" ry="2" />
<text  x="28.41" y="303.5" ></text>
</g>
<g >
<title>runtime.fastrandn (1 samples, 0.03%)</title><rect x="344.5" y="309" width="0.3" height="15.0" fill="rgb(205,54,48)" rx="2" ry="2" />
<text  x="347.46" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.03%)</title><rect x="491.2" y="133" width="0.3" height="15.0" fill="rgb(235,178,2)" rx="2" ry="2" />
<text  x="494.19" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.05%)</title><rect x="1043.6" y="277" width="0.6" height="15.0" fill="rgb(237,214,14)" rx="2" ry="2" />
<text  x="1046.58" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (27 samples, 0.71%)</title><rect x="1035.3" y="309" width="8.3" height="15.0" fill="rgb(211,93,30)" rx="2" ry="2" />
<text  x="1038.26" y="319.5" ></text>
</g>
<g >
<title>runtime.wakep (25 samples, 0.65%)</title><rect x="845.1" y="309" width="7.7" height="15.0" fill="rgb(233,148,26)" rx="2" ry="2" />
<text  x="848.06" y="319.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (1 samples, 0.03%)</title><rect x="135.2" y="245" width="0.3" height="15.0" fill="rgb(236,76,27)" rx="2" ry="2" />
<text  x="138.15" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="314.2" y="261" width="0.4" height="15.0" fill="rgb(244,51,33)" rx="2" ry="2" />
<text  x="317.25" y="271.5" ></text>
</g>
<g >
<title>runtime.scanobject (9 samples, 0.24%)</title><rect x="445.3" y="245" width="2.7" height="15.0" fill="rgb(221,101,10)" rx="2" ry="2" />
<text  x="448.26" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.03%)</title><rect x="86.1" y="229" width="0.3" height="15.0" fill="rgb(228,117,32)" rx="2" ry="2" />
<text  x="89.14" y="239.5" ></text>
</g>
<g >
<title>runtime.newobject (5 samples, 0.13%)</title><rect x="48.2" y="309" width="1.6" height="15.0" fill="rgb(208,200,37)" rx="2" ry="2" />
<text  x="51.22" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (7 samples, 0.18%)</title><rect x="139.2" y="293" width="2.1" height="15.0" fill="rgb(217,190,39)" rx="2" ry="2" />
<text  x="142.16" y="303.5" ></text>
</g>
<g >
<title>runtime.growslice (6 samples, 0.16%)</title><rect x="44.8" y="229" width="1.9" height="15.0" fill="rgb(230,72,14)" rx="2" ry="2" />
<text  x="47.83" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (1 samples, 0.03%)</title><rect x="860.8" y="181" width="0.3" height="15.0" fill="rgb(229,97,30)" rx="2" ry="2" />
<text  x="863.78" y="191.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.03%)</title><rect x="499.8" y="325" width="0.3" height="15.0" fill="rgb(222,97,18)" rx="2" ry="2" />
<text  x="502.82" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (34 samples, 0.89%)</title><rect x="304.1" y="309" width="10.5" height="15.0" fill="rgb(239,182,41)" rx="2" ry="2" />
<text  x="307.08" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (18 samples, 0.47%)</title><rect x="845.1" y="245" width="5.5" height="15.0" fill="rgb(205,51,35)" rx="2" ry="2" />
<text  x="848.06" y="255.5" ></text>
</g>
<g >
<title>runtime.chanrecv (25 samples, 0.65%)</title><rect x="135.8" y="341" width="7.7" height="15.0" fill="rgb(230,90,29)" rx="2" ry="2" />
<text  x="138.77" y="351.5" ></text>
</g>
<g >
<title>runtime.schedule (5 samples, 0.13%)</title><rect x="494.9" y="325" width="1.5" height="15.0" fill="rgb(217,11,41)" rx="2" ry="2" />
<text  x="497.89" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.03%)</title><rect x="128.1" y="309" width="0.3" height="15.0" fill="rgb(233,149,7)" rx="2" ry="2" />
<text  x="131.06" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (3 samples, 0.08%)</title><rect x="309.6" y="245" width="0.9" height="15.0" fill="rgb(211,217,15)" rx="2" ry="2" />
<text  x="312.62" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.03%)</title><rect x="296.7" y="181" width="0.3" height="15.0" fill="rgb(205,0,36)" rx="2" ry="2" />
<text  x="299.68" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="83.4" y="261" width="0.3" height="15.0" fill="rgb(215,189,49)" rx="2" ry="2" />
<text  x="86.36" y="271.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (3 samples, 0.08%)</title><rect x="448.0" y="245" width="1.0" height="15.0" fill="rgb(240,158,20)" rx="2" ry="2" />
<text  x="451.03" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.05%)</title><rect x="429.5" y="293" width="0.7" height="15.0" fill="rgb(254,7,5)" rx="2" ry="2" />
<text  x="432.54" y="303.5" ></text>
</g>
<g >
<title>hslam.com/git/x/idgenerator.(*IDGen).GenUniqueIDInt64 (89 samples, 2.32%)</title><rect x="156.4" y="325" width="27.5" height="15.0" fill="rgb(242,74,1)" rx="2" ry="2" />
<text  x="159.42" y="335.5" >h..</text>
</g>
<g >
<title>net.(*conn).Read (47 samples, 1.23%)</title><rect x="113.6" y="357" width="14.5" height="15.0" fill="rgb(241,175,21)" rx="2" ry="2" />
<text  x="116.57" y="367.5" ></text>
</g>
<g >
<title>runtime.unlock (6 samples, 0.16%)</title><rect x="364.5" y="293" width="1.8" height="15.0" fill="rgb(208,194,42)" rx="2" ry="2" />
<text  x="367.49" y="303.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.03%)</title><rect x="286.8" y="293" width="0.3" height="15.0" fill="rgb(206,184,36)" rx="2" ry="2" />
<text  x="289.81" y="303.5" ></text>
</g>
<g >
<title>runtime.deferproc (7 samples, 0.18%)</title><rect x="366.3" y="341" width="2.2" height="15.0" fill="rgb(238,13,42)" rx="2" ry="2" />
<text  x="369.34" y="351.5" ></text>
</g>
<g >
<title>runtime.gcDrain (2 samples, 0.05%)</title><rect x="1044.5" y="325" width="0.6" height="15.0" fill="rgb(235,105,23)" rx="2" ry="2" />
<text  x="1047.50" y="335.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.03%)</title><rect x="496.1" y="293" width="0.3" height="15.0" fill="rgb(224,61,29)" rx="2" ry="2" />
<text  x="499.12" y="303.5" ></text>
</g>
<g >
<title>runtime.(*lfstack).pop (1 samples, 0.03%)</title><rect x="473.9" y="261" width="0.3" height="15.0" fill="rgb(242,215,24)" rx="2" ry="2" />
<text  x="476.92" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (25 samples, 0.65%)</title><rect x="285.3" y="309" width="7.7" height="15.0" fill="rgb(208,0,48)" rx="2" ry="2" />
<text  x="288.27" y="319.5" ></text>
</g>
<g >
<title>runtime.spanOfUnchecked (1 samples, 0.03%)</title><rect x="488.1" y="293" width="0.3" height="15.0" fill="rgb(222,114,21)" rx="2" ry="2" />
<text  x="491.10" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.03%)</title><rect x="437.5" y="293" width="0.4" height="15.0" fill="rgb(224,90,23)" rx="2" ry="2" />
<text  x="440.55" y="303.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (1 samples, 0.03%)</title><rect x="297.9" y="117" width="0.3" height="15.0" fill="rgb(254,68,16)" rx="2" ry="2" />
<text  x="300.91" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).removeSpan (2 samples, 0.05%)</title><rect x="472.4" y="213" width="0.6" height="15.0" fill="rgb(221,70,35)" rx="2" ry="2" />
<text  x="475.38" y="223.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (1 samples, 0.03%)</title><rect x="297.9" y="101" width="0.3" height="15.0" fill="rgb(242,195,5)" rx="2" ry="2" />
<text  x="300.91" y="111.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (2 samples, 0.05%)</title><rect x="25.7" y="309" width="0.6" height="15.0" fill="rgb(207,218,40)" rx="2" ry="2" />
<text  x="28.72" y="319.5" ></text>
</g>
<g >
<title>runtime.trygetfull (1 samples, 0.03%)</title><rect x="440.3" y="229" width="0.3" height="15.0" fill="rgb(220,92,20)" rx="2" ry="2" />
<text  x="443.32" y="239.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (47 samples, 1.23%)</title><rect x="113.6" y="341" width="14.5" height="15.0" fill="rgb(232,65,32)" rx="2" ry="2" />
<text  x="116.57" y="351.5" ></text>
</g>
<g >
<title>hslam.com/git/x/idgenerator.GetTimeByStep (4 samples, 0.10%)</title><rect x="160.1" y="277" width="1.3" height="15.0" fill="rgb(239,67,7)" rx="2" ry="2" />
<text  x="163.12" y="287.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.03%)</title><rect x="1044.2" y="325" width="0.3" height="15.0" fill="rgb(232,28,32)" rx="2" ry="2" />
<text  x="1047.20" y="335.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.03%)</title><rect x="473.3" y="357" width="0.3" height="15.0" fill="rgb(251,78,23)" rx="2" ry="2" />
<text  x="476.31" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.03%)</title><rect x="205.4" y="197" width="0.3" height="15.0" fill="rgb(246,203,44)" rx="2" ry="2" />
<text  x="208.43" y="207.5" ></text>
</g>
<g >
<title>runtime.semacquire1 (5 samples, 0.13%)</title><rect x="175.8" y="261" width="1.6" height="15.0" fill="rgb(250,62,32)" rx="2" ry="2" />
<text  x="178.84" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime (10 samples, 0.26%)</title><rect x="1157.3" y="357" width="3.1" height="15.0" fill="rgb(243,36,4)" rx="2" ry="2" />
<text  x="1160.32" y="367.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.03%)</title><rect x="39.0" y="261" width="0.3" height="15.0" fill="rgb(235,203,45)" rx="2" ry="2" />
<text  x="41.98" y="271.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (4 samples, 0.10%)</title><rect x="223.6" y="245" width="1.3" height="15.0" fill="rgb(212,26,7)" rx="2" ry="2" />
<text  x="226.62" y="255.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.03%)</title><rect x="1044.5" y="293" width="0.3" height="15.0" fill="rgb(211,63,22)" rx="2" ry="2" />
<text  x="1047.50" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Unmarshal (10 samples, 0.26%)</title><rect x="100.3" y="277" width="3.1" height="15.0" fill="rgb(222,120,17)" rx="2" ry="2" />
<text  x="103.32" y="287.5" ></text>
</g>
<g >
<title>runtime.chansend.func1 (3 samples, 0.08%)</title><rect x="18.3" y="261" width="0.9" height="15.0" fill="rgb(244,156,45)" rx="2" ry="2" />
<text  x="21.32" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="205.4" y="245" width="0.3" height="15.0" fill="rgb(205,59,19)" rx="2" ry="2" />
<text  x="208.43" y="255.5" ></text>
</g>
<g >
<title>runtime.lock (6 samples, 0.16%)</title><rect x="877.7" y="325" width="1.9" height="15.0" fill="rgb(229,1,30)" rx="2" ry="2" />
<text  x="880.74" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="49.5" y="213" width="0.3" height="15.0" fill="rgb(224,52,23)" rx="2" ry="2" />
<text  x="52.46" y="223.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (3 samples, 0.08%)</title><rect x="82.1" y="229" width="1.0" height="15.0" fill="rgb(210,28,14)" rx="2" ry="2" />
<text  x="85.13" y="239.5" ></text>
</g>
<g >
<title>time.Now (30 samples, 0.78%)</title><rect x="455.4" y="357" width="9.3" height="15.0" fill="rgb(242,55,22)" rx="2" ry="2" />
<text  x="458.43" y="367.5" ></text>
</g>
<g >
<title>runtime.semasleep (45 samples, 1.18%)</title><rect x="1045.1" y="277" width="13.9" height="15.0" fill="rgb(226,127,48)" rx="2" ry="2" />
<text  x="1048.12" y="287.5" ></text>
</g>
<g >
<title>runtime.(*stackScanState).putPtr (1 samples, 0.03%)</title><rect x="444.0" y="117" width="0.3" height="15.0" fill="rgb(236,101,12)" rx="2" ry="2" />
<text  x="447.02" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (2 samples, 0.05%)</title><rect x="279.4" y="261" width="0.6" height="15.0" fill="rgb(205,113,25)" rx="2" ry="2" />
<text  x="282.41" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.03%)</title><rect x="128.7" y="277" width="0.3" height="15.0" fill="rgb(217,182,54)" rx="2" ry="2" />
<text  x="131.68" y="287.5" ></text>
</g>
<g >
<title>runtime.newstack (62 samples, 1.62%)</title><rect x="858.6" y="357" width="19.1" height="15.0" fill="rgb(254,147,26)" rx="2" ry="2" />
<text  x="861.63" y="367.5" ></text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.03%)</title><rect x="1044.8" y="277" width="0.3" height="15.0" fill="rgb(228,88,7)" rx="2" ry="2" />
<text  x="1047.81" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="286.5" y="293" width="0.3" height="15.0" fill="rgb(241,93,12)" rx="2" ry="2" />
<text  x="289.50" y="303.5" ></text>
</g>
<g >
<title>runtime.morestack (62 samples, 1.62%)</title><rect x="858.6" y="373" width="19.1" height="15.0" fill="rgb(232,91,35)" rx="2" ry="2" />
<text  x="861.63" y="383.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.03%)</title><rect x="108.6" y="213" width="0.3" height="15.0" fill="rgb(207,75,10)" rx="2" ry="2" />
<text  x="111.64" y="223.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (4 samples, 0.10%)</title><rect x="108.9" y="277" width="1.3" height="15.0" fill="rgb(238,76,22)" rx="2" ry="2" />
<text  x="111.95" y="287.5" ></text>
</g>
<g >
<title>runtime.deferproc (3 samples, 0.08%)</title><rect x="77.8" y="309" width="0.9" height="15.0" fill="rgb(251,71,42)" rx="2" ry="2" />
<text  x="80.82" y="319.5" ></text>
</g>
<g >
<title>runtime.acquireSudog (4 samples, 0.10%)</title><rect x="343.2" y="309" width="1.3" height="15.0" fill="rgb(243,214,24)" rx="2" ry="2" />
<text  x="346.22" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="49.5" y="277" width="0.3" height="15.0" fill="rgb(241,50,21)" rx="2" ry="2" />
<text  x="52.46" y="287.5" ></text>
</g>
<g >
<title>runtime.gcStart.func1 (1 samples, 0.03%)</title><rect x="449.0" y="293" width="0.3" height="15.0" fill="rgb(235,95,5)" rx="2" ry="2" />
<text  x="451.96" y="303.5" ></text>
</g>
<g >
<title>runtime.spanOf (3 samples, 0.08%)</title><rect x="448.0" y="181" width="1.0" height="15.0" fill="rgb(235,0,35)" rx="2" ry="2" />
<text  x="451.03" y="191.5" ></text>
</g>
<g >
<title>runtime.bulkBarrierPreWrite (1 samples, 0.03%)</title><rect x="212.8" y="245" width="0.3" height="15.0" fill="rgb(236,203,0)" rx="2" ry="2" />
<text  x="215.83" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (8 samples, 0.21%)</title><rect x="90.1" y="261" width="2.5" height="15.0" fill="rgb(226,65,25)" rx="2" ry="2" />
<text  x="93.15" y="271.5" ></text>
</g>
<g >
<title>sync.runtime_doSpin (3 samples, 0.08%)</title><rect x="177.7" y="277" width="0.9" height="15.0" fill="rgb(244,167,4)" rx="2" ry="2" />
<text  x="180.69" y="287.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.03%)</title><rect x="108.6" y="149" width="0.3" height="15.0" fill="rgb(254,134,29)" rx="2" ry="2" />
<text  x="111.64" y="159.5" ></text>
</g>
<g >
<title>runtime.spanOf (2 samples, 0.05%)</title><rect x="482.6" y="213" width="0.6" height="15.0" fill="rgb(251,41,45)" rx="2" ry="2" />
<text  x="485.55" y="223.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Batch).XXX_Unmarshal (3 samples, 0.08%)</title><rect x="80.9" y="293" width="0.9" height="15.0" fill="rgb(209,76,34)" rx="2" ry="2" />
<text  x="83.90" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (1 samples, 0.03%)</title><rect x="860.8" y="165" width="0.3" height="15.0" fill="rgb(221,127,42)" rx="2" ry="2" />
<text  x="863.78" y="175.5" ></text>
</g>
<g >
<title>syscall.syscall (19 samples, 0.50%)</title><rect x="129.6" y="277" width="5.9" height="15.0" fill="rgb(213,97,50)" rx="2" ry="2" />
<text  x="132.60" y="287.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.03%)</title><rect x="93.5" y="277" width="0.3" height="15.0" fill="rgb(230,173,48)" rx="2" ry="2" />
<text  x="96.54" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="128.7" y="245" width="0.3" height="15.0" fill="rgb(214,5,52)" rx="2" ry="2" />
<text  x="131.68" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="24.8" y="181" width="0.3" height="15.0" fill="rgb(236,176,54)" rx="2" ry="2" />
<text  x="27.80" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (6 samples, 0.16%)</title><rect x="471.1" y="277" width="1.9" height="15.0" fill="rgb(251,139,1)" rx="2" ry="2" />
<text  x="474.15" y="287.5" ></text>
</g>
<g >
<title>runtime.duffcopy (2 samples, 0.05%)</title><rect x="39.9" y="309" width="0.6" height="15.0" fill="rgb(208,89,17)" rx="2" ry="2" />
<text  x="42.90" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="205.4" y="181" width="0.3" height="15.0" fill="rgb(251,35,16)" rx="2" ry="2" />
<text  x="208.43" y="191.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Request).XXX_Size (11 samples, 0.29%)</title><rect x="89.8" y="293" width="3.4" height="15.0" fill="rgb(205,155,22)" rx="2" ry="2" />
<text  x="92.84" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="110.5" y="229" width="0.3" height="15.0" fill="rgb(222,188,19)" rx="2" ry="2" />
<text  x="113.49" y="239.5" ></text>
</g>
<g >
<title>runtime/pprof.profileWriter (1 samples, 0.03%)</title><rect x="1189.7" y="373" width="0.3" height="15.0" fill="rgb(208,100,30)" rx="2" ry="2" />
<text  x="1192.69" y="383.5" ></text>
</g>
<g >
<title>runtime.startm (309 samples, 8.07%)</title><rect x="1060.2" y="293" width="95.3" height="15.0" fill="rgb(231,177,1)" rx="2" ry="2" />
<text  x="1063.22" y="303.5" >runtime.sta..</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.03%)</title><rect x="879.3" y="309" width="0.3" height="15.0" fill="rgb(243,140,13)" rx="2" ry="2" />
<text  x="882.28" y="319.5" ></text>
</g>
<g >
<title>runtime.procyield (2 samples, 0.05%)</title><rect x="507.5" y="293" width="0.6" height="15.0" fill="rgb(220,47,47)" rx="2" ry="2" />
<text  x="510.52" y="303.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.03%)</title><rect x="57.5" y="309" width="0.3" height="15.0" fill="rgb(235,115,3)" rx="2" ry="2" />
<text  x="60.47" y="319.5" ></text>
</g>
<g >
<title>runtime.systemstack (7 samples, 0.18%)</title><rect x="75.4" y="245" width="2.1" height="15.0" fill="rgb(246,0,16)" rx="2" ry="2" />
<text  x="78.35" y="255.5" ></text>
</g>
<g >
<title>runtime.pcvalue (5 samples, 0.13%)</title><rect x="442.2" y="101" width="1.5" height="15.0" fill="rgb(239,164,0)" rx="2" ry="2" />
<text  x="445.17" y="111.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.03%)</title><rect x="179.8" y="245" width="0.4" height="15.0" fill="rgb(245,5,44)" rx="2" ry="2" />
<text  x="182.85" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (6 samples, 0.16%)</title><rect x="471.1" y="325" width="1.9" height="15.0" fill="rgb(231,120,7)" rx="2" ry="2" />
<text  x="474.15" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.03%)</title><rect x="24.8" y="149" width="0.3" height="15.0" fill="rgb(251,81,22)" rx="2" ry="2" />
<text  x="27.80" y="159.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (47 samples, 1.23%)</title><rect x="473.9" y="341" width="14.5" height="15.0" fill="rgb(245,164,52)" rx="2" ry="2" />
<text  x="476.92" y="351.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.03%)</title><rect x="939.1" y="309" width="0.3" height="15.0" fill="rgb(241,215,42)" rx="2" ry="2" />
<text  x="942.08" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (6 samples, 0.16%)</title><rect x="307.2" y="277" width="1.8" height="15.0" fill="rgb(221,134,51)" rx="2" ry="2" />
<text  x="310.16" y="287.5" ></text>
</g>
<g >
<title>runtime.netpoll (2 samples, 0.05%)</title><rect x="488.4" y="309" width="0.6" height="15.0" fill="rgb(215,25,15)" rx="2" ry="2" />
<text  x="491.41" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).find (1 samples, 0.03%)</title><rect x="205.4" y="85" width="0.3" height="15.0" fill="rgb(251,143,14)" rx="2" ry="2" />
<text  x="208.43" y="95.5" ></text>
</g>
<g >
<title>runtime.scanblock (3 samples, 0.08%)</title><rect x="482.6" y="245" width="0.9" height="15.0" fill="rgb(246,4,25)" rx="2" ry="2" />
<text  x="485.55" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalUint64Value (4 samples, 0.10%)</title><rect x="46.7" y="245" width="1.2" height="15.0" fill="rgb(222,87,30)" rx="2" ry="2" />
<text  x="49.68" y="255.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).tryGet (1 samples, 0.03%)</title><rect x="440.3" y="245" width="0.3" height="15.0" fill="rgb(233,41,2)" rx="2" ry="2" />
<text  x="443.32" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.05%)</title><rect x="297.9" y="277" width="0.6" height="15.0" fill="rgb(238,177,26)" rx="2" ry="2" />
<text  x="300.91" y="287.5" ></text>
</g>
<g >
<title>runtime.unlock (3 samples, 0.08%)</title><rect x="65.8" y="325" width="0.9" height="15.0" fill="rgb(236,159,17)" rx="2" ry="2" />
<text  x="68.79" y="335.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.05%)</title><rect x="297.9" y="213" width="0.6" height="15.0" fill="rgb(250,33,15)" rx="2" ry="2" />
<text  x="300.91" y="223.5" ></text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.03%)</title><rect x="1059.9" y="309" width="0.3" height="15.0" fill="rgb(223,216,24)" rx="2" ry="2" />
<text  x="1062.92" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.03%)</title><rect x="128.7" y="261" width="0.3" height="15.0" fill="rgb(234,30,35)" rx="2" ry="2" />
<text  x="131.68" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (1 samples, 0.03%)</title><rect x="31.0" y="229" width="0.3" height="15.0" fill="rgb(228,131,34)" rx="2" ry="2" />
<text  x="33.96" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.03%)</title><rect x="83.4" y="213" width="0.3" height="15.0" fill="rgb(217,118,9)" rx="2" ry="2" />
<text  x="86.36" y="223.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (5 samples, 0.13%)</title><rect x="37.7" y="293" width="1.6" height="15.0" fill="rgb(226,211,2)" rx="2" ry="2" />
<text  x="40.74" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (6 samples, 0.16%)</title><rect x="40.8" y="293" width="1.9" height="15.0" fill="rgb(249,54,52)" rx="2" ry="2" />
<text  x="43.83" y="303.5" ></text>
</g>
<g >
<title>runtime.gosched_m (6 samples, 0.16%)</title><rect x="494.6" y="357" width="1.8" height="15.0" fill="rgb(240,183,37)" rx="2" ry="2" />
<text  x="497.58" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (5 samples, 0.13%)</title><rect x="307.2" y="245" width="1.5" height="15.0" fill="rgb(207,198,30)" rx="2" ry="2" />
<text  x="310.16" y="255.5" ></text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.03%)</title><rect x="475.2" y="229" width="0.3" height="15.0" fill="rgb(206,174,0)" rx="2" ry="2" />
<text  x="478.16" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="110.8" y="309" width="0.6" height="15.0" fill="rgb(211,176,54)" rx="2" ry="2" />
<text  x="113.80" y="319.5" ></text>
</g>
<g >
<title>runtime.nanotime_trampoline (3 samples, 0.08%)</title><rect x="469.3" y="357" width="0.9" height="15.0" fill="rgb(210,144,47)" rx="2" ry="2" />
<text  x="472.30" y="367.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesValue (6 samples, 0.16%)</title><rect x="101.6" y="245" width="1.8" height="15.0" fill="rgb(249,53,10)" rx="2" ry="2" />
<text  x="104.55" y="255.5" ></text>
</g>
<g >
<title>runtime.casgstatus (4 samples, 0.10%)</title><rect x="504.1" y="309" width="1.3" height="15.0" fill="rgb(232,111,42)" rx="2" ry="2" />
<text  x="507.13" y="319.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.08%)</title><rect x="1059.0" y="277" width="0.9" height="15.0" fill="rgb(252,46,54)" rx="2" ry="2" />
<text  x="1061.99" y="287.5" ></text>
</g>
<g >
<title>time.Time.UnixNano (2 samples, 0.05%)</title><rect x="464.7" y="357" width="0.6" height="15.0" fill="rgb(251,113,34)" rx="2" ry="2" />
<text  x="467.68" y="367.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.03%)</title><rect x="938.8" y="293" width="0.3" height="15.0" fill="rgb(212,88,31)" rx="2" ry="2" />
<text  x="941.77" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (310 samples, 8.10%)</title><rect x="939.4" y="309" width="95.5" height="15.0" fill="rgb(210,19,32)" rx="2" ry="2" />
<text  x="942.39" y="319.5" >runtime.sta..</text>
</g>
<g >
<title>runtime.gcDrainN (30 samples, 0.78%)</title><rect x="439.7" y="261" width="9.3" height="15.0" fill="rgb(240,101,18)" rx="2" ry="2" />
<text  x="442.71" y="271.5" ></text>
</g>
<g >
<title>runtime.newdefer (2 samples, 0.05%)</title><rect x="78.1" y="293" width="0.6" height="15.0" fill="rgb(240,197,52)" rx="2" ry="2" />
<text  x="81.12" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (3 samples, 0.08%)</title><rect x="309.6" y="293" width="0.9" height="15.0" fill="rgb(252,129,33)" rx="2" ry="2" />
<text  x="312.62" y="303.5" ></text>
</g>
<g >
<title>runtime.chanrecv (24 samples, 0.63%)</title><rect x="59.3" y="341" width="7.4" height="15.0" fill="rgb(208,2,4)" rx="2" ry="2" />
<text  x="62.32" y="351.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (1 samples, 0.03%)</title><rect x="441.2" y="165" width="0.4" height="15.0" fill="rgb(219,81,15)" rx="2" ry="2" />
<text  x="444.25" y="175.5" ></text>
</g>
<g >
<title>runtime.osyield (4 samples, 0.10%)</title><rect x="878.0" y="309" width="1.3" height="15.0" fill="rgb(223,105,3)" rx="2" ry="2" />
<text  x="881.05" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (1 samples, 0.03%)</title><rect x="50.1" y="181" width="0.3" height="15.0" fill="rgb(226,99,15)" rx="2" ry="2" />
<text  x="53.07" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.03%)</title><rect x="1044.5" y="245" width="0.3" height="15.0" fill="rgb(238,8,32)" rx="2" ry="2" />
<text  x="1047.50" y="255.5" ></text>
</g>
<g >
<title>runtime.releaseSudog (1 samples, 0.03%)</title><rect x="64.3" y="325" width="0.3" height="15.0" fill="rgb(243,60,40)" rx="2" ry="2" />
<text  x="67.25" y="335.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (5 samples, 0.13%)</title><rect x="103.4" y="293" width="1.5" height="15.0" fill="rgb(240,25,24)" rx="2" ry="2" />
<text  x="106.40" y="303.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.05%)</title><rect x="66.1" y="309" width="0.6" height="15.0" fill="rgb(246,141,27)" rx="2" ry="2" />
<text  x="69.10" y="319.5" ></text>
</g>
<g >
<title>runtime.deferreturn (7 samples, 0.18%)</title><rect x="78.7" y="309" width="2.2" height="15.0" fill="rgb(253,158,15)" rx="2" ry="2" />
<text  x="81.74" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Unmarshal (7 samples, 0.18%)</title><rect x="23.3" y="309" width="2.1" height="15.0" fill="rgb(241,125,2)" rx="2" ry="2" />
<text  x="26.25" y="319.5" ></text>
</g>
<g >
<title>runtime.semawakeup (310 samples, 8.10%)</title><rect x="939.4" y="277" width="95.5" height="15.0" fill="rgb(241,160,21)" rx="2" ry="2" />
<text  x="942.39" y="287.5" >runtime.sem..</text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.03%)</title><rect x="57.2" y="309" width="0.3" height="15.0" fill="rgb(212,119,24)" rx="2" ry="2" />
<text  x="60.16" y="319.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.05%)</title><rect x="506.9" y="277" width="0.6" height="15.0" fill="rgb(225,187,27)" rx="2" ry="2" />
<text  x="509.91" y="287.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (19 samples, 0.50%)</title><rect x="129.6" y="341" width="5.9" height="15.0" fill="rgb(234,173,13)" rx="2" ry="2" />
<text  x="132.60" y="351.5" ></text>
</g>
<g >
<title>runtime.callers.func1 (1 samples, 0.03%)</title><rect x="110.5" y="213" width="0.3" height="15.0" fill="rgb(233,32,29)" rx="2" ry="2" />
<text  x="113.49" y="223.5" ></text>
</g>
<g >
<title>runtime.newdefer (7 samples, 0.18%)</title><rect x="366.3" y="325" width="2.2" height="15.0" fill="rgb(252,105,2)" rx="2" ry="2" />
<text  x="369.34" y="335.5" ></text>
</g>
<g >
<title>runtime.(*timersBucket).addtimerLocked (1 samples, 0.03%)</title><rect x="1189.7" y="341" width="0.3" height="15.0" fill="rgb(237,138,9)" rx="2" ry="2" />
<text  x="1192.69" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (11 samples, 0.29%)</title><rect x="89.8" y="277" width="3.4" height="15.0" fill="rgb(232,88,18)" rx="2" ry="2" />
<text  x="92.84" y="287.5" ></text>
</g>
<g >
<title>runtime.gcStart (1 samples, 0.03%)</title><rect x="449.0" y="325" width="0.3" height="15.0" fill="rgb(234,100,22)" rx="2" ry="2" />
<text  x="451.96" y="335.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.03%)</title><rect x="129.0" y="181" width="0.3" height="15.0" fill="rgb(213,108,24)" rx="2" ry="2" />
<text  x="131.99" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.03%)</title><rect x="205.4" y="229" width="0.3" height="15.0" fill="rgb(221,18,6)" rx="2" ry="2" />
<text  x="208.43" y="239.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.03%)</title><rect x="21.1" y="197" width="0.3" height="15.0" fill="rgb(215,25,13)" rx="2" ry="2" />
<text  x="24.10" y="207.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.03%)</title><rect x="95.7" y="149" width="0.3" height="15.0" fill="rgb(229,8,35)" rx="2" ry="2" />
<text  x="98.69" y="159.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (6 samples, 0.16%)</title><rect x="1155.5" y="309" width="1.8" height="15.0" fill="rgb(231,15,9)" rx="2" ry="2" />
<text  x="1158.48" y="319.5" ></text>
</g>
<g >
<title>runtime.roundupsize (1 samples, 0.03%)</title><rect x="46.4" y="213" width="0.3" height="15.0" fill="rgb(244,1,28)" rx="2" ry="2" />
<text  x="49.37" y="223.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.03%)</title><rect x="297.9" y="149" width="0.3" height="15.0" fill="rgb(230,32,54)" rx="2" ry="2" />
<text  x="300.91" y="159.5" ></text>
</g>
<g >
<title>runtime.profilealloc (1 samples, 0.03%)</title><rect x="110.5" y="277" width="0.3" height="15.0" fill="rgb(206,20,40)" rx="2" ry="2" />
<text  x="113.49" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (2 samples, 0.05%)</title><rect x="296.7" y="261" width="0.6" height="15.0" fill="rgb(221,110,38)" rx="2" ry="2" />
<text  x="299.68" y="271.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.03%)</title><rect x="297.9" y="181" width="0.3" height="15.0" fill="rgb(224,106,52)" rx="2" ry="2" />
<text  x="300.91" y="191.5" ></text>
</g>
<g >
<title>runtime.typedmemclr (2 samples, 0.05%)</title><rect x="212.8" y="261" width="0.6" height="15.0" fill="rgb(247,133,47)" rx="2" ry="2" />
<text  x="215.83" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (2 samples, 0.05%)</title><rect x="308.1" y="165" width="0.6" height="15.0" fill="rgb(224,221,37)" rx="2" ry="2" />
<text  x="311.08" y="175.5" ></text>
</g>
<g >
<title>runtime.osyield (4 samples, 0.10%)</title><rect x="181.1" y="229" width="1.2" height="15.0" fill="rgb(254,87,54)" rx="2" ry="2" />
<text  x="184.08" y="239.5" ></text>
</g>
<g >
<title>time.Sleep (1 samples, 0.03%)</title><rect x="1189.7" y="357" width="0.3" height="15.0" fill="rgb(254,4,47)" rx="2" ry="2" />
<text  x="1192.69" y="367.5" ></text>
</g>
<g >
<title>runtime.scang (32 samples, 0.84%)</title><rect x="474.2" y="277" width="9.9" height="15.0" fill="rgb(227,197,42)" rx="2" ry="2" />
<text  x="477.23" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendBytesSlice (5 samples, 0.13%)</title><rect x="81.8" y="245" width="1.6" height="15.0" fill="rgb(210,75,44)" rx="2" ry="2" />
<text  x="84.82" y="255.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.03%)</title><rect x="860.8" y="133" width="0.3" height="15.0" fill="rgb(237,197,10)" rx="2" ry="2" />
<text  x="863.78" y="143.5" ></text>
</g>
<g >
<title>runtime.puintptr.ptr (1 samples, 0.03%)</title><rect x="54.4" y="309" width="0.3" height="15.0" fill="rgb(232,18,45)" rx="2" ry="2" />
<text  x="57.39" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.Marshal (1 samples, 0.03%)</title><rect x="26.3" y="309" width="0.3" height="15.0" fill="rgb(239,74,0)" rx="2" ry="2" />
<text  x="29.34" y="319.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.03%)</title><rect x="54.7" y="309" width="0.3" height="15.0" fill="rgb(209,155,8)" rx="2" ry="2" />
<text  x="57.70" y="319.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/protocol.PacketFrame (1 samples, 0.03%)</title><rect x="112.6" y="325" width="0.4" height="15.0" fill="rgb(225,95,29)" rx="2" ry="2" />
<text  x="115.65" y="335.5" ></text>
</g>
<g >
<title>math/rand.(*Rand).Int31n (46 samples, 1.20%)</title><rect x="377.7" y="341" width="14.2" height="15.0" fill="rgb(234,25,11)" rx="2" ry="2" />
<text  x="380.75" y="351.5" ></text>
</g>
<g >
<title>runtime.makeSpanClass (1 samples, 0.03%)</title><rect x="289.0" y="293" width="0.3" height="15.0" fill="rgb(214,116,17)" rx="2" ry="2" />
<text  x="291.97" y="303.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.03%)</title><rect x="95.7" y="117" width="0.3" height="15.0" fill="rgb(214,105,53)" rx="2" ry="2" />
<text  x="98.69" y="127.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (1 samples, 0.03%)</title><rect x="95.7" y="101" width="0.3" height="15.0" fill="rgb(251,104,1)" rx="2" ry="2" />
<text  x="98.69" y="111.5" ></text>
</g>
<g >
<title>runtime.fastrand (1 samples, 0.03%)</title><rect x="479.8" y="149" width="0.3" height="15.0" fill="rgb(239,138,14)" rx="2" ry="2" />
<text  x="482.78" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="50.1" y="293" width="0.3" height="15.0" fill="rgb(217,151,31)" rx="2" ry="2" />
<text  x="53.07" y="303.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (25 samples, 0.65%)</title><rect x="59.0" y="357" width="7.7" height="15.0" fill="rgb(251,25,45)" rx="2" ry="2" />
<text  x="62.01" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.03%)</title><rect x="49.5" y="245" width="0.3" height="15.0" fill="rgb(243,42,9)" rx="2" ry="2" />
<text  x="52.46" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="128.1" y="261" width="0.3" height="15.0" fill="rgb(224,132,2)" rx="2" ry="2" />
<text  x="131.06" y="271.5" ></text>
</g>
<g >
<title>runtime.heapBitsForAddr (1 samples, 0.03%)</title><rect x="312.1" y="277" width="0.3" height="15.0" fill="rgb(252,130,53)" rx="2" ry="2" />
<text  x="315.09" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.08%)</title><rect x="307.8" y="213" width="0.9" height="15.0" fill="rgb(253,197,8)" rx="2" ry="2" />
<text  x="310.77" y="223.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (1 samples, 0.03%)</title><rect x="496.1" y="309" width="0.3" height="15.0" fill="rgb(227,159,28)" rx="2" ry="2" />
<text  x="499.12" y="319.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.03%)</title><rect x="129.0" y="261" width="0.3" height="15.0" fill="rgb(221,77,9)" rx="2" ry="2" />
<text  x="131.99" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (12 samples, 0.31%)</title><rect x="1151.5" y="245" width="3.7" height="15.0" fill="rgb(239,163,29)" rx="2" ry="2" />
<text  x="1154.47" y="255.5" ></text>
</g>
<g >
<title>runtime.stopm (4 samples, 0.10%)</title><rect x="490.0" y="309" width="1.2" height="15.0" fill="rgb(225,207,49)" rx="2" ry="2" />
<text  x="492.95" y="319.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.03%)</title><rect x="24.5" y="197" width="0.3" height="15.0" fill="rgb(237,153,4)" rx="2" ry="2" />
<text  x="27.49" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (3 samples, 0.08%)</title><rect x="94.8" y="245" width="0.9" height="15.0" fill="rgb(225,167,24)" rx="2" ry="2" />
<text  x="97.77" y="255.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.03%)</title><rect x="32.5" y="229" width="0.3" height="15.0" fill="rgb(250,61,53)" rx="2" ry="2" />
<text  x="35.50" y="239.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalInt32Value (2 samples, 0.05%)</title><rect x="223.0" y="229" width="0.6" height="15.0" fill="rgb(216,39,34)" rx="2" ry="2" />
<text  x="226.00" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).pickFreeSpan (2 samples, 0.05%)</title><rect x="308.1" y="149" width="0.6" height="15.0" fill="rgb(251,90,34)" rx="2" ry="2" />
<text  x="311.08" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.05%)</title><rect x="39.3" y="277" width="0.6" height="15.0" fill="rgb(229,110,54)" rx="2" ry="2" />
<text  x="42.28" y="287.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (1 samples, 0.03%)</title><rect x="288.7" y="261" width="0.3" height="15.0" fill="rgb(243,224,19)" rx="2" ry="2" />
<text  x="291.66" y="271.5" ></text>
</g>
<g >
<title>runtime.execute (6 samples, 0.16%)</title><rect x="503.5" y="325" width="1.9" height="15.0" fill="rgb(253,35,23)" rx="2" ry="2" />
<text  x="506.52" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="41.4" y="277" width="0.4" height="15.0" fill="rgb(253,44,44)" rx="2" ry="2" />
<text  x="44.44" y="287.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.03%)</title><rect x="495.8" y="293" width="0.3" height="15.0" fill="rgb(209,118,7)" rx="2" ry="2" />
<text  x="498.81" y="303.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.05%)</title><rect x="279.4" y="277" width="0.6" height="15.0" fill="rgb(240,50,42)" rx="2" ry="2" />
<text  x="282.41" y="287.5" ></text>
</g>
<g >
<title>runtime.getitab (2 samples, 0.05%)</title><rect x="202.4" y="261" width="0.6" height="15.0" fill="rgb(253,48,7)" rx="2" ry="2" />
<text  x="205.35" y="271.5" ></text>
</g>
<g >
<title>runtime.osyield (90 samples, 2.35%)</title><rect x="393.8" y="309" width="27.7" height="15.0" fill="rgb(213,228,43)" rx="2" ry="2" />
<text  x="396.78" y="319.5" >r..</text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.03%)</title><rect x="437.5" y="325" width="0.4" height="15.0" fill="rgb(222,226,9)" rx="2" ry="2" />
<text  x="440.55" y="335.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (1 samples, 0.03%)</title><rect x="110.5" y="261" width="0.3" height="15.0" fill="rgb(237,78,44)" rx="2" ry="2" />
<text  x="113.49" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.03%)</title><rect x="41.4" y="261" width="0.4" height="15.0" fill="rgb(216,23,51)" rx="2" ry="2" />
<text  x="44.44" y="271.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/protocol.WriteStream (22 samples, 0.57%)</title><rect x="128.7" y="373" width="6.8" height="15.0" fill="rgb(230,148,30)" rx="2" ry="2" />
<text  x="131.68" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (1 samples, 0.03%)</title><rect x="471.5" y="229" width="0.3" height="15.0" fill="rgb(235,25,52)" rx="2" ry="2" />
<text  x="474.46" y="239.5" ></text>
</g>
<g >
<title>runtime.findrunnable (9 samples, 0.24%)</title><rect x="488.4" y="325" width="2.8" height="15.0" fill="rgb(220,197,45)" rx="2" ry="2" />
<text  x="491.41" y="335.5" ></text>
</g>
<g >
<title>runtime.assertE2I (4 samples, 0.10%)</title><rect x="207.6" y="293" width="1.2" height="15.0" fill="rgb(251,18,29)" rx="2" ry="2" />
<text  x="210.59" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (57 samples, 1.49%)</title><rect x="1172.1" y="309" width="17.6" height="15.0" fill="rgb(216,83,13)" rx="2" ry="2" />
<text  x="1175.12" y="319.5" ></text>
</g>
<g >
<title>runtime.lock (27 samples, 0.71%)</title><rect x="354.9" y="293" width="8.4" height="15.0" fill="rgb(233,46,4)" rx="2" ry="2" />
<text  x="357.94" y="303.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.05%)</title><rect x="438.2" y="293" width="0.6" height="15.0" fill="rgb(225,152,29)" rx="2" ry="2" />
<text  x="441.17" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (2 samples, 0.05%)</title><rect x="95.1" y="133" width="0.6" height="15.0" fill="rgb(211,94,45)" rx="2" ry="2" />
<text  x="98.08" y="143.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.03%)</title><rect x="499.8" y="309" width="0.3" height="15.0" fill="rgb(210,76,1)" rx="2" ry="2" />
<text  x="502.82" y="319.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeue (1 samples, 0.03%)</title><rect x="392.5" y="325" width="0.4" height="15.0" fill="rgb(230,225,28)" rx="2" ry="2" />
<text  x="395.54" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.03%)</title><rect x="108.6" y="277" width="0.3" height="15.0" fill="rgb(238,180,8)" rx="2" ry="2" />
<text  x="111.64" y="287.5" ></text>
</g>
<g >
<title>runtime.asmcgocall (9 samples, 0.24%)</title><rect x="467.5" y="373" width="2.7" height="15.0" fill="rgb(242,222,29)" rx="2" ry="2" />
<text  x="470.45" y="383.5" ></text>
</g>
<g >
<title>runtime.kevent (41 samples, 1.07%)</title><rect x="512.5" y="293" width="12.6" height="15.0" fill="rgb(253,77,27)" rx="2" ry="2" />
<text  x="515.46" y="303.5" ></text>
</g>
<g >
<title>runtime.(*stackScanState).buildIndex (1 samples, 0.03%)</title><rect x="440.6" y="181" width="0.3" height="15.0" fill="rgb(252,19,16)" rx="2" ry="2" />
<text  x="443.63" y="191.5" ></text>
</g>
<g >
<title>runtime.newobject (73 samples, 1.91%)</title><rect x="432.9" y="357" width="22.5" height="15.0" fill="rgb(254,181,33)" rx="2" ry="2" />
<text  x="435.93" y="367.5" >r..</text>
</g>
<g >
<title>runtime.stopm (4 samples, 0.10%)</title><rect x="843.5" y="309" width="1.3" height="15.0" fill="rgb(239,207,31)" rx="2" ry="2" />
<text  x="846.52" y="319.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.pointer.getPointer (1 samples, 0.03%)</title><rect x="37.1" y="245" width="0.3" height="15.0" fill="rgb(236,212,28)" rx="2" ry="2" />
<text  x="40.13" y="255.5" ></text>
</g>
<g >
<title>time.(*Time).unixSec (1 samples, 0.03%)</title><rect x="465.0" y="341" width="0.3" height="15.0" fill="rgb(247,49,44)" rx="2" ry="2" />
<text  x="467.98" y="351.5" ></text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.03%)</title><rect x="1059.9" y="293" width="0.3" height="15.0" fill="rgb(209,108,4)" rx="2" ry="2" />
<text  x="1062.92" y="303.5" ></text>
</g>
<g >
<title>runtime.unlock (2 samples, 0.05%)</title><rect x="74.7" y="245" width="0.7" height="15.0" fill="rgb(223,86,1)" rx="2" ry="2" />
<text  x="77.73" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (16 samples, 0.42%)</title><rect x="43.0" y="261" width="4.9" height="15.0" fill="rgb(215,36,1)" rx="2" ry="2" />
<text  x="45.98" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (709 samples, 18.52%)</title><rect x="938.8" y="357" width="218.5" height="15.0" fill="rgb(206,118,35)" rx="2" ry="2" />
<text  x="941.77" y="367.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.gopreempt_m (62 samples, 1.62%)</title><rect x="858.6" y="341" width="19.1" height="15.0" fill="rgb(245,118,28)" rx="2" ry="2" />
<text  x="861.63" y="351.5" ></text>
</g>
<g >
<title>runtime.pollWork (1 samples, 0.03%)</title><rect x="1044.8" y="309" width="0.3" height="15.0" fill="rgb(205,53,43)" rx="2" ry="2" />
<text  x="1047.81" y="319.5" ></text>
</g>
<g >
<title>runtime.assertI2I2 (2 samples, 0.05%)</title><rect x="93.2" y="293" width="0.6" height="15.0" fill="rgb(248,175,9)" rx="2" ry="2" />
<text  x="96.23" y="303.5" ></text>
</g>
<g >
<title>runtime.newobject (7 samples, 0.18%)</title><rect x="40.5" y="309" width="2.2" height="15.0" fill="rgb(252,200,35)" rx="2" ry="2" />
<text  x="43.52" y="319.5" ></text>
</g>
<g >
<title>runtime.park_m (1,175 samples, 30.69%)</title><rect x="496.4" y="357" width="362.2" height="15.0" fill="rgb(252,124,13)" rx="2" ry="2" />
<text  x="499.43" y="367.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.jmpdefer (1 samples, 0.03%)</title><rect x="55.0" y="341" width="0.3" height="15.0" fill="rgb(254,46,7)" rx="2" ry="2" />
<text  x="58.01" y="351.5" ></text>
</g>
<g >
<title>runtime.getArgInfoFast (1 samples, 0.03%)</title><rect x="483.8" y="229" width="0.3" height="15.0" fill="rgb(254,67,51)" rx="2" ry="2" />
<text  x="486.79" y="239.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (17 samples, 0.44%)</title><rect x="477.3" y="213" width="5.3" height="15.0" fill="rgb(249,34,23)" rx="2" ry="2" />
<text  x="480.31" y="223.5" ></text>
</g>
<g >
<title>runtime.markroot (32 samples, 0.84%)</title><rect x="474.2" y="309" width="9.9" height="15.0" fill="rgb(215,162,13)" rx="2" ry="2" />
<text  x="477.23" y="319.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.03%)</title><rect x="314.2" y="213" width="0.4" height="15.0" fill="rgb(220,199,54)" rx="2" ry="2" />
<text  x="317.25" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (6 samples, 0.16%)</title><rect x="858.9" y="277" width="1.9" height="15.0" fill="rgb(217,170,48)" rx="2" ry="2" />
<text  x="861.93" y="287.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.03%)</title><rect x="491.5" y="309" width="0.3" height="15.0" fill="rgb(232,130,11)" rx="2" ry="2" />
<text  x="494.49" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (3 samples, 0.08%)</title><rect x="490.0" y="261" width="0.9" height="15.0" fill="rgb(244,21,6)" rx="2" ry="2" />
<text  x="492.95" y="271.5" ></text>
</g>
<g >
<title>runtime.deferproc (5 samples, 0.13%)</title><rect x="168.1" y="293" width="1.6" height="15.0" fill="rgb(244,211,29)" rx="2" ry="2" />
<text  x="171.13" y="303.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (10 samples, 0.26%)</title><rect x="478.9" y="181" width="3.0" height="15.0" fill="rgb(219,148,19)" rx="2" ry="2" />
<text  x="481.86" y="191.5" ></text>
</g>
<g >
<title>runtime.mallocgc (9 samples, 0.24%)</title><rect x="96.9" y="293" width="2.8" height="15.0" fill="rgb(245,71,35)" rx="2" ry="2" />
<text  x="99.93" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.05%)</title><rect x="852.8" y="277" width="0.6" height="15.0" fill="rgb(227,64,46)" rx="2" ry="2" />
<text  x="855.77" y="287.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.03%)</title><rect x="429.5" y="245" width="0.3" height="15.0" fill="rgb(224,227,43)" rx="2" ry="2" />
<text  x="432.54" y="255.5" ></text>
</g>
<g >
<title>runtime.schedule (11 samples, 0.29%)</title><rect x="488.4" y="341" width="3.4" height="15.0" fill="rgb(208,83,2)" rx="2" ry="2" />
<text  x="491.41" y="351.5" ></text>
</g>
<g >
<title>runtime.gcstopm (35 samples, 0.91%)</title><rect x="858.6" y="293" width="10.8" height="15.0" fill="rgb(219,190,41)" rx="2" ry="2" />
<text  x="861.63" y="303.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (1 samples, 0.03%)</title><rect x="473.3" y="325" width="0.3" height="15.0" fill="rgb(252,67,33)" rx="2" ry="2" />
<text  x="476.31" y="335.5" ></text>
</g>
<g >
<title>runtime.resetspinning (26 samples, 0.68%)</title><rect x="844.8" y="325" width="8.0" height="15.0" fill="rgb(232,140,20)" rx="2" ry="2" />
<text  x="847.75" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.03%)</title><rect x="108.6" y="245" width="0.3" height="15.0" fill="rgb(252,206,32)" rx="2" ry="2" />
<text  x="111.64" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (4 samples, 0.10%)</title><rect x="843.5" y="293" width="1.3" height="15.0" fill="rgb(205,45,14)" rx="2" ry="2" />
<text  x="846.52" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.03%)</title><rect x="50.1" y="197" width="0.3" height="15.0" fill="rgb(246,100,22)" rx="2" ry="2" />
<text  x="53.07" y="207.5" ></text>
</g>
<g >
<title>runtime.(*muintptr).set (1 samples, 0.03%)</title><rect x="498.9" y="309" width="0.3" height="15.0" fill="rgb(209,143,5)" rx="2" ry="2" />
<text  x="501.89" y="319.5" ></text>
</g>
<g >
<title>runtime.pidleput (1 samples, 0.03%)</title><rect x="525.1" y="309" width="0.3" height="15.0" fill="rgb(223,215,38)" rx="2" ry="2" />
<text  x="528.09" y="319.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.03%)</title><rect x="83.4" y="293" width="0.3" height="15.0" fill="rgb(254,42,45)" rx="2" ry="2" />
<text  x="86.36" y="303.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (35 samples, 0.91%)</title><rect x="903.9" y="309" width="10.8" height="15.0" fill="rgb(237,131,49)" rx="2" ry="2" />
<text  x="906.94" y="319.5" ></text>
</g>
<g >
<title>sync.runtime_canSpin (1 samples, 0.03%)</title><rect x="177.4" y="277" width="0.3" height="15.0" fill="rgb(214,29,39)" rx="2" ry="2" />
<text  x="180.38" y="287.5" ></text>
</g>
<g >
<title>runtime.chansend1 (133 samples, 3.47%)</title><rect x="391.9" y="357" width="41.0" height="15.0" fill="rgb(235,160,36)" rx="2" ry="2" />
<text  x="394.93" y="367.5" >run..</text>
</g>
<g >
<title>runtime.makeslice (2 samples, 0.05%)</title><rect x="128.7" y="341" width="0.6" height="15.0" fill="rgb(226,44,41)" rx="2" ry="2" />
<text  x="131.68" y="351.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*client).RemoteCall (1 samples, 0.03%)</title><rect x="49.8" y="325" width="0.3" height="15.0" fill="rgb(237,10,6)" rx="2" ry="2" />
<text  x="52.76" y="335.5" ></text>
</g>
<g >
<title>runtime.netpollblockcommit (1 samples, 0.03%)</title><rect x="499.2" y="341" width="0.3" height="15.0" fill="rgb(208,43,15)" rx="2" ry="2" />
<text  x="502.20" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (296 samples, 7.73%)</title><rect x="1060.2" y="245" width="91.3" height="15.0" fill="rgb(218,153,13)" rx="2" ry="2" />
<text  x="1063.22" y="255.5" >runtime.pt..</text>
</g>
<g >
<title>runtime.goschedImpl (62 samples, 1.62%)</title><rect x="858.6" y="325" width="19.1" height="15.0" fill="rgb(230,159,2)" rx="2" ry="2" />
<text  x="861.63" y="335.5" ></text>
</g>
<g >
<title>runtime.makeslice (15 samples, 0.39%)</title><rect x="203.0" y="277" width="4.6" height="15.0" fill="rgb(237,97,41)" rx="2" ry="2" />
<text  x="205.97" y="287.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/examples/example/pb/service.(*ArithResponse).Reset (7 samples, 0.18%)</title><rect x="211.3" y="277" width="2.1" height="15.0" fill="rgb(238,158,39)" rx="2" ry="2" />
<text  x="214.29" y="287.5" ></text>
</g>
<g >
<title>runtime.runqempty (1 samples, 0.03%)</title><rect x="525.1" y="293" width="0.3" height="15.0" fill="rgb(224,130,54)" rx="2" ry="2" />
<text  x="528.09" y="303.5" ></text>
</g>
<g >
<title>runtime.deferreturn (2 samples, 0.05%)</title><rect x="113.6" y="309" width="0.6" height="15.0" fill="rgb(221,224,8)" rx="2" ry="2" />
<text  x="116.57" y="319.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.03%)</title><rect x="95.7" y="69" width="0.3" height="15.0" fill="rgb(250,127,37)" rx="2" ry="2" />
<text  x="98.69" y="79.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.03%)</title><rect x="135.2" y="181" width="0.3" height="15.0" fill="rgb(220,216,26)" rx="2" ry="2" />
<text  x="138.15" y="191.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (22 samples, 0.57%)</title><rect x="173.4" y="293" width="6.8" height="15.0" fill="rgb(221,34,23)" rx="2" ry="2" />
<text  x="176.38" y="303.5" ></text>
</g>
<g >
<title>runtime.mcall (3 samples, 0.08%)</title><rect x="466.5" y="357" width="1.0" height="15.0" fill="rgb(238,3,39)" rx="2" ry="2" />
<text  x="469.53" y="367.5" ></text>
</g>
<g >
<title>runtime.schedule (1,152 samples, 30.09%)</title><rect x="500.1" y="341" width="355.1" height="15.0" fill="rgb(234,18,10)" rx="2" ry="2" />
<text  x="503.13" y="351.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.chansend (27 samples, 0.71%)</title><rect x="14.3" y="293" width="8.3" height="15.0" fill="rgb(226,132,15)" rx="2" ry="2" />
<text  x="17.32" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (3 samples, 0.08%)</title><rect x="94.8" y="197" width="0.9" height="15.0" fill="rgb(254,178,30)" rx="2" ry="2" />
<text  x="97.77" y="207.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Request).Encode (51 samples, 1.33%)</title><rect x="84.0" y="325" width="15.7" height="15.0" fill="rgb(222,167,35)" rx="2" ry="2" />
<text  x="86.98" y="335.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.03%)</title><rect x="95.7" y="37" width="0.3" height="15.0" fill="rgb(243,68,35)" rx="2" ry="2" />
<text  x="98.69" y="47.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.08%)</title><rect x="309.6" y="277" width="0.9" height="15.0" fill="rgb(227,121,27)" rx="2" ry="2" />
<text  x="312.62" y="287.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Batch).XXX_Marshal (5 samples, 0.13%)</title><rect x="81.8" y="293" width="1.6" height="15.0" fill="rgb(241,39,50)" rx="2" ry="2" />
<text  x="84.82" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (1 samples, 0.03%)</title><rect x="83.7" y="261" width="0.3" height="15.0" fill="rgb(220,38,50)" rx="2" ry="2" />
<text  x="86.67" y="271.5" ></text>
</g>
<g >
<title>runtime.notewakeup (27 samples, 0.71%)</title><rect x="869.4" y="277" width="8.3" height="15.0" fill="rgb(222,142,33)" rx="2" ry="2" />
<text  x="872.41" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).pickFreeSpan (1 samples, 0.03%)</title><rect x="205.4" y="101" width="0.3" height="15.0" fill="rgb(207,75,50)" rx="2" ry="2" />
<text  x="208.43" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="104.9" y="277" width="0.4" height="15.0" fill="rgb(229,33,48)" rx="2" ry="2" />
<text  x="107.94" y="287.5" ></text>
</g>
<g >
<title>runtime.newobject (9 samples, 0.24%)</title><rect x="96.9" y="309" width="2.8" height="15.0" fill="rgb(217,219,34)" rx="2" ry="2" />
<text  x="99.93" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.03%)</title><rect x="112.6" y="245" width="0.4" height="15.0" fill="rgb(224,147,51)" rx="2" ry="2" />
<text  x="115.65" y="255.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*BatchCodec).Decode (8 samples, 0.21%)</title><rect x="23.3" y="325" width="2.4" height="15.0" fill="rgb(231,167,36)" rx="2" ry="2" />
<text  x="26.25" y="335.5" ></text>
</g>
<g >
<title>runtime.spanOf (1 samples, 0.03%)</title><rect x="487.2" y="277" width="0.3" height="15.0" fill="rgb(208,168,25)" rx="2" ry="2" />
<text  x="490.18" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.03%)</title><rect x="494.9" y="261" width="0.3" height="15.0" fill="rgb(224,174,14)" rx="2" ry="2" />
<text  x="497.89" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (12 samples, 0.31%)</title><rect x="203.9" y="261" width="3.7" height="15.0" fill="rgb(231,105,49)" rx="2" ry="2" />
<text  x="206.89" y="271.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).size (7 samples, 0.18%)</title><rect x="35.3" y="261" width="2.1" height="15.0" fill="rgb(232,164,3)" rx="2" ry="2" />
<text  x="38.28" y="271.5" ></text>
</g>
<g >
<title>runtime.(*stackScanState).buildIndex (1 samples, 0.03%)</title><rect x="474.2" y="245" width="0.3" height="15.0" fill="rgb(211,95,7)" rx="2" ry="2" />
<text  x="477.23" y="255.5" ></text>
</g>
<g >
<title>runtime.stopm (2 samples, 0.05%)</title><rect x="495.2" y="293" width="0.6" height="15.0" fill="rgb(247,41,37)" rx="2" ry="2" />
<text  x="498.19" y="303.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*BatchCodec).Decode (3 samples, 0.08%)</title><rect x="80.9" y="325" width="0.9" height="15.0" fill="rgb(231,117,34)" rx="2" ry="2" />
<text  x="83.90" y="335.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (6 samples, 0.16%)</title><rect x="494.6" y="341" width="1.8" height="15.0" fill="rgb(247,201,32)" rx="2" ry="2" />
<text  x="497.58" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.unmarshalBytesSlice (3 samples, 0.08%)</title><rect x="80.9" y="245" width="0.9" height="15.0" fill="rgb(212,22,47)" rx="2" ry="2" />
<text  x="83.90" y="255.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.03%)</title><rect x="473.9" y="309" width="0.3" height="15.0" fill="rgb(205,123,30)" rx="2" ry="2" />
<text  x="476.92" y="319.5" ></text>
</g>
<g >
<title>runtime.cansemacquire (2 samples, 0.05%)</title><rect x="176.1" y="245" width="0.7" height="15.0" fill="rgb(214,112,54)" rx="2" ry="2" />
<text  x="179.15" y="255.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.appendVarint (5 samples, 0.13%)</title><rect x="192.5" y="213" width="1.5" height="15.0" fill="rgb(227,86,5)" rx="2" ry="2" />
<text  x="195.49" y="223.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc/pb.(*Response).XXX_Unmarshal (17 samples, 0.44%)</title><rect x="42.7" y="293" width="5.2" height="15.0" fill="rgb(213,3,10)" rx="2" ry="2" />
<text  x="45.68" y="303.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (2 samples, 0.05%)</title><rect x="202.4" y="245" width="0.6" height="15.0" fill="rgb(237,26,33)" rx="2" ry="2" />
<text  x="205.35" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (1 samples, 0.03%)</title><rect x="205.4" y="117" width="0.3" height="15.0" fill="rgb(214,167,10)" rx="2" ry="2" />
<text  x="208.43" y="127.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Multiplex).run.func1.1 (1 samples, 0.03%)</title><rect x="112.6" y="357" width="0.4" height="15.0" fill="rgb(248,18,53)" rx="2" ry="2" />
<text  x="115.65" y="367.5" ></text>
</g>
<g >
<title>runtime.dropg (1 samples, 0.03%)</title><rect x="498.9" y="341" width="0.3" height="15.0" fill="rgb(228,47,11)" rx="2" ry="2" />
<text  x="501.89" y="351.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (2 samples, 0.05%)</title><rect x="25.7" y="261" width="0.6" height="15.0" fill="rgb(232,20,44)" rx="2" ry="2" />
<text  x="28.72" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="296.7" y="197" width="0.3" height="15.0" fill="rgb(210,42,21)" rx="2" ry="2" />
<text  x="299.68" y="207.5" ></text>
</g>
<g >
<title>runtime.unlock (9 samples, 0.24%)</title><rect x="280.6" y="293" width="2.8" height="15.0" fill="rgb(209,110,48)" rx="2" ry="2" />
<text  x="283.65" y="303.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.03%)</title><rect x="298.2" y="197" width="0.3" height="15.0" fill="rgb(220,59,2)" rx="2" ry="2" />
<text  x="301.22" y="207.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (19 samples, 0.50%)</title><rect x="129.6" y="325" width="5.9" height="15.0" fill="rgb(239,215,3)" rx="2" ry="2" />
<text  x="132.60" y="335.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.(*Batch).Ticker (145 samples, 3.79%)</title><rect x="66.7" y="341" width="44.7" height="15.0" fill="rgb(247,78,29)" rx="2" ry="2" />
<text  x="69.72" y="351.5" >hsla..</text>
</g>
<g >
<title>runtime.mallocgc (69 samples, 1.80%)</title><rect x="434.2" y="341" width="21.2" height="15.0" fill="rgb(221,102,2)" rx="2" ry="2" />
<text  x="437.16" y="351.5" >r..</text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*marshalInfo).marshal (15 samples, 0.39%)</title><rect x="189.7" y="245" width="4.6" height="15.0" fill="rgb(221,225,38)" rx="2" ry="2" />
<text  x="192.71" y="255.5" ></text>
</g>
<g >
<title>runtime.nanotime (5 samples, 0.13%)</title><rect x="178.6" y="261" width="1.6" height="15.0" fill="rgb(236,160,50)" rx="2" ry="2" />
<text  x="181.62" y="271.5" ></text>
</g>
<g >
<title>runtime.chansend1 (1 samples, 0.03%)</title><rect x="49.8" y="309" width="0.3" height="15.0" fill="rgb(230,105,30)" rx="2" ry="2" />
<text  x="52.76" y="319.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.05%)</title><rect x="95.7" y="197" width="0.6" height="15.0" fill="rgb(244,4,11)" rx="2" ry="2" />
<text  x="98.69" y="207.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.03%)</title><rect x="430.8" y="309" width="0.3" height="15.0" fill="rgb(212,108,8)" rx="2" ry="2" />
<text  x="433.77" y="319.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.03%)</title><rect x="429.2" y="277" width="0.3" height="15.0" fill="rgb(228,184,24)" rx="2" ry="2" />
<text  x="432.23" y="287.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (15 samples, 0.39%)</title><rect x="440.6" y="229" width="4.7" height="15.0" fill="rgb(207,17,3)" rx="2" ry="2" />
<text  x="443.63" y="239.5" ></text>
</g>
<g >
<title>runtime.semasleep (4 samples, 0.10%)</title><rect x="490.0" y="277" width="1.2" height="15.0" fill="rgb(210,164,39)" rx="2" ry="2" />
<text  x="492.95" y="287.5" ></text>
</g>
<g >
<title>runtime.getitab (4 samples, 0.10%)</title><rect x="207.6" y="277" width="1.2" height="15.0" fill="rgb(218,35,35)" rx="2" ry="2" />
<text  x="210.59" y="287.5" ></text>
</g>
<g >
<title>hslam.com/git/x/rpc.ProtoCodec.Encode (72 samples, 1.88%)</title><rect x="186.6" y="309" width="22.2" height="15.0" fill="rgb(224,123,53)" rx="2" ry="2" />
<text  x="189.63" y="319.5" >h..</text>
</g>
<g >
<title>runtime.assertI2I2 (4 samples, 0.10%)</title><rect x="223.6" y="277" width="1.3" height="15.0" fill="rgb(214,14,43)" rx="2" ry="2" />
<text  x="226.62" y="287.5" ></text>
</g>
<g >
<title>runtime.findObject (2 samples, 0.05%)</title><rect x="482.6" y="229" width="0.6" height="15.0" fill="rgb(228,158,25)" rx="2" ry="2" />
<text  x="485.55" y="239.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeue (2 samples, 0.05%)</title><rect x="227.9" y="293" width="0.7" height="15.0" fill="rgb(213,84,35)" rx="2" ry="2" />
<text  x="230.94" y="303.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.03%)</title><rect x="491.2" y="293" width="0.3" height="15.0" fill="rgb(226,205,13)" rx="2" ry="2" />
<text  x="494.19" y="303.5" ></text>
</g>
<g >
<title>runtime.putempty (1 samples, 0.03%)</title><rect x="129.0" y="165" width="0.3" height="15.0" fill="rgb(206,177,46)" rx="2" ry="2" />
<text  x="131.99" y="175.5" ></text>
</g>
<g >
<title>runtime.lock (4 samples, 0.10%)</title><rect x="16.8" y="277" width="1.2" height="15.0" fill="rgb(231,154,45)" rx="2" ry="2" />
<text  x="19.78" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (310 samples, 8.10%)</title><rect x="939.4" y="293" width="95.5" height="15.0" fill="rgb(205,168,28)" rx="2" ry="2" />
<text  x="942.39" y="303.5" >runtime.not..</text>
</g>
<g >
<title>runtime.binarySearchTree (1 samples, 0.03%)</title><rect x="474.2" y="181" width="0.3" height="15.0" fill="rgb(247,183,45)" rx="2" ry="2" />
<text  x="477.23" y="191.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Size (1 samples, 0.03%)</title><rect x="26.3" y="277" width="0.3" height="15.0" fill="rgb(240,125,41)" rx="2" ry="2" />
<text  x="29.34" y="287.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.03%)</title><rect x="297.9" y="133" width="0.3" height="15.0" fill="rgb(220,228,4)" rx="2" ry="2" />
<text  x="300.91" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.03%)</title><rect x="128.1" y="277" width="0.3" height="15.0" fill="rgb(214,172,15)" rx="2" ry="2" />
<text  x="131.06" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.03%)</title><rect x="860.8" y="245" width="0.3" height="15.0" fill="rgb(239,14,2)" rx="2" ry="2" />
<text  x="863.78" y="255.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (45 samples, 1.18%)</title><rect x="1045.1" y="341" width="13.9" height="15.0" fill="rgb(230,80,41)" rx="2" ry="2" />
<text  x="1048.12" y="351.5" ></text>
</g>
<g >
<title>runtime.notetsleep (45 samples, 1.18%)</title><rect x="1045.1" y="309" width="13.9" height="15.0" fill="rgb(245,107,38)" rx="2" ry="2" />
<text  x="1048.12" y="319.5" ></text>
</g>
<g >
<title>runtime.deferreturn (12 samples, 0.31%)</title><rect x="169.7" y="293" width="3.7" height="15.0" fill="rgb(217,208,40)" rx="2" ry="2" />
<text  x="172.68" y="303.5" ></text>
</g>
<g >
<title>runtime.unlock (2 samples, 0.05%)</title><rect x="280.0" y="261" width="0.6" height="15.0" fill="rgb(210,141,39)" rx="2" ry="2" />
<text  x="283.03" y="271.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (1 samples, 0.03%)</title><rect x="135.2" y="197" width="0.3" height="15.0" fill="rgb(234,201,28)" rx="2" ry="2" />
<text  x="138.15" y="207.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (2 samples, 0.05%)</title><rect x="429.5" y="277" width="0.7" height="15.0" fill="rgb(221,103,9)" rx="2" ry="2" />
<text  x="432.54" y="287.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*unmarshalInfo).unmarshal (10 samples, 0.26%)</title><rect x="100.3" y="261" width="3.1" height="15.0" fill="rgb(234,212,38)" rx="2" ry="2" />
<text  x="103.32" y="271.5" ></text>
</g>
<g >
<title>runtime.assertE2I (8 samples, 0.21%)</title><rect x="224.9" y="293" width="2.4" height="15.0" fill="rgb(231,97,43)" rx="2" ry="2" />
<text  x="227.85" y="303.5" ></text>
</g>
<g >
<title>github.com/golang/protobuf/proto.(*InternalMessageInfo).Marshal (5 samples, 0.13%)</title><rect x="81.8" y="277" width="1.6" height="15.0" fill="rgb(215,191,15)" rx="2" ry="2" />
<text  x="84.82" y="287.5" ></text>
</g>
</g>
</svg>

